
sam4s_quad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000852c  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  0040852c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000068c  200001e8  00408714  000201e8  2**2
                  ALLOC
  3 .stack        00003004  20000874  00408da0  000201e8  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016873  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003952  00000000  00000000  00036af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005dfa  00000000  00000000  0003a445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ed8  00000000  00000000  0004023f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d38  00000000  00000000  00041117  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000189cd  00000000  00000000  00041e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014a7a  00000000  00000000  0005a81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000558f2  00000000  00000000  0006f296  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000336c  00000000  00000000  000c4b88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003878 	.word	0x20003878
  400004:	00402349 	.word	0x00402349
  400008:	00402345 	.word	0x00402345
  40000c:	00402345 	.word	0x00402345
  400010:	00402345 	.word	0x00402345
  400014:	00402345 	.word	0x00402345
  400018:	00402345 	.word	0x00402345
	...
  40002c:	00402345 	.word	0x00402345
  400030:	00402345 	.word	0x00402345
  400034:	00000000 	.word	0x00000000
  400038:	00402345 	.word	0x00402345
  40003c:	00400569 	.word	0x00400569
  400040:	00402345 	.word	0x00402345
  400044:	00402345 	.word	0x00402345
  400048:	00402345 	.word	0x00402345
  40004c:	00402345 	.word	0x00402345
  400050:	00402345 	.word	0x00402345
  400054:	00402345 	.word	0x00402345
  400058:	00402345 	.word	0x00402345
  40005c:	00402345 	.word	0x00402345
  400060:	00402345 	.word	0x00402345
  400064:	00402345 	.word	0x00402345
  400068:	00000000 	.word	0x00000000
  40006c:	00401f85 	.word	0x00401f85
  400070:	00401f95 	.word	0x00401f95
  400074:	00401fa5 	.word	0x00401fa5
  400078:	00402345 	.word	0x00402345
  40007c:	00402345 	.word	0x00402345
	...
  400088:	00402345 	.word	0x00402345
  40008c:	00402345 	.word	0x00402345
  400090:	00402345 	.word	0x00402345
  400094:	00402345 	.word	0x00402345
  400098:	00402345 	.word	0x00402345
  40009c:	00402345 	.word	0x00402345
  4000a0:	00402345 	.word	0x00402345
  4000a4:	00402345 	.word	0x00402345
  4000a8:	00402345 	.word	0x00402345
  4000ac:	00402345 	.word	0x00402345
  4000b0:	00402345 	.word	0x00402345
  4000b4:	00402345 	.word	0x00402345
  4000b8:	00402345 	.word	0x00402345
  4000bc:	00402345 	.word	0x00402345
  4000c0:	00402345 	.word	0x00402345
  4000c4:	00402345 	.word	0x00402345
  4000c8:	00402345 	.word	0x00402345

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e8 	.word	0x200001e8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040852c 	.word	0x0040852c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001ec 	.word	0x200001ec
  40011c:	0040852c 	.word	0x0040852c
  400120:	0040852c 	.word	0x0040852c
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f002 f9ea 	bl	402504 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 ff72 	bl	40201c <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 ff9a 	bl	402070 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 ff9e 	bl	402080 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 ffa1 	bl	402090 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f001 ff2e 	bl	401fb4 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f002 f94a 	bl	4023f0 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f002 f9d1 	bl	402504 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	20000500 	.word	0x20000500
  4001a8:	200004f8 	.word	0x200004f8

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	200004fc 	.word	0x200004fc
  4001f8:	20000500 	.word	0x20000500

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 ff9a 	bl	40214c <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 ff8f 	bl	40214c <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 ff98 	bl	402174 <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 ff8b 	bl	402174 <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f001 ff56 	bl	40213c <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f001 ff4a 	bl	40213c <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f001 ff50 	bl	402160 <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f001 ff44 	bl	402160 <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <main>:
    sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main(void)
{
  4002f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002f8:	b099      	sub	sp, #100	; 0x64
    sysclk_init();
  4002fa:	f7ff ff15 	bl	400128 <sysclk_init>
    board_init();
  4002fe:	f001 faf3 	bl	4018e8 <board_init>
    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400302:	2013      	movs	r0, #19
  400304:	f001 fecc 	bl	4020a0 <pmc_enable_periph_clk>
    pmc_enable_periph_clk(ID_PWM);
  400308:	201f      	movs	r0, #31
  40030a:	f001 fec9 	bl	4020a0 <pmc_enable_periph_clk>
    config_init();
  40030e:	f000 f911 	bl	400534 <config_init>
    cph_millis_init();
  400312:	f000 f931 	bl	400578 <cph_millis_init>
    cli_init();
  400316:	f000 f959 	bl	4005cc <cli_init>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40031a:	2009      	movs	r0, #9
  40031c:	f001 fec0 	bl	4020a0 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400320:	4c6d      	ldr	r4, [pc, #436]	; (4004d8 <main+0x1e4>)
  400322:	4b6e      	ldr	r3, [pc, #440]	; (4004dc <main+0x1e8>)
  400324:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400326:	4a6e      	ldr	r2, [pc, #440]	; (4004e0 <main+0x1ec>)
  400328:	4b6e      	ldr	r3, [pc, #440]	; (4004e4 <main+0x1f0>)
  40032a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40032c:	4a6e      	ldr	r2, [pc, #440]	; (4004e8 <main+0x1f4>)
  40032e:	4b6f      	ldr	r3, [pc, #444]	; (4004ec <main+0x1f8>)
  400330:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400332:	4b6f      	ldr	r3, [pc, #444]	; (4004f0 <main+0x1fc>)
  400334:	9315      	str	r3, [sp, #84]	; 0x54
	uart_settings.ul_baudrate = opt->baudrate;
  400336:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40033a:	9316      	str	r3, [sp, #88]	; 0x58
	uart_settings.ul_mode = opt->paritytype;
  40033c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400340:	9317      	str	r3, [sp, #92]	; 0x5c
  400342:	2009      	movs	r0, #9
  400344:	f001 feac 	bl	4020a0 <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400348:	a915      	add	r1, sp, #84	; 0x54
  40034a:	4620      	mov	r0, r4
  40034c:	f001 fed6 	bl	4020fc <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400350:	4c68      	ldr	r4, [pc, #416]	; (4004f4 <main+0x200>)
  400352:	6823      	ldr	r3, [r4, #0]
  400354:	2100      	movs	r1, #0
  400356:	6898      	ldr	r0, [r3, #8]
  400358:	f003 fa06 	bl	403768 <setbuf>
	setbuf(stdin, NULL);
  40035c:	6823      	ldr	r3, [r4, #0]
  40035e:	2100      	movs	r1, #0
  400360:	6858      	ldr	r0, [r3, #4]
  400362:	f003 fa01 	bl	403768 <setbuf>
    configure_console();
    ap_init();
  400366:	f001 fab5 	bl	4018d4 <ap_init>

    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  40036a:	4863      	ldr	r0, [pc, #396]	; (4004f8 <main+0x204>)
  40036c:	f003 f9f4 	bl	403758 <puts>
  400370:	240a      	movs	r4, #10

    for (int i=0; i<10; i++) {
        printf(".");
  400372:	4e62      	ldr	r6, [pc, #392]	; (4004fc <main+0x208>)
        delay_ms(100);
  400374:	4d62      	ldr	r5, [pc, #392]	; (400500 <main+0x20c>)
    ap_init();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<10; i++) {
        printf(".");
  400376:	4630      	mov	r0, r6
  400378:	f003 f97c 	bl	403674 <iprintf>
        delay_ms(100);
  40037c:	4628      	mov	r0, r5
  40037e:	f008 f8cf 	bl	408520 <__portable_delay_cycles_veneer>
    configure_console();
    ap_init();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<10; i++) {
  400382:	3c01      	subs	r4, #1
  400384:	d1f7      	bne.n	400376 <main+0x82>
        printf(".");
        delay_ms(100);
    }
    printf("\r\n");
  400386:	485f      	ldr	r0, [pc, #380]	; (400504 <main+0x210>)
  400388:	f003 f974 	bl	403674 <iprintf>

    
    if (imu_init()) {
  40038c:	f000 ff56 	bl	40123c <imu_init>
  400390:	2800      	cmp	r0, #0
  400392:	f000 809c 	beq.w	4004ce <main+0x1da>

        motor_init();
  400396:	f001 f8cd 	bl	401534 <motor_init>
        //     cli_tick();
        //     delay_ms(100);
        // }

        // Calibrate the imu
        imu_calibrate();
  40039a:	f000 ff6b 	bl	401274 <imu_calibrate>
        config.imu_calibrate = false;
  40039e:	2200      	movs	r2, #0
  4003a0:	4b59      	ldr	r3, [pc, #356]	; (400508 <main+0x214>)
  4003a2:	75da      	strb	r2, [r3, #23]
 
        

        printf("please press button to arm motors\r\n");
  4003a4:	4859      	ldr	r0, [pc, #356]	; (40050c <main+0x218>)
  4003a6:	f003 f965 	bl	403674 <iprintf>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4003aa:	4b59      	ldr	r3, [pc, #356]	; (400510 <main+0x21c>)
  4003ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        while(true) {
            if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  4003ae:	f012 0f04 	tst.w	r2, #4
  4003b2:	d1fb      	bne.n	4003ac <main+0xb8>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4003b4:	4b57      	ldr	r3, [pc, #348]	; (400514 <main+0x220>)
  4003b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4003b8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  4003bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4003c0:	4b54      	ldr	r3, [pc, #336]	; (400514 <main+0x220>)
  4003c2:	bf14      	ite	ne
  4003c4:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  4003c6:	631a      	streq	r2, [r3, #48]	; 0x30
                ioport_toggle_pin_level(LED0_GPIO);
                config.motor_armed = true;
  4003c8:	2101      	movs	r1, #1
  4003ca:	4b4f      	ldr	r3, [pc, #316]	; (400508 <main+0x214>)
  4003cc:	7519      	strb	r1, [r3, #20]
                printf("motor_armed: %d\r\n", config.motor_armed);
  4003ce:	4852      	ldr	r0, [pc, #328]	; (400518 <main+0x224>)
  4003d0:	f003 f950 	bl	403674 <iprintf>
        }

        while(true) {


            if (config.imu_calibrate) {
  4003d4:	4c4c      	ldr	r4, [pc, #304]	; (400508 <main+0x214>)
                imu_calibrate();
                pid_init();
                config.imu_calibrate = false;
  4003d6:	2600      	movs	r6, #0

            // long y = (long) ap.imu.x_axis;

            long x = (long) pid_tick();

            long power_left = map(x, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);
  4003d8:	f240 477e 	movw	r7, #1150	; 0x47e
            long power_right = map(x, ANGLE_MID, ANGLE_MIN, PWM_MIN, PWM_MAX);

            if (config.motor_armed) {
                motor_set_power(motors[1], power_left + config.motor_offset);
  4003dc:	f8df a14c 	ldr.w	sl, [pc, #332]	; 40052c <main+0x238>
  4003e0:	f10a 0364 	add.w	r3, sl, #100	; 0x64
  4003e4:	9313      	str	r3, [sp, #76]	; 0x4c
                motor_set_power(motors[0], power_right + config.motor_offset);
            }


            if (config.log_imu) {
                if (cph_get_millis() >= f_log_timeout) {
  4003e6:	f8df b148 	ldr.w	fp, [pc, #328]	; 400530 <main+0x23c>
        }

        while(true) {


            if (config.imu_calibrate) {
  4003ea:	7de3      	ldrb	r3, [r4, #23]
  4003ec:	b123      	cbz	r3, 4003f8 <main+0x104>
                imu_calibrate();
  4003ee:	f000 ff41 	bl	401274 <imu_calibrate>
                pid_init();
  4003f2:	f001 f9d5 	bl	4017a0 <pid_init>
                config.imu_calibrate = false;
  4003f6:	75e6      	strb	r6, [r4, #23]
            }
            cli_tick();
  4003f8:	f000 faa4 	bl	400944 <cli_tick>
            imu_tick();
  4003fc:	f000 ff50 	bl	4012a0 <imu_tick>
            motor_tick();
  400400:	f001 f95c 	bl	4016bc <motor_tick>

            // long y = (long) ap.imu.x_axis;

            long x = (long) pid_tick();
  400404:	f001 f9f4 	bl	4017f0 <pid_tick>
  400408:	f007 fc76 	bl	407cf8 <__aeabi_f2iz>
  40040c:	4680      	mov	r8, r0

            long power_left = map(x, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);
  40040e:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  400412:	9500      	str	r5, [sp, #0]
  400414:	463b      	mov	r3, r7
  400416:	225a      	movs	r2, #90	; 0x5a
  400418:	4631      	mov	r1, r6
  40041a:	f000 f899 	bl	400550 <map>
  40041e:	4681      	mov	r9, r0
            long power_right = map(x, ANGLE_MID, ANGLE_MIN, PWM_MIN, PWM_MAX);
  400420:	9500      	str	r5, [sp, #0]
  400422:	463b      	mov	r3, r7
  400424:	f06f 0259 	mvn.w	r2, #89	; 0x59
  400428:	4631      	mov	r1, r6
  40042a:	4640      	mov	r0, r8
  40042c:	f000 f890 	bl	400550 <map>
  400430:	4605      	mov	r5, r0

            if (config.motor_armed) {
  400432:	7d23      	ldrb	r3, [r4, #20]
  400434:	b1db      	cbz	r3, 40046e <main+0x17a>
                motor_set_power(motors[1], power_left + config.motor_offset);
  400436:	6923      	ldr	r3, [r4, #16]
  400438:	444b      	add	r3, r9
  40043a:	9311      	str	r3, [sp, #68]	; 0x44
  40043c:	f04f 0844 	mov.w	r8, #68	; 0x44
  400440:	4642      	mov	r2, r8
  400442:	9913      	ldr	r1, [sp, #76]	; 0x4c
  400444:	4668      	mov	r0, sp
  400446:	f002 fc93 	bl	402d70 <memcpy>
  40044a:	f10a 0354 	add.w	r3, sl, #84	; 0x54
  40044e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400450:	f001 f936 	bl	4016c0 <motor_set_power>
                motor_set_power(motors[0], power_right + config.motor_offset);
  400454:	6923      	ldr	r3, [r4, #16]
  400456:	441d      	add	r5, r3
  400458:	9511      	str	r5, [sp, #68]	; 0x44
  40045a:	4642      	mov	r2, r8
  40045c:	f10a 0110 	add.w	r1, sl, #16
  400460:	4668      	mov	r0, sp
  400462:	f002 fc85 	bl	402d70 <memcpy>
  400466:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  40046a:	f001 f929 	bl	4016c0 <motor_set_power>
            }


            if (config.log_imu) {
  40046e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  400472:	2b00      	cmp	r3, #0
  400474:	d0b9      	beq.n	4003ea <main+0xf6>
                if (cph_get_millis() >= f_log_timeout) {
  400476:	f8db 2000 	ldr.w	r2, [fp]
  40047a:	4b28      	ldr	r3, [pc, #160]	; (40051c <main+0x228>)
  40047c:	681b      	ldr	r3, [r3, #0]
  40047e:	429a      	cmp	r2, r3
  400480:	d3b3      	bcc.n	4003ea <main+0xf6>
                    f_log_timeout = cph_get_millis() + 50;
  400482:	f8db 3000 	ldr.w	r3, [fp]
  400486:	3332      	adds	r3, #50	; 0x32
  400488:	4a24      	ldr	r2, [pc, #144]	; (40051c <main+0x228>)
  40048a:	6013      	str	r3, [r2, #0]
                    printf("roll/pitch/yaw/mag error/pid: %f %f %f %f %f %f\r\n", ap.imu.x_axis, ap.imu.y_axis, ap.imu.z_axis, ap.mag.z_axis, pid);
  40048c:	4d24      	ldr	r5, [pc, #144]	; (400520 <main+0x22c>)
  40048e:	6828      	ldr	r0, [r5, #0]
  400490:	f006 fdc2 	bl	407018 <__aeabi_f2d>
  400494:	4680      	mov	r8, r0
  400496:	4689      	mov	r9, r1
  400498:	4b22      	ldr	r3, [pc, #136]	; (400524 <main+0x230>)
  40049a:	6818      	ldr	r0, [r3, #0]
  40049c:	f006 fdbc 	bl	407018 <__aeabi_f2d>
  4004a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4004a4:	6968      	ldr	r0, [r5, #20]
  4004a6:	f006 fdb7 	bl	407018 <__aeabi_f2d>
  4004aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4004ae:	68a8      	ldr	r0, [r5, #8]
  4004b0:	f006 fdb2 	bl	407018 <__aeabi_f2d>
  4004b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4004b8:	6868      	ldr	r0, [r5, #4]
  4004ba:	f006 fdad 	bl	407018 <__aeabi_f2d>
  4004be:	e9cd 0100 	strd	r0, r1, [sp]
  4004c2:	4642      	mov	r2, r8
  4004c4:	464b      	mov	r3, r9
  4004c6:	4818      	ldr	r0, [pc, #96]	; (400528 <main+0x234>)
  4004c8:	f003 f8d4 	bl	403674 <iprintf>
  4004cc:	e78d      	b.n	4003ea <main+0xf6>
    //         delay_ms(500); 
    //     }


    // }
}
  4004ce:	2000      	movs	r0, #0
  4004d0:	b019      	add	sp, #100	; 0x64
  4004d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4004d6:	bf00      	nop
  4004d8:	400e0800 	.word	0x400e0800
  4004dc:	20000500 	.word	0x20000500
  4004e0:	0040027d 	.word	0x0040027d
  4004e4:	200004fc 	.word	0x200004fc
  4004e8:	004001fd 	.word	0x004001fd
  4004ec:	200004f8 	.word	0x200004f8
  4004f0:	07270e00 	.word	0x07270e00
  4004f4:	20000078 	.word	0x20000078
  4004f8:	00407d84 	.word	0x00407d84
  4004fc:	00407da0 	.word	0x00407da0
  400500:	000d1437 	.word	0x000d1437
  400504:	00407d9c 	.word	0x00407d9c
  400508:	200006f0 	.word	0x200006f0
  40050c:	00407da4 	.word	0x00407da4
  400510:	400e0e00 	.word	0x400e0e00
  400514:	400e1200 	.word	0x400e1200
  400518:	00407dc8 	.word	0x00407dc8
  40051c:	20000204 	.word	0x20000204
  400520:	20000820 	.word	0x20000820
  400524:	2000044c 	.word	0x2000044c
  400528:	00407ddc 	.word	0x00407ddc
  40052c:	20000534 	.word	0x20000534
  400530:	20000208 	.word	0x20000208

00400534 <config_init>:
	// config.axis_swap_xy = false;
	// config.fpv_freeze_pitch = false;
	// config.fpv_freeze_roll = false;
	// config.max_pwm_fpv_pitch = 80;
	// config.max_pwm_fpv_roll = 80;
    config.gyro_calibrate = true;
  400534:	4b05      	ldr	r3, [pc, #20]	; (40054c <config_init+0x18>)
  400536:	2101      	movs	r1, #1
  400538:	7559      	strb	r1, [r3, #21]
	config.accel_calibrate = false;
  40053a:	2200      	movs	r2, #0
  40053c:	759a      	strb	r2, [r3, #22]
	config.imu_calibrate = true;
  40053e:	75d9      	strb	r1, [r3, #23]
	config.log_motor = false;
  400540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	config.log_imu = false;
  400544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  400548:	4770      	bx	lr
  40054a:	bf00      	nop
  40054c:	200006f0 	.word	0x200006f0

00400550 <map>:
#include "cph_util.h"

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  400550:	b410      	push	{r4}
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  400552:	1a40      	subs	r0, r0, r1
  400554:	9c01      	ldr	r4, [sp, #4]
  400556:	1ae4      	subs	r4, r4, r3
  400558:	fb04 f000 	mul.w	r0, r4, r0
  40055c:	1a52      	subs	r2, r2, r1
  40055e:	fb90 f0f2 	sdiv	r0, r0, r2
  400562:	4418      	add	r0, r3
  400564:	bc10      	pop	{r4}
  400566:	4770      	bx	lr

00400568 <SysTick_Handler>:


volatile uint32_t g_cph_millis = 0;

void SysTick_Handler(void) {
	g_cph_millis++;
  400568:	4a02      	ldr	r2, [pc, #8]	; (400574 <SysTick_Handler+0xc>)
  40056a:	6813      	ldr	r3, [r2, #0]
  40056c:	3301      	adds	r3, #1
  40056e:	6013      	str	r3, [r2, #0]
  400570:	4770      	bx	lr
  400572:	bf00      	nop
  400574:	20000208 	.word	0x20000208

00400578 <cph_millis_init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400578:	4b05      	ldr	r3, [pc, #20]	; (400590 <cph_millis_init+0x18>)
  40057a:	4a06      	ldr	r2, [pc, #24]	; (400594 <cph_millis_init+0x1c>)
  40057c:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40057e:	21f0      	movs	r1, #240	; 0xf0
  400580:	4a05      	ldr	r2, [pc, #20]	; (400598 <cph_millis_init+0x20>)
  400582:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400586:	2200      	movs	r2, #0
  400588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40058a:	2207      	movs	r2, #7
  40058c:	601a      	str	r2, [r3, #0]
  40058e:	4770      	bx	lr
  400590:	e000e010 	.word	0xe000e010
  400594:	0001d4bf 	.word	0x0001d4bf
  400598:	e000ed00 	.word	0xe000ed00

0040059c <init_buffer>:
	init_buffer();
	init_lines();
}

void init_buffer()
{
  40059c:	b508      	push	{r3, lr}
	cli_line_index = 0;
  40059e:	2100      	movs	r1, #0
  4005a0:	4b03      	ldr	r3, [pc, #12]	; (4005b0 <init_buffer+0x14>)
  4005a2:	6019      	str	r1, [r3, #0]
	memset(cli_line_buffer, '\0', sizeof(cli_line_buffer));
  4005a4:	2281      	movs	r2, #129	; 0x81
  4005a6:	4803      	ldr	r0, [pc, #12]	; (4005b4 <init_buffer+0x18>)
  4005a8:	f002 fbed 	bl	402d86 <memset>
  4005ac:	bd08      	pop	{r3, pc}
  4005ae:	bf00      	nop
  4005b0:	20000414 	.word	0x20000414
  4005b4:	20000718 	.word	0x20000718

004005b8 <init_lines>:
}

void init_lines()
{
  4005b8:	b508      	push	{r3, lr}
	memset(cli_lines, '\0', sizeof(cli_lines));
  4005ba:	2281      	movs	r2, #129	; 0x81
  4005bc:	2100      	movs	r1, #0
  4005be:	4802      	ldr	r0, [pc, #8]	; (4005c8 <init_lines+0x10>)
  4005c0:	f002 fbe1 	bl	402d86 <memset>
  4005c4:	bd08      	pop	{r3, pc}
  4005c6:	bf00      	nop
  4005c8:	2000079c 	.word	0x2000079c

004005cc <cli_init>:
char cli_line_buffer[CLI_MAX_CHARS+1];
int cli_line_index = 0;


void cli_init()
{
  4005cc:	b508      	push	{r3, lr}
	init_buffer();
  4005ce:	f7ff ffe5 	bl	40059c <init_buffer>
	init_lines();
  4005d2:	f7ff fff1 	bl	4005b8 <init_lines>
  4005d6:	bd08      	pop	{r3, pc}

004005d8 <cli_handle_command>:

}

//printf("motor0: %d\r\n", atoi(parm));
void cli_handle_command(char *cmd, char *parm)
{
  4005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005da:	b093      	sub	sp, #76	; 0x4c
  4005dc:	4604      	mov	r4, r0
  4005de:	460d      	mov	r5, r1

	/*
	 * 	Autopilot settings
	 */
	if (strcmp(cmd, "apx") == 0) {
  4005e0:	4986      	ldr	r1, [pc, #536]	; (4007fc <cli_handle_command+0x224>)
  4005e2:	f003 f973 	bl	4038cc <strcmp>
  4005e6:	b968      	cbnz	r0, 400604 <cli_handle_command+0x2c>
		AP.desired_angle_x = atof(parm);
  4005e8:	4628      	mov	r0, r5
  4005ea:	f002 fb8d 	bl	402d08 <atof>
  4005ee:	f007 f85f 	bl	4076b0 <__aeabi_d2f>
  4005f2:	4b83      	ldr	r3, [pc, #524]	; (400800 <cli_handle_command+0x228>)
  4005f4:	6058      	str	r0, [r3, #4]
		printf("AP.desired_angle_x: %f\r\n", AP.desired_angle_x);
  4005f6:	f006 fd0f 	bl	407018 <__aeabi_f2d>
  4005fa:	4602      	mov	r2, r0
  4005fc:	460b      	mov	r3, r1
  4005fe:	4881      	ldr	r0, [pc, #516]	; (400804 <cli_handle_command+0x22c>)
  400600:	f003 f838 	bl	403674 <iprintf>
	}
	if (strcmp(cmd, "apy") == 0) {
  400604:	4980      	ldr	r1, [pc, #512]	; (400808 <cli_handle_command+0x230>)
  400606:	4620      	mov	r0, r4
  400608:	f003 f960 	bl	4038cc <strcmp>
  40060c:	b968      	cbnz	r0, 40062a <cli_handle_command+0x52>
		AP.desired_angle_y = atof(parm);
  40060e:	4628      	mov	r0, r5
  400610:	f002 fb7a 	bl	402d08 <atof>
  400614:	f007 f84c 	bl	4076b0 <__aeabi_d2f>
  400618:	4b79      	ldr	r3, [pc, #484]	; (400800 <cli_handle_command+0x228>)
  40061a:	6098      	str	r0, [r3, #8]
		printf("AP.desired_angle_y: %f\r\n", AP.desired_angle_y);
  40061c:	f006 fcfc 	bl	407018 <__aeabi_f2d>
  400620:	4602      	mov	r2, r0
  400622:	460b      	mov	r3, r1
  400624:	4879      	ldr	r0, [pc, #484]	; (40080c <cli_handle_command+0x234>)
  400626:	f003 f825 	bl	403674 <iprintf>
	}	

	/*
	 * 	Pid loop configuration
	 */
	if (strcmp(cmd, "kp") == 0) {
  40062a:	4979      	ldr	r1, [pc, #484]	; (400810 <cli_handle_command+0x238>)
  40062c:	4620      	mov	r0, r4
  40062e:	f003 f94d 	bl	4038cc <strcmp>
  400632:	b968      	cbnz	r0, 400650 <cli_handle_command+0x78>
		config.pid_kp = atof(parm);
  400634:	4628      	mov	r0, r5
  400636:	f002 fb67 	bl	402d08 <atof>
  40063a:	f007 f839 	bl	4076b0 <__aeabi_d2f>
  40063e:	4b75      	ldr	r3, [pc, #468]	; (400814 <cli_handle_command+0x23c>)
  400640:	6018      	str	r0, [r3, #0]
		printf("config.pid_kp: %f\r\n", config.pid_kp);
  400642:	f006 fce9 	bl	407018 <__aeabi_f2d>
  400646:	4602      	mov	r2, r0
  400648:	460b      	mov	r3, r1
  40064a:	4873      	ldr	r0, [pc, #460]	; (400818 <cli_handle_command+0x240>)
  40064c:	f003 f812 	bl	403674 <iprintf>
	}

	if (strcmp(cmd, "ki") == 0) {
  400650:	4972      	ldr	r1, [pc, #456]	; (40081c <cli_handle_command+0x244>)
  400652:	4620      	mov	r0, r4
  400654:	f003 f93a 	bl	4038cc <strcmp>
  400658:	b968      	cbnz	r0, 400676 <cli_handle_command+0x9e>
		config.pid_ki = atof(parm);
  40065a:	4628      	mov	r0, r5
  40065c:	f002 fb54 	bl	402d08 <atof>
  400660:	f007 f826 	bl	4076b0 <__aeabi_d2f>
  400664:	4b6b      	ldr	r3, [pc, #428]	; (400814 <cli_handle_command+0x23c>)
  400666:	6058      	str	r0, [r3, #4]
		printf("config.pid_ki: %f\r\n", config.pid_ki);
  400668:	f006 fcd6 	bl	407018 <__aeabi_f2d>
  40066c:	4602      	mov	r2, r0
  40066e:	460b      	mov	r3, r1
  400670:	486b      	ldr	r0, [pc, #428]	; (400820 <cli_handle_command+0x248>)
  400672:	f002 ffff 	bl	403674 <iprintf>
	}

	if (strcmp(cmd, "kd") == 0) {
  400676:	496b      	ldr	r1, [pc, #428]	; (400824 <cli_handle_command+0x24c>)
  400678:	4620      	mov	r0, r4
  40067a:	f003 f927 	bl	4038cc <strcmp>
  40067e:	b968      	cbnz	r0, 40069c <cli_handle_command+0xc4>
		config.pid_kd = atof(parm);
  400680:	4628      	mov	r0, r5
  400682:	f002 fb41 	bl	402d08 <atof>
  400686:	f007 f813 	bl	4076b0 <__aeabi_d2f>
  40068a:	4b62      	ldr	r3, [pc, #392]	; (400814 <cli_handle_command+0x23c>)
  40068c:	6098      	str	r0, [r3, #8]
		printf("config.pid_kd: %f\r\n", config.pid_kd);
  40068e:	f006 fcc3 	bl	407018 <__aeabi_f2d>
  400692:	4602      	mov	r2, r0
  400694:	460b      	mov	r3, r1
  400696:	4864      	ldr	r0, [pc, #400]	; (400828 <cli_handle_command+0x250>)
  400698:	f002 ffec 	bl	403674 <iprintf>

	/*
	 * 	IMU settings
	 */	

	if (strcmp(cmd, "imu_calibrate") == 0) {
  40069c:	4963      	ldr	r1, [pc, #396]	; (40082c <cli_handle_command+0x254>)
  40069e:	4620      	mov	r0, r4
  4006a0:	f003 f914 	bl	4038cc <strcmp>
  4006a4:	b950      	cbnz	r0, 4006bc <cli_handle_command+0xe4>
		config.imu_calibrate = atoi(parm);
  4006a6:	4628      	mov	r0, r5
  4006a8:	f002 fb31 	bl	402d0e <atoi>
  4006ac:	1c01      	adds	r1, r0, #0
  4006ae:	bf18      	it	ne
  4006b0:	2101      	movne	r1, #1
  4006b2:	4b58      	ldr	r3, [pc, #352]	; (400814 <cli_handle_command+0x23c>)
  4006b4:	75d9      	strb	r1, [r3, #23]
		printf("imu_calibrate: %d\r\n", config.imu_calibrate);
  4006b6:	485e      	ldr	r0, [pc, #376]	; (400830 <cli_handle_command+0x258>)
  4006b8:	f002 ffdc 	bl	403674 <iprintf>
	}

	/*
	 * 	Motor settings
	 */	
	if (strcmp(cmd, "motor_armed") == 0) {
  4006bc:	495d      	ldr	r1, [pc, #372]	; (400834 <cli_handle_command+0x25c>)
  4006be:	4620      	mov	r0, r4
  4006c0:	f003 f904 	bl	4038cc <strcmp>
  4006c4:	b950      	cbnz	r0, 4006dc <cli_handle_command+0x104>
		config.motor_armed = atoi(parm);
  4006c6:	4628      	mov	r0, r5
  4006c8:	f002 fb21 	bl	402d0e <atoi>
  4006cc:	1c01      	adds	r1, r0, #0
  4006ce:	bf18      	it	ne
  4006d0:	2101      	movne	r1, #1
  4006d2:	4b50      	ldr	r3, [pc, #320]	; (400814 <cli_handle_command+0x23c>)
  4006d4:	7519      	strb	r1, [r3, #20]
		printf("motor_armed: %d\r\n", config.motor_armed);
  4006d6:	4858      	ldr	r0, [pc, #352]	; (400838 <cli_handle_command+0x260>)
  4006d8:	f002 ffcc 	bl	403674 <iprintf>
	}

	if (strcmp(cmd, "motor_offset") == 0) {
  4006dc:	4957      	ldr	r1, [pc, #348]	; (40083c <cli_handle_command+0x264>)
  4006de:	4620      	mov	r0, r4
  4006e0:	f003 f8f4 	bl	4038cc <strcmp>
  4006e4:	b940      	cbnz	r0, 4006f8 <cli_handle_command+0x120>
		config.motor_offset = atoi(parm);
  4006e6:	4628      	mov	r0, r5
  4006e8:	f002 fb11 	bl	402d0e <atoi>
  4006ec:	4601      	mov	r1, r0
  4006ee:	4b49      	ldr	r3, [pc, #292]	; (400814 <cli_handle_command+0x23c>)
  4006f0:	6118      	str	r0, [r3, #16]
		printf("motor_offset: %d\r\n", config.motor_offset);
  4006f2:	4853      	ldr	r0, [pc, #332]	; (400840 <cli_handle_command+0x268>)
  4006f4:	f002 ffbe 	bl	403674 <iprintf>
	}

	if (strcmp(cmd, "motor_min") == 0) {
  4006f8:	4952      	ldr	r1, [pc, #328]	; (400844 <cli_handle_command+0x26c>)
  4006fa:	4620      	mov	r0, r4
  4006fc:	f003 f8e6 	bl	4038cc <strcmp>
  400700:	b9c8      	cbnz	r0, 400736 <cli_handle_command+0x15e>
		printf("motor min command issued\r\n");
  400702:	4851      	ldr	r0, [pc, #324]	; (400848 <cli_handle_command+0x270>)
  400704:	f002 ffb6 	bl	403674 <iprintf>
		motor_min(motors[0]);
  400708:	4e50      	ldr	r6, [pc, #320]	; (40084c <cli_handle_command+0x274>)
  40070a:	2744      	movs	r7, #68	; 0x44
  40070c:	463a      	mov	r2, r7
  40070e:	f106 0110 	add.w	r1, r6, #16
  400712:	4668      	mov	r0, sp
  400714:	f002 fb2c 	bl	402d70 <memcpy>
  400718:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  40071c:	f000 ffec 	bl	4016f8 <motor_min>
		motor_min(motors[1]);
  400720:	463a      	mov	r2, r7
  400722:	f106 0164 	add.w	r1, r6, #100	; 0x64
  400726:	4668      	mov	r0, sp
  400728:	f002 fb22 	bl	402d70 <memcpy>
  40072c:	3654      	adds	r6, #84	; 0x54
  40072e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400732:	f000 ffe1 	bl	4016f8 <motor_min>
	}

	if (strcmp(cmd, "motor_mid") == 0) {
  400736:	4946      	ldr	r1, [pc, #280]	; (400850 <cli_handle_command+0x278>)
  400738:	4620      	mov	r0, r4
  40073a:	f003 f8c7 	bl	4038cc <strcmp>
  40073e:	b9c8      	cbnz	r0, 400774 <cli_handle_command+0x19c>
		printf("motor mid command issued\r\n");
  400740:	4844      	ldr	r0, [pc, #272]	; (400854 <cli_handle_command+0x27c>)
  400742:	f002 ff97 	bl	403674 <iprintf>
		motor_mid(motors[0]);
  400746:	4e41      	ldr	r6, [pc, #260]	; (40084c <cli_handle_command+0x274>)
  400748:	2744      	movs	r7, #68	; 0x44
  40074a:	463a      	mov	r2, r7
  40074c:	f106 0110 	add.w	r1, r6, #16
  400750:	4668      	mov	r0, sp
  400752:	f002 fb0d 	bl	402d70 <memcpy>
  400756:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  40075a:	f000 ffe9 	bl	401730 <motor_mid>
		motor_mid(motors[1]);
  40075e:	463a      	mov	r2, r7
  400760:	f106 0164 	add.w	r1, r6, #100	; 0x64
  400764:	4668      	mov	r0, sp
  400766:	f002 fb03 	bl	402d70 <memcpy>
  40076a:	3654      	adds	r6, #84	; 0x54
  40076c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400770:	f000 ffde 	bl	401730 <motor_mid>
	}

	if (strcmp(cmd, "motor_max") == 0) {
  400774:	4938      	ldr	r1, [pc, #224]	; (400858 <cli_handle_command+0x280>)
  400776:	4620      	mov	r0, r4
  400778:	f003 f8a8 	bl	4038cc <strcmp>
  40077c:	b9c8      	cbnz	r0, 4007b2 <cli_handle_command+0x1da>
		printf("motor max command issued\r\n");
  40077e:	4837      	ldr	r0, [pc, #220]	; (40085c <cli_handle_command+0x284>)
  400780:	f002 ff78 	bl	403674 <iprintf>
		motor_max(motors[0]);
  400784:	4e31      	ldr	r6, [pc, #196]	; (40084c <cli_handle_command+0x274>)
  400786:	2744      	movs	r7, #68	; 0x44
  400788:	463a      	mov	r2, r7
  40078a:	f106 0110 	add.w	r1, r6, #16
  40078e:	4668      	mov	r0, sp
  400790:	f002 faee 	bl	402d70 <memcpy>
  400794:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400798:	f000 ffe6 	bl	401768 <motor_max>
		motor_max(motors[1]);
  40079c:	463a      	mov	r2, r7
  40079e:	f106 0164 	add.w	r1, r6, #100	; 0x64
  4007a2:	4668      	mov	r0, sp
  4007a4:	f002 fae4 	bl	402d70 <memcpy>
  4007a8:	3654      	adds	r6, #84	; 0x54
  4007aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  4007ae:	f000 ffdb 	bl	401768 <motor_max>
	} 

	/*
	 * 	Log settings
	 */	
	if (strcmp(cmd, "log_imu") == 0) {
  4007b2:	492b      	ldr	r1, [pc, #172]	; (400860 <cli_handle_command+0x288>)
  4007b4:	4620      	mov	r0, r4
  4007b6:	f003 f889 	bl	4038cc <strcmp>
  4007ba:	b958      	cbnz	r0, 4007d4 <cli_handle_command+0x1fc>
		config.log_imu = atoi(parm);
  4007bc:	4628      	mov	r0, r5
  4007be:	f002 faa6 	bl	402d0e <atoi>
  4007c2:	1c01      	adds	r1, r0, #0
  4007c4:	bf18      	it	ne
  4007c6:	2101      	movne	r1, #1
  4007c8:	4b12      	ldr	r3, [pc, #72]	; (400814 <cli_handle_command+0x23c>)
  4007ca:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
		printf("log_imu: %d\r\n", config.log_imu);
  4007ce:	4825      	ldr	r0, [pc, #148]	; (400864 <cli_handle_command+0x28c>)
  4007d0:	f002 ff50 	bl	403674 <iprintf>
	}

	if (strcmp(cmd, "log_motor") == 0) {
  4007d4:	4924      	ldr	r1, [pc, #144]	; (400868 <cli_handle_command+0x290>)
  4007d6:	4620      	mov	r0, r4
  4007d8:	f003 f878 	bl	4038cc <strcmp>
  4007dc:	b958      	cbnz	r0, 4007f6 <cli_handle_command+0x21e>
		config.log_motor = atoi(parm);
  4007de:	4628      	mov	r0, r5
  4007e0:	f002 fa95 	bl	402d0e <atoi>
  4007e4:	1c01      	adds	r1, r0, #0
  4007e6:	bf18      	it	ne
  4007e8:	2101      	movne	r1, #1
  4007ea:	4b0a      	ldr	r3, [pc, #40]	; (400814 <cli_handle_command+0x23c>)
  4007ec:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
		printf("log_motor: %d\r\n", config.log_motor);
  4007f0:	481e      	ldr	r0, [pc, #120]	; (40086c <cli_handle_command+0x294>)
  4007f2:	f002 ff3f 	bl	403674 <iprintf>
	}	
}
  4007f6:	b013      	add	sp, #76	; 0x4c
  4007f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4007fa:	bf00      	nop
  4007fc:	00407e10 	.word	0x00407e10
  400800:	2000085c 	.word	0x2000085c
  400804:	00407e14 	.word	0x00407e14
  400808:	00407e30 	.word	0x00407e30
  40080c:	00407e34 	.word	0x00407e34
  400810:	00407e50 	.word	0x00407e50
  400814:	200006f0 	.word	0x200006f0
  400818:	00407e54 	.word	0x00407e54
  40081c:	00407e68 	.word	0x00407e68
  400820:	00407e6c 	.word	0x00407e6c
  400824:	00407e80 	.word	0x00407e80
  400828:	00407e84 	.word	0x00407e84
  40082c:	00407e98 	.word	0x00407e98
  400830:	00407ea8 	.word	0x00407ea8
  400834:	00407ebc 	.word	0x00407ebc
  400838:	00407dc8 	.word	0x00407dc8
  40083c:	00407ec8 	.word	0x00407ec8
  400840:	00407ed8 	.word	0x00407ed8
  400844:	00407eec 	.word	0x00407eec
  400848:	00407ef8 	.word	0x00407ef8
  40084c:	20000534 	.word	0x20000534
  400850:	00407f14 	.word	0x00407f14
  400854:	00407f20 	.word	0x00407f20
  400858:	00407f3c 	.word	0x00407f3c
  40085c:	00407f48 	.word	0x00407f48
  400860:	00407f64 	.word	0x00407f64
  400864:	00407f6c 	.word	0x00407f6c
  400868:	00407f7c 	.word	0x00407f7c
  40086c:	00407f88 	.word	0x00407f88

00400870 <cli_put_char>:
	return false;
}

void cli_put_char(unsigned char c)
{
	int i = (unsigned int)(cli_buffer.head + 1) % CLI_RX_BUFFER_SIZE;
  400870:	4a07      	ldr	r2, [pc, #28]	; (400890 <cli_put_char+0x20>)
  400872:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  400876:	1c4b      	adds	r3, r1, #1
  400878:	f3c3 0308 	ubfx	r3, r3, #0, #9

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != cli_buffer.tail) {
  40087c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  400880:	4293      	cmp	r3, r2
  400882:	d003      	beq.n	40088c <cli_put_char+0x1c>
		cli_buffer.buffer[cli_buffer.head] = c;
  400884:	4a02      	ldr	r2, [pc, #8]	; (400890 <cli_put_char+0x20>)
  400886:	5450      	strb	r0, [r2, r1]
		cli_buffer.head = i;
  400888:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  40088c:	4770      	bx	lr
  40088e:	bf00      	nop
  400890:	2000020c 	.word	0x2000020c

00400894 <cli_read_device>:
{
	memset(cli_lines, '\0', sizeof(cli_lines));
}

void cli_read_device(void)
{
  400894:	b500      	push	{lr}
  400896:	b083      	sub	sp, #12
    uint8_t uc_char;
	uint8_t uc_flag;

	if (uart_is_rx_ready(CONSOLE_UART)) {
  400898:	4808      	ldr	r0, [pc, #32]	; (4008bc <cli_read_device+0x28>)
  40089a:	f001 fc4b 	bl	402134 <uart_is_rx_ready>
  40089e:	b150      	cbz	r0, 4008b6 <cli_read_device+0x22>
		uc_flag = uart_read(CONSOLE_UART, &uc_char);
  4008a0:	f10d 0107 	add.w	r1, sp, #7
  4008a4:	4805      	ldr	r0, [pc, #20]	; (4008bc <cli_read_device+0x28>)
  4008a6:	f001 fc51 	bl	40214c <uart_read>
		if (!uc_flag) {
  4008aa:	b2c0      	uxtb	r0, r0
  4008ac:	b918      	cbnz	r0, 4008b6 <cli_read_device+0x22>
			cli_put_char(uc_char);
  4008ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4008b2:	f7ff ffdd 	bl	400870 <cli_put_char>
		}
	}
}
  4008b6:	b003      	add	sp, #12
  4008b8:	f85d fb04 	ldr.w	pc, [sp], #4
  4008bc:	400e0800 	.word	0x400e0800

004008c0 <cli_data_available>:
}

uint8_t cli_data_available()
{

	return (uint8_t)(CLI_RX_BUFFER_SIZE + cli_buffer.head - cli_buffer.tail) % CLI_RX_BUFFER_SIZE;
  4008c0:	4a03      	ldr	r2, [pc, #12]	; (4008d0 <cli_data_available+0x10>)
  4008c2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
  4008c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
  4008ca:	1a18      	subs	r0, r3, r0
}
  4008cc:	b2c0      	uxtb	r0, r0
  4008ce:	4770      	bx	lr
  4008d0:	2000020c 	.word	0x2000020c

004008d4 <cli_data_read>:

uint8_t cli_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (cli_buffer.head == cli_buffer.tail) {
  4008d4:	4a08      	ldr	r2, [pc, #32]	; (4008f8 <cli_data_read+0x24>)
  4008d6:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
  4008da:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
  4008de:	429a      	cmp	r2, r3
  4008e0:	d007      	beq.n	4008f2 <cli_data_read+0x1e>
		return -1;
	} else {
		uint8_t c = cli_buffer.buffer[cli_buffer.tail];
  4008e2:	4a05      	ldr	r2, [pc, #20]	; (4008f8 <cli_data_read+0x24>)
  4008e4:	5cd0      	ldrb	r0, [r2, r3]
		cli_buffer.tail = (unsigned int)(cli_buffer.tail + 1) % CLI_RX_BUFFER_SIZE;
  4008e6:	3301      	adds	r3, #1
  4008e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4008ec:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		return c;
  4008f0:	4770      	bx	lr

uint8_t cli_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (cli_buffer.head == cli_buffer.tail) {
		return -1;
  4008f2:	20ff      	movs	r0, #255	; 0xff
	} else {
		uint8_t c = cli_buffer.buffer[cli_buffer.tail];
		cli_buffer.tail = (unsigned int)(cli_buffer.tail + 1) % CLI_RX_BUFFER_SIZE;
		return c;
	}
  4008f4:	4770      	bx	lr
  4008f6:	bf00      	nop
  4008f8:	2000020c 	.word	0x2000020c

004008fc <handle_data>:
	}	
}

// check to see if we have a new line
bool handle_data()
{
  4008fc:	b508      	push	{r3, lr}

	char c = cli_data_read();
  4008fe:	f7ff ffe9 	bl	4008d4 <cli_data_read>

	// ignore null terminated strings
	if(c == '\0') return false;
  400902:	b190      	cbz	r0, 40092a <handle_data+0x2e>
	// prevent buffer overrun
	if(cli_line_index >= CLI_MAX_CHARS) return false;
  400904:	4b0c      	ldr	r3, [pc, #48]	; (400938 <handle_data+0x3c>)
  400906:	681b      	ldr	r3, [r3, #0]
  400908:	2b7f      	cmp	r3, #127	; 0x7f
  40090a:	dc10      	bgt.n	40092e <handle_data+0x32>

	// store character in cli_line_buffer
	cli_line_buffer[cli_line_index] = c;
  40090c:	490b      	ldr	r1, [pc, #44]	; (40093c <handle_data+0x40>)
  40090e:	54c8      	strb	r0, [r1, r3]
	cli_line_index++;
  400910:	3301      	adds	r3, #1
  400912:	4909      	ldr	r1, [pc, #36]	; (400938 <handle_data+0x3c>)
  400914:	600b      	str	r3, [r1, #0]

	// check for end of line
	if(c == CLI_TKEND) {
  400916:	280d      	cmp	r0, #13
  400918:	d10b      	bne.n	400932 <handle_data+0x36>
		// copy new message into buffer
		strcpy(cli_lines, cli_line_buffer);
  40091a:	4908      	ldr	r1, [pc, #32]	; (40093c <handle_data+0x40>)
  40091c:	4808      	ldr	r0, [pc, #32]	; (400940 <handle_data+0x44>)
  40091e:	f002 ffdf 	bl	4038e0 <strcpy>
		init_buffer();
  400922:	f7ff fe3b 	bl	40059c <init_buffer>
		return true;
  400926:	2001      	movs	r0, #1
  400928:	bd08      	pop	{r3, pc}
{

	char c = cli_data_read();

	// ignore null terminated strings
	if(c == '\0') return false;
  40092a:	2000      	movs	r0, #0
  40092c:	bd08      	pop	{r3, pc}
	// prevent buffer overrun
	if(cli_line_index >= CLI_MAX_CHARS) return false;
  40092e:	2000      	movs	r0, #0
  400930:	bd08      	pop	{r3, pc}
		strcpy(cli_lines, cli_line_buffer);
		init_buffer();
		return true;
	}

	return false;
  400932:	2000      	movs	r0, #0
}
  400934:	bd08      	pop	{r3, pc}
  400936:	bf00      	nop
  400938:	20000414 	.word	0x20000414
  40093c:	20000718 	.word	0x20000718
  400940:	2000079c 	.word	0x2000079c

00400944 <cli_tick>:
		}
	}
}

void cli_tick()
{
  400944:	b530      	push	{r4, r5, lr}
  400946:	b083      	sub	sp, #12
	// read the serial port
	cli_read_device();
  400948:	f7ff ffa4 	bl	400894 <cli_read_device>

	if (cli_data_available()) {
  40094c:	f7ff ffb8 	bl	4008c0 <cli_data_available>
  400950:	b1a8      	cbz	r0, 40097e <cli_tick+0x3a>
		if (handle_data()) {
  400952:	f7ff ffd3 	bl	4008fc <handle_data>
  400956:	b190      	cbz	r0, 40097e <cli_tick+0x3a>
			//config_test();

			char *saveptr;
			char *cmd, *parm;

			cmd = strtok_r(cli_lines, CLI_DELIM, &saveptr);
  400958:	4c0a      	ldr	r4, [pc, #40]	; (400984 <cli_tick+0x40>)
  40095a:	aa01      	add	r2, sp, #4
  40095c:	4621      	mov	r1, r4
  40095e:	480a      	ldr	r0, [pc, #40]	; (400988 <cli_tick+0x44>)
  400960:	f003 fe23 	bl	4045aa <strtok_r>
  400964:	4605      	mov	r5, r0
			parm = strtok_r(NULL, CLI_DELIM, &saveptr);
  400966:	aa01      	add	r2, sp, #4
  400968:	4621      	mov	r1, r4
  40096a:	2000      	movs	r0, #0
  40096c:	f003 fe1d 	bl	4045aa <strtok_r>

			// printf("cmd=%s\r\n", cmd);
			// printf("parm=%s\r\n", parm);

			if (parm != NULL)
  400970:	4601      	mov	r1, r0
  400972:	b110      	cbz	r0, 40097a <cli_tick+0x36>
				cli_handle_command(cmd, parm);
  400974:	4628      	mov	r0, r5
  400976:	f7ff fe2f 	bl	4005d8 <cli_handle_command>


			// reset cli_lines
			init_lines();
  40097a:	f7ff fe1d 	bl	4005b8 <init_lines>

		}
	}

}
  40097e:	b003      	add	sp, #12
  400980:	bd30      	pop	{r4, r5, pc}
  400982:	bf00      	nop
  400984:	00407f98 	.word	0x00407f98
  400988:	2000079c 	.word	0x2000079c

0040098c <write_register8>:
int16_t read_register16(uint8_t address, uint8_t reg);
uint8_t read_bytes(uint8_t address, uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t address, uint8_t reg, uint8_t value)
{
  40098c:	b500      	push	{lr}
  40098e:	b089      	sub	sp, #36	; 0x24
  400990:	f88d 2007 	strb.w	r2, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = address;
  400994:	f88d 001c 	strb.w	r0, [sp, #28]
    packet_tx.addr[0] = reg;
  400998:	f88d 100c 	strb.w	r1, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  40099c:	2301      	movs	r3, #1
  40099e:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  4009a0:	f10d 0207 	add.w	r2, sp, #7
  4009a4:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  4009a6:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  4009a8:	a903      	add	r1, sp, #12
  4009aa:	4804      	ldr	r0, [pc, #16]	; (4009bc <write_register8+0x30>)
  4009ac:	f001 f8f6 	bl	401b9c <twi_master_write>
    
    // if (status == TWI_SUCCESS) {
    //     puts("write_register: success\r\n");
    // }

    delay_ms(TWI_WAIT_TIME);
  4009b0:	4803      	ldr	r0, [pc, #12]	; (4009c0 <write_register8+0x34>)
  4009b2:	f007 fdb5 	bl	408520 <__portable_delay_cycles_veneer>
}
  4009b6:	b009      	add	sp, #36	; 0x24
  4009b8:	f85d fb04 	ldr.w	pc, [sp], #4
  4009bc:	40018000 	.word	0x40018000
  4009c0:	00014ed3 	.word	0x00014ed3

004009c4 <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t address, uint8_t reg)
{
  4009c4:	b510      	push	{r4, lr}
  4009c6:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  4009c8:	4b0e      	ldr	r3, [pc, #56]	; (400a04 <read_register8+0x40>)
  4009ca:	2200      	movs	r2, #0
  4009cc:	601a      	str	r2, [r3, #0]
  4009ce:	605a      	str	r2, [r3, #4]
  4009d0:	609a      	str	r2, [r3, #8]
  4009d2:	60da      	str	r2, [r3, #12]

    packet_rx.chip = address;
  4009d4:	f88d 0014 	strb.w	r0, [sp, #20]
    packet_rx.addr[0] = reg;
  4009d8:	f88d 1004 	strb.w	r1, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  4009dc:	2201      	movs	r2, #1
  4009de:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &mpu_buffer;
  4009e0:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  4009e2:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  4009e4:	a901      	add	r1, sp, #4
  4009e6:	4808      	ldr	r0, [pc, #32]	; (400a08 <read_register8+0x44>)
  4009e8:	f001 f870 	bl	401acc <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4009ec:	b910      	cbnz	r0, 4009f4 <read_register8+0x30>
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
  4009ee:	4b05      	ldr	r3, [pc, #20]	; (400a04 <read_register8+0x40>)
  4009f0:	781c      	ldrb	r4, [r3, #0]
  4009f2:	e000      	b.n	4009f6 <read_register8+0x32>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t address, uint8_t reg)
{
    uint8_t value = 0;
  4009f4:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  4009f6:	4805      	ldr	r0, [pc, #20]	; (400a0c <read_register8+0x48>)
  4009f8:	f007 fd92 	bl	408520 <__portable_delay_cycles_veneer>

    return value;
}
  4009fc:	4620      	mov	r0, r4
  4009fe:	b006      	add	sp, #24
  400a00:	bd10      	pop	{r4, pc}
  400a02:	bf00      	nop
  400a04:	20000418 	.word	0x20000418
  400a08:	40018000 	.word	0x40018000
  400a0c:	00014ed3 	.word	0x00014ed3

00400a10 <read_bytes>:

    return value;
}

uint8_t read_bytes(uint8_t address, uint8_t reg, int8_t length, uint8_t *data)
{
  400a10:	b530      	push	{r4, r5, lr}
  400a12:	b087      	sub	sp, #28
  400a14:	4615      	mov	r5, r2
    // uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  400a16:	4a0c      	ldr	r2, [pc, #48]	; (400a48 <read_bytes+0x38>)
  400a18:	2400      	movs	r4, #0
  400a1a:	6014      	str	r4, [r2, #0]
  400a1c:	6054      	str	r4, [r2, #4]
  400a1e:	6094      	str	r4, [r2, #8]
  400a20:	60d4      	str	r4, [r2, #12]

    packet_rx.chip = address;
  400a22:	f88d 0014 	strb.w	r0, [sp, #20]
    packet_rx.addr[0] = reg;
  400a26:	f88d 1004 	strb.w	r1, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  400a2a:	2201      	movs	r2, #1
  400a2c:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = data;
  400a2e:	9303      	str	r3, [sp, #12]
    packet_rx.length = length;
  400a30:	9504      	str	r5, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400a32:	a901      	add	r1, sp, #4
  400a34:	4805      	ldr	r0, [pc, #20]	; (400a4c <read_bytes+0x3c>)
  400a36:	f001 f849 	bl	401acc <twi_master_read>
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        // value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400a3a:	4805      	ldr	r0, [pc, #20]	; (400a50 <read_bytes+0x40>)
  400a3c:	f007 fd70 	bl	408520 <__portable_delay_cycles_veneer>

    return length;
}
  400a40:	b2e8      	uxtb	r0, r5
  400a42:	b007      	add	sp, #28
  400a44:	bd30      	pop	{r4, r5, pc}
  400a46:	bf00      	nop
  400a48:	20000418 	.word	0x20000418
  400a4c:	40018000 	.word	0x40018000
  400a50:	00014ed3 	.word	0x00014ed3

00400a54 <write_register_bit>:


void write_register_bit(uint8_t address, uint8_t reg, uint8_t pos, bool state)
{
  400a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400a56:	4604      	mov	r4, r0
  400a58:	460d      	mov	r5, r1
  400a5a:	4616      	mov	r6, r2
  400a5c:	461f      	mov	r7, r3
    uint8_t value;
    value = read_register8(address, reg);
  400a5e:	f7ff ffb1 	bl	4009c4 <read_register8>

    if (state) {
  400a62:	b127      	cbz	r7, 400a6e <write_register_bit+0x1a>
        value |= (1 << pos);
  400a64:	2201      	movs	r2, #1
  400a66:	40b2      	lsls	r2, r6
  400a68:	4302      	orrs	r2, r0
  400a6a:	b2d2      	uxtb	r2, r2
  400a6c:	e004      	b.n	400a78 <write_register_bit+0x24>
    } else {
        value &= ~(1 << pos);
  400a6e:	2201      	movs	r2, #1
  400a70:	40b2      	lsls	r2, r6
  400a72:	ea20 0202 	bic.w	r2, r0, r2
  400a76:	b2d2      	uxtb	r2, r2
    }

    write_register8(address, reg, value);
  400a78:	4629      	mov	r1, r5
  400a7a:	4620      	mov	r0, r4
  400a7c:	f7ff ff86 	bl	40098c <write_register8>
  400a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a82:	bf00      	nop

00400a84 <read_register_bit>:
}

bool read_register_bit(uint8_t address, uint8_t reg, uint8_t pos)
{
  400a84:	b510      	push	{r4, lr}
  400a86:	4614      	mov	r4, r2
    uint8_t value;
    value = read_register8(address, reg);
  400a88:	f7ff ff9c 	bl	4009c4 <read_register8>
    return ((value >> pos) & 1);
  400a8c:	4120      	asrs	r0, r4
}
  400a8e:	f000 0001 	and.w	r0, r0, #1
  400a92:	bd10      	pop	{r4, pc}

00400a94 <mpu_init>:

bool mpu_init(void)
{
  400a94:	b500      	push	{lr}
  400a96:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  400a98:	4b0d      	ldr	r3, [pc, #52]	; (400ad0 <mpu_init+0x3c>)
  400a9a:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  400a9c:	4b0d      	ldr	r3, [pc, #52]	; (400ad4 <mpu_init+0x40>)
  400a9e:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  400aa0:	a901      	add	r1, sp, #4
  400aa2:	480d      	ldr	r0, [pc, #52]	; (400ad8 <mpu_init+0x44>)
  400aa4:	f000 ffe2 	bl	401a6c <twi_master_init>
  400aa8:	b138      	cbz	r0, 400aba <mpu_init+0x26>
        
        puts("twi_master_init: failed\r\n");
  400aaa:	480c      	ldr	r0, [pc, #48]	; (400adc <mpu_init+0x48>)
  400aac:	f002 fe54 	bl	403758 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400ab0:	480b      	ldr	r0, [pc, #44]	; (400ae0 <mpu_init+0x4c>)
  400ab2:	f007 fd35 	bl	408520 <__portable_delay_cycles_veneer>
        return false;
  400ab6:	2000      	movs	r0, #0
  400ab8:	e006      	b.n	400ac8 <mpu_init+0x34>
        
    } else {
        puts("twi_master_init: success\r\n");
  400aba:	480a      	ldr	r0, [pc, #40]	; (400ae4 <mpu_init+0x50>)
  400abc:	f002 fe4c 	bl	403758 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400ac0:	4807      	ldr	r0, [pc, #28]	; (400ae0 <mpu_init+0x4c>)
  400ac2:	f007 fd2d 	bl	408520 <__portable_delay_cycles_veneer>
        return true;
  400ac6:	2001      	movs	r0, #1
    }
    
}
  400ac8:	b005      	add	sp, #20
  400aca:	f85d fb04 	ldr.w	pc, [sp], #4
  400ace:	bf00      	nop
  400ad0:	07270e00 	.word	0x07270e00
  400ad4:	00061a80 	.word	0x00061a80
  400ad8:	40018000 	.word	0x40018000
  400adc:	00407f9c 	.word	0x00407f9c
  400ae0:	00014ed3 	.word	0x00014ed3
  400ae4:	00407fb8 	.word	0x00407fb8

00400ae8 <mpu_probe>:

bool mpu_probe(void)
{
  400ae8:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  400aea:	2168      	movs	r1, #104	; 0x68
  400aec:	4809      	ldr	r0, [pc, #36]	; (400b14 <mpu_probe+0x2c>)
  400aee:	f001 f897 	bl	401c20 <twi_probe>
  400af2:	b138      	cbz	r0, 400b04 <mpu_probe+0x1c>
        puts("twi_probe: failed\r\n");
  400af4:	4808      	ldr	r0, [pc, #32]	; (400b18 <mpu_probe+0x30>)
  400af6:	f002 fe2f 	bl	403758 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400afa:	4808      	ldr	r0, [pc, #32]	; (400b1c <mpu_probe+0x34>)
  400afc:	f007 fd10 	bl	408520 <__portable_delay_cycles_veneer>
        return false;
  400b00:	2000      	movs	r0, #0
  400b02:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  400b04:	4806      	ldr	r0, [pc, #24]	; (400b20 <mpu_probe+0x38>)
  400b06:	f002 fe27 	bl	403758 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400b0a:	4804      	ldr	r0, [pc, #16]	; (400b1c <mpu_probe+0x34>)
  400b0c:	f007 fd08 	bl	408520 <__portable_delay_cycles_veneer>
        return true;
  400b10:	2001      	movs	r0, #1
    }
}
  400b12:	bd08      	pop	{r3, pc}
  400b14:	40018000 	.word	0x40018000
  400b18:	00407fd4 	.word	0x00407fd4
  400b1c:	00014ed3 	.word	0x00014ed3
  400b20:	00407fe8 	.word	0x00407fe8

00400b24 <mpu_who_am_i>:

    return true;
}

uint8_t mpu_who_am_i(void)
{
  400b24:	b508      	push	{r3, lr}
    uint8_t value = read_register8(IMU_ADDRESS, MPU6050_RA_WHO_AM_I);
  400b26:	2175      	movs	r1, #117	; 0x75
  400b28:	2068      	movs	r0, #104	; 0x68
  400b2a:	f7ff ff4b 	bl	4009c4 <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  400b2e:	bd08      	pop	{r3, pc}

00400b30 <mpu_set_clock_source>:
    T = read_register16(IMU_ADDRESS, MPU6050_RA_TEMP_OUT_H);
    return T;
}

void mpu_set_clock_source(uint8_t source)
{
  400b30:	b510      	push	{r4, lr}
  400b32:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1);
  400b34:	216b      	movs	r1, #107	; 0x6b
  400b36:	2068      	movs	r0, #104	; 0x68
  400b38:	f7ff ff44 	bl	4009c4 <read_register8>
    value &= 0b11111000; // mask
  400b3c:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
    value |= source;

    write_register8(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1, value);
  400b40:	4322      	orrs	r2, r4
  400b42:	216b      	movs	r1, #107	; 0x6b
  400b44:	2068      	movs	r0, #104	; 0x68
  400b46:	f7ff ff21 	bl	40098c <write_register8>
  400b4a:	bd10      	pop	{r4, pc}

00400b4c <mpu_get_clock_source>:
}

uint8_t mpu_get_clock_source(void)
{
  400b4c:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1);
  400b4e:	216b      	movs	r1, #107	; 0x6b
  400b50:	2068      	movs	r0, #104	; 0x68
  400b52:	f7ff ff37 	bl	4009c4 <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  400b56:	f000 0007 	and.w	r0, r0, #7
  400b5a:	bd08      	pop	{r3, pc}

00400b5c <mpu_set_gyro_scale>:

void mpu_set_gyro_scale(uint8_t scale)
{
  400b5c:	b510      	push	{r4, lr}
  400b5e:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  400b60:	2803      	cmp	r0, #3
  400b62:	d812      	bhi.n	400b8a <mpu_set_gyro_scale+0x2e>
  400b64:	e8df f000 	tbb	[pc, r0]
  400b68:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  400b6c:	4a0e      	ldr	r2, [pc, #56]	; (400ba8 <mpu_set_gyro_scale+0x4c>)
  400b6e:	4b0f      	ldr	r3, [pc, #60]	; (400bac <mpu_set_gyro_scale+0x50>)
  400b70:	601a      	str	r2, [r3, #0]
            break;
  400b72:	e00a      	b.n	400b8a <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  400b74:	4a0e      	ldr	r2, [pc, #56]	; (400bb0 <mpu_set_gyro_scale+0x54>)
  400b76:	4b0d      	ldr	r3, [pc, #52]	; (400bac <mpu_set_gyro_scale+0x50>)
  400b78:	601a      	str	r2, [r3, #0]
            break;
  400b7a:	e006      	b.n	400b8a <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  400b7c:	4a0d      	ldr	r2, [pc, #52]	; (400bb4 <mpu_set_gyro_scale+0x58>)
  400b7e:	4b0b      	ldr	r3, [pc, #44]	; (400bac <mpu_set_gyro_scale+0x50>)
  400b80:	601a      	str	r2, [r3, #0]
            break;
  400b82:	e002      	b.n	400b8a <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  400b84:	4a0c      	ldr	r2, [pc, #48]	; (400bb8 <mpu_set_gyro_scale+0x5c>)
  400b86:	4b09      	ldr	r3, [pc, #36]	; (400bac <mpu_set_gyro_scale+0x50>)
  400b88:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(IMU_ADDRESS, MPU6050_RA_GYRO_CONFIG);
  400b8a:	211b      	movs	r1, #27
  400b8c:	2068      	movs	r0, #104	; 0x68
  400b8e:	f7ff ff19 	bl	4009c4 <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  400b92:	f020 0018 	bic.w	r0, r0, #24
  400b96:	ea40 02c4 	orr.w	r2, r0, r4, lsl #3

    write_register8(IMU_ADDRESS, MPU6050_RA_GYRO_CONFIG, value);
  400b9a:	b2d2      	uxtb	r2, r2
  400b9c:	211b      	movs	r1, #27
  400b9e:	2068      	movs	r0, #104	; 0x68
  400ba0:	f7ff fef4 	bl	40098c <write_register8>
  400ba4:	bd10      	pop	{r4, pc}
  400ba6:	bf00      	nop
  400ba8:	3bfa1e3f 	.word	0x3bfa1e3f
  400bac:	20000438 	.word	0x20000438
  400bb0:	3c7a2270 	.word	0x3c7a2270
  400bb4:	3cf9bfdf 	.word	0x3cf9bfdf
  400bb8:	3d79c0ec 	.word	0x3d79c0ec

00400bbc <mpu_get_gyro_scale>:
}

uint8_t mpu_get_gyro_scale(void)
{
  400bbc:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(IMU_ADDRESS, MPU6050_RA_GYRO_CONFIG);
  400bbe:	211b      	movs	r1, #27
  400bc0:	2068      	movs	r0, #104	; 0x68
  400bc2:	f7ff feff 	bl	4009c4 <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  400bc6:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  400bca:	bd08      	pop	{r3, pc}

00400bcc <mpu_set_accel_range>:

void mpu_set_accel_range(uint8_t range)
{
  400bcc:	b510      	push	{r4, lr}
  400bce:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  400bd0:	2803      	cmp	r0, #3
  400bd2:	d812      	bhi.n	400bfa <mpu_set_accel_range+0x2e>
  400bd4:	e8df f000 	tbb	[pc, r0]
  400bd8:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  400bdc:	4a0e      	ldr	r2, [pc, #56]	; (400c18 <mpu_set_accel_range+0x4c>)
  400bde:	4b0f      	ldr	r3, [pc, #60]	; (400c1c <mpu_set_accel_range+0x50>)
  400be0:	601a      	str	r2, [r3, #0]
            break;
  400be2:	e00a      	b.n	400bfa <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  400be4:	4a0e      	ldr	r2, [pc, #56]	; (400c20 <mpu_set_accel_range+0x54>)
  400be6:	4b0d      	ldr	r3, [pc, #52]	; (400c1c <mpu_set_accel_range+0x50>)
  400be8:	601a      	str	r2, [r3, #0]
            break;   
  400bea:	e006      	b.n	400bfa <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  400bec:	4a0d      	ldr	r2, [pc, #52]	; (400c24 <mpu_set_accel_range+0x58>)
  400bee:	4b0b      	ldr	r3, [pc, #44]	; (400c1c <mpu_set_accel_range+0x50>)
  400bf0:	601a      	str	r2, [r3, #0]
            break;   
  400bf2:	e002      	b.n	400bfa <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  400bf4:	4a0c      	ldr	r2, [pc, #48]	; (400c28 <mpu_set_accel_range+0x5c>)
  400bf6:	4b09      	ldr	r3, [pc, #36]	; (400c1c <mpu_set_accel_range+0x50>)
  400bf8:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(IMU_ADDRESS, MPU6050_RA_ACCEL_CONFIG);
  400bfa:	211c      	movs	r1, #28
  400bfc:	2068      	movs	r0, #104	; 0x68
  400bfe:	f7ff fee1 	bl	4009c4 <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  400c02:	f020 0018 	bic.w	r0, r0, #24
  400c06:	ea40 02c4 	orr.w	r2, r0, r4, lsl #3

    write_register8(IMU_ADDRESS, MPU6050_RA_ACCEL_CONFIG, value);
  400c0a:	b2d2      	uxtb	r2, r2
  400c0c:	211c      	movs	r1, #28
  400c0e:	2068      	movs	r0, #104	; 0x68
  400c10:	f7ff febc 	bl	40098c <write_register8>
  400c14:	bd10      	pop	{r4, pc}
  400c16:	bf00      	nop
  400c18:	387fda40 	.word	0x387fda40
  400c1c:	20000428 	.word	0x20000428
  400c20:	38ffda40 	.word	0x38ffda40
  400c24:	397fda40 	.word	0x397fda40
  400c28:	39fff518 	.word	0x39fff518

00400c2c <mpu_set_sleep_enabled>:

    return (uint8_t)value;
}

void mpu_set_sleep_enabled(bool state)
{
  400c2c:	b508      	push	{r3, lr}
    write_register_bit(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1, 6, state);
  400c2e:	4603      	mov	r3, r0
  400c30:	2206      	movs	r2, #6
  400c32:	216b      	movs	r1, #107	; 0x6b
  400c34:	2068      	movs	r0, #104	; 0x68
  400c36:	f7ff ff0d 	bl	400a54 <write_register_bit>
  400c3a:	bd08      	pop	{r3, pc}

00400c3c <mpu_begin>:
        return true;
    }
}

bool mpu_begin(uint8_t scale, uint8_t range)
{
  400c3c:	b538      	push	{r3, r4, r5, lr}
  400c3e:	4605      	mov	r5, r0
  400c40:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  400c42:	4a11      	ldr	r2, [pc, #68]	; (400c88 <mpu_begin+0x4c>)
  400c44:	2300      	movs	r3, #0
  400c46:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  400c48:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  400c4a:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  400c4c:	2100      	movs	r1, #0
  400c4e:	4a0f      	ldr	r2, [pc, #60]	; (400c8c <mpu_begin+0x50>)
  400c50:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  400c52:	4a0f      	ldr	r2, [pc, #60]	; (400c90 <mpu_begin+0x54>)
  400c54:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  400c56:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  400c58:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  400c5a:	4a0e      	ldr	r2, [pc, #56]	; (400c94 <mpu_begin+0x58>)
  400c5c:	6013      	str	r3, [r2, #0]

    if (mpu_who_am_i() != 0x68) {
  400c5e:	f7ff ff61 	bl	400b24 <mpu_who_am_i>
  400c62:	2868      	cmp	r0, #104	; 0x68
  400c64:	d10d      	bne.n	400c82 <mpu_begin+0x46>
        return false;
    }

    // Set clock source
    mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  400c66:	2001      	movs	r0, #1
  400c68:	f7ff ff62 	bl	400b30 <mpu_set_clock_source>

    // Set scale and range
    mpu_set_gyro_scale(scale);
  400c6c:	4628      	mov	r0, r5
  400c6e:	f7ff ff75 	bl	400b5c <mpu_set_gyro_scale>
    mpu_set_accel_range(range);
  400c72:	4620      	mov	r0, r4
  400c74:	f7ff ffaa 	bl	400bcc <mpu_set_accel_range>

    // Disable sleep mode
    mpu_set_sleep_enabled(false);
  400c78:	2000      	movs	r0, #0
  400c7a:	f7ff ffd7 	bl	400c2c <mpu_set_sleep_enabled>

    return true;
  400c7e:	2001      	movs	r0, #1
  400c80:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (mpu_who_am_i() != 0x68) {
        return false;
  400c82:	2000      	movs	r0, #0

    // Disable sleep mode
    mpu_set_sleep_enabled(false);

    return true;
}
  400c84:	bd38      	pop	{r3, r4, r5, pc}
  400c86:	bf00      	nop
  400c88:	200006d0 	.word	0x200006d0
  400c8c:	2000043c 	.word	0x2000043c
  400c90:	20000684 	.word	0x20000684
  400c94:	20000444 	.word	0x20000444

00400c98 <mpu_get_sleep_enabled>:
{
    write_register_bit(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1, 6, state);
}

bool mpu_get_sleep_enabled(void)
{
  400c98:	b508      	push	{r3, lr}
    return read_register_bit(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1, 6);
  400c9a:	2206      	movs	r2, #6
  400c9c:	216b      	movs	r1, #107	; 0x6b
  400c9e:	2068      	movs	r0, #104	; 0x68
  400ca0:	f7ff fef0 	bl	400a84 <read_register_bit>
}
  400ca4:	bd08      	pop	{r3, pc}
  400ca6:	bf00      	nop

00400ca8 <mpu_read_gyro>:
    a->is_pos_activity_on_z = ((data >> 2) & 1);

}

void mpu_read_gyro(int16_t *x, int16_t *y, int16_t *z)
{
  400ca8:	b570      	push	{r4, r5, r6, lr}
  400caa:	b082      	sub	sp, #8
  400cac:	4606      	mov	r6, r0
  400cae:	460d      	mov	r5, r1
  400cb0:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400cb2:	2300      	movs	r3, #0
  400cb4:	9300      	str	r3, [sp, #0]
  400cb6:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(IMU_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 6, i2c_buffer);
  400cba:	466b      	mov	r3, sp
  400cbc:	2206      	movs	r2, #6
  400cbe:	2143      	movs	r1, #67	; 0x43
  400cc0:	2068      	movs	r0, #104	; 0x68
  400cc2:	f7ff fea5 	bl	400a10 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400cc6:	f89d 2000 	ldrb.w	r2, [sp]
  400cca:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400cce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400cd2:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400cd4:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400cd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400ce0:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400ce2:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400ce6:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400cea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400cee:	8023      	strh	r3, [r4, #0]

}
  400cf0:	b002      	add	sp, #8
  400cf2:	bd70      	pop	{r4, r5, r6, pc}

00400cf4 <mpu_read_raw_gyro>:

void mpu_read_raw_gyro(void)
{
  400cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_gyro(&gx, &gy, &gz);
  400cf6:	4d0c      	ldr	r5, [pc, #48]	; (400d28 <mpu_read_raw_gyro+0x34>)
  400cf8:	4e0c      	ldr	r6, [pc, #48]	; (400d2c <mpu_read_raw_gyro+0x38>)
  400cfa:	4f0d      	ldr	r7, [pc, #52]	; (400d30 <mpu_read_raw_gyro+0x3c>)
  400cfc:	462a      	mov	r2, r5
  400cfe:	4631      	mov	r1, r6
  400d00:	4638      	mov	r0, r7
  400d02:	f7ff ffd1 	bl	400ca8 <mpu_read_gyro>
    raw_gyro.x_axis = (float)gx;
  400d06:	4c0b      	ldr	r4, [pc, #44]	; (400d34 <mpu_read_raw_gyro+0x40>)
  400d08:	f9b7 0000 	ldrsh.w	r0, [r7]
  400d0c:	f006 fdda 	bl	4078c4 <__aeabi_i2f>
  400d10:	6020      	str	r0, [r4, #0]
    raw_gyro.y_axis = (float)gy;
  400d12:	f9b6 0000 	ldrsh.w	r0, [r6]
  400d16:	f006 fdd5 	bl	4078c4 <__aeabi_i2f>
  400d1a:	6060      	str	r0, [r4, #4]
    raw_gyro.z_axis = (float)gz;
  400d1c:	f9b5 0000 	ldrsh.w	r0, [r5]
  400d20:	f006 fdd0 	bl	4078c4 <__aeabi_i2f>
  400d24:	60a0      	str	r0, [r4, #8]
  400d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d28:	200006c0 	.word	0x200006c0
  400d2c:	2000051c 	.word	0x2000051c
  400d30:	200006dc 	.word	0x200006dc
  400d34:	20000510 	.word	0x20000510

00400d38 <mpu_read_normalized_gyro>:

}

t_fp_vector mpu_read_normalized_gyro(void)
{
  400d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d3c:	4604      	mov	r4, r0
    mpu_read_raw_gyro();
  400d3e:	f7ff ffd9 	bl	400cf4 <mpu_read_raw_gyro>

    if (use_calibrate) {
  400d42:	4b3d      	ldr	r3, [pc, #244]	; (400e38 <mpu_read_normalized_gyro+0x100>)
  400d44:	781b      	ldrb	r3, [r3, #0]
  400d46:	b30b      	cbz	r3, 400d8c <mpu_read_normalized_gyro+0x54>
        norm_gyro.x_axis = (raw_gyro.x_axis - delta_gyro.x_axis) * dps_per_digit;
  400d48:	4b3c      	ldr	r3, [pc, #240]	; (400e3c <mpu_read_normalized_gyro+0x104>)
  400d4a:	681e      	ldr	r6, [r3, #0]
  400d4c:	4d3c      	ldr	r5, [pc, #240]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400d4e:	4f3d      	ldr	r7, [pc, #244]	; (400e44 <mpu_read_normalized_gyro+0x10c>)
  400d50:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 400e50 <mpu_read_normalized_gyro+0x118>
  400d54:	f8d8 1000 	ldr.w	r1, [r8]
  400d58:	6838      	ldr	r0, [r7, #0]
  400d5a:	f006 fcfd 	bl	407758 <__aeabi_fsub>
  400d5e:	4631      	mov	r1, r6
  400d60:	f006 fe04 	bl	40796c <__aeabi_fmul>
  400d64:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = (raw_gyro.y_axis - delta_gyro.y_axis) * dps_per_digit;
  400d66:	f8d8 1004 	ldr.w	r1, [r8, #4]
  400d6a:	6878      	ldr	r0, [r7, #4]
  400d6c:	f006 fcf4 	bl	407758 <__aeabi_fsub>
  400d70:	4631      	mov	r1, r6
  400d72:	f006 fdfb 	bl	40796c <__aeabi_fmul>
  400d76:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = (raw_gyro.z_axis - delta_gyro.z_axis) * dps_per_digit;
  400d78:	f8d8 1008 	ldr.w	r1, [r8, #8]
  400d7c:	68b8      	ldr	r0, [r7, #8]
  400d7e:	f006 fceb 	bl	407758 <__aeabi_fsub>
  400d82:	4631      	mov	r1, r6
  400d84:	f006 fdf2 	bl	40796c <__aeabi_fmul>
  400d88:	60a8      	str	r0, [r5, #8]
  400d8a:	e012      	b.n	400db2 <mpu_read_normalized_gyro+0x7a>
    } else {
        norm_gyro.x_axis = raw_gyro.x_axis  * dps_per_digit;
  400d8c:	4b2b      	ldr	r3, [pc, #172]	; (400e3c <mpu_read_normalized_gyro+0x104>)
  400d8e:	681f      	ldr	r7, [r3, #0]
  400d90:	4d2b      	ldr	r5, [pc, #172]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400d92:	4e2c      	ldr	r6, [pc, #176]	; (400e44 <mpu_read_normalized_gyro+0x10c>)
  400d94:	4639      	mov	r1, r7
  400d96:	6830      	ldr	r0, [r6, #0]
  400d98:	f006 fde8 	bl	40796c <__aeabi_fmul>
  400d9c:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = raw_gyro.y_axis  * dps_per_digit;
  400d9e:	4639      	mov	r1, r7
  400da0:	6870      	ldr	r0, [r6, #4]
  400da2:	f006 fde3 	bl	40796c <__aeabi_fmul>
  400da6:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = raw_gyro.z_axis  * dps_per_digit;
  400da8:	4639      	mov	r1, r7
  400daa:	68b0      	ldr	r0, [r6, #8]
  400dac:	f006 fdde 	bl	40796c <__aeabi_fmul>
  400db0:	60a8      	str	r0, [r5, #8]
    }

    if (actual_threshold) {
  400db2:	2100      	movs	r1, #0
  400db4:	4b24      	ldr	r3, [pc, #144]	; (400e48 <mpu_read_normalized_gyro+0x110>)
  400db6:	6818      	ldr	r0, [r3, #0]
  400db8:	f006 ff6c 	bl	407c94 <__aeabi_fcmpeq>
  400dbc:	2800      	cmp	r0, #0
  400dbe:	d132      	bne.n	400e26 <mpu_read_normalized_gyro+0xee>
        if (abs(norm_gyro.x_axis) < threshold_gyro.x_axis) norm_gyro.x_axis = 0;
  400dc0:	4b1f      	ldr	r3, [pc, #124]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400dc2:	6818      	ldr	r0, [r3, #0]
  400dc4:	f006 ff98 	bl	407cf8 <__aeabi_f2iz>
  400dc8:	2800      	cmp	r0, #0
  400dca:	bfb8      	it	lt
  400dcc:	4240      	neglt	r0, r0
  400dce:	f006 fd79 	bl	4078c4 <__aeabi_i2f>
  400dd2:	4b1e      	ldr	r3, [pc, #120]	; (400e4c <mpu_read_normalized_gyro+0x114>)
  400dd4:	6819      	ldr	r1, [r3, #0]
  400dd6:	f006 ff67 	bl	407ca8 <__aeabi_fcmplt>
  400dda:	b110      	cbz	r0, 400de2 <mpu_read_normalized_gyro+0xaa>
  400ddc:	2200      	movs	r2, #0
  400dde:	4b18      	ldr	r3, [pc, #96]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400de0:	601a      	str	r2, [r3, #0]
        if (abs(norm_gyro.y_axis) < threshold_gyro.y_axis) norm_gyro.y_axis = 0;
  400de2:	4b17      	ldr	r3, [pc, #92]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400de4:	6858      	ldr	r0, [r3, #4]
  400de6:	f006 ff87 	bl	407cf8 <__aeabi_f2iz>
  400dea:	2800      	cmp	r0, #0
  400dec:	bfb8      	it	lt
  400dee:	4240      	neglt	r0, r0
  400df0:	f006 fd68 	bl	4078c4 <__aeabi_i2f>
  400df4:	4b15      	ldr	r3, [pc, #84]	; (400e4c <mpu_read_normalized_gyro+0x114>)
  400df6:	6859      	ldr	r1, [r3, #4]
  400df8:	f006 ff56 	bl	407ca8 <__aeabi_fcmplt>
  400dfc:	b110      	cbz	r0, 400e04 <mpu_read_normalized_gyro+0xcc>
  400dfe:	2200      	movs	r2, #0
  400e00:	4b0f      	ldr	r3, [pc, #60]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400e02:	605a      	str	r2, [r3, #4]
        if (abs(norm_gyro.z_axis) < threshold_gyro.z_axis) norm_gyro.z_axis = 0;
  400e04:	4b0e      	ldr	r3, [pc, #56]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400e06:	6898      	ldr	r0, [r3, #8]
  400e08:	f006 ff76 	bl	407cf8 <__aeabi_f2iz>
  400e0c:	2800      	cmp	r0, #0
  400e0e:	bfb8      	it	lt
  400e10:	4240      	neglt	r0, r0
  400e12:	f006 fd57 	bl	4078c4 <__aeabi_i2f>
  400e16:	4b0d      	ldr	r3, [pc, #52]	; (400e4c <mpu_read_normalized_gyro+0x114>)
  400e18:	6899      	ldr	r1, [r3, #8]
  400e1a:	f006 ff45 	bl	407ca8 <__aeabi_fcmplt>
  400e1e:	b110      	cbz	r0, 400e26 <mpu_read_normalized_gyro+0xee>
  400e20:	2200      	movs	r2, #0
  400e22:	4b07      	ldr	r3, [pc, #28]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400e24:	609a      	str	r2, [r3, #8]
    }

    return norm_gyro;
  400e26:	4b06      	ldr	r3, [pc, #24]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400e28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400e2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
  400e30:	4620      	mov	r0, r4
  400e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e36:	bf00      	nop
  400e38:	2000043c 	.word	0x2000043c
  400e3c:	20000438 	.word	0x20000438
  400e40:	200006e4 	.word	0x200006e4
  400e44:	20000510 	.word	0x20000510
  400e48:	20000444 	.word	0x20000444
  400e4c:	20000684 	.word	0x20000684
  400e50:	200006d0 	.word	0x200006d0

00400e54 <mpu_read_acceleration>:



void mpu_read_acceleration(int16_t *x, int16_t *y, int16_t *z)
{
  400e54:	b570      	push	{r4, r5, r6, lr}
  400e56:	b082      	sub	sp, #8
  400e58:	4606      	mov	r6, r0
  400e5a:	460d      	mov	r5, r1
  400e5c:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400e5e:	2300      	movs	r3, #0
  400e60:	9300      	str	r3, [sp, #0]
  400e62:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(IMU_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 6, i2c_buffer);
  400e66:	466b      	mov	r3, sp
  400e68:	2206      	movs	r2, #6
  400e6a:	213b      	movs	r1, #59	; 0x3b
  400e6c:	2068      	movs	r0, #104	; 0x68
  400e6e:	f7ff fdcf 	bl	400a10 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400e72:	f89d 2000 	ldrb.w	r2, [sp]
  400e76:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400e7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e7e:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400e80:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400e84:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400e88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e8c:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400e8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400e92:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400e96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e9a:	8023      	strh	r3, [r4, #0]
}
  400e9c:	b002      	add	sp, #8
  400e9e:	bd70      	pop	{r4, r5, r6, pc}

00400ea0 <mpu_read_raw_acceleration>:

void mpu_read_raw_acceleration(void)
{
  400ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_acceleration(&ax, &ay, &az);
  400ea2:	4d0c      	ldr	r5, [pc, #48]	; (400ed4 <mpu_read_raw_acceleration+0x34>)
  400ea4:	4e0c      	ldr	r6, [pc, #48]	; (400ed8 <mpu_read_raw_acceleration+0x38>)
  400ea6:	4f0d      	ldr	r7, [pc, #52]	; (400edc <mpu_read_raw_acceleration+0x3c>)
  400ea8:	462a      	mov	r2, r5
  400eaa:	4631      	mov	r1, r6
  400eac:	4638      	mov	r0, r7
  400eae:	f7ff ffd1 	bl	400e54 <mpu_read_acceleration>
    raw_accel.x_axis = (float)ax;
  400eb2:	4c0b      	ldr	r4, [pc, #44]	; (400ee0 <mpu_read_raw_acceleration+0x40>)
  400eb4:	f9b7 0000 	ldrsh.w	r0, [r7]
  400eb8:	f006 fd04 	bl	4078c4 <__aeabi_i2f>
  400ebc:	6020      	str	r0, [r4, #0]
    raw_accel.y_axis = (float)ay;
  400ebe:	f9b6 0000 	ldrsh.w	r0, [r6]
  400ec2:	f006 fcff 	bl	4078c4 <__aeabi_i2f>
  400ec6:	6060      	str	r0, [r4, #4]
    raw_accel.z_axis = (float)az;
  400ec8:	f9b5 0000 	ldrsh.w	r0, [r5]
  400ecc:	f006 fcfa 	bl	4078c4 <__aeabi_i2f>
  400ed0:	60a0      	str	r0, [r4, #8]
  400ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ed4:	2000051e 	.word	0x2000051e
  400ed8:	200006de 	.word	0x200006de
  400edc:	20000530 	.word	0x20000530
  400ee0:	200006c4 	.word	0x200006c4

00400ee4 <mpu_read_normalized_acceleration>:
}

void mpu_read_normalized_acceleration(void)
{
  400ee4:	b570      	push	{r4, r5, r6, lr}
    mpu_read_raw_acceleration();
  400ee6:	f7ff ffdb 	bl	400ea0 <mpu_read_raw_acceleration>

    norm_accel.x_axis = raw_accel.x_axis * range_per_digit * 9.80665f;
  400eea:	4b0e      	ldr	r3, [pc, #56]	; (400f24 <mpu_read_normalized_acceleration+0x40>)
  400eec:	681d      	ldr	r5, [r3, #0]
  400eee:	4c0e      	ldr	r4, [pc, #56]	; (400f28 <mpu_read_normalized_acceleration+0x44>)
  400ef0:	4e0e      	ldr	r6, [pc, #56]	; (400f2c <mpu_read_normalized_acceleration+0x48>)
  400ef2:	6831      	ldr	r1, [r6, #0]
  400ef4:	4628      	mov	r0, r5
  400ef6:	f006 fd39 	bl	40796c <__aeabi_fmul>
  400efa:	490d      	ldr	r1, [pc, #52]	; (400f30 <mpu_read_normalized_acceleration+0x4c>)
  400efc:	f006 fd36 	bl	40796c <__aeabi_fmul>
  400f00:	6020      	str	r0, [r4, #0]
    norm_accel.y_axis = raw_accel.y_axis * range_per_digit * 9.80665f;
  400f02:	6871      	ldr	r1, [r6, #4]
  400f04:	4628      	mov	r0, r5
  400f06:	f006 fd31 	bl	40796c <__aeabi_fmul>
  400f0a:	4909      	ldr	r1, [pc, #36]	; (400f30 <mpu_read_normalized_acceleration+0x4c>)
  400f0c:	f006 fd2e 	bl	40796c <__aeabi_fmul>
  400f10:	6060      	str	r0, [r4, #4]
    norm_accel.z_axis = raw_accel.z_axis * range_per_digit * 9.80665f;
  400f12:	68b1      	ldr	r1, [r6, #8]
  400f14:	4628      	mov	r0, r5
  400f16:	f006 fd29 	bl	40796c <__aeabi_fmul>
  400f1a:	4905      	ldr	r1, [pc, #20]	; (400f30 <mpu_read_normalized_acceleration+0x4c>)
  400f1c:	f006 fd26 	bl	40796c <__aeabi_fmul>
  400f20:	60a0      	str	r0, [r4, #8]
  400f22:	bd70      	pop	{r4, r5, r6, pc}
  400f24:	20000428 	.word	0x20000428
  400f28:	200006a8 	.word	0x200006a8
  400f2c:	200006c4 	.word	0x200006c4
  400f30:	411ce80a 	.word	0x411ce80a

00400f34 <mpu_log_settings>:
    norm_mag.z_axis = raw_mag.z_axis * 10/1229/4096 +270;    

}

void mpu_log_settings(void)
{
  400f34:	b508      	push	{r3, lr}
    printf("Device: 0x%1x\r\n", mpu_who_am_i());
  400f36:	f7ff fdf5 	bl	400b24 <mpu_who_am_i>
  400f3a:	4601      	mov	r1, r0
  400f3c:	482b      	ldr	r0, [pc, #172]	; (400fec <mpu_log_settings+0xb8>)
  400f3e:	f002 fb99 	bl	403674 <iprintf>
    printf("Sleep Mode: %s\r\n", mpu_get_sleep_enabled() ? "Enabled" : "Disabled");
  400f42:	f7ff fea9 	bl	400c98 <mpu_get_sleep_enabled>
  400f46:	492a      	ldr	r1, [pc, #168]	; (400ff0 <mpu_log_settings+0xbc>)
  400f48:	4a2a      	ldr	r2, [pc, #168]	; (400ff4 <mpu_log_settings+0xc0>)
  400f4a:	2800      	cmp	r0, #0
  400f4c:	bf18      	it	ne
  400f4e:	4611      	movne	r1, r2
  400f50:	4829      	ldr	r0, [pc, #164]	; (400ff8 <mpu_log_settings+0xc4>)
  400f52:	f002 fb8f 	bl	403674 <iprintf>
    printf("Clock Source: ");
  400f56:	4829      	ldr	r0, [pc, #164]	; (400ffc <mpu_log_settings+0xc8>)
  400f58:	f002 fb8c 	bl	403674 <iprintf>
    switch (mpu_get_clock_source()) {
  400f5c:	f7ff fdf6 	bl	400b4c <mpu_get_clock_source>
  400f60:	b110      	cbz	r0, 400f68 <mpu_log_settings+0x34>
  400f62:	2801      	cmp	r0, #1
  400f64:	d004      	beq.n	400f70 <mpu_log_settings+0x3c>
  400f66:	e006      	b.n	400f76 <mpu_log_settings+0x42>
        case MPU6050_CLOCK_INTERNAL:
        printf("Internal 8MHz oscillator\r\n");
  400f68:	4825      	ldr	r0, [pc, #148]	; (401000 <mpu_log_settings+0xcc>)
  400f6a:	f002 fb83 	bl	403674 <iprintf>
        break;
  400f6e:	e002      	b.n	400f76 <mpu_log_settings+0x42>
        case MPU6050_CLOCK_PLL_XGYRO:
        printf("PLL with X axis gyroscope reference\r\n");
  400f70:	4824      	ldr	r0, [pc, #144]	; (401004 <mpu_log_settings+0xd0>)
  400f72:	f002 fb7f 	bl	403674 <iprintf>
        break;
    }
    printf("Gyroscope: ");
  400f76:	4824      	ldr	r0, [pc, #144]	; (401008 <mpu_log_settings+0xd4>)
  400f78:	f002 fb7c 	bl	403674 <iprintf>
        switch (mpu_get_gyro_scale()) {
  400f7c:	f7ff fe1e 	bl	400bbc <mpu_get_gyro_scale>
  400f80:	2803      	cmp	r0, #3
  400f82:	d812      	bhi.n	400faa <mpu_log_settings+0x76>
  400f84:	e8df f000 	tbb	[pc, r0]
  400f88:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
        printf("250 dps\r\n");
  400f8c:	481f      	ldr	r0, [pc, #124]	; (40100c <mpu_log_settings+0xd8>)
  400f8e:	f002 fb71 	bl	403674 <iprintf>
        break;
  400f92:	e00a      	b.n	400faa <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_500:
        printf("500 dps\r\n");
  400f94:	481e      	ldr	r0, [pc, #120]	; (401010 <mpu_log_settings+0xdc>)
  400f96:	f002 fb6d 	bl	403674 <iprintf>
        break;
  400f9a:	e006      	b.n	400faa <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_1000:
        printf("1000 dps\r\n");
  400f9c:	481d      	ldr	r0, [pc, #116]	; (401014 <mpu_log_settings+0xe0>)
  400f9e:	f002 fb69 	bl	403674 <iprintf>
        break;
  400fa2:	e002      	b.n	400faa <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_2000:
        printf("2000 dps\r\n");
  400fa4:	481c      	ldr	r0, [pc, #112]	; (401018 <mpu_log_settings+0xe4>)
  400fa6:	f002 fb65 	bl	403674 <iprintf>
        break;
    }
    printf("use_calibrate: %d\r\n", use_calibrate);
  400faa:	4b1c      	ldr	r3, [pc, #112]	; (40101c <mpu_log_settings+0xe8>)
  400fac:	7819      	ldrb	r1, [r3, #0]
  400fae:	481c      	ldr	r0, [pc, #112]	; (401020 <mpu_log_settings+0xec>)
  400fb0:	f002 fb60 	bl	403674 <iprintf>
    printf("actual_threshold: %f\r\n", actual_threshold);
  400fb4:	4b1b      	ldr	r3, [pc, #108]	; (401024 <mpu_log_settings+0xf0>)
  400fb6:	6818      	ldr	r0, [r3, #0]
  400fb8:	f006 f82e 	bl	407018 <__aeabi_f2d>
  400fbc:	4602      	mov	r2, r0
  400fbe:	460b      	mov	r3, r1
  400fc0:	4819      	ldr	r0, [pc, #100]	; (401028 <mpu_log_settings+0xf4>)
  400fc2:	f002 fb57 	bl	403674 <iprintf>
    printf("dps_per_digit: %f\r\n", dps_per_digit);
  400fc6:	4b19      	ldr	r3, [pc, #100]	; (40102c <mpu_log_settings+0xf8>)
  400fc8:	6818      	ldr	r0, [r3, #0]
  400fca:	f006 f825 	bl	407018 <__aeabi_f2d>
  400fce:	4602      	mov	r2, r0
  400fd0:	460b      	mov	r3, r1
  400fd2:	4817      	ldr	r0, [pc, #92]	; (401030 <mpu_log_settings+0xfc>)
  400fd4:	f002 fb4e 	bl	403674 <iprintf>
    printf("range_per_digit: %f\r\n", range_per_digit);
  400fd8:	4b16      	ldr	r3, [pc, #88]	; (401034 <mpu_log_settings+0x100>)
  400fda:	6818      	ldr	r0, [r3, #0]
  400fdc:	f006 f81c 	bl	407018 <__aeabi_f2d>
  400fe0:	4602      	mov	r2, r0
  400fe2:	460b      	mov	r3, r1
  400fe4:	4814      	ldr	r0, [pc, #80]	; (401038 <mpu_log_settings+0x104>)
  400fe6:	f002 fb45 	bl	403674 <iprintf>
  400fea:	bd08      	pop	{r3, pc}
  400fec:	00408014 	.word	0x00408014
  400ff0:	00408008 	.word	0x00408008
  400ff4:	00408000 	.word	0x00408000
  400ff8:	00408024 	.word	0x00408024
  400ffc:	00408038 	.word	0x00408038
  401000:	00408048 	.word	0x00408048
  401004:	00408064 	.word	0x00408064
  401008:	0040808c 	.word	0x0040808c
  40100c:	00408098 	.word	0x00408098
  401010:	004080a4 	.word	0x004080a4
  401014:	004080b0 	.word	0x004080b0
  401018:	004080bc 	.word	0x004080bc
  40101c:	2000043c 	.word	0x2000043c
  401020:	004080c8 	.word	0x004080c8
  401024:	20000444 	.word	0x20000444
  401028:	004080dc 	.word	0x004080dc
  40102c:	20000438 	.word	0x20000438
  401030:	004080f4 	.word	0x004080f4
  401034:	20000428 	.word	0x20000428
  401038:	00408108 	.word	0x00408108

0040103c <mpu_set_threshold>:
{
	return actual_threshold;
}

void mpu_set_threshold(uint8_t multiple)
{
  40103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (multiple > 0) {
  40103e:	4604      	mov	r4, r0
  401040:	b1d8      	cbz	r0, 40107a <mpu_set_threshold+0x3e>
		if (!use_calibrate) {
  401042:	4b13      	ldr	r3, [pc, #76]	; (401090 <mpu_set_threshold+0x54>)
  401044:	781b      	ldrb	r3, [r3, #0]
  401046:	b913      	cbnz	r3, 40104e <mpu_set_threshold+0x12>
			mpu_calibrate_gyro(GYRO_SAMPLES);
  401048:	2032      	movs	r0, #50	; 0x32
  40104a:	f000 f829 	bl	4010a0 <mpu_calibrate_gyro>
		}

		threshold_gyro.x_axis = threshold.x_axis * multiple;
  40104e:	4620      	mov	r0, r4
  401050:	f006 fc38 	bl	4078c4 <__aeabi_i2f>
  401054:	4607      	mov	r7, r0
  401056:	4d0f      	ldr	r5, [pc, #60]	; (401094 <mpu_set_threshold+0x58>)
  401058:	4e0f      	ldr	r6, [pc, #60]	; (401098 <mpu_set_threshold+0x5c>)
  40105a:	4601      	mov	r1, r0
  40105c:	6830      	ldr	r0, [r6, #0]
  40105e:	f006 fc85 	bl	40796c <__aeabi_fmul>
  401062:	6028      	str	r0, [r5, #0]
		threshold_gyro.y_axis = threshold.y_axis * multiple;
  401064:	4639      	mov	r1, r7
  401066:	6870      	ldr	r0, [r6, #4]
  401068:	f006 fc80 	bl	40796c <__aeabi_fmul>
  40106c:	6068      	str	r0, [r5, #4]
		threshold_gyro.z_axis = threshold.z_axis * multiple;
  40106e:	4639      	mov	r1, r7
  401070:	68b0      	ldr	r0, [r6, #8]
  401072:	f006 fc7b 	bl	40796c <__aeabi_fmul>
  401076:	60a8      	str	r0, [r5, #8]
  401078:	e004      	b.n	401084 <mpu_set_threshold+0x48>
	} else {
		threshold_gyro.x_axis = 0;
  40107a:	4b06      	ldr	r3, [pc, #24]	; (401094 <mpu_set_threshold+0x58>)
  40107c:	2200      	movs	r2, #0
  40107e:	601a      	str	r2, [r3, #0]
		threshold_gyro.y_axis = 0;
  401080:	605a      	str	r2, [r3, #4]
		threshold_gyro.z_axis = 0;
  401082:	609a      	str	r2, [r3, #8]
	}

	actual_threshold = multiple;
  401084:	4620      	mov	r0, r4
  401086:	f006 fc19 	bl	4078bc <__aeabi_ui2f>
  40108a:	4b04      	ldr	r3, [pc, #16]	; (40109c <mpu_set_threshold+0x60>)
  40108c:	6018      	str	r0, [r3, #0]
  40108e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401090:	2000043c 	.word	0x2000043c
  401094:	20000684 	.word	0x20000684
  401098:	20000504 	.word	0x20000504
  40109c:	20000444 	.word	0x20000444

004010a0 <mpu_calibrate_gyro>:

}


void mpu_calibrate_gyro(uint8_t samples)
{
  4010a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010a4:	b085      	sub	sp, #20
	use_calibrate = true;
  4010a6:	2201      	movs	r2, #1
  4010a8:	4b5e      	ldr	r3, [pc, #376]	; (401224 <mpu_calibrate_gyro+0x184>)
  4010aa:	701a      	strb	r2, [r3, #0]
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  4010ac:	4681      	mov	r9, r0
  4010ae:	2800      	cmp	r0, #0
  4010b0:	d048      	beq.n	401144 <mpu_calibrate_gyro+0xa4>
  4010b2:	2400      	movs	r4, #0
  4010b4:	f04f 0a00 	mov.w	sl, #0
  4010b8:	46d3      	mov	fp, sl
  4010ba:	f8cd a00c 	str.w	sl, [sp, #12]
  4010be:	f8cd a008 	str.w	sl, [sp, #8]
  4010c2:	f8cd a004 	str.w	sl, [sp, #4]
  4010c6:	f8cd a000 	str.w	sl, [sp]

        mpu_read_raw_gyro();

		sum_x += raw_gyro.x_axis;
  4010ca:	f8df 816c 	ldr.w	r8, [pc, #364]	; 401238 <mpu_calibrate_gyro+0x198>
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {

        mpu_read_raw_gyro();
  4010ce:	f7ff fe11 	bl	400cf4 <mpu_read_raw_gyro>

		sum_x += raw_gyro.x_axis;
  4010d2:	f8d8 7000 	ldr.w	r7, [r8]
  4010d6:	4639      	mov	r1, r7
  4010d8:	9800      	ldr	r0, [sp, #0]
  4010da:	f006 fb3f 	bl	40775c <__addsf3>
  4010de:	9000      	str	r0, [sp, #0]
		sum_y += raw_gyro.y_axis;
  4010e0:	f8d8 6004 	ldr.w	r6, [r8, #4]
  4010e4:	4631      	mov	r1, r6
  4010e6:	9801      	ldr	r0, [sp, #4]
  4010e8:	f006 fb38 	bl	40775c <__addsf3>
  4010ec:	9001      	str	r0, [sp, #4]
		sum_z += raw_gyro.z_axis;
  4010ee:	f8d8 5008 	ldr.w	r5, [r8, #8]
  4010f2:	4629      	mov	r1, r5
  4010f4:	9802      	ldr	r0, [sp, #8]
  4010f6:	f006 fb31 	bl	40775c <__addsf3>
  4010fa:	9002      	str	r0, [sp, #8]

        // Sum
		sigma_x += raw_gyro.x_axis * raw_gyro.x_axis;
  4010fc:	4639      	mov	r1, r7
  4010fe:	4638      	mov	r0, r7
  401100:	f006 fc34 	bl	40796c <__aeabi_fmul>
  401104:	4601      	mov	r1, r0
  401106:	9803      	ldr	r0, [sp, #12]
  401108:	f006 fb28 	bl	40775c <__addsf3>
  40110c:	9003      	str	r0, [sp, #12]
		sigma_y += raw_gyro.y_axis * raw_gyro.y_axis;
  40110e:	4631      	mov	r1, r6
  401110:	4630      	mov	r0, r6
  401112:	f006 fc2b 	bl	40796c <__aeabi_fmul>
  401116:	4601      	mov	r1, r0
  401118:	4658      	mov	r0, fp
  40111a:	f006 fb1f 	bl	40775c <__addsf3>
  40111e:	4683      	mov	fp, r0
		sigma_z += raw_gyro.z_axis * raw_gyro.z_axis;
  401120:	4629      	mov	r1, r5
  401122:	4628      	mov	r0, r5
  401124:	f006 fc22 	bl	40796c <__aeabi_fmul>
  401128:	4601      	mov	r1, r0
  40112a:	4650      	mov	r0, sl
  40112c:	f006 fb16 	bl	40775c <__addsf3>
  401130:	4682      	mov	sl, r0

		delay_ms(5);
  401132:	f24a 706a 	movw	r0, #42858	; 0xa76a
  401136:	f007 f9f3 	bl	408520 <__portable_delay_cycles_veneer>
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  40113a:	3401      	adds	r4, #1
  40113c:	b2e4      	uxtb	r4, r4
  40113e:	45a1      	cmp	r9, r4
  401140:	d1c5      	bne.n	4010ce <mpu_calibrate_gyro+0x2e>
  401142:	e00a      	b.n	40115a <mpu_calibrate_gyro+0xba>
	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;
  401144:	f04f 0a00 	mov.w	sl, #0

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
  401148:	46d3      	mov	fp, sl
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
  40114a:	f8cd a00c 	str.w	sl, [sp, #12]
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
  40114e:	f8cd a008 	str.w	sl, [sp, #8]
void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
  401152:	f8cd a004 	str.w	sl, [sp, #4]

void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
  401156:	f8cd a000 	str.w	sl, [sp]

		delay_ms(5);
	}

	// Calculate delta vectors
	delta_gyro.x_axis = sum_x/samples;
  40115a:	4648      	mov	r0, r9
  40115c:	f006 fbb2 	bl	4078c4 <__aeabi_i2f>
  401160:	4605      	mov	r5, r0
  401162:	4601      	mov	r1, r0
  401164:	9800      	ldr	r0, [sp, #0]
  401166:	f006 fcb5 	bl	407ad4 <__aeabi_fdiv>
  40116a:	4606      	mov	r6, r0
  40116c:	4c2e      	ldr	r4, [pc, #184]	; (401228 <mpu_calibrate_gyro+0x188>)
  40116e:	6020      	str	r0, [r4, #0]
	delta_gyro.y_axis = sum_y/samples;
  401170:	4629      	mov	r1, r5
  401172:	9801      	ldr	r0, [sp, #4]
  401174:	f006 fcae 	bl	407ad4 <__aeabi_fdiv>
  401178:	6060      	str	r0, [r4, #4]
	delta_gyro.z_axis = sum_z/samples;
  40117a:	4629      	mov	r1, r5
  40117c:	9802      	ldr	r0, [sp, #8]
  40117e:	f006 fca9 	bl	407ad4 <__aeabi_fdiv>
  401182:	60a0      	str	r0, [r4, #8]

	// Calculate threshold vectors
	threshold.x_axis = sqrt((sigma_x/50) - (delta_gyro.x_axis * delta_gyro.x_axis));
  401184:	9f03      	ldr	r7, [sp, #12]
  401186:	4929      	ldr	r1, [pc, #164]	; (40122c <mpu_calibrate_gyro+0x18c>)
  401188:	4638      	mov	r0, r7
  40118a:	f006 fca3 	bl	407ad4 <__aeabi_fdiv>
  40118e:	4605      	mov	r5, r0
  401190:	4631      	mov	r1, r6
  401192:	4630      	mov	r0, r6
  401194:	f006 fbea 	bl	40796c <__aeabi_fmul>
  401198:	4601      	mov	r1, r0
  40119a:	4628      	mov	r0, r5
  40119c:	f006 fadc 	bl	407758 <__aeabi_fsub>
  4011a0:	f005 ff3a 	bl	407018 <__aeabi_f2d>
  4011a4:	f001 fa22 	bl	4025ec <sqrt>
  4011a8:	4e21      	ldr	r6, [pc, #132]	; (401230 <mpu_calibrate_gyro+0x190>)
  4011aa:	f006 fa81 	bl	4076b0 <__aeabi_d2f>
  4011ae:	6030      	str	r0, [r6, #0]
	threshold.y_axis = sqrt((sigma_y/50) - (delta_gyro.y_axis * delta_gyro.y_axis));
  4011b0:	6865      	ldr	r5, [r4, #4]
  4011b2:	491e      	ldr	r1, [pc, #120]	; (40122c <mpu_calibrate_gyro+0x18c>)
  4011b4:	4658      	mov	r0, fp
  4011b6:	f006 fc8d 	bl	407ad4 <__aeabi_fdiv>
  4011ba:	4607      	mov	r7, r0
  4011bc:	4629      	mov	r1, r5
  4011be:	4628      	mov	r0, r5
  4011c0:	f006 fbd4 	bl	40796c <__aeabi_fmul>
  4011c4:	4601      	mov	r1, r0
  4011c6:	4638      	mov	r0, r7
  4011c8:	f006 fac6 	bl	407758 <__aeabi_fsub>
  4011cc:	f005 ff24 	bl	407018 <__aeabi_f2d>
  4011d0:	f001 fa0c 	bl	4025ec <sqrt>
  4011d4:	f006 fa6c 	bl	4076b0 <__aeabi_d2f>
  4011d8:	6070      	str	r0, [r6, #4]
	threshold.z_axis = sqrt((sigma_z/50) - (delta_gyro.z_axis * delta_gyro.z_axis));
  4011da:	68a4      	ldr	r4, [r4, #8]
  4011dc:	4913      	ldr	r1, [pc, #76]	; (40122c <mpu_calibrate_gyro+0x18c>)
  4011de:	4650      	mov	r0, sl
  4011e0:	f006 fc78 	bl	407ad4 <__aeabi_fdiv>
  4011e4:	4605      	mov	r5, r0
  4011e6:	4621      	mov	r1, r4
  4011e8:	4620      	mov	r0, r4
  4011ea:	f006 fbbf 	bl	40796c <__aeabi_fmul>
  4011ee:	4601      	mov	r1, r0
  4011f0:	4628      	mov	r0, r5
  4011f2:	f006 fab1 	bl	407758 <__aeabi_fsub>
  4011f6:	f005 ff0f 	bl	407018 <__aeabi_f2d>
  4011fa:	f001 f9f7 	bl	4025ec <sqrt>
  4011fe:	f006 fa57 	bl	4076b0 <__aeabi_d2f>
  401202:	60b0      	str	r0, [r6, #8]

	if (actual_threshold > 0) {
  401204:	4b0b      	ldr	r3, [pc, #44]	; (401234 <mpu_calibrate_gyro+0x194>)
  401206:	681c      	ldr	r4, [r3, #0]
  401208:	2100      	movs	r1, #0
  40120a:	4620      	mov	r0, r4
  40120c:	f006 fd6a 	bl	407ce4 <__aeabi_fcmpgt>
  401210:	b128      	cbz	r0, 40121e <mpu_calibrate_gyro+0x17e>
		mpu_set_threshold(actual_threshold);
  401212:	4620      	mov	r0, r4
  401214:	f006 fd96 	bl	407d44 <__aeabi_f2uiz>
  401218:	b2c0      	uxtb	r0, r0
  40121a:	f7ff ff0f 	bl	40103c <mpu_set_threshold>
	}

}
  40121e:	b005      	add	sp, #20
  401220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401224:	2000043c 	.word	0x2000043c
  401228:	200006d0 	.word	0x200006d0
  40122c:	42480000 	.word	0x42480000
  401230:	20000504 	.word	0x20000504
  401234:	20000444 	.word	0x20000444
  401238:	20000510 	.word	0x20000510

0040123c <imu_init>:
float last_gyro_angle_x = 0.0f;
float last_gyro_angle_y = 0.0f;
float last_gyro_angle_z = 0.0f;

bool imu_init(void)
{
  40123c:	b510      	push	{r4, lr}
    ap.imu.x_axis = 0.0f;
  40123e:	4b0c      	ldr	r3, [pc, #48]	; (401270 <imu_init+0x34>)
  401240:	2200      	movs	r2, #0
  401242:	601a      	str	r2, [r3, #0]
    ap.imu.y_axis = 0.0f;
  401244:	605a      	str	r2, [r3, #4]
    ap.imu.z_axis = 0.0f;
  401246:	609a      	str	r2, [r3, #8]

    ap.setpoint.x_axis = 0.0f;
  401248:	619a      	str	r2, [r3, #24]
    ap.setpoint.y_axis = 0.0f;
  40124a:	61da      	str	r2, [r3, #28]
    ap.setpoint.z_axis = 0.0f;
  40124c:	621a      	str	r2, [r3, #32]

    ap.command.x_axis = 0.0f;
  40124e:	625a      	str	r2, [r3, #36]	; 0x24
    ap.command.y_axis = 0.0f;
  401250:	629a      	str	r2, [r3, #40]	; 0x28
    ap.command.z_axis = 0.0f;
  401252:	62da      	str	r2, [r3, #44]	; 0x2c

    return (mpu_init() & mpu_probe() & mpu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2));
  401254:	f7ff fc1e 	bl	400a94 <mpu_init>
  401258:	4604      	mov	r4, r0
  40125a:	f7ff fc45 	bl	400ae8 <mpu_probe>
  40125e:	4020      	ands	r0, r4
  401260:	b2c4      	uxtb	r4, r0
  401262:	2100      	movs	r1, #0
  401264:	4608      	mov	r0, r1
  401266:	f7ff fce9 	bl	400c3c <mpu_begin>
}
  40126a:	4020      	ands	r0, r4
  40126c:	bd10      	pop	{r4, pc}
  40126e:	bf00      	nop
  401270:	20000820 	.word	0x20000820

00401274 <imu_calibrate>:

void imu_calibrate(void)
{
  401274:	b508      	push	{r3, lr}
    printf("calibrating imu...\r\n");
  401276:	4807      	ldr	r0, [pc, #28]	; (401294 <imu_calibrate+0x20>)
  401278:	f002 f9fc 	bl	403674 <iprintf>
    mpu_calibrate_gyro(GYRO_SAMPLES);
  40127c:	2032      	movs	r0, #50	; 0x32
  40127e:	f7ff ff0f 	bl	4010a0 <mpu_calibrate_gyro>
    mpu_set_threshold(0);
  401282:	2000      	movs	r0, #0
  401284:	f7ff feda 	bl	40103c <mpu_set_threshold>
    mpu_log_settings();
  401288:	f7ff fe54 	bl	400f34 <mpu_log_settings>
    printf("calibration complete.\r\n");
  40128c:	4802      	ldr	r0, [pc, #8]	; (401298 <imu_calibrate+0x24>)
  40128e:	f002 f9f1 	bl	403674 <iprintf>
  401292:	bd08      	pop	{r3, pc}
  401294:	00408120 	.word	0x00408120
  401298:	00408138 	.word	0x00408138
  40129c:	00000000 	.word	0x00000000

004012a0 <imu_tick>:
}

void imu_tick(void)
{
  4012a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012a4:	b08d      	sub	sp, #52	; 0x34
    clock_time_t t_now = cph_get_millis();
  4012a6:	4b84      	ldr	r3, [pc, #528]	; (4014b8 <imu_tick+0x218>)
  4012a8:	681d      	ldr	r5, [r3, #0]

    mpu_read_normalized_gyro();
  4012aa:	a808      	add	r0, sp, #32
  4012ac:	f7ff fd44 	bl	400d38 <mpu_read_normalized_gyro>
    mpu_read_normalized_acceleration();
  4012b0:	f7ff fe18 	bl	400ee4 <mpu_read_normalized_acceleration>

    float gyro_x = (norm_gyro.x_axis*M_PI)/180.0f;
  4012b4:	4c81      	ldr	r4, [pc, #516]	; (4014bc <imu_tick+0x21c>)
  4012b6:	6820      	ldr	r0, [r4, #0]
  4012b8:	f005 feae 	bl	407018 <__aeabi_f2d>
  4012bc:	a37c      	add	r3, pc, #496	; (adr r3, 4014b0 <imu_tick+0x210>)
  4012be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012c2:	f005 fefd 	bl	4070c0 <__aeabi_dmul>
  4012c6:	2200      	movs	r2, #0
  4012c8:	4b7d      	ldr	r3, [pc, #500]	; (4014c0 <imu_tick+0x220>)
  4012ca:	f006 f823 	bl	407314 <__aeabi_ddiv>
  4012ce:	f006 f9ef 	bl	4076b0 <__aeabi_d2f>
  4012d2:	9005      	str	r0, [sp, #20]
    float gyro_y = (norm_gyro.y_axis*M_PI)/180.0f;
  4012d4:	6860      	ldr	r0, [r4, #4]
  4012d6:	f005 fe9f 	bl	407018 <__aeabi_f2d>
  4012da:	a375      	add	r3, pc, #468	; (adr r3, 4014b0 <imu_tick+0x210>)
  4012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012e0:	f005 feee 	bl	4070c0 <__aeabi_dmul>
  4012e4:	2200      	movs	r2, #0
  4012e6:	4b76      	ldr	r3, [pc, #472]	; (4014c0 <imu_tick+0x220>)
  4012e8:	f006 f814 	bl	407314 <__aeabi_ddiv>
  4012ec:	f006 f9e0 	bl	4076b0 <__aeabi_d2f>
  4012f0:	9006      	str	r0, [sp, #24]
    float gyro_z = (norm_gyro.z_axis*M_PI)/180.0f;
  4012f2:	68a0      	ldr	r0, [r4, #8]
  4012f4:	f005 fe90 	bl	407018 <__aeabi_f2d>
  4012f8:	a36d      	add	r3, pc, #436	; (adr r3, 4014b0 <imu_tick+0x210>)
  4012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012fe:	f005 fedf 	bl	4070c0 <__aeabi_dmul>
  401302:	2200      	movs	r2, #0
  401304:	4b6e      	ldr	r3, [pc, #440]	; (4014c0 <imu_tick+0x220>)
  401306:	f006 f805 	bl	407314 <__aeabi_ddiv>
  40130a:	f006 f9d1 	bl	4076b0 <__aeabi_d2f>
  40130e:	9007      	str	r0, [sp, #28]
    //     mag_z = ((float) norm_mag.z_axis)*M_PI/180.0f;
    // }



    float accel_angle_y = atan2(norm_accel.x_axis, sqrt( pow(norm_accel.y_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  401310:	4c6c      	ldr	r4, [pc, #432]	; (4014c4 <imu_tick+0x224>)
  401312:	6820      	ldr	r0, [r4, #0]
  401314:	f005 fe80 	bl	407018 <__aeabi_f2d>
  401318:	e9cd 0100 	strd	r0, r1, [sp]
  40131c:	6860      	ldr	r0, [r4, #4]
  40131e:	f005 fe7b 	bl	407018 <__aeabi_f2d>
  401322:	4682      	mov	sl, r0
  401324:	468b      	mov	fp, r1
  401326:	68a0      	ldr	r0, [r4, #8]
  401328:	f005 fe76 	bl	407018 <__aeabi_f2d>
  40132c:	4606      	mov	r6, r0
  40132e:	460f      	mov	r7, r1
  401330:	4632      	mov	r2, r6
  401332:	463b      	mov	r3, r7
  401334:	4630      	mov	r0, r6
  401336:	4639      	mov	r1, r7
  401338:	f005 fec2 	bl	4070c0 <__aeabi_dmul>
  40133c:	4680      	mov	r8, r0
  40133e:	4689      	mov	r9, r1
  401340:	4652      	mov	r2, sl
  401342:	465b      	mov	r3, fp
  401344:	4650      	mov	r0, sl
  401346:	4659      	mov	r1, fp
  401348:	f005 feba 	bl	4070c0 <__aeabi_dmul>
  40134c:	4602      	mov	r2, r0
  40134e:	460b      	mov	r3, r1
  401350:	4640      	mov	r0, r8
  401352:	4649      	mov	r1, r9
  401354:	f005 fd02 	bl	406d5c <__adddf3>
  401358:	f001 f948 	bl	4025ec <sqrt>
  40135c:	4602      	mov	r2, r0
  40135e:	460b      	mov	r3, r1
  401360:	e9dd 0100 	ldrd	r0, r1, [sp]
  401364:	f001 f940 	bl	4025e8 <atan2>
  401368:	e9cd 0100 	strd	r0, r1, [sp]
    float accel_angle_x = atan2(norm_accel.y_axis, sqrt( pow(norm_accel.x_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  40136c:	6860      	ldr	r0, [r4, #4]
  40136e:	f005 fe53 	bl	407018 <__aeabi_f2d>
  401372:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401376:	6820      	ldr	r0, [r4, #0]
  401378:	f005 fe4e 	bl	407018 <__aeabi_f2d>
  40137c:	4682      	mov	sl, r0
  40137e:	468b      	mov	fp, r1
  401380:	68a0      	ldr	r0, [r4, #8]
  401382:	f005 fe49 	bl	407018 <__aeabi_f2d>
  401386:	4606      	mov	r6, r0
  401388:	460f      	mov	r7, r1
  40138a:	4652      	mov	r2, sl
  40138c:	465b      	mov	r3, fp
  40138e:	4650      	mov	r0, sl
  401390:	4659      	mov	r1, fp
  401392:	f005 fe95 	bl	4070c0 <__aeabi_dmul>
  401396:	4680      	mov	r8, r0
  401398:	4689      	mov	r9, r1
  40139a:	4632      	mov	r2, r6
  40139c:	463b      	mov	r3, r7
  40139e:	4630      	mov	r0, r6
  4013a0:	4639      	mov	r1, r7
  4013a2:	f005 fe8d 	bl	4070c0 <__aeabi_dmul>
  4013a6:	4602      	mov	r2, r0
  4013a8:	460b      	mov	r3, r1
  4013aa:	4640      	mov	r0, r8
  4013ac:	4649      	mov	r1, r9
  4013ae:	f005 fcd5 	bl	406d5c <__adddf3>
  4013b2:	f001 f91b 	bl	4025ec <sqrt>
  4013b6:	4602      	mov	r2, r0
  4013b8:	460b      	mov	r3, r1
  4013ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4013be:	f001 f913 	bl	4025e8 <atan2>
  4013c2:	4680      	mov	r8, r0
  4013c4:	4689      	mov	r9, r1
    float accel_angle_z = 0;

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
  4013c6:	f8df a120 	ldr.w	sl, [pc, #288]	; 4014e8 <imu_tick+0x248>
    float dt = ((float)delta_t/1000.0f);
  4013ca:	f8da 0000 	ldr.w	r0, [sl]
  4013ce:	1a28      	subs	r0, r5, r0
  4013d0:	f006 fa74 	bl	4078bc <__aeabi_ui2f>
  4013d4:	493c      	ldr	r1, [pc, #240]	; (4014c8 <imu_tick+0x228>)
  4013d6:	f006 fb7d 	bl	407ad4 <__aeabi_fdiv>
  4013da:	4604      	mov	r4, r0
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  4013dc:	4601      	mov	r1, r0
  4013de:	9805      	ldr	r0, [sp, #20]
  4013e0:	f006 fac4 	bl	40796c <__aeabi_fmul>

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
  4013e4:	4f39      	ldr	r7, [pc, #228]	; (4014cc <imu_tick+0x22c>)
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  4013e6:	6839      	ldr	r1, [r7, #0]
  4013e8:	f006 f9b8 	bl	40775c <__addsf3>
  4013ec:	4938      	ldr	r1, [pc, #224]	; (4014d0 <imu_tick+0x230>)
  4013ee:	f006 fabd 	bl	40796c <__aeabi_fmul>
  4013f2:	4683      	mov	fp, r0
  4013f4:	2200      	movs	r2, #0
  4013f6:	4b32      	ldr	r3, [pc, #200]	; (4014c0 <imu_tick+0x220>)
  4013f8:	4640      	mov	r0, r8
  4013fa:	4649      	mov	r1, r9
  4013fc:	f005 fe60 	bl	4070c0 <__aeabi_dmul>
  401400:	a32b      	add	r3, pc, #172	; (adr r3, 4014b0 <imu_tick+0x210>)
  401402:	e9d3 2300 	ldrd	r2, r3, [r3]
  401406:	f005 ff85 	bl	407314 <__aeabi_ddiv>
  40140a:	f006 f951 	bl	4076b0 <__aeabi_d2f>
  40140e:	4931      	ldr	r1, [pc, #196]	; (4014d4 <imu_tick+0x234>)
  401410:	f006 faac 	bl	40796c <__aeabi_fmul>
  401414:	4601      	mov	r1, r0
  401416:	4658      	mov	r0, fp
  401418:	f006 f9a0 	bl	40775c <__addsf3>
  40141c:	4680      	mov	r8, r0
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  40141e:	4621      	mov	r1, r4
  401420:	9806      	ldr	r0, [sp, #24]
  401422:	f006 faa3 	bl	40796c <__aeabi_fmul>
    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
  401426:	4e2c      	ldr	r6, [pc, #176]	; (4014d8 <imu_tick+0x238>)
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  401428:	6831      	ldr	r1, [r6, #0]
  40142a:	f006 f997 	bl	40775c <__addsf3>
  40142e:	4928      	ldr	r1, [pc, #160]	; (4014d0 <imu_tick+0x230>)
  401430:	f006 fa9c 	bl	40796c <__aeabi_fmul>
  401434:	4681      	mov	r9, r0
  401436:	2200      	movs	r2, #0
  401438:	4b21      	ldr	r3, [pc, #132]	; (4014c0 <imu_tick+0x220>)
  40143a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40143e:	f005 fe3f 	bl	4070c0 <__aeabi_dmul>
  401442:	a31b      	add	r3, pc, #108	; (adr r3, 4014b0 <imu_tick+0x210>)
  401444:	e9d3 2300 	ldrd	r2, r3, [r3]
  401448:	f005 ff64 	bl	407314 <__aeabi_ddiv>
  40144c:	f006 f930 	bl	4076b0 <__aeabi_d2f>
  401450:	4920      	ldr	r1, [pc, #128]	; (4014d4 <imu_tick+0x234>)
  401452:	f006 fa8b 	bl	40796c <__aeabi_fmul>
  401456:	4601      	mov	r1, r0
  401458:	4648      	mov	r0, r9
  40145a:	f006 f97f 	bl	40775c <__addsf3>
  40145e:	4681      	mov	r9, r0
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  401460:	4621      	mov	r1, r4
  401462:	9807      	ldr	r0, [sp, #28]
  401464:	f006 fa82 	bl	40796c <__aeabi_fmul>
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
    float gyro_angle_z = gyro_z * dt + last_angle_z;
  401468:	4c1c      	ldr	r4, [pc, #112]	; (4014dc <imu_tick+0x23c>)
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  40146a:	6821      	ldr	r1, [r4, #0]
  40146c:	f006 f976 	bl	40775c <__addsf3>
  401470:	4917      	ldr	r1, [pc, #92]	; (4014d0 <imu_tick+0x230>)
  401472:	f006 fa7b 	bl	40796c <__aeabi_fmul>
  401476:	2100      	movs	r1, #0
  401478:	f006 f970 	bl	40775c <__addsf3>


    last_time_read = t_now;
  40147c:	f8ca 5000 	str.w	r5, [sl]
    last_angle_x = angle_x;
  401480:	f8c7 8000 	str.w	r8, [r7]
    last_angle_y = angle_y;
  401484:	f8c6 9000 	str.w	r9, [r6]
    last_angle_z = angle_z;
  401488:	6020      	str	r0, [r4, #0]

    imu_complementary.x_axis = angle_x;
  40148a:	4b15      	ldr	r3, [pc, #84]	; (4014e0 <imu_tick+0x240>)
  40148c:	f8c3 8000 	str.w	r8, [r3]
    imu_complementary.y_axis = angle_y;
  401490:	f8c3 9004 	str.w	r9, [r3, #4]
    imu_complementary.z_axis = angle_z;
  401494:	6098      	str	r0, [r3, #8]

    ap.imu.x_axis = angle_x;
  401496:	4b13      	ldr	r3, [pc, #76]	; (4014e4 <imu_tick+0x244>)
  401498:	f8c3 8000 	str.w	r8, [r3]
    ap.imu.y_axis = angle_y;
  40149c:	f8c3 9004 	str.w	r9, [r3, #4]
    ap.imu.z_axis = angle_z;
  4014a0:	6098      	str	r0, [r3, #8]
    ap.mag.x_axis = mag_x;
  4014a2:	2200      	movs	r2, #0
  4014a4:	60da      	str	r2, [r3, #12]
    ap.mag.y_axis = mag_y;
  4014a6:	611a      	str	r2, [r3, #16]
    ap.mag.z_axis = mag_z;
  4014a8:	615a      	str	r2, [r3, #20]


  4014aa:	b00d      	add	sp, #52	; 0x34
  4014ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014b0:	54442d18 	.word	0x54442d18
  4014b4:	400921fb 	.word	0x400921fb
  4014b8:	20000208 	.word	0x20000208
  4014bc:	200006e4 	.word	0x200006e4
  4014c0:	40668000 	.word	0x40668000
  4014c4:	200006a8 	.word	0x200006a8
  4014c8:	447a0000 	.word	0x447a0000
  4014cc:	20000430 	.word	0x20000430
  4014d0:	3f75c28f 	.word	0x3f75c28f
  4014d4:	3d23d710 	.word	0x3d23d710
  4014d8:	20000434 	.word	0x20000434
  4014dc:	20000440 	.word	0x20000440
  4014e0:	20000850 	.word	0x20000850
  4014e4:	20000820 	.word	0x20000820
  4014e8:	2000042c 	.word	0x2000042c

004014ec <motor_config_pins>:
	motors[1].angle_max = AP_ANGLE_MAX;
	motors[1].timeout = 1000;
}

void motor_config_pins(motor_config_t motor_cfg)
{
  4014ec:	b084      	sub	sp, #16
  4014ee:	b538      	push	{r3, r4, r5, lr}
  4014f0:	ac04      	add	r4, sp, #16
  4014f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pio_configure_pin(motor_cfg.ul_pin, motor_cfg.ul_flag);
  4014f6:	9906      	ldr	r1, [sp, #24]
  4014f8:	9805      	ldr	r0, [sp, #20]
  4014fa:	f000 fc1f 	bl	401d3c <pio_configure_pin>

	pmc_enable_periph_clk(motor_cfg.ul_periph_clkid);
  4014fe:	9807      	ldr	r0, [sp, #28]
  401500:	f000 fdce 	bl	4020a0 <pmc_enable_periph_clk>

	pwm_channel_disable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  401504:	ad04      	add	r5, sp, #16
  401506:	9908      	ldr	r1, [sp, #32]
  401508:	f855 0b14 	ldr.w	r0, [r5], #20
  40150c:	f000 ff14 	bl	402338 <pwm_channel_disable>
	pwm_init(motor_cfg.p_pwm, &motor_cfg.clock_setting);
  401510:	ac04      	add	r4, sp, #16
  401512:	4629      	mov	r1, r5
  401514:	f854 0b20 	ldr.w	r0, [r4], #32
  401518:	f000 fe62 	bl	4021e0 <pwm_init>

	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
  40151c:	4621      	mov	r1, r4
  40151e:	9804      	ldr	r0, [sp, #16]
  401520:	f000 fe82 	bl	402228 <pwm_channel_init>
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  401524:	9908      	ldr	r1, [sp, #32]
  401526:	9804      	ldr	r0, [sp, #16]
  401528:	f000 ff00 	bl	40232c <pwm_channel_enable>
}
  40152c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401530:	b004      	add	sp, #16
  401532:	4770      	bx	lr

00401534 <motor_init>:
uint32_t motor_current_duty = 0;
void motor_config_pins(motor_config_t motor_cfg);


void motor_init(void)
{
  401534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401538:	b0b3      	sub	sp, #204	; 0xcc
	printf("motor_init\r\n");
  40153a:	485b      	ldr	r0, [pc, #364]	; (4016a8 <motor_init+0x174>)
  40153c:	f002 f89a 	bl	403674 <iprintf>
        .ul_clka = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_clkb = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_mck = sysclk_get_cpu_hz()
	};

	motor_config_t motor_cfg0 = {
  401540:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  401544:	2248      	movs	r2, #72	; 0x48
  401546:	2100      	movs	r1, #0
  401548:	4648      	mov	r0, r9
  40154a:	f001 fc1c 	bl	402d86 <memset>
		.pwm_channel.ul_period = MOTOR_PWM_PERIOD_TICKS,
		.pwm_channel.ul_duty = MOTOR_PWM_MIN,
		.pwm_channel.channel = EXT1_PWM_CHANNEL
	};

	motor_config_t motor_cfg1 = {
  40154e:	2248      	movs	r2, #72	; 0x48
  401550:	2100      	movs	r1, #0
  401552:	a80e      	add	r0, sp, #56	; 0x38
  401554:	f001 fc17 	bl	402d86 <memset>
	};

	


	motor_config_pins(motor_cfg0);
  401558:	4b54      	ldr	r3, [pc, #336]	; (4016ac <motor_init+0x178>)
  40155a:	9320      	str	r3, [sp, #128]	; 0x80
  40155c:	2417      	movs	r4, #23
  40155e:	9421      	str	r4, [sp, #132]	; 0x84
  401560:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  401564:	9722      	str	r7, [sp, #136]	; 0x88
  401566:	231f      	movs	r3, #31
  401568:	9323      	str	r3, [sp, #140]	; 0x8c
  40156a:	4e51      	ldr	r6, [pc, #324]	; (4016b0 <motor_init+0x17c>)
  40156c:	9625      	str	r6, [sp, #148]	; 0x94
  40156e:	9626      	str	r6, [sp, #152]	; 0x98
  401570:	4b50      	ldr	r3, [pc, #320]	; (4016b4 <motor_init+0x180>)
  401572:	9327      	str	r3, [sp, #156]	; 0x9c
  401574:	f04f 080b 	mov.w	r8, #11
  401578:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  40157c:	2501      	movs	r5, #1
  40157e:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  401582:	f240 4a7e 	movw	sl, #1150	; 0x47e
  401586:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  40158a:	f644 6b20 	movw	fp, #20000	; 0x4e20
  40158e:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  401592:	46ee      	mov	lr, sp
  401594:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
  401598:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  40159c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015b0:	e89c 0003 	ldmia.w	ip, {r0, r1}
  4015b4:	e88e 0003 	stmia.w	lr, {r0, r1}
  4015b8:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  4015bc:	f7ff ff96 	bl	4014ec <motor_config_pins>
	motor_config_pins(motor_cfg1);
  4015c0:	4b3a      	ldr	r3, [pc, #232]	; (4016ac <motor_init+0x178>)
  4015c2:	930e      	str	r3, [sp, #56]	; 0x38
  4015c4:	2353      	movs	r3, #83	; 0x53
  4015c6:	930f      	str	r3, [sp, #60]	; 0x3c
  4015c8:	9710      	str	r7, [sp, #64]	; 0x40
  4015ca:	231f      	movs	r3, #31
  4015cc:	9311      	str	r3, [sp, #68]	; 0x44
  4015ce:	9512      	str	r5, [sp, #72]	; 0x48
  4015d0:	9613      	str	r6, [sp, #76]	; 0x4c
  4015d2:	9614      	str	r6, [sp, #80]	; 0x50
  4015d4:	4b37      	ldr	r3, [pc, #220]	; (4016b4 <motor_init+0x180>)
  4015d6:	9315      	str	r3, [sp, #84]	; 0x54
  4015d8:	9516      	str	r5, [sp, #88]	; 0x58
  4015da:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  4015de:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  4015e2:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  4015e6:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  4015ea:	46ee      	mov	lr, sp
  4015ec:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
  4015f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401600:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  401604:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401608:	e89c 0003 	ldmia.w	ip, {r0, r1}
  40160c:	e88e 0003 	stmia.w	lr, {r0, r1}
  401610:	ab0e      	add	r3, sp, #56	; 0x38
  401612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401614:	f7ff ff6a 	bl	4014ec <motor_config_pins>

	motors[0].config = motor_cfg0;
  401618:	4b24      	ldr	r3, [pc, #144]	; (4016ac <motor_init+0x178>)
  40161a:	9320      	str	r3, [sp, #128]	; 0x80
  40161c:	9421      	str	r4, [sp, #132]	; 0x84
  40161e:	9722      	str	r7, [sp, #136]	; 0x88
  401620:	231f      	movs	r3, #31
  401622:	9323      	str	r3, [sp, #140]	; 0x8c
  401624:	9625      	str	r6, [sp, #148]	; 0x94
  401626:	9626      	str	r6, [sp, #152]	; 0x98
  401628:	4b22      	ldr	r3, [pc, #136]	; (4016b4 <motor_init+0x180>)
  40162a:	9327      	str	r3, [sp, #156]	; 0x9c
  40162c:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  401630:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  401634:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  401638:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  40163c:	4c1e      	ldr	r4, [pc, #120]	; (4016b8 <motor_init+0x184>)
  40163e:	2248      	movs	r2, #72	; 0x48
  401640:	4649      	mov	r1, r9
  401642:	4620      	mov	r0, r4
  401644:	f001 fb94 	bl	402d70 <memcpy>
	motors[0].angle_min = AP_ANGLE_MIN;
  401648:	f06f 0359 	mvn.w	r3, #89	; 0x59
  40164c:	64a3      	str	r3, [r4, #72]	; 0x48
	motors[0].angle_max = AP_ANGLE_MAX;
  40164e:	235a      	movs	r3, #90	; 0x5a
  401650:	64e3      	str	r3, [r4, #76]	; 0x4c
	motors[0].timeout = 1000;
  401652:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
  401656:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50

	motors[1].config = motor_cfg1;
  40165a:	4b14      	ldr	r3, [pc, #80]	; (4016ac <motor_init+0x178>)
  40165c:	930e      	str	r3, [sp, #56]	; 0x38
  40165e:	2353      	movs	r3, #83	; 0x53
  401660:	930f      	str	r3, [sp, #60]	; 0x3c
  401662:	9710      	str	r7, [sp, #64]	; 0x40
  401664:	231f      	movs	r3, #31
  401666:	9311      	str	r3, [sp, #68]	; 0x44
  401668:	9512      	str	r5, [sp, #72]	; 0x48
  40166a:	9613      	str	r6, [sp, #76]	; 0x4c
  40166c:	9614      	str	r6, [sp, #80]	; 0x50
  40166e:	4b11      	ldr	r3, [pc, #68]	; (4016b4 <motor_init+0x180>)
  401670:	9315      	str	r3, [sp, #84]	; 0x54
  401672:	9516      	str	r5, [sp, #88]	; 0x58
  401674:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  401678:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  40167c:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  401680:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  401684:	2248      	movs	r2, #72	; 0x48
  401686:	a90e      	add	r1, sp, #56	; 0x38
  401688:	f104 0054 	add.w	r0, r4, #84	; 0x54
  40168c:	f001 fb70 	bl	402d70 <memcpy>
	motors[1].angle_min = AP_ANGLE_MIN;
  401690:	f06f 0359 	mvn.w	r3, #89	; 0x59
  401694:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	motors[1].angle_max = AP_ANGLE_MAX;
  401698:	235a      	movs	r3, #90	; 0x5a
  40169a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	motors[1].timeout = 1000;
  40169e:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
}
  4016a2:	b033      	add	sp, #204	; 0xcc
  4016a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016a8:	00408150 	.word	0x00408150
  4016ac:	40020000 	.word	0x40020000
  4016b0:	000f4240 	.word	0x000f4240
  4016b4:	07270e00 	.word	0x07270e00
  4016b8:	20000534 	.word	0x20000534

004016bc <motor_tick>:
	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
}

void motor_tick(void)
{
  4016bc:	4770      	bx	lr
  4016be:	bf00      	nop

004016c0 <motor_set_power>:

}

void motor_set_power(motor_t motor, uint32_t power)
{
  4016c0:	b084      	sub	sp, #16
  4016c2:	b508      	push	{r3, lr}
  4016c4:	f10d 0e08 	add.w	lr, sp, #8
  4016c8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  4016cc:	9917      	ldr	r1, [sp, #92]	; 0x5c
	motor.config.pwm_channel.ul_duty = power;
  4016ce:	910d      	str	r1, [sp, #52]	; 0x34
	// printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
	if (config.log_motor) {
  4016d0:	4b07      	ldr	r3, [pc, #28]	; (4016f0 <motor_set_power+0x30>)
  4016d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4016d6:	b113      	cbz	r3, 4016de <motor_set_power+0x1e>
		printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
  4016d8:	4806      	ldr	r0, [pc, #24]	; (4016f4 <motor_set_power+0x34>)
  4016da:	f001 ffcb 	bl	403674 <iprintf>
	}
	pwm_channel_update_duty(motor.config.p_pwm, &motor.config.pwm_channel, motor.config.pwm_channel.ul_duty);
  4016de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4016e0:	a90a      	add	r1, sp, #40	; 0x28
  4016e2:	9802      	ldr	r0, [sp, #8]
  4016e4:	f000 fe14 	bl	402310 <pwm_channel_update_duty>
}
  4016e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4016ec:	b004      	add	sp, #16
  4016ee:	4770      	bx	lr
  4016f0:	200006f0 	.word	0x200006f0
  4016f4:	00408160 	.word	0x00408160

004016f8 <motor_min>:

void motor_min(motor_t motor)
{
  4016f8:	b084      	sub	sp, #16
  4016fa:	b500      	push	{lr}
  4016fc:	b093      	sub	sp, #76	; 0x4c
  4016fe:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  401702:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MIN;
  401706:	f240 437e 	movw	r3, #1150	; 0x47e
  40170a:	4a08      	ldr	r2, [pc, #32]	; (40172c <motor_min+0x34>)
  40170c:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, MOTOR_PWM_MIN);
  40170e:	9311      	str	r3, [sp, #68]	; 0x44
  401710:	2244      	movs	r2, #68	; 0x44
  401712:	a918      	add	r1, sp, #96	; 0x60
  401714:	4668      	mov	r0, sp
  401716:	f001 fb2b 	bl	402d70 <memcpy>
  40171a:	ab14      	add	r3, sp, #80	; 0x50
  40171c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40171e:	f7ff ffcf 	bl	4016c0 <motor_set_power>
}
  401722:	b013      	add	sp, #76	; 0x4c
  401724:	f85d eb04 	ldr.w	lr, [sp], #4
  401728:	b004      	add	sp, #16
  40172a:	4770      	bx	lr
  40172c:	20000448 	.word	0x20000448

00401730 <motor_mid>:

void motor_mid(motor_t motor)
{
  401730:	b084      	sub	sp, #16
  401732:	b500      	push	{lr}
  401734:	b093      	sub	sp, #76	; 0x4c
  401736:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  40173a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MID;
  40173e:	f240 5346 	movw	r3, #1350	; 0x546
  401742:	4a08      	ldr	r2, [pc, #32]	; (401764 <motor_mid+0x34>)
  401744:	6013      	str	r3, [r2, #0]
	motor_set_power(motor, motor_current_duty);
  401746:	9311      	str	r3, [sp, #68]	; 0x44
  401748:	2244      	movs	r2, #68	; 0x44
  40174a:	a918      	add	r1, sp, #96	; 0x60
  40174c:	4668      	mov	r0, sp
  40174e:	f001 fb0f 	bl	402d70 <memcpy>
  401752:	ab14      	add	r3, sp, #80	; 0x50
  401754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401756:	f7ff ffb3 	bl	4016c0 <motor_set_power>
}
  40175a:	b013      	add	sp, #76	; 0x4c
  40175c:	f85d eb04 	ldr.w	lr, [sp], #4
  401760:	b004      	add	sp, #16
  401762:	4770      	bx	lr
  401764:	20000448 	.word	0x20000448

00401768 <motor_max>:

void motor_max(motor_t motor)
{
  401768:	b084      	sub	sp, #16
  40176a:	b500      	push	{lr}
  40176c:	b093      	sub	sp, #76	; 0x4c
  40176e:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  401772:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MAX;
  401776:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  40177a:	4a08      	ldr	r2, [pc, #32]	; (40179c <motor_max+0x34>)
  40177c:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, motor_current_duty);
  40177e:	9311      	str	r3, [sp, #68]	; 0x44
  401780:	2244      	movs	r2, #68	; 0x44
  401782:	a918      	add	r1, sp, #96	; 0x60
  401784:	4668      	mov	r0, sp
  401786:	f001 faf3 	bl	402d70 <memcpy>
  40178a:	ab14      	add	r3, sp, #80	; 0x50
  40178c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40178e:	f7ff ff97 	bl	4016c0 <motor_set_power>
}
  401792:	b013      	add	sp, #76	; 0x4c
  401794:	f85d eb04 	ldr.w	lr, [sp], #4
  401798:	b004      	add	sp, #16
  40179a:	4770      	bx	lr
  40179c:	20000448 	.word	0x20000448

004017a0 <pid_init>:
float desired_angle = 0.0f;


void pid_init(void)
{
    time = 0;
  4017a0:	2300      	movs	r3, #0
  4017a2:	4a0a      	ldr	r2, [pc, #40]	; (4017cc <pid_init+0x2c>)
  4017a4:	6013      	str	r3, [r2, #0]
    previous_time = 0;
  4017a6:	4a0a      	ldr	r2, [pc, #40]	; (4017d0 <pid_init+0x30>)
  4017a8:	6013      	str	r3, [r2, #0]
    elapsed_time = 0;
  4017aa:	4a0a      	ldr	r2, [pc, #40]	; (4017d4 <pid_init+0x34>)
  4017ac:	6013      	str	r3, [r2, #0]
    pid = 0.0f;
  4017ae:	2300      	movs	r3, #0
  4017b0:	4a09      	ldr	r2, [pc, #36]	; (4017d8 <pid_init+0x38>)
  4017b2:	6013      	str	r3, [r2, #0]
    error = 0.0f;
  4017b4:	4a09      	ldr	r2, [pc, #36]	; (4017dc <pid_init+0x3c>)
  4017b6:	6013      	str	r3, [r2, #0]
    previous_error = 0.0f;
  4017b8:	4a09      	ldr	r2, [pc, #36]	; (4017e0 <pid_init+0x40>)
  4017ba:	6013      	str	r3, [r2, #0]
    pid_p = 0.0f;
  4017bc:	4a09      	ldr	r2, [pc, #36]	; (4017e4 <pid_init+0x44>)
  4017be:	6013      	str	r3, [r2, #0]
    pid_i = 0.0f;
  4017c0:	4a09      	ldr	r2, [pc, #36]	; (4017e8 <pid_init+0x48>)
  4017c2:	6013      	str	r3, [r2, #0]
    pid_d = 0.0f;
  4017c4:	4a09      	ldr	r2, [pc, #36]	; (4017ec <pid_init+0x4c>)
  4017c6:	6013      	str	r3, [r2, #0]
  4017c8:	4770      	bx	lr
  4017ca:	bf00      	nop
  4017cc:	20000468 	.word	0x20000468
  4017d0:	2000046c 	.word	0x2000046c
  4017d4:	20000470 	.word	0x20000470
  4017d8:	2000044c 	.word	0x2000044c
  4017dc:	20000458 	.word	0x20000458
  4017e0:	20000450 	.word	0x20000450
  4017e4:	20000474 	.word	0x20000474
  4017e8:	20000454 	.word	0x20000454
  4017ec:	2000045c 	.word	0x2000045c

004017f0 <pid_tick>:
float kp = 1.0f;
float ki = 0.0f;
float kd = 0.0;

float pid_tick(void)
{
  4017f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    previous_error = time;
  4017f4:	4c27      	ldr	r4, [pc, #156]	; (401894 <pid_tick+0xa4>)
  4017f6:	6820      	ldr	r0, [r4, #0]
  4017f8:	f006 f860 	bl	4078bc <__aeabi_ui2f>
  4017fc:	4680      	mov	r8, r0
    time = cph_get_millis();
  4017fe:	4b26      	ldr	r3, [pc, #152]	; (401898 <pid_tick+0xa8>)
  401800:	681b      	ldr	r3, [r3, #0]
  401802:	6023      	str	r3, [r4, #0]
    elapsed_time = (time - previous_time)/1000;
  401804:	4a25      	ldr	r2, [pc, #148]	; (40189c <pid_tick+0xac>)
  401806:	6814      	ldr	r4, [r2, #0]
  401808:	1b1b      	subs	r3, r3, r4
  40180a:	4c25      	ldr	r4, [pc, #148]	; (4018a0 <pid_tick+0xb0>)
  40180c:	fba4 3403 	umull	r3, r4, r4, r3
  401810:	09a4      	lsrs	r4, r4, #6
  401812:	4b24      	ldr	r3, [pc, #144]	; (4018a4 <pid_tick+0xb4>)
  401814:	601c      	str	r4, [r3, #0]

    error = ap.imu.y_axis - AP.desired_angle_x;
  401816:	4b24      	ldr	r3, [pc, #144]	; (4018a8 <pid_tick+0xb8>)
  401818:	6859      	ldr	r1, [r3, #4]
  40181a:	4b24      	ldr	r3, [pc, #144]	; (4018ac <pid_tick+0xbc>)
  40181c:	6858      	ldr	r0, [r3, #4]
  40181e:	f005 ff9b 	bl	407758 <__aeabi_fsub>
  401822:	4605      	mov	r5, r0
  401824:	4b22      	ldr	r3, [pc, #136]	; (4018b0 <pid_tick+0xc0>)
  401826:	6018      	str	r0, [r3, #0]
    pid_p = kp*error;
  401828:	4b22      	ldr	r3, [pc, #136]	; (4018b4 <pid_tick+0xc4>)
  40182a:	6819      	ldr	r1, [r3, #0]
  40182c:	f006 f89e 	bl	40796c <__aeabi_fmul>
  401830:	4606      	mov	r6, r0
  401832:	4b21      	ldr	r3, [pc, #132]	; (4018b8 <pid_tick+0xc8>)
  401834:	6018      	str	r0, [r3, #0]

    // if (-3.0f < error < 3.0f) {
    //     pid_i = pid_i +(ki*error);
    // }

    pid_i = pid_i +(ki*error);
  401836:	4b21      	ldr	r3, [pc, #132]	; (4018bc <pid_tick+0xcc>)
  401838:	6819      	ldr	r1, [r3, #0]
  40183a:	4628      	mov	r0, r5
  40183c:	f006 f896 	bl	40796c <__aeabi_fmul>
  401840:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4018d0 <pid_tick+0xe0>
  401844:	f8d9 1000 	ldr.w	r1, [r9]
  401848:	f005 ff88 	bl	40775c <__addsf3>
  40184c:	4607      	mov	r7, r0
  40184e:	f8c9 0000 	str.w	r0, [r9]

    pid_d = kd * ((error-previous_error)/elapsed_time);
  401852:	4641      	mov	r1, r8
  401854:	4628      	mov	r0, r5
  401856:	f005 ff7f 	bl	407758 <__aeabi_fsub>
  40185a:	4680      	mov	r8, r0
  40185c:	4620      	mov	r0, r4
  40185e:	f006 f82d 	bl	4078bc <__aeabi_ui2f>
  401862:	4601      	mov	r1, r0
  401864:	4640      	mov	r0, r8
  401866:	f006 f935 	bl	407ad4 <__aeabi_fdiv>
  40186a:	4b15      	ldr	r3, [pc, #84]	; (4018c0 <pid_tick+0xd0>)
  40186c:	6819      	ldr	r1, [r3, #0]
  40186e:	f006 f87d 	bl	40796c <__aeabi_fmul>
  401872:	4604      	mov	r4, r0
  401874:	4b13      	ldr	r3, [pc, #76]	; (4018c4 <pid_tick+0xd4>)
  401876:	6018      	str	r0, [r3, #0]

    pid = pid_p + pid_i + pid_d;
  401878:	4639      	mov	r1, r7
  40187a:	4630      	mov	r0, r6
  40187c:	f005 ff6e 	bl	40775c <__addsf3>
  401880:	4621      	mov	r1, r4
  401882:	f005 ff6b 	bl	40775c <__addsf3>
  401886:	4b10      	ldr	r3, [pc, #64]	; (4018c8 <pid_tick+0xd8>)
  401888:	6018      	str	r0, [r3, #0]

    previous_error = error;
  40188a:	4b10      	ldr	r3, [pc, #64]	; (4018cc <pid_tick+0xdc>)
  40188c:	601d      	str	r5, [r3, #0]

    return pid;
  40188e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401892:	bf00      	nop
  401894:	20000468 	.word	0x20000468
  401898:	20000208 	.word	0x20000208
  40189c:	2000046c 	.word	0x2000046c
  4018a0:	10624dd3 	.word	0x10624dd3
  4018a4:	20000470 	.word	0x20000470
  4018a8:	2000085c 	.word	0x2000085c
  4018ac:	20000820 	.word	0x20000820
  4018b0:	20000458 	.word	0x20000458
  4018b4:	2000000c 	.word	0x2000000c
  4018b8:	20000474 	.word	0x20000474
  4018bc:	20000464 	.word	0x20000464
  4018c0:	20000460 	.word	0x20000460
  4018c4:	2000045c 	.word	0x2000045c
  4018c8:	2000044c 	.word	0x2000044c
  4018cc:	20000450 	.word	0x20000450
  4018d0:	20000454 	.word	0x20000454

004018d4 <ap_init>:
ap_manager_t AP;


void ap_init(void)
{
    AP.state = AP_INITIALIZING;
  4018d4:	4b03      	ldr	r3, [pc, #12]	; (4018e4 <ap_init+0x10>)
  4018d6:	2200      	movs	r2, #0
  4018d8:	701a      	strb	r2, [r3, #0]
    AP.desired_angle_x = 0.0f;
  4018da:	2100      	movs	r1, #0
  4018dc:	6059      	str	r1, [r3, #4]
    AP.desired_angle_y = 0.0f;
  4018de:	6099      	str	r1, [r3, #8]
    AP.motor_power = 0;
  4018e0:	60da      	str	r2, [r3, #12]
  4018e2:	4770      	bx	lr
  4018e4:	2000085c 	.word	0x2000085c

004018e8 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4018e8:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4018ea:	482c      	ldr	r0, [pc, #176]	; (40199c <board_init+0xb4>)
  4018ec:	f000 fc02 	bl	4020f4 <wdt_disable>
  4018f0:	200b      	movs	r0, #11
  4018f2:	f000 fbd5 	bl	4020a0 <pmc_enable_periph_clk>
  4018f6:	200c      	movs	r0, #12
  4018f8:	f000 fbd2 	bl	4020a0 <pmc_enable_periph_clk>
  4018fc:	200d      	movs	r0, #13
  4018fe:	f000 fbcf 	bl	4020a0 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401902:	4b27      	ldr	r3, [pc, #156]	; (4019a0 <board_init+0xb8>)
  401904:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401908:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40190a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40190c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401910:	4c24      	ldr	r4, [pc, #144]	; (4019a4 <board_init+0xbc>)
  401912:	2504      	movs	r5, #4
  401914:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401916:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40191a:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40191c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401920:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401922:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401924:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401928:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40192a:	f022 0204 	bic.w	r2, r2, #4
  40192e:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401930:	6f62      	ldr	r2, [r4, #116]	; 0x74
  401932:	f022 0204 	bic.w	r2, r2, #4
  401936:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401938:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40193c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40193e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401940:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401944:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401948:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40194a:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40194c:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401950:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401954:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401956:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401958:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  40195c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401960:	210c      	movs	r1, #12
  401962:	4811      	ldr	r0, [pc, #68]	; (4019a8 <board_init+0xc0>)
  401964:	f000 fa76 	bl	401e54 <pio_configure_pin_group>
#endif


#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401968:	4e10      	ldr	r6, [pc, #64]	; (4019ac <board_init+0xc4>)
  40196a:	4631      	mov	r1, r6
  40196c:	2003      	movs	r0, #3
  40196e:	f000 f9e5 	bl	401d3c <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401972:	4631      	mov	r1, r6
  401974:	4628      	mov	r0, r5
  401976:	f000 f9e1 	bl	401d3c <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40197a:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40197c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401980:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401982:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401984:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401988:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40198a:	f023 0304 	bic.w	r3, r3, #4
  40198e:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401990:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401992:	f023 0304 	bic.w	r3, r3, #4
  401996:	6763      	str	r3, [r4, #116]	; 0x74
  401998:	bd70      	pop	{r4, r5, r6, pc}
  40199a:	bf00      	nop
  40199c:	400e1450 	.word	0x400e1450
  4019a0:	400e1200 	.word	0x400e1200
  4019a4:	400e0e00 	.word	0x400e0e00
  4019a8:	400e1000 	.word	0x400e1000
  4019ac:	08000001 	.word	0x08000001

004019b0 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4019b0:	4b2b      	ldr	r3, [pc, #172]	; (401a60 <twi_set_speed+0xb0>)
  4019b2:	4299      	cmp	r1, r3
  4019b4:	d849      	bhi.n	401a4a <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4019b6:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4019ba:	4299      	cmp	r1, r3
  4019bc:	d92b      	bls.n	401a16 <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4019be:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4019c0:	4c28      	ldr	r4, [pc, #160]	; (401a64 <twi_set_speed+0xb4>)
  4019c2:	fba4 3402 	umull	r3, r4, r4, r2
  4019c6:	0ba4      	lsrs	r4, r4, #14
  4019c8:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4019ca:	4b27      	ldr	r3, [pc, #156]	; (401a68 <twi_set_speed+0xb8>)
  4019cc:	440b      	add	r3, r1
  4019ce:	009b      	lsls	r3, r3, #2
  4019d0:	fbb2 f2f3 	udiv	r2, r2, r3
  4019d4:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019d6:	2cff      	cmp	r4, #255	; 0xff
  4019d8:	d939      	bls.n	401a4e <twi_set_speed+0x9e>
  4019da:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4019dc:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4019de:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019e0:	2cff      	cmp	r4, #255	; 0xff
  4019e2:	d902      	bls.n	4019ea <twi_set_speed+0x3a>
  4019e4:	2b07      	cmp	r3, #7
  4019e6:	d1f9      	bne.n	4019dc <twi_set_speed+0x2c>
  4019e8:	e00a      	b.n	401a00 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019ea:	2aff      	cmp	r2, #255	; 0xff
  4019ec:	d908      	bls.n	401a00 <twi_set_speed+0x50>
  4019ee:	2b06      	cmp	r3, #6
  4019f0:	d900      	bls.n	4019f4 <twi_set_speed+0x44>
  4019f2:	e005      	b.n	401a00 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  4019f4:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4019f6:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019f8:	2aff      	cmp	r2, #255	; 0xff
  4019fa:	d901      	bls.n	401a00 <twi_set_speed+0x50>
  4019fc:	2b06      	cmp	r3, #6
  4019fe:	d9f9      	bls.n	4019f4 <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401a00:	0212      	lsls	r2, r2, #8
  401a02:	b292      	uxth	r2, r2
  401a04:	041b      	lsls	r3, r3, #16
  401a06:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401a0a:	431a      	orrs	r2, r3
  401a0c:	b2e4      	uxtb	r4, r4
  401a0e:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  401a10:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401a12:	2000      	movs	r0, #0
  401a14:	e021      	b.n	401a5a <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401a16:	0049      	lsls	r1, r1, #1
  401a18:	fbb2 f2f1 	udiv	r2, r2, r1
  401a1c:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a1e:	2aff      	cmp	r2, #255	; 0xff
  401a20:	d907      	bls.n	401a32 <twi_set_speed+0x82>
  401a22:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  401a24:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  401a26:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a28:	2aff      	cmp	r2, #255	; 0xff
  401a2a:	d903      	bls.n	401a34 <twi_set_speed+0x84>
  401a2c:	2b07      	cmp	r3, #7
  401a2e:	d1f9      	bne.n	401a24 <twi_set_speed+0x74>
  401a30:	e000      	b.n	401a34 <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401a32:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401a34:	0211      	lsls	r1, r2, #8
  401a36:	b289      	uxth	r1, r1
  401a38:	041b      	lsls	r3, r3, #16
  401a3a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401a3e:	430b      	orrs	r3, r1
  401a40:	b2d2      	uxtb	r2, r2
  401a42:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  401a44:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401a46:	2000      	movs	r0, #0
}
  401a48:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  401a4a:	2001      	movs	r0, #1
  401a4c:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a4e:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401a50:	bf88      	it	hi
  401a52:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a54:	d8ce      	bhi.n	4019f4 <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401a56:	2300      	movs	r3, #0
  401a58:	e7d2      	b.n	401a00 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  401a5a:	bc10      	pop	{r4}
  401a5c:	4770      	bx	lr
  401a5e:	bf00      	nop
  401a60:	00061a80 	.word	0x00061a80
  401a64:	057619f1 	.word	0x057619f1
  401a68:	3ffd1200 	.word	0x3ffd1200

00401a6c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  401a6c:	b538      	push	{r3, r4, r5, lr}
  401a6e:	4604      	mov	r4, r0
  401a70:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  401a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  401a76:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  401a78:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  401a7a:	2380      	movs	r3, #128	; 0x80
  401a7c:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  401a7e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  401a80:	2308      	movs	r3, #8
  401a82:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401a84:	2320      	movs	r3, #32
  401a86:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401a88:	2304      	movs	r3, #4
  401a8a:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  401a8c:	680a      	ldr	r2, [r1, #0]
  401a8e:	6849      	ldr	r1, [r1, #4]
  401a90:	f7ff ff8e 	bl	4019b0 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  401a94:	2801      	cmp	r0, #1
  401a96:	bf14      	ite	ne
  401a98:	2000      	movne	r0, #0
  401a9a:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  401a9c:	7a6b      	ldrb	r3, [r5, #9]
  401a9e:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  401aa0:	bf04      	itt	eq
  401aa2:	2340      	moveq	r3, #64	; 0x40
  401aa4:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  401aa6:	bd38      	pop	{r3, r4, r5, pc}

00401aa8 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401aa8:	460a      	mov	r2, r1
  401aaa:	b159      	cbz	r1, 401ac4 <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  401aac:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  401aae:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  401ab0:	bfc4      	itt	gt
  401ab2:	7841      	ldrbgt	r1, [r0, #1]
  401ab4:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  401ab8:	2a02      	cmp	r2, #2
  401aba:	dd05      	ble.n	401ac8 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  401abc:	7880      	ldrb	r0, [r0, #2]
  401abe:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401ac2:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401ac4:	2000      	movs	r0, #0
  401ac6:	4770      	bx	lr
  401ac8:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  401aca:	4770      	bx	lr

00401acc <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  401acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401ad0:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  401ad2:	2c00      	cmp	r4, #0
  401ad4:	d045      	beq.n	401b62 <twi_master_read+0x96>
  401ad6:	460b      	mov	r3, r1
  401ad8:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401ada:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401adc:	2000      	movs	r0, #0
  401ade:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401ae0:	684a      	ldr	r2, [r1, #4]
  401ae2:	0212      	lsls	r2, r2, #8
  401ae4:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401ae8:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  401aec:	7c1a      	ldrb	r2, [r3, #16]
  401aee:	0412      	lsls	r2, r2, #16
  401af0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  401af4:	430a      	orrs	r2, r1
  401af6:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401af8:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401afa:	6859      	ldr	r1, [r3, #4]
  401afc:	4618      	mov	r0, r3
  401afe:	f7ff ffd3 	bl	401aa8 <twi_mk_addr>
  401b02:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401b04:	2c01      	cmp	r4, #1
  401b06:	d104      	bne.n	401b12 <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401b08:	2303      	movs	r3, #3
  401b0a:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  401b0c:	f04f 0e01 	mov.w	lr, #1
  401b10:	e033      	b.n	401b7a <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  401b12:	2301      	movs	r3, #1
  401b14:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  401b16:	f04f 0e00 	mov.w	lr, #0
  401b1a:	e02e      	b.n	401b7a <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b1c:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401b1e:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401b20:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b24:	d120      	bne.n	401b68 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  401b26:	1e51      	subs	r1, r2, #1
  401b28:	b30a      	cbz	r2, 401b6e <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401b2a:	2c01      	cmp	r4, #1
  401b2c:	d106      	bne.n	401b3c <twi_master_read+0x70>
  401b2e:	f1be 0f00 	cmp.w	lr, #0
  401b32:	d12f      	bne.n	401b94 <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  401b34:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  401b38:	46e6      	mov	lr, ip
  401b3a:	e02b      	b.n	401b94 <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b3c:	f013 0f02 	tst.w	r3, #2
  401b40:	d005      	beq.n	401b4e <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401b42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401b44:	7033      	strb	r3, [r6, #0]

		cnt--;
  401b46:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401b48:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  401b4a:	463a      	mov	r2, r7
  401b4c:	e000      	b.n	401b50 <twi_master_read+0x84>
  401b4e:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  401b50:	2c00      	cmp	r4, #0
  401b52:	d1e4      	bne.n	401b1e <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401b54:	6a2b      	ldr	r3, [r5, #32]
  401b56:	f013 0f01 	tst.w	r3, #1
  401b5a:	d0fb      	beq.n	401b54 <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  401b5c:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  401b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401b62:	2001      	movs	r0, #1
  401b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401b68:	2005      	movs	r0, #5
  401b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  401b6e:	2009      	movs	r0, #9
  401b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401b74:	2005      	movs	r0, #5
  401b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401b7a:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401b7c:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401b80:	d1f8      	bne.n	401b74 <twi_master_read+0xa8>
  401b82:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  401b86:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  401b8a:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  401b8e:	f04f 0c01 	mov.w	ip, #1
  401b92:	e7ca      	b.n	401b2a <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b94:	f013 0f02 	tst.w	r3, #2
  401b98:	d0c0      	beq.n	401b1c <twi_master_read+0x50>
  401b9a:	e7d2      	b.n	401b42 <twi_master_read+0x76>

00401b9c <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401b9c:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401b9e:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  401ba0:	2d00      	cmp	r5, #0
  401ba2:	d034      	beq.n	401c0e <twi_master_write+0x72>
  401ba4:	460b      	mov	r3, r1
  401ba6:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401ba8:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401baa:	2000      	movs	r0, #0
  401bac:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401bae:	7c0a      	ldrb	r2, [r1, #16]
  401bb0:	0412      	lsls	r2, r2, #16
  401bb2:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  401bb6:	685a      	ldr	r2, [r3, #4]
  401bb8:	0212      	lsls	r2, r2, #8
  401bba:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401bbe:	430a      	orrs	r2, r1
  401bc0:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401bc2:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401bc4:	6859      	ldr	r1, [r3, #4]
  401bc6:	4618      	mov	r0, r3
  401bc8:	f7ff ff6e 	bl	401aa8 <twi_mk_addr>
  401bcc:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401bce:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bd0:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bd4:	d004      	beq.n	401be0 <twi_master_write+0x44>
  401bd6:	e01c      	b.n	401c12 <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401bd8:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bda:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bde:	d11a      	bne.n	401c16 <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401be0:	f013 0f04 	tst.w	r3, #4
  401be4:	d003      	beq.n	401bee <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401be6:	7833      	ldrb	r3, [r6, #0]
  401be8:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  401bea:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401bec:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401bee:	2d00      	cmp	r5, #0
  401bf0:	d1f2      	bne.n	401bd8 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  401bf2:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bf4:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401bf8:	d10f      	bne.n	401c1a <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  401bfa:	f013 0f04 	tst.w	r3, #4
  401bfe:	d0f8      	beq.n	401bf2 <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401c00:	2302      	movs	r3, #2
  401c02:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401c04:	6a23      	ldr	r3, [r4, #32]
  401c06:	f013 0f01 	tst.w	r3, #1
  401c0a:	d0fb      	beq.n	401c04 <twi_master_write+0x68>
  401c0c:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401c0e:	2001      	movs	r0, #1
  401c10:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401c12:	2005      	movs	r0, #5
  401c14:	bd70      	pop	{r4, r5, r6, pc}
  401c16:	2005      	movs	r0, #5
  401c18:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401c1a:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  401c1c:	bd70      	pop	{r4, r5, r6, pc}
  401c1e:	bf00      	nop

00401c20 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  401c20:	b500      	push	{lr}
  401c22:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  401c24:	2300      	movs	r3, #0
  401c26:	aa06      	add	r2, sp, #24
  401c28:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  401c2c:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  401c2e:	2201      	movs	r2, #1
  401c30:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  401c32:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  401c36:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  401c3a:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  401c3c:	a901      	add	r1, sp, #4
  401c3e:	f7ff ffad 	bl	401b9c <twi_master_write>
}
  401c42:	b007      	add	sp, #28
  401c44:	f85d fb04 	ldr.w	pc, [sp], #4

00401c48 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401c48:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401c4a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401c4e:	d02f      	beq.n	401cb0 <pio_set_peripheral+0x68>
  401c50:	d807      	bhi.n	401c62 <pio_set_peripheral+0x1a>
  401c52:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401c56:	d014      	beq.n	401c82 <pio_set_peripheral+0x3a>
  401c58:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401c5c:	d01e      	beq.n	401c9c <pio_set_peripheral+0x54>
  401c5e:	b939      	cbnz	r1, 401c70 <pio_set_peripheral+0x28>
  401c60:	4770      	bx	lr
  401c62:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401c66:	d036      	beq.n	401cd6 <pio_set_peripheral+0x8e>
  401c68:	d804      	bhi.n	401c74 <pio_set_peripheral+0x2c>
  401c6a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401c6e:	d029      	beq.n	401cc4 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401c70:	6042      	str	r2, [r0, #4]
  401c72:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401c74:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401c78:	d02d      	beq.n	401cd6 <pio_set_peripheral+0x8e>
  401c7a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401c7e:	d02a      	beq.n	401cd6 <pio_set_peripheral+0x8e>
  401c80:	e7f6      	b.n	401c70 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401c82:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c84:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c86:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401c88:	43d3      	mvns	r3, r2
  401c8a:	4021      	ands	r1, r4
  401c8c:	4019      	ands	r1, r3
  401c8e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c90:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c92:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401c94:	4021      	ands	r1, r4
  401c96:	400b      	ands	r3, r1
  401c98:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c9a:	e01a      	b.n	401cd2 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c9c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c9e:	4313      	orrs	r3, r2
  401ca0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401ca2:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401ca4:	6f43      	ldr	r3, [r0, #116]	; 0x74
  401ca6:	400b      	ands	r3, r1
  401ca8:	ea23 0302 	bic.w	r3, r3, r2
  401cac:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401cae:	e7df      	b.n	401c70 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cb0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401cb2:	6f03      	ldr	r3, [r0, #112]	; 0x70
  401cb4:	400b      	ands	r3, r1
  401cb6:	ea23 0302 	bic.w	r3, r3, r2
  401cba:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401cbc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401cbe:	4313      	orrs	r3, r2
  401cc0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401cc2:	e7d5      	b.n	401c70 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cc4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401cc6:	4313      	orrs	r3, r2
  401cc8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401cca:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401ccc:	4313      	orrs	r3, r2
  401cce:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401cd0:	e7ce      	b.n	401c70 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401cd2:	6042      	str	r2, [r0, #4]
}
  401cd4:	bc10      	pop	{r4}
  401cd6:	4770      	bx	lr

00401cd8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401cd8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401cda:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401cde:	bf14      	ite	ne
  401ce0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ce2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ce4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401ce8:	bf14      	ite	ne
  401cea:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401cec:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401cee:	f012 0f02 	tst.w	r2, #2
  401cf2:	d002      	beq.n	401cfa <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  401cf4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401cf8:	e004      	b.n	401d04 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401cfa:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401cfe:	bf18      	it	ne
  401d00:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401d04:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401d06:	6001      	str	r1, [r0, #0]
  401d08:	4770      	bx	lr
  401d0a:	bf00      	nop

00401d0c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401d0c:	b410      	push	{r4}
  401d0e:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401d10:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d12:	b10c      	cbz	r4, 401d18 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401d14:	6641      	str	r1, [r0, #100]	; 0x64
  401d16:	e000      	b.n	401d1a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d18:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401d1a:	b10b      	cbz	r3, 401d20 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401d1c:	6501      	str	r1, [r0, #80]	; 0x50
  401d1e:	e000      	b.n	401d22 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401d20:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401d22:	b10a      	cbz	r2, 401d28 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  401d24:	6301      	str	r1, [r0, #48]	; 0x30
  401d26:	e000      	b.n	401d2a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401d28:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401d2a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401d2c:	6001      	str	r1, [r0, #0]
}
  401d2e:	bc10      	pop	{r4}
  401d30:	4770      	bx	lr
  401d32:	bf00      	nop

00401d34 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401d34:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401d36:	4770      	bx	lr

00401d38 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401d38:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401d3a:	4770      	bx	lr

00401d3c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401d3c:	b570      	push	{r4, r5, r6, lr}
  401d3e:	b082      	sub	sp, #8
  401d40:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d42:	0943      	lsrs	r3, r0, #5
  401d44:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401d48:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401d4c:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401d4e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d56:	d047      	beq.n	401de8 <pio_configure_pin+0xac>
  401d58:	d809      	bhi.n	401d6e <pio_configure_pin+0x32>
  401d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401d5e:	d021      	beq.n	401da4 <pio_configure_pin+0x68>
  401d60:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d64:	d02f      	beq.n	401dc6 <pio_configure_pin+0x8a>
  401d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401d6a:	d16f      	bne.n	401e4c <pio_configure_pin+0x110>
  401d6c:	e009      	b.n	401d82 <pio_configure_pin+0x46>
  401d6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401d72:	d055      	beq.n	401e20 <pio_configure_pin+0xe4>
  401d74:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401d78:	d052      	beq.n	401e20 <pio_configure_pin+0xe4>
  401d7a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d7e:	d044      	beq.n	401e0a <pio_configure_pin+0xce>
  401d80:	e064      	b.n	401e4c <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401d82:	f000 001f 	and.w	r0, r0, #31
  401d86:	2601      	movs	r6, #1
  401d88:	4086      	lsls	r6, r0
  401d8a:	4632      	mov	r2, r6
  401d8c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d90:	4620      	mov	r0, r4
  401d92:	f7ff ff59 	bl	401c48 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d96:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401d9a:	bf14      	ite	ne
  401d9c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d9e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401da0:	2001      	movs	r0, #1
  401da2:	e054      	b.n	401e4e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401da4:	f000 001f 	and.w	r0, r0, #31
  401da8:	2601      	movs	r6, #1
  401daa:	4086      	lsls	r6, r0
  401dac:	4632      	mov	r2, r6
  401dae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401db2:	4620      	mov	r0, r4
  401db4:	f7ff ff48 	bl	401c48 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401db8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401dbc:	bf14      	ite	ne
  401dbe:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401dc0:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401dc2:	2001      	movs	r0, #1
  401dc4:	e043      	b.n	401e4e <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401dc6:	f000 001f 	and.w	r0, r0, #31
  401dca:	2601      	movs	r6, #1
  401dcc:	4086      	lsls	r6, r0
  401dce:	4632      	mov	r2, r6
  401dd0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401dd4:	4620      	mov	r0, r4
  401dd6:	f7ff ff37 	bl	401c48 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401dda:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401dde:	bf14      	ite	ne
  401de0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401de2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401de4:	2001      	movs	r0, #1
  401de6:	e032      	b.n	401e4e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401de8:	f000 001f 	and.w	r0, r0, #31
  401dec:	2601      	movs	r6, #1
  401dee:	4086      	lsls	r6, r0
  401df0:	4632      	mov	r2, r6
  401df2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401df6:	4620      	mov	r0, r4
  401df8:	f7ff ff26 	bl	401c48 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401dfc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401e00:	bf14      	ite	ne
  401e02:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401e04:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401e06:	2001      	movs	r0, #1
  401e08:	e021      	b.n	401e4e <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401e0a:	f000 011f 	and.w	r1, r0, #31
  401e0e:	2601      	movs	r6, #1
  401e10:	462a      	mov	r2, r5
  401e12:	fa06 f101 	lsl.w	r1, r6, r1
  401e16:	4620      	mov	r0, r4
  401e18:	f7ff ff5e 	bl	401cd8 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401e1c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  401e1e:	e016      	b.n	401e4e <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e20:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  401e24:	f000 011f 	and.w	r1, r0, #31
  401e28:	2601      	movs	r6, #1
  401e2a:	ea05 0306 	and.w	r3, r5, r6
  401e2e:	9300      	str	r3, [sp, #0]
  401e30:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401e34:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401e38:	bf14      	ite	ne
  401e3a:	2200      	movne	r2, #0
  401e3c:	2201      	moveq	r2, #1
  401e3e:	fa06 f101 	lsl.w	r1, r6, r1
  401e42:	4620      	mov	r0, r4
  401e44:	f7ff ff62 	bl	401d0c <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401e48:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401e4a:	e000      	b.n	401e4e <pio_configure_pin+0x112>

	default:
		return 0;
  401e4c:	2000      	movs	r0, #0
	}

	return 1;
}
  401e4e:	b002      	add	sp, #8
  401e50:	bd70      	pop	{r4, r5, r6, pc}
  401e52:	bf00      	nop

00401e54 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401e54:	b570      	push	{r4, r5, r6, lr}
  401e56:	b082      	sub	sp, #8
  401e58:	4605      	mov	r5, r0
  401e5a:	460e      	mov	r6, r1
  401e5c:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401e5e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  401e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401e66:	d038      	beq.n	401eda <pio_configure_pin_group+0x86>
  401e68:	d809      	bhi.n	401e7e <pio_configure_pin_group+0x2a>
  401e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401e6e:	d01c      	beq.n	401eaa <pio_configure_pin_group+0x56>
  401e70:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401e74:	d025      	beq.n	401ec2 <pio_configure_pin_group+0x6e>
  401e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401e7a:	d150      	bne.n	401f1e <pio_configure_pin_group+0xca>
  401e7c:	e009      	b.n	401e92 <pio_configure_pin_group+0x3e>
  401e7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401e82:	d03a      	beq.n	401efa <pio_configure_pin_group+0xa6>
  401e84:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401e88:	d037      	beq.n	401efa <pio_configure_pin_group+0xa6>
  401e8a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401e8e:	d030      	beq.n	401ef2 <pio_configure_pin_group+0x9e>
  401e90:	e045      	b.n	401f1e <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401e92:	460a      	mov	r2, r1
  401e94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401e98:	f7ff fed6 	bl	401c48 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401e9c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401ea0:	bf14      	ite	ne
  401ea2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ea4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ea6:	2001      	movs	r0, #1
  401ea8:	e03a      	b.n	401f20 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401eaa:	460a      	mov	r2, r1
  401eac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401eb0:	f7ff feca 	bl	401c48 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401eb4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401eb8:	bf14      	ite	ne
  401eba:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ebc:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ebe:	2001      	movs	r0, #1
  401ec0:	e02e      	b.n	401f20 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401ec2:	460a      	mov	r2, r1
  401ec4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401ec8:	f7ff febe 	bl	401c48 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401ecc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401ed0:	bf14      	ite	ne
  401ed2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ed4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ed6:	2001      	movs	r0, #1
  401ed8:	e022      	b.n	401f20 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401eda:	460a      	mov	r2, r1
  401edc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401ee0:	f7ff feb2 	bl	401c48 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401ee4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401ee8:	bf14      	ite	ne
  401eea:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401eec:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401eee:	2001      	movs	r0, #1
  401ef0:	e016      	b.n	401f20 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401ef2:	f7ff fef1 	bl	401cd8 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401ef6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401ef8:	e012      	b.n	401f20 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401efa:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  401efe:	f004 0301 	and.w	r3, r4, #1
  401f02:	9300      	str	r3, [sp, #0]
  401f04:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401f08:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401f0c:	bf14      	ite	ne
  401f0e:	2200      	movne	r2, #0
  401f10:	2201      	moveq	r2, #1
  401f12:	4631      	mov	r1, r6
  401f14:	4628      	mov	r0, r5
  401f16:	f7ff fef9 	bl	401d0c <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401f1a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401f1c:	e000      	b.n	401f20 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401f1e:	2000      	movs	r0, #0
	}

	return 1;
}
  401f20:	b002      	add	sp, #8
  401f22:	bd70      	pop	{r4, r5, r6, pc}

00401f24 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401f28:	4681      	mov	r9, r0
  401f2a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401f2c:	f7ff ff02 	bl	401d34 <pio_get_interrupt_status>
  401f30:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401f32:	4648      	mov	r0, r9
  401f34:	f7ff ff00 	bl	401d38 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  401f38:	4005      	ands	r5, r0
  401f3a:	d013      	beq.n	401f64 <pio_handler_process+0x40>
  401f3c:	4c0e      	ldr	r4, [pc, #56]	; (401f78 <pio_handler_process+0x54>)
  401f3e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401f42:	6823      	ldr	r3, [r4, #0]
  401f44:	4543      	cmp	r3, r8
  401f46:	d108      	bne.n	401f5a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f48:	6861      	ldr	r1, [r4, #4]
  401f4a:	4229      	tst	r1, r5
  401f4c:	d005      	beq.n	401f5a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f4e:	68e3      	ldr	r3, [r4, #12]
  401f50:	4640      	mov	r0, r8
  401f52:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401f54:	6863      	ldr	r3, [r4, #4]
  401f56:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401f5a:	42b4      	cmp	r4, r6
  401f5c:	d002      	beq.n	401f64 <pio_handler_process+0x40>
  401f5e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401f60:	2d00      	cmp	r5, #0
  401f62:	d1ee      	bne.n	401f42 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401f64:	4b05      	ldr	r3, [pc, #20]	; (401f7c <pio_handler_process+0x58>)
  401f66:	681b      	ldr	r3, [r3, #0]
  401f68:	b123      	cbz	r3, 401f74 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  401f6a:	4b05      	ldr	r3, [pc, #20]	; (401f80 <pio_handler_process+0x5c>)
  401f6c:	681b      	ldr	r3, [r3, #0]
  401f6e:	b10b      	cbz	r3, 401f74 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401f70:	4648      	mov	r0, r9
  401f72:	4798      	blx	r3
  401f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401f78:	2000047c 	.word	0x2000047c
  401f7c:	2000086c 	.word	0x2000086c
  401f80:	20000478 	.word	0x20000478

00401f84 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401f84:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401f86:	210b      	movs	r1, #11
  401f88:	4801      	ldr	r0, [pc, #4]	; (401f90 <PIOA_Handler+0xc>)
  401f8a:	f7ff ffcb 	bl	401f24 <pio_handler_process>
  401f8e:	bd08      	pop	{r3, pc}
  401f90:	400e0e00 	.word	0x400e0e00

00401f94 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401f94:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401f96:	210c      	movs	r1, #12
  401f98:	4801      	ldr	r0, [pc, #4]	; (401fa0 <PIOB_Handler+0xc>)
  401f9a:	f7ff ffc3 	bl	401f24 <pio_handler_process>
  401f9e:	bd08      	pop	{r3, pc}
  401fa0:	400e1000 	.word	0x400e1000

00401fa4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401fa4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401fa6:	210d      	movs	r1, #13
  401fa8:	4801      	ldr	r0, [pc, #4]	; (401fb0 <PIOC_Handler+0xc>)
  401faa:	f7ff ffbb 	bl	401f24 <pio_handler_process>
  401fae:	bd08      	pop	{r3, pc}
  401fb0:	400e1200 	.word	0x400e1200

00401fb4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401fb4:	4a18      	ldr	r2, [pc, #96]	; (402018 <pmc_switch_mck_to_pllack+0x64>)
  401fb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401fbc:	4318      	orrs	r0, r3
  401fbe:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fc0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401fc2:	f013 0f08 	tst.w	r3, #8
  401fc6:	d003      	beq.n	401fd0 <pmc_switch_mck_to_pllack+0x1c>
  401fc8:	e009      	b.n	401fde <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401fca:	3b01      	subs	r3, #1
  401fcc:	d103      	bne.n	401fd6 <pmc_switch_mck_to_pllack+0x22>
  401fce:	e01e      	b.n	40200e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401fd4:	4910      	ldr	r1, [pc, #64]	; (402018 <pmc_switch_mck_to_pllack+0x64>)
  401fd6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401fd8:	f012 0f08 	tst.w	r2, #8
  401fdc:	d0f5      	beq.n	401fca <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401fde:	4a0e      	ldr	r2, [pc, #56]	; (402018 <pmc_switch_mck_to_pllack+0x64>)
  401fe0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fe2:	f023 0303 	bic.w	r3, r3, #3
  401fe6:	f043 0302 	orr.w	r3, r3, #2
  401fea:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fec:	6e90      	ldr	r0, [r2, #104]	; 0x68
  401fee:	f010 0008 	ands.w	r0, r0, #8
  401ff2:	d004      	beq.n	401ffe <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401ff4:	2000      	movs	r0, #0
  401ff6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401ff8:	3b01      	subs	r3, #1
  401ffa:	d103      	bne.n	402004 <pmc_switch_mck_to_pllack+0x50>
  401ffc:	e009      	b.n	402012 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ffe:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402002:	4905      	ldr	r1, [pc, #20]	; (402018 <pmc_switch_mck_to_pllack+0x64>)
  402004:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402006:	f012 0f08 	tst.w	r2, #8
  40200a:	d0f5      	beq.n	401ff8 <pmc_switch_mck_to_pllack+0x44>
  40200c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40200e:	2001      	movs	r0, #1
  402010:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402012:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402014:	4770      	bx	lr
  402016:	bf00      	nop
  402018:	400e0400 	.word	0x400e0400

0040201c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40201c:	b138      	cbz	r0, 40202e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40201e:	4911      	ldr	r1, [pc, #68]	; (402064 <pmc_switch_mainck_to_xtal+0x48>)
  402020:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402022:	4a11      	ldr	r2, [pc, #68]	; (402068 <pmc_switch_mainck_to_xtal+0x4c>)
  402024:	401a      	ands	r2, r3
  402026:	4b11      	ldr	r3, [pc, #68]	; (40206c <pmc_switch_mainck_to_xtal+0x50>)
  402028:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40202a:	620b      	str	r3, [r1, #32]
  40202c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40202e:	480d      	ldr	r0, [pc, #52]	; (402064 <pmc_switch_mainck_to_xtal+0x48>)
  402030:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402032:	0209      	lsls	r1, r1, #8
  402034:	b289      	uxth	r1, r1
  402036:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  40203a:	f023 0303 	bic.w	r3, r3, #3
  40203e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402042:	f043 0301 	orr.w	r3, r3, #1
  402046:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402048:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40204a:	4602      	mov	r2, r0
  40204c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40204e:	f013 0f01 	tst.w	r3, #1
  402052:	d0fb      	beq.n	40204c <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402054:	4a03      	ldr	r2, [pc, #12]	; (402064 <pmc_switch_mainck_to_xtal+0x48>)
  402056:	6a13      	ldr	r3, [r2, #32]
  402058:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402060:	6213      	str	r3, [r2, #32]
  402062:	4770      	bx	lr
  402064:	400e0400 	.word	0x400e0400
  402068:	fec8fffc 	.word	0xfec8fffc
  40206c:	01370002 	.word	0x01370002

00402070 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402070:	4b02      	ldr	r3, [pc, #8]	; (40207c <pmc_osc_is_ready_mainck+0xc>)
  402072:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402074:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402078:	4770      	bx	lr
  40207a:	bf00      	nop
  40207c:	400e0400 	.word	0x400e0400

00402080 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402080:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402084:	4b01      	ldr	r3, [pc, #4]	; (40208c <pmc_disable_pllack+0xc>)
  402086:	629a      	str	r2, [r3, #40]	; 0x28
  402088:	4770      	bx	lr
  40208a:	bf00      	nop
  40208c:	400e0400 	.word	0x400e0400

00402090 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402090:	4b02      	ldr	r3, [pc, #8]	; (40209c <pmc_is_locked_pllack+0xc>)
  402092:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402094:	f000 0002 	and.w	r0, r0, #2
  402098:	4770      	bx	lr
  40209a:	bf00      	nop
  40209c:	400e0400 	.word	0x400e0400

004020a0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4020a0:	2822      	cmp	r0, #34	; 0x22
  4020a2:	d81e      	bhi.n	4020e2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4020a4:	281f      	cmp	r0, #31
  4020a6:	d80c      	bhi.n	4020c2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4020a8:	4b11      	ldr	r3, [pc, #68]	; (4020f0 <pmc_enable_periph_clk+0x50>)
  4020aa:	699a      	ldr	r2, [r3, #24]
  4020ac:	2301      	movs	r3, #1
  4020ae:	4083      	lsls	r3, r0
  4020b0:	4393      	bics	r3, r2
  4020b2:	d018      	beq.n	4020e6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4020b4:	2301      	movs	r3, #1
  4020b6:	fa03 f000 	lsl.w	r0, r3, r0
  4020ba:	4b0d      	ldr	r3, [pc, #52]	; (4020f0 <pmc_enable_periph_clk+0x50>)
  4020bc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4020be:	2000      	movs	r0, #0
  4020c0:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4020c2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4020c4:	4b0a      	ldr	r3, [pc, #40]	; (4020f0 <pmc_enable_periph_clk+0x50>)
  4020c6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4020ca:	2301      	movs	r3, #1
  4020cc:	4083      	lsls	r3, r0
  4020ce:	4393      	bics	r3, r2
  4020d0:	d00b      	beq.n	4020ea <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4020d2:	2301      	movs	r3, #1
  4020d4:	fa03 f000 	lsl.w	r0, r3, r0
  4020d8:	4b05      	ldr	r3, [pc, #20]	; (4020f0 <pmc_enable_periph_clk+0x50>)
  4020da:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4020de:	2000      	movs	r0, #0
  4020e0:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4020e2:	2001      	movs	r0, #1
  4020e4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4020e6:	2000      	movs	r0, #0
  4020e8:	4770      	bx	lr
  4020ea:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4020ec:	4770      	bx	lr
  4020ee:	bf00      	nop
  4020f0:	400e0400 	.word	0x400e0400

004020f4 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4020f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4020f8:	6043      	str	r3, [r0, #4]
  4020fa:	4770      	bx	lr

004020fc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4020fc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4020fe:	23ac      	movs	r3, #172	; 0xac
  402100:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402102:	680b      	ldr	r3, [r1, #0]
  402104:	684a      	ldr	r2, [r1, #4]
  402106:	fbb3 f3f2 	udiv	r3, r3, r2
  40210a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40210c:	1e5c      	subs	r4, r3, #1
  40210e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402112:	4294      	cmp	r4, r2
  402114:	d80a      	bhi.n	40212c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  402116:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402118:	688b      	ldr	r3, [r1, #8]
  40211a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40211c:	f240 2302 	movw	r3, #514	; 0x202
  402120:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402124:	2350      	movs	r3, #80	; 0x50
  402126:	6003      	str	r3, [r0, #0]

	return 0;
  402128:	2000      	movs	r0, #0
  40212a:	e000      	b.n	40212e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  40212c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  40212e:	bc10      	pop	{r4}
  402130:	4770      	bx	lr
  402132:	bf00      	nop

00402134 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  402134:	6940      	ldr	r0, [r0, #20]
}
  402136:	f000 0001 	and.w	r0, r0, #1
  40213a:	4770      	bx	lr

0040213c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40213c:	6943      	ldr	r3, [r0, #20]
  40213e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402142:	bf1a      	itte	ne
  402144:	61c1      	strne	r1, [r0, #28]
	return 0;
  402146:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402148:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  40214a:	4770      	bx	lr

0040214c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40214c:	6943      	ldr	r3, [r0, #20]
  40214e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402152:	bf1d      	ittte	ne
  402154:	6983      	ldrne	r3, [r0, #24]
  402156:	700b      	strbne	r3, [r1, #0]
	return 0;
  402158:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  40215a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  40215c:	4770      	bx	lr
  40215e:	bf00      	nop

00402160 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402160:	6943      	ldr	r3, [r0, #20]
  402162:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  402166:	bf1d      	ittte	ne
  402168:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  40216c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40216e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  402170:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  402172:	4770      	bx	lr

00402174 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402174:	6943      	ldr	r3, [r0, #20]
  402176:	f013 0f01 	tst.w	r3, #1
  40217a:	d005      	beq.n	402188 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40217c:	6983      	ldr	r3, [r0, #24]
  40217e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402182:	600b      	str	r3, [r1, #0]

	return 0;
  402184:	2000      	movs	r0, #0
  402186:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  402188:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  40218a:	4770      	bx	lr

0040218c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  40218c:	b4f0      	push	{r4, r5, r6, r7}
  40218e:	b08c      	sub	sp, #48	; 0x30
  402190:	4607      	mov	r7, r0
  402192:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  402194:	ac01      	add	r4, sp, #4
  402196:	4d11      	ldr	r5, [pc, #68]	; (4021dc <pwm_clocks_generate+0x50>)
  402198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40219a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40219c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40219e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4021a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4021a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4021a8:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4021aa:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4021ac:	f852 3b04 	ldr.w	r3, [r2], #4
  4021b0:	fbb6 f3f3 	udiv	r3, r6, r3
  4021b4:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4021b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4021bc:	d905      	bls.n	4021ca <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  4021be:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4021c0:	280b      	cmp	r0, #11
  4021c2:	d1f3      	bne.n	4021ac <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  4021c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4021c8:	e005      	b.n	4021d6 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4021ca:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  4021cc:	bf94      	ite	ls
  4021ce:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  4021d2:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  4021d6:	b00c      	add	sp, #48	; 0x30
  4021d8:	bcf0      	pop	{r4, r5, r6, r7}
  4021da:	4770      	bx	lr
  4021dc:	00408174 	.word	0x00408174

004021e0 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4021e0:	b570      	push	{r4, r5, r6, lr}
  4021e2:	4606      	mov	r6, r0
  4021e4:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4021e6:	6808      	ldr	r0, [r1, #0]
  4021e8:	b140      	cbz	r0, 4021fc <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4021ea:	6889      	ldr	r1, [r1, #8]
  4021ec:	f7ff ffce 	bl	40218c <pwm_clocks_generate>
  4021f0:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  4021f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4021f6:	4298      	cmp	r0, r3
  4021f8:	d101      	bne.n	4021fe <pwm_init+0x1e>
  4021fa:	e00e      	b.n	40221a <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  4021fc:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  4021fe:	6860      	ldr	r0, [r4, #4]
  402200:	b140      	cbz	r0, 402214 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  402202:	68a1      	ldr	r1, [r4, #8]
  402204:	f7ff ffc2 	bl	40218c <pwm_clocks_generate>

		if (result == PWM_INVALID_ARGUMENT) {
  402208:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40220c:	4298      	cmp	r0, r3
  40220e:	d007      	beq.n	402220 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  402210:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  402214:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  402216:	2000      	movs	r0, #0
  402218:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  40221a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40221e:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  402220:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  402224:	bd70      	pop	{r4, r5, r6, pc}
  402226:	bf00      	nop

00402228 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  402228:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  40222a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40222c:	684a      	ldr	r2, [r1, #4]
  40222e:	f002 020f 	and.w	r2, r2, #15
  402232:	8a8c      	ldrh	r4, [r1, #20]
  402234:	4322      	orrs	r2, r4
  402236:	890c      	ldrh	r4, [r1, #8]
  402238:	4322      	orrs	r2, r4
  40223a:	7a8c      	ldrb	r4, [r1, #10]
  40223c:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  402240:	7d8c      	ldrb	r4, [r1, #22]
  402242:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  402246:	7dcc      	ldrb	r4, [r1, #23]
  402248:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  40224c:	7e0c      	ldrb	r4, [r1, #24]
  40224e:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  402252:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  402256:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  40225a:	68ca      	ldr	r2, [r1, #12]
  40225c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  402260:	690a      	ldr	r2, [r1, #16]
  402262:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  402266:	7d8a      	ldrb	r2, [r1, #22]
  402268:	b13a      	cbz	r2, 40227a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  40226a:	8b8c      	ldrh	r4, [r1, #28]
  40226c:	8b4a      	ldrh	r2, [r1, #26]
  40226e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  402272:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  402276:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  40227a:	6c84      	ldr	r4, [r0, #72]	; 0x48
  40227c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  402280:	409a      	lsls	r2, r3
  402282:	43d2      	mvns	r2, r2
  402284:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  402288:	7fcc      	ldrb	r4, [r1, #31]
  40228a:	fa04 f603 	lsl.w	r6, r4, r3
  40228e:	7f8c      	ldrb	r4, [r1, #30]
  402290:	409c      	lsls	r4, r3
  402292:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  402296:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  402298:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  40229a:	6c44      	ldr	r4, [r0, #68]	; 0x44
  40229c:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40229e:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  4022a2:	fa04 f503 	lsl.w	r5, r4, r3
  4022a6:	f891 4020 	ldrb.w	r4, [r1, #32]
  4022aa:	409c      	lsls	r4, r3
  4022ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4022b0:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  4022b2:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4022b4:	2201      	movs	r2, #1
  4022b6:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  4022b8:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4022bc:	b11c      	cbz	r4, 4022c6 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  4022be:	6a04      	ldr	r4, [r0, #32]
  4022c0:	4314      	orrs	r4, r2
  4022c2:	6204      	str	r4, [r0, #32]
  4022c4:	e003      	b.n	4022ce <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  4022c6:	6a04      	ldr	r4, [r0, #32]
  4022c8:	ea24 0402 	bic.w	r4, r4, r2
  4022cc:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4022ce:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  4022d2:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  4022d4:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4022d6:	bf0c      	ite	eq
  4022d8:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  4022da:	4394      	bicne	r4, r2
  4022dc:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4022de:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  4022e2:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  4022e4:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4022e6:	bf0c      	ite	eq
  4022e8:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  4022ec:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  4022f0:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  4022f2:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  4022f4:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  4022f6:	22ff      	movs	r2, #255	; 0xff
  4022f8:	409a      	lsls	r2, r3
  4022fa:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  4022fe:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  402302:	fa01 f303 	lsl.w	r3, r1, r3
  402306:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  402308:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  40230a:	2000      	movs	r0, #0
  40230c:	bc70      	pop	{r4, r5, r6}
  40230e:	4770      	bx	lr

00402310 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  402310:	690b      	ldr	r3, [r1, #16]
  402312:	4293      	cmp	r3, r2
  402314:	d307      	bcc.n	402326 <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  402316:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  402318:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  40231a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  40231e:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  402322:	2000      	movs	r0, #0
  402324:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  402326:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  40232a:	4770      	bx	lr

0040232c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  40232c:	2301      	movs	r3, #1
  40232e:	fa03 f101 	lsl.w	r1, r3, r1
  402332:	6041      	str	r1, [r0, #4]
  402334:	4770      	bx	lr
  402336:	bf00      	nop

00402338 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  402338:	2301      	movs	r3, #1
  40233a:	fa03 f101 	lsl.w	r1, r3, r1
  40233e:	6081      	str	r1, [r0, #8]
  402340:	4770      	bx	lr
  402342:	bf00      	nop

00402344 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402344:	e7fe      	b.n	402344 <Dummy_Handler>
  402346:	bf00      	nop

00402348 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402348:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  40234a:	4b20      	ldr	r3, [pc, #128]	; (4023cc <Reset_Handler+0x84>)
  40234c:	4a20      	ldr	r2, [pc, #128]	; (4023d0 <Reset_Handler+0x88>)
  40234e:	429a      	cmp	r2, r3
  402350:	d912      	bls.n	402378 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  402352:	4b20      	ldr	r3, [pc, #128]	; (4023d4 <Reset_Handler+0x8c>)
  402354:	4a1d      	ldr	r2, [pc, #116]	; (4023cc <Reset_Handler+0x84>)
  402356:	429a      	cmp	r2, r3
  402358:	d21e      	bcs.n	402398 <Reset_Handler+0x50>
  40235a:	4611      	mov	r1, r2
  40235c:	3b01      	subs	r3, #1
  40235e:	1a9b      	subs	r3, r3, r2
  402360:	f023 0303 	bic.w	r3, r3, #3
  402364:	3304      	adds	r3, #4
  402366:	4a1a      	ldr	r2, [pc, #104]	; (4023d0 <Reset_Handler+0x88>)
  402368:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  40236a:	f852 0b04 	ldr.w	r0, [r2], #4
  40236e:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  402372:	429a      	cmp	r2, r3
  402374:	d1f9      	bne.n	40236a <Reset_Handler+0x22>
  402376:	e00f      	b.n	402398 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  402378:	4b14      	ldr	r3, [pc, #80]	; (4023cc <Reset_Handler+0x84>)
  40237a:	4a15      	ldr	r2, [pc, #84]	; (4023d0 <Reset_Handler+0x88>)
  40237c:	429a      	cmp	r2, r3
  40237e:	d20b      	bcs.n	402398 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402380:	4b14      	ldr	r3, [pc, #80]	; (4023d4 <Reset_Handler+0x8c>)
  402382:	4a12      	ldr	r2, [pc, #72]	; (4023cc <Reset_Handler+0x84>)
  402384:	1a9a      	subs	r2, r3, r2
  402386:	4814      	ldr	r0, [pc, #80]	; (4023d8 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402388:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40238a:	b12a      	cbz	r2, 402398 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  40238c:	f851 2904 	ldr.w	r2, [r1], #-4
  402390:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402394:	4281      	cmp	r1, r0
  402396:	d1f9      	bne.n	40238c <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402398:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40239a:	4b10      	ldr	r3, [pc, #64]	; (4023dc <Reset_Handler+0x94>)
  40239c:	4a10      	ldr	r2, [pc, #64]	; (4023e0 <Reset_Handler+0x98>)
  40239e:	429a      	cmp	r2, r3
  4023a0:	d20b      	bcs.n	4023ba <Reset_Handler+0x72>
  4023a2:	1d13      	adds	r3, r2, #4
  4023a4:	4a0f      	ldr	r2, [pc, #60]	; (4023e4 <Reset_Handler+0x9c>)
  4023a6:	1ad2      	subs	r2, r2, r3
  4023a8:	f022 0203 	bic.w	r2, r2, #3
  4023ac:	441a      	add	r2, r3
  4023ae:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4023b0:	2100      	movs	r1, #0
  4023b2:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4023b6:	429a      	cmp	r2, r3
  4023b8:	d1fb      	bne.n	4023b2 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4023ba:	4b0b      	ldr	r3, [pc, #44]	; (4023e8 <Reset_Handler+0xa0>)
  4023bc:	4a0b      	ldr	r2, [pc, #44]	; (4023ec <Reset_Handler+0xa4>)
  4023be:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4023c0:	f000 fcb0 	bl	402d24 <__libc_init_array>

	/* Branch to main function */
	main();
  4023c4:	f7fd ff96 	bl	4002f4 <main>
  4023c8:	e7fe      	b.n	4023c8 <Reset_Handler+0x80>
  4023ca:	bf00      	nop
  4023cc:	20000000 	.word	0x20000000
  4023d0:	0040852c 	.word	0x0040852c
  4023d4:	200001e8 	.word	0x200001e8
  4023d8:	00408528 	.word	0x00408528
  4023dc:	20000874 	.word	0x20000874
  4023e0:	200001e8 	.word	0x200001e8
  4023e4:	20000877 	.word	0x20000877
  4023e8:	e000ed00 	.word	0xe000ed00
  4023ec:	00400000 	.word	0x00400000

004023f0 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4023f0:	4b3d      	ldr	r3, [pc, #244]	; (4024e8 <SystemCoreClockUpdate+0xf8>)
  4023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023f4:	f003 0303 	and.w	r3, r3, #3
  4023f8:	2b03      	cmp	r3, #3
  4023fa:	d85d      	bhi.n	4024b8 <SystemCoreClockUpdate+0xc8>
  4023fc:	e8df f003 	tbb	[pc, r3]
  402400:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402404:	4b39      	ldr	r3, [pc, #228]	; (4024ec <SystemCoreClockUpdate+0xfc>)
  402406:	695b      	ldr	r3, [r3, #20]
  402408:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40240c:	bf14      	ite	ne
  40240e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402412:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402416:	4b36      	ldr	r3, [pc, #216]	; (4024f0 <SystemCoreClockUpdate+0x100>)
  402418:	601a      	str	r2, [r3, #0]
  40241a:	e04d      	b.n	4024b8 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40241c:	4b32      	ldr	r3, [pc, #200]	; (4024e8 <SystemCoreClockUpdate+0xf8>)
  40241e:	6a1b      	ldr	r3, [r3, #32]
  402420:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402424:	d003      	beq.n	40242e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402426:	4a33      	ldr	r2, [pc, #204]	; (4024f4 <SystemCoreClockUpdate+0x104>)
  402428:	4b31      	ldr	r3, [pc, #196]	; (4024f0 <SystemCoreClockUpdate+0x100>)
  40242a:	601a      	str	r2, [r3, #0]
  40242c:	e044      	b.n	4024b8 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40242e:	4a32      	ldr	r2, [pc, #200]	; (4024f8 <SystemCoreClockUpdate+0x108>)
  402430:	4b2f      	ldr	r3, [pc, #188]	; (4024f0 <SystemCoreClockUpdate+0x100>)
  402432:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402434:	4b2c      	ldr	r3, [pc, #176]	; (4024e8 <SystemCoreClockUpdate+0xf8>)
  402436:	6a1b      	ldr	r3, [r3, #32]
  402438:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40243c:	2b10      	cmp	r3, #16
  40243e:	d002      	beq.n	402446 <SystemCoreClockUpdate+0x56>
  402440:	2b20      	cmp	r3, #32
  402442:	d004      	beq.n	40244e <SystemCoreClockUpdate+0x5e>
  402444:	e038      	b.n	4024b8 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402446:	4a2d      	ldr	r2, [pc, #180]	; (4024fc <SystemCoreClockUpdate+0x10c>)
  402448:	4b29      	ldr	r3, [pc, #164]	; (4024f0 <SystemCoreClockUpdate+0x100>)
  40244a:	601a      	str	r2, [r3, #0]
			break;
  40244c:	e034      	b.n	4024b8 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40244e:	4a29      	ldr	r2, [pc, #164]	; (4024f4 <SystemCoreClockUpdate+0x104>)
  402450:	4b27      	ldr	r3, [pc, #156]	; (4024f0 <SystemCoreClockUpdate+0x100>)
  402452:	601a      	str	r2, [r3, #0]
			break;
  402454:	e030      	b.n	4024b8 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402456:	4b24      	ldr	r3, [pc, #144]	; (4024e8 <SystemCoreClockUpdate+0xf8>)
  402458:	6a1b      	ldr	r3, [r3, #32]
  40245a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40245e:	d003      	beq.n	402468 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402460:	4a24      	ldr	r2, [pc, #144]	; (4024f4 <SystemCoreClockUpdate+0x104>)
  402462:	4b23      	ldr	r3, [pc, #140]	; (4024f0 <SystemCoreClockUpdate+0x100>)
  402464:	601a      	str	r2, [r3, #0]
  402466:	e012      	b.n	40248e <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402468:	4a23      	ldr	r2, [pc, #140]	; (4024f8 <SystemCoreClockUpdate+0x108>)
  40246a:	4b21      	ldr	r3, [pc, #132]	; (4024f0 <SystemCoreClockUpdate+0x100>)
  40246c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40246e:	4b1e      	ldr	r3, [pc, #120]	; (4024e8 <SystemCoreClockUpdate+0xf8>)
  402470:	6a1b      	ldr	r3, [r3, #32]
  402472:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402476:	2b10      	cmp	r3, #16
  402478:	d002      	beq.n	402480 <SystemCoreClockUpdate+0x90>
  40247a:	2b20      	cmp	r3, #32
  40247c:	d004      	beq.n	402488 <SystemCoreClockUpdate+0x98>
  40247e:	e006      	b.n	40248e <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402480:	4a1e      	ldr	r2, [pc, #120]	; (4024fc <SystemCoreClockUpdate+0x10c>)
  402482:	4b1b      	ldr	r3, [pc, #108]	; (4024f0 <SystemCoreClockUpdate+0x100>)
  402484:	601a      	str	r2, [r3, #0]
					break;
  402486:	e002      	b.n	40248e <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402488:	4a1a      	ldr	r2, [pc, #104]	; (4024f4 <SystemCoreClockUpdate+0x104>)
  40248a:	4b19      	ldr	r3, [pc, #100]	; (4024f0 <SystemCoreClockUpdate+0x100>)
  40248c:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40248e:	4b16      	ldr	r3, [pc, #88]	; (4024e8 <SystemCoreClockUpdate+0xf8>)
  402490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402492:	f003 0303 	and.w	r3, r3, #3
  402496:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402498:	4a13      	ldr	r2, [pc, #76]	; (4024e8 <SystemCoreClockUpdate+0xf8>)
  40249a:	bf07      	ittee	eq
  40249c:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40249e:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4024a0:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4024a2:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4024a4:	4812      	ldr	r0, [pc, #72]	; (4024f0 <SystemCoreClockUpdate+0x100>)
  4024a6:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4024aa:	6803      	ldr	r3, [r0, #0]
  4024ac:	fb01 3303 	mla	r3, r1, r3, r3
  4024b0:	b2d2      	uxtb	r2, r2
  4024b2:	fbb3 f3f2 	udiv	r3, r3, r2
  4024b6:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4024b8:	4b0b      	ldr	r3, [pc, #44]	; (4024e8 <SystemCoreClockUpdate+0xf8>)
  4024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024c0:	2b70      	cmp	r3, #112	; 0x70
  4024c2:	d107      	bne.n	4024d4 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4024c4:	4a0a      	ldr	r2, [pc, #40]	; (4024f0 <SystemCoreClockUpdate+0x100>)
  4024c6:	6813      	ldr	r3, [r2, #0]
  4024c8:	490d      	ldr	r1, [pc, #52]	; (402500 <SystemCoreClockUpdate+0x110>)
  4024ca:	fba1 1303 	umull	r1, r3, r1, r3
  4024ce:	085b      	lsrs	r3, r3, #1
  4024d0:	6013      	str	r3, [r2, #0]
  4024d2:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4024d4:	4b04      	ldr	r3, [pc, #16]	; (4024e8 <SystemCoreClockUpdate+0xf8>)
  4024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4024d8:	4905      	ldr	r1, [pc, #20]	; (4024f0 <SystemCoreClockUpdate+0x100>)
  4024da:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4024de:	680b      	ldr	r3, [r1, #0]
  4024e0:	40d3      	lsrs	r3, r2
  4024e2:	600b      	str	r3, [r1, #0]
  4024e4:	4770      	bx	lr
  4024e6:	bf00      	nop
  4024e8:	400e0400 	.word	0x400e0400
  4024ec:	400e1410 	.word	0x400e1410
  4024f0:	20000010 	.word	0x20000010
  4024f4:	00b71b00 	.word	0x00b71b00
  4024f8:	003d0900 	.word	0x003d0900
  4024fc:	007a1200 	.word	0x007a1200
  402500:	aaaaaaab 	.word	0xaaaaaaab

00402504 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402504:	4b1a      	ldr	r3, [pc, #104]	; (402570 <system_init_flash+0x6c>)
  402506:	4298      	cmp	r0, r3
  402508:	d807      	bhi.n	40251a <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40250a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  40250e:	4a19      	ldr	r2, [pc, #100]	; (402574 <system_init_flash+0x70>)
  402510:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402512:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402516:	6013      	str	r3, [r2, #0]
  402518:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40251a:	4b17      	ldr	r3, [pc, #92]	; (402578 <system_init_flash+0x74>)
  40251c:	4298      	cmp	r0, r3
  40251e:	d806      	bhi.n	40252e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402520:	4b16      	ldr	r3, [pc, #88]	; (40257c <system_init_flash+0x78>)
  402522:	4a14      	ldr	r2, [pc, #80]	; (402574 <system_init_flash+0x70>)
  402524:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402526:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40252a:	6013      	str	r3, [r2, #0]
  40252c:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40252e:	4b14      	ldr	r3, [pc, #80]	; (402580 <system_init_flash+0x7c>)
  402530:	4298      	cmp	r0, r3
  402532:	d806      	bhi.n	402542 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402534:	4b13      	ldr	r3, [pc, #76]	; (402584 <system_init_flash+0x80>)
  402536:	4a0f      	ldr	r2, [pc, #60]	; (402574 <system_init_flash+0x70>)
  402538:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40253a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40253e:	6013      	str	r3, [r2, #0]
  402540:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402542:	4b11      	ldr	r3, [pc, #68]	; (402588 <system_init_flash+0x84>)
  402544:	4298      	cmp	r0, r3
  402546:	d806      	bhi.n	402556 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402548:	4b10      	ldr	r3, [pc, #64]	; (40258c <system_init_flash+0x88>)
  40254a:	4a0a      	ldr	r2, [pc, #40]	; (402574 <system_init_flash+0x70>)
  40254c:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40254e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402552:	6013      	str	r3, [r2, #0]
  402554:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402556:	4b0e      	ldr	r3, [pc, #56]	; (402590 <system_init_flash+0x8c>)
  402558:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40255a:	bf94      	ite	ls
  40255c:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402560:	4b0c      	ldrhi	r3, [pc, #48]	; (402594 <system_init_flash+0x90>)
  402562:	4a04      	ldr	r2, [pc, #16]	; (402574 <system_init_flash+0x70>)
  402564:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402566:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40256a:	6013      	str	r3, [r2, #0]
  40256c:	4770      	bx	lr
  40256e:	bf00      	nop
  402570:	01312cff 	.word	0x01312cff
  402574:	400e0a00 	.word	0x400e0a00
  402578:	026259ff 	.word	0x026259ff
  40257c:	04000100 	.word	0x04000100
  402580:	039386ff 	.word	0x039386ff
  402584:	04000200 	.word	0x04000200
  402588:	04c4b3ff 	.word	0x04c4b3ff
  40258c:	04000300 	.word	0x04000300
  402590:	05f5e0ff 	.word	0x05f5e0ff
  402594:	04000500 	.word	0x04000500

00402598 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402598:	4b09      	ldr	r3, [pc, #36]	; (4025c0 <_sbrk+0x28>)
  40259a:	681b      	ldr	r3, [r3, #0]
  40259c:	b913      	cbnz	r3, 4025a4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40259e:	4a09      	ldr	r2, [pc, #36]	; (4025c4 <_sbrk+0x2c>)
  4025a0:	4b07      	ldr	r3, [pc, #28]	; (4025c0 <_sbrk+0x28>)
  4025a2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4025a4:	4b06      	ldr	r3, [pc, #24]	; (4025c0 <_sbrk+0x28>)
  4025a6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4025a8:	181a      	adds	r2, r3, r0
  4025aa:	4907      	ldr	r1, [pc, #28]	; (4025c8 <_sbrk+0x30>)
  4025ac:	4291      	cmp	r1, r2
  4025ae:	db04      	blt.n	4025ba <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4025b0:	4610      	mov	r0, r2
  4025b2:	4a03      	ldr	r2, [pc, #12]	; (4025c0 <_sbrk+0x28>)
  4025b4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4025b6:	4618      	mov	r0, r3
  4025b8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4025ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4025be:	4770      	bx	lr
  4025c0:	200004ec 	.word	0x200004ec
  4025c4:	20003878 	.word	0x20003878
  4025c8:	20027ffc 	.word	0x20027ffc

004025cc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4025cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4025d0:	4770      	bx	lr
  4025d2:	bf00      	nop

004025d4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4025d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4025d8:	604b      	str	r3, [r1, #4]

	return 0;
}
  4025da:	2000      	movs	r0, #0
  4025dc:	4770      	bx	lr
  4025de:	bf00      	nop

004025e0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4025e0:	2001      	movs	r0, #1
  4025e2:	4770      	bx	lr

004025e4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4025e4:	2000      	movs	r0, #0
  4025e6:	4770      	bx	lr

004025e8 <atan2>:
  4025e8:	f000 b85e 	b.w	4026a8 <__ieee754_atan2>

004025ec <sqrt>:
  4025ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025f0:	b08b      	sub	sp, #44	; 0x2c
  4025f2:	4604      	mov	r4, r0
  4025f4:	460d      	mov	r5, r1
  4025f6:	f000 f921 	bl	40283c <__ieee754_sqrt>
  4025fa:	4b28      	ldr	r3, [pc, #160]	; (40269c <sqrt+0xb0>)
  4025fc:	f993 a000 	ldrsb.w	sl, [r3]
  402600:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
  402604:	4606      	mov	r6, r0
  402606:	460f      	mov	r7, r1
  402608:	d012      	beq.n	402630 <sqrt+0x44>
  40260a:	4622      	mov	r2, r4
  40260c:	462b      	mov	r3, r5
  40260e:	4620      	mov	r0, r4
  402610:	4629      	mov	r1, r5
  402612:	f004 ffef 	bl	4075f4 <__aeabi_dcmpun>
  402616:	4683      	mov	fp, r0
  402618:	b950      	cbnz	r0, 402630 <sqrt+0x44>
  40261a:	f04f 0800 	mov.w	r8, #0
  40261e:	f04f 0900 	mov.w	r9, #0
  402622:	4642      	mov	r2, r8
  402624:	464b      	mov	r3, r9
  402626:	4620      	mov	r0, r4
  402628:	4629      	mov	r1, r5
  40262a:	f004 ffbb 	bl	4075a4 <__aeabi_dcmplt>
  40262e:	b920      	cbnz	r0, 40263a <sqrt+0x4e>
  402630:	4630      	mov	r0, r6
  402632:	4639      	mov	r1, r7
  402634:	b00b      	add	sp, #44	; 0x2c
  402636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40263a:	4b19      	ldr	r3, [pc, #100]	; (4026a0 <sqrt+0xb4>)
  40263c:	f8cd b020 	str.w	fp, [sp, #32]
  402640:	2201      	movs	r2, #1
  402642:	e9cd 4504 	strd	r4, r5, [sp, #16]
  402646:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40264a:	e88d 000c 	stmia.w	sp, {r2, r3}
  40264e:	f1ba 0f00 	cmp.w	sl, #0
  402652:	d015      	beq.n	402680 <sqrt+0x94>
  402654:	4642      	mov	r2, r8
  402656:	464b      	mov	r3, r9
  402658:	4640      	mov	r0, r8
  40265a:	4649      	mov	r1, r9
  40265c:	f004 fe5a 	bl	407314 <__aeabi_ddiv>
  402660:	f1ba 0f02 	cmp.w	sl, #2
  402664:	e9cd 0106 	strd	r0, r1, [sp, #24]
  402668:	d10c      	bne.n	402684 <sqrt+0x98>
  40266a:	f000 fb55 	bl	402d18 <__errno>
  40266e:	2321      	movs	r3, #33	; 0x21
  402670:	6003      	str	r3, [r0, #0]
  402672:	9b08      	ldr	r3, [sp, #32]
  402674:	b963      	cbnz	r3, 402690 <sqrt+0xa4>
  402676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40267a:	b00b      	add	sp, #44	; 0x2c
  40267c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402680:	e9cd 8906 	strd	r8, r9, [sp, #24]
  402684:	4668      	mov	r0, sp
  402686:	f000 fb3d 	bl	402d04 <matherr>
  40268a:	2800      	cmp	r0, #0
  40268c:	d1f1      	bne.n	402672 <sqrt+0x86>
  40268e:	e7ec      	b.n	40266a <sqrt+0x7e>
  402690:	f000 fb42 	bl	402d18 <__errno>
  402694:	9b08      	ldr	r3, [sp, #32]
  402696:	6003      	str	r3, [r0, #0]
  402698:	e7ed      	b.n	402676 <sqrt+0x8a>
  40269a:	bf00      	nop
  40269c:	20000014 	.word	0x20000014
  4026a0:	004081a0 	.word	0x004081a0
  4026a4:	00000000 	.word	0x00000000

004026a8 <__ieee754_atan2>:
  4026a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026ac:	4254      	negs	r4, r2
  4026ae:	4314      	orrs	r4, r2
  4026b0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  4026b4:	f8df e180 	ldr.w	lr, [pc, #384]	; 402838 <__ieee754_atan2+0x190>
  4026b8:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  4026bc:	4574      	cmp	r4, lr
  4026be:	4606      	mov	r6, r0
  4026c0:	460d      	mov	r5, r1
  4026c2:	d83e      	bhi.n	402742 <__ieee754_atan2+0x9a>
  4026c4:	4244      	negs	r4, r0
  4026c6:	4304      	orrs	r4, r0
  4026c8:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  4026cc:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  4026d0:	4574      	cmp	r4, lr
  4026d2:	468a      	mov	sl, r1
  4026d4:	d835      	bhi.n	402742 <__ieee754_atan2+0x9a>
  4026d6:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  4026da:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  4026de:	4314      	orrs	r4, r2
  4026e0:	d044      	beq.n	40276c <__ieee754_atan2+0xc4>
  4026e2:	179c      	asrs	r4, r3, #30
  4026e4:	f004 0402 	and.w	r4, r4, #2
  4026e8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  4026ec:	ea50 010b 	orrs.w	r1, r0, fp
  4026f0:	d02f      	beq.n	402752 <__ieee754_atan2+0xaa>
  4026f2:	ea52 0109 	orrs.w	r1, r2, r9
  4026f6:	d033      	beq.n	402760 <__ieee754_atan2+0xb8>
  4026f8:	45f1      	cmp	r9, lr
  4026fa:	d046      	beq.n	40278a <__ieee754_atan2+0xe2>
  4026fc:	45f3      	cmp	fp, lr
  4026fe:	d02f      	beq.n	402760 <__ieee754_atan2+0xb8>
  402700:	ebc9 090b 	rsb	r9, r9, fp
  402704:	ea4f 5929 	mov.w	r9, r9, asr #20
  402708:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  40270c:	dc34      	bgt.n	402778 <__ieee754_atan2+0xd0>
  40270e:	2b00      	cmp	r3, #0
  402710:	db57      	blt.n	4027c2 <__ieee754_atan2+0x11a>
  402712:	4630      	mov	r0, r6
  402714:	4629      	mov	r1, r5
  402716:	f004 fdfd 	bl	407314 <__aeabi_ddiv>
  40271a:	f000 faef 	bl	402cfc <fabs>
  40271e:	f000 f94f 	bl	4029c0 <atan>
  402722:	2c01      	cmp	r4, #1
  402724:	d04a      	beq.n	4027bc <__ieee754_atan2+0x114>
  402726:	2c02      	cmp	r4, #2
  402728:	d03b      	beq.n	4027a2 <__ieee754_atan2+0xfa>
  40272a:	b184      	cbz	r4, 40274e <__ieee754_atan2+0xa6>
  40272c:	a332      	add	r3, pc, #200	; (adr r3, 4027f8 <__ieee754_atan2+0x150>)
  40272e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402732:	f004 fb11 	bl	406d58 <__aeabi_dsub>
  402736:	a332      	add	r3, pc, #200	; (adr r3, 402800 <__ieee754_atan2+0x158>)
  402738:	e9d3 2300 	ldrd	r2, r3, [r3]
  40273c:	f004 fb0c 	bl	406d58 <__aeabi_dsub>
  402740:	e005      	b.n	40274e <__ieee754_atan2+0xa6>
  402742:	4610      	mov	r0, r2
  402744:	4619      	mov	r1, r3
  402746:	4632      	mov	r2, r6
  402748:	462b      	mov	r3, r5
  40274a:	f004 fb07 	bl	406d5c <__adddf3>
  40274e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402752:	2c02      	cmp	r4, #2
  402754:	d014      	beq.n	402780 <__ieee754_atan2+0xd8>
  402756:	2c03      	cmp	r4, #3
  402758:	d10c      	bne.n	402774 <__ieee754_atan2+0xcc>
  40275a:	482d      	ldr	r0, [pc, #180]	; (402810 <__ieee754_atan2+0x168>)
  40275c:	492d      	ldr	r1, [pc, #180]	; (402814 <__ieee754_atan2+0x16c>)
  40275e:	e7f6      	b.n	40274e <__ieee754_atan2+0xa6>
  402760:	f1ba 0f00 	cmp.w	sl, #0
  402764:	482a      	ldr	r0, [pc, #168]	; (402810 <__ieee754_atan2+0x168>)
  402766:	db0e      	blt.n	402786 <__ieee754_atan2+0xde>
  402768:	492b      	ldr	r1, [pc, #172]	; (402818 <__ieee754_atan2+0x170>)
  40276a:	e7f0      	b.n	40274e <__ieee754_atan2+0xa6>
  40276c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402770:	f000 b926 	b.w	4029c0 <atan>
  402774:	4629      	mov	r1, r5
  402776:	e7ea      	b.n	40274e <__ieee754_atan2+0xa6>
  402778:	a123      	add	r1, pc, #140	; (adr r1, 402808 <__ieee754_atan2+0x160>)
  40277a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40277e:	e7d0      	b.n	402722 <__ieee754_atan2+0x7a>
  402780:	4823      	ldr	r0, [pc, #140]	; (402810 <__ieee754_atan2+0x168>)
  402782:	4926      	ldr	r1, [pc, #152]	; (40281c <__ieee754_atan2+0x174>)
  402784:	e7e3      	b.n	40274e <__ieee754_atan2+0xa6>
  402786:	4926      	ldr	r1, [pc, #152]	; (402820 <__ieee754_atan2+0x178>)
  402788:	e7e1      	b.n	40274e <__ieee754_atan2+0xa6>
  40278a:	45cb      	cmp	fp, r9
  40278c:	d01f      	beq.n	4027ce <__ieee754_atan2+0x126>
  40278e:	2c02      	cmp	r4, #2
  402790:	d0f6      	beq.n	402780 <__ieee754_atan2+0xd8>
  402792:	2c03      	cmp	r4, #3
  402794:	d0e1      	beq.n	40275a <__ieee754_atan2+0xb2>
  402796:	2c01      	cmp	r4, #1
  402798:	f04f 0000 	mov.w	r0, #0
  40279c:	d020      	beq.n	4027e0 <__ieee754_atan2+0x138>
  40279e:	4601      	mov	r1, r0
  4027a0:	e7d5      	b.n	40274e <__ieee754_atan2+0xa6>
  4027a2:	a315      	add	r3, pc, #84	; (adr r3, 4027f8 <__ieee754_atan2+0x150>)
  4027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4027a8:	f004 fad6 	bl	406d58 <__aeabi_dsub>
  4027ac:	4602      	mov	r2, r0
  4027ae:	460b      	mov	r3, r1
  4027b0:	a113      	add	r1, pc, #76	; (adr r1, 402800 <__ieee754_atan2+0x158>)
  4027b2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4027b6:	f004 facf 	bl	406d58 <__aeabi_dsub>
  4027ba:	e7c8      	b.n	40274e <__ieee754_atan2+0xa6>
  4027bc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4027c0:	e7c5      	b.n	40274e <__ieee754_atan2+0xa6>
  4027c2:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  4027c6:	daa4      	bge.n	402712 <__ieee754_atan2+0x6a>
  4027c8:	2000      	movs	r0, #0
  4027ca:	2100      	movs	r1, #0
  4027cc:	e7a9      	b.n	402722 <__ieee754_atan2+0x7a>
  4027ce:	2c02      	cmp	r4, #2
  4027d0:	d00e      	beq.n	4027f0 <__ieee754_atan2+0x148>
  4027d2:	2c03      	cmp	r4, #3
  4027d4:	d009      	beq.n	4027ea <__ieee754_atan2+0x142>
  4027d6:	2c01      	cmp	r4, #1
  4027d8:	480d      	ldr	r0, [pc, #52]	; (402810 <__ieee754_atan2+0x168>)
  4027da:	d004      	beq.n	4027e6 <__ieee754_atan2+0x13e>
  4027dc:	4911      	ldr	r1, [pc, #68]	; (402824 <__ieee754_atan2+0x17c>)
  4027de:	e7b6      	b.n	40274e <__ieee754_atan2+0xa6>
  4027e0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4027e4:	e7b3      	b.n	40274e <__ieee754_atan2+0xa6>
  4027e6:	4910      	ldr	r1, [pc, #64]	; (402828 <__ieee754_atan2+0x180>)
  4027e8:	e7b1      	b.n	40274e <__ieee754_atan2+0xa6>
  4027ea:	4810      	ldr	r0, [pc, #64]	; (40282c <__ieee754_atan2+0x184>)
  4027ec:	4910      	ldr	r1, [pc, #64]	; (402830 <__ieee754_atan2+0x188>)
  4027ee:	e7ae      	b.n	40274e <__ieee754_atan2+0xa6>
  4027f0:	480e      	ldr	r0, [pc, #56]	; (40282c <__ieee754_atan2+0x184>)
  4027f2:	4910      	ldr	r1, [pc, #64]	; (402834 <__ieee754_atan2+0x18c>)
  4027f4:	e7ab      	b.n	40274e <__ieee754_atan2+0xa6>
  4027f6:	bf00      	nop
  4027f8:	33145c07 	.word	0x33145c07
  4027fc:	3ca1a626 	.word	0x3ca1a626
  402800:	54442d18 	.word	0x54442d18
  402804:	400921fb 	.word	0x400921fb
  402808:	54442d18 	.word	0x54442d18
  40280c:	3ff921fb 	.word	0x3ff921fb
  402810:	54442d18 	.word	0x54442d18
  402814:	c00921fb 	.word	0xc00921fb
  402818:	3ff921fb 	.word	0x3ff921fb
  40281c:	400921fb 	.word	0x400921fb
  402820:	bff921fb 	.word	0xbff921fb
  402824:	3fe921fb 	.word	0x3fe921fb
  402828:	bfe921fb 	.word	0xbfe921fb
  40282c:	7f3321d2 	.word	0x7f3321d2
  402830:	c002d97c 	.word	0xc002d97c
  402834:	4002d97c 	.word	0x4002d97c
  402838:	7ff00000 	.word	0x7ff00000

0040283c <__ieee754_sqrt>:
  40283c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402840:	4e5d      	ldr	r6, [pc, #372]	; (4029b8 <__ieee754_sqrt+0x17c>)
  402842:	46b6      	mov	lr, r6
  402844:	400e      	ands	r6, r1
  402846:	4576      	cmp	r6, lr
  402848:	460c      	mov	r4, r1
  40284a:	4605      	mov	r5, r0
  40284c:	f000 8095 	beq.w	40297a <__ieee754_sqrt+0x13e>
  402850:	2900      	cmp	r1, #0
  402852:	460b      	mov	r3, r1
  402854:	4602      	mov	r2, r0
  402856:	dd73      	ble.n	402940 <__ieee754_sqrt+0x104>
  402858:	150f      	asrs	r7, r1, #20
  40285a:	d07e      	beq.n	40295a <__ieee754_sqrt+0x11e>
  40285c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  402860:	f3c3 0313 	ubfx	r3, r3, #0, #20
  402864:	07f8      	lsls	r0, r7, #31
  402866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40286a:	d464      	bmi.n	402936 <__ieee754_sqrt+0xfa>
  40286c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  402870:	2600      	movs	r6, #0
  402872:	440b      	add	r3, r1
  402874:	107f      	asrs	r7, r7, #1
  402876:	0052      	lsls	r2, r2, #1
  402878:	46b6      	mov	lr, r6
  40287a:	2016      	movs	r0, #22
  40287c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402880:	eb0e 0401 	add.w	r4, lr, r1
  402884:	429c      	cmp	r4, r3
  402886:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  40288a:	ea4f 0242 	mov.w	r2, r2, lsl #1
  40288e:	dc03      	bgt.n	402898 <__ieee754_sqrt+0x5c>
  402890:	1b1b      	subs	r3, r3, r4
  402892:	eb04 0e01 	add.w	lr, r4, r1
  402896:	440e      	add	r6, r1
  402898:	3801      	subs	r0, #1
  40289a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40289e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4028a2:	d1ed      	bne.n	402880 <__ieee754_sqrt+0x44>
  4028a4:	4684      	mov	ip, r0
  4028a6:	2420      	movs	r4, #32
  4028a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4028ac:	e009      	b.n	4028c2 <__ieee754_sqrt+0x86>
  4028ae:	d020      	beq.n	4028f2 <__ieee754_sqrt+0xb6>
  4028b0:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  4028b4:	3c01      	subs	r4, #1
  4028b6:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4028ba:	442b      	add	r3, r5
  4028bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4028c0:	d020      	beq.n	402904 <__ieee754_sqrt+0xc8>
  4028c2:	459e      	cmp	lr, r3
  4028c4:	eb01 050c 	add.w	r5, r1, ip
  4028c8:	daf1      	bge.n	4028ae <__ieee754_sqrt+0x72>
  4028ca:	2d00      	cmp	r5, #0
  4028cc:	eb05 0c01 	add.w	ip, r5, r1
  4028d0:	db09      	blt.n	4028e6 <__ieee754_sqrt+0xaa>
  4028d2:	46f0      	mov	r8, lr
  4028d4:	4295      	cmp	r5, r2
  4028d6:	ebce 0303 	rsb	r3, lr, r3
  4028da:	d900      	bls.n	4028de <__ieee754_sqrt+0xa2>
  4028dc:	3b01      	subs	r3, #1
  4028de:	1b52      	subs	r2, r2, r5
  4028e0:	4408      	add	r0, r1
  4028e2:	46c6      	mov	lr, r8
  4028e4:	e7e4      	b.n	4028b0 <__ieee754_sqrt+0x74>
  4028e6:	f1bc 0f00 	cmp.w	ip, #0
  4028ea:	dbf2      	blt.n	4028d2 <__ieee754_sqrt+0x96>
  4028ec:	f10e 0801 	add.w	r8, lr, #1
  4028f0:	e7f0      	b.n	4028d4 <__ieee754_sqrt+0x98>
  4028f2:	4295      	cmp	r5, r2
  4028f4:	d817      	bhi.n	402926 <__ieee754_sqrt+0xea>
  4028f6:	2d00      	cmp	r5, #0
  4028f8:	eb05 0c01 	add.w	ip, r5, r1
  4028fc:	db47      	blt.n	40298e <__ieee754_sqrt+0x152>
  4028fe:	4698      	mov	r8, r3
  402900:	2300      	movs	r3, #0
  402902:	e7ec      	b.n	4028de <__ieee754_sqrt+0xa2>
  402904:	4313      	orrs	r3, r2
  402906:	d110      	bne.n	40292a <__ieee754_sqrt+0xee>
  402908:	0840      	lsrs	r0, r0, #1
  40290a:	1073      	asrs	r3, r6, #1
  40290c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402910:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402914:	07f2      	lsls	r2, r6, #31
  402916:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  40291a:	bf48      	it	mi
  40291c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402920:	4649      	mov	r1, r9
  402922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402926:	4673      	mov	r3, lr
  402928:	e7c2      	b.n	4028b0 <__ieee754_sqrt+0x74>
  40292a:	1c41      	adds	r1, r0, #1
  40292c:	d033      	beq.n	402996 <__ieee754_sqrt+0x15a>
  40292e:	f000 0301 	and.w	r3, r0, #1
  402932:	4418      	add	r0, r3
  402934:	e7e8      	b.n	402908 <__ieee754_sqrt+0xcc>
  402936:	005b      	lsls	r3, r3, #1
  402938:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  40293c:	0052      	lsls	r2, r2, #1
  40293e:	e795      	b.n	40286c <__ieee754_sqrt+0x30>
  402940:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  402944:	4306      	orrs	r6, r0
  402946:	d0ec      	beq.n	402922 <__ieee754_sqrt+0xe6>
  402948:	bb69      	cbnz	r1, 4029a6 <__ieee754_sqrt+0x16a>
  40294a:	460f      	mov	r7, r1
  40294c:	0ad3      	lsrs	r3, r2, #11
  40294e:	3f15      	subs	r7, #21
  402950:	0552      	lsls	r2, r2, #21
  402952:	2b00      	cmp	r3, #0
  402954:	d0fa      	beq.n	40294c <__ieee754_sqrt+0x110>
  402956:	02dd      	lsls	r5, r3, #11
  402958:	d420      	bmi.n	40299c <__ieee754_sqrt+0x160>
  40295a:	2100      	movs	r1, #0
  40295c:	e000      	b.n	402960 <__ieee754_sqrt+0x124>
  40295e:	4601      	mov	r1, r0
  402960:	005b      	lsls	r3, r3, #1
  402962:	02dc      	lsls	r4, r3, #11
  402964:	f101 0001 	add.w	r0, r1, #1
  402968:	d5f9      	bpl.n	40295e <__ieee754_sqrt+0x122>
  40296a:	f1c0 0420 	rsb	r4, r0, #32
  40296e:	fa22 f404 	lsr.w	r4, r2, r4
  402972:	4323      	orrs	r3, r4
  402974:	1a7f      	subs	r7, r7, r1
  402976:	4082      	lsls	r2, r0
  402978:	e770      	b.n	40285c <__ieee754_sqrt+0x20>
  40297a:	4602      	mov	r2, r0
  40297c:	460b      	mov	r3, r1
  40297e:	f004 fb9f 	bl	4070c0 <__aeabi_dmul>
  402982:	462a      	mov	r2, r5
  402984:	4623      	mov	r3, r4
  402986:	f004 f9e9 	bl	406d5c <__adddf3>
  40298a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40298e:	f1bc 0f00 	cmp.w	ip, #0
  402992:	daab      	bge.n	4028ec <__ieee754_sqrt+0xb0>
  402994:	e7b3      	b.n	4028fe <__ieee754_sqrt+0xc2>
  402996:	3601      	adds	r6, #1
  402998:	4620      	mov	r0, r4
  40299a:	e7b6      	b.n	40290a <__ieee754_sqrt+0xce>
  40299c:	2420      	movs	r4, #32
  40299e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  4029a2:	2000      	movs	r0, #0
  4029a4:	e7e3      	b.n	40296e <__ieee754_sqrt+0x132>
  4029a6:	4602      	mov	r2, r0
  4029a8:	460b      	mov	r3, r1
  4029aa:	f004 f9d5 	bl	406d58 <__aeabi_dsub>
  4029ae:	4602      	mov	r2, r0
  4029b0:	460b      	mov	r3, r1
  4029b2:	f004 fcaf 	bl	407314 <__aeabi_ddiv>
  4029b6:	e7b4      	b.n	402922 <__ieee754_sqrt+0xe6>
  4029b8:	7ff00000 	.word	0x7ff00000
  4029bc:	00000000 	.word	0x00000000

004029c0 <atan>:
  4029c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029c4:	4bc0      	ldr	r3, [pc, #768]	; (402cc8 <atan+0x308>)
  4029c6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4029ca:	429e      	cmp	r6, r3
  4029cc:	460d      	mov	r5, r1
  4029ce:	468a      	mov	sl, r1
  4029d0:	4604      	mov	r4, r0
  4029d2:	dd0f      	ble.n	4029f4 <atan+0x34>
  4029d4:	4bbd      	ldr	r3, [pc, #756]	; (402ccc <atan+0x30c>)
  4029d6:	429e      	cmp	r6, r3
  4029d8:	f300 80b2 	bgt.w	402b40 <atan+0x180>
  4029dc:	f000 80ad 	beq.w	402b3a <atan+0x17a>
  4029e0:	4bbb      	ldr	r3, [pc, #748]	; (402cd0 <atan+0x310>)
  4029e2:	49bc      	ldr	r1, [pc, #752]	; (402cd4 <atan+0x314>)
  4029e4:	4cbc      	ldr	r4, [pc, #752]	; (402cd8 <atan+0x318>)
  4029e6:	f1ba 0f00 	cmp.w	sl, #0
  4029ea:	bfc8      	it	gt
  4029ec:	4619      	movgt	r1, r3
  4029ee:	4620      	mov	r0, r4
  4029f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029f4:	4bb9      	ldr	r3, [pc, #740]	; (402cdc <atan+0x31c>)
  4029f6:	429e      	cmp	r6, r3
  4029f8:	f300 80bc 	bgt.w	402b74 <atan+0x1b4>
  4029fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  402a00:	429e      	cmp	r6, r3
  402a02:	f340 80a7 	ble.w	402b54 <atan+0x194>
  402a06:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  402a0a:	4622      	mov	r2, r4
  402a0c:	462b      	mov	r3, r5
  402a0e:	4620      	mov	r0, r4
  402a10:	4629      	mov	r1, r5
  402a12:	f004 fb55 	bl	4070c0 <__aeabi_dmul>
  402a16:	4602      	mov	r2, r0
  402a18:	460b      	mov	r3, r1
  402a1a:	4680      	mov	r8, r0
  402a1c:	4689      	mov	r9, r1
  402a1e:	f004 fb4f 	bl	4070c0 <__aeabi_dmul>
  402a22:	a391      	add	r3, pc, #580	; (adr r3, 402c68 <atan+0x2a8>)
  402a24:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a28:	4606      	mov	r6, r0
  402a2a:	460f      	mov	r7, r1
  402a2c:	f004 fb48 	bl	4070c0 <__aeabi_dmul>
  402a30:	a38f      	add	r3, pc, #572	; (adr r3, 402c70 <atan+0x2b0>)
  402a32:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a36:	f004 f991 	bl	406d5c <__adddf3>
  402a3a:	4632      	mov	r2, r6
  402a3c:	463b      	mov	r3, r7
  402a3e:	f004 fb3f 	bl	4070c0 <__aeabi_dmul>
  402a42:	a38d      	add	r3, pc, #564	; (adr r3, 402c78 <atan+0x2b8>)
  402a44:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a48:	f004 f988 	bl	406d5c <__adddf3>
  402a4c:	4632      	mov	r2, r6
  402a4e:	463b      	mov	r3, r7
  402a50:	f004 fb36 	bl	4070c0 <__aeabi_dmul>
  402a54:	a38a      	add	r3, pc, #552	; (adr r3, 402c80 <atan+0x2c0>)
  402a56:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a5a:	f004 f97f 	bl	406d5c <__adddf3>
  402a5e:	4632      	mov	r2, r6
  402a60:	463b      	mov	r3, r7
  402a62:	f004 fb2d 	bl	4070c0 <__aeabi_dmul>
  402a66:	a388      	add	r3, pc, #544	; (adr r3, 402c88 <atan+0x2c8>)
  402a68:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a6c:	f004 f976 	bl	406d5c <__adddf3>
  402a70:	4632      	mov	r2, r6
  402a72:	463b      	mov	r3, r7
  402a74:	f004 fb24 	bl	4070c0 <__aeabi_dmul>
  402a78:	a385      	add	r3, pc, #532	; (adr r3, 402c90 <atan+0x2d0>)
  402a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a7e:	f004 f96d 	bl	406d5c <__adddf3>
  402a82:	4642      	mov	r2, r8
  402a84:	464b      	mov	r3, r9
  402a86:	f004 fb1b 	bl	4070c0 <__aeabi_dmul>
  402a8a:	a383      	add	r3, pc, #524	; (adr r3, 402c98 <atan+0x2d8>)
  402a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a90:	4680      	mov	r8, r0
  402a92:	4689      	mov	r9, r1
  402a94:	4630      	mov	r0, r6
  402a96:	4639      	mov	r1, r7
  402a98:	f004 fb12 	bl	4070c0 <__aeabi_dmul>
  402a9c:	a380      	add	r3, pc, #512	; (adr r3, 402ca0 <atan+0x2e0>)
  402a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402aa2:	f004 f959 	bl	406d58 <__aeabi_dsub>
  402aa6:	4632      	mov	r2, r6
  402aa8:	463b      	mov	r3, r7
  402aaa:	f004 fb09 	bl	4070c0 <__aeabi_dmul>
  402aae:	a37e      	add	r3, pc, #504	; (adr r3, 402ca8 <atan+0x2e8>)
  402ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ab4:	f004 f950 	bl	406d58 <__aeabi_dsub>
  402ab8:	4632      	mov	r2, r6
  402aba:	463b      	mov	r3, r7
  402abc:	f004 fb00 	bl	4070c0 <__aeabi_dmul>
  402ac0:	a37b      	add	r3, pc, #492	; (adr r3, 402cb0 <atan+0x2f0>)
  402ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ac6:	f004 f947 	bl	406d58 <__aeabi_dsub>
  402aca:	4632      	mov	r2, r6
  402acc:	463b      	mov	r3, r7
  402ace:	f004 faf7 	bl	4070c0 <__aeabi_dmul>
  402ad2:	a379      	add	r3, pc, #484	; (adr r3, 402cb8 <atan+0x2f8>)
  402ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ad8:	f004 f93e 	bl	406d58 <__aeabi_dsub>
  402adc:	4632      	mov	r2, r6
  402ade:	463b      	mov	r3, r7
  402ae0:	f004 faee 	bl	4070c0 <__aeabi_dmul>
  402ae4:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
  402ae8:	4602      	mov	r2, r0
  402aea:	460b      	mov	r3, r1
  402aec:	d069      	beq.n	402bc2 <atan+0x202>
  402aee:	4640      	mov	r0, r8
  402af0:	4649      	mov	r1, r9
  402af2:	f004 f933 	bl	406d5c <__adddf3>
  402af6:	4622      	mov	r2, r4
  402af8:	462b      	mov	r3, r5
  402afa:	f004 fae1 	bl	4070c0 <__aeabi_dmul>
  402afe:	4e78      	ldr	r6, [pc, #480]	; (402ce0 <atan+0x320>)
  402b00:	4b78      	ldr	r3, [pc, #480]	; (402ce4 <atan+0x324>)
  402b02:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  402b06:	445e      	add	r6, fp
  402b08:	449b      	add	fp, r3
  402b0a:	e9db 2300 	ldrd	r2, r3, [fp]
  402b0e:	f004 f923 	bl	406d58 <__aeabi_dsub>
  402b12:	4622      	mov	r2, r4
  402b14:	462b      	mov	r3, r5
  402b16:	f004 f91f 	bl	406d58 <__aeabi_dsub>
  402b1a:	4602      	mov	r2, r0
  402b1c:	460b      	mov	r3, r1
  402b1e:	e9d6 0100 	ldrd	r0, r1, [r6]
  402b22:	f004 f919 	bl	406d58 <__aeabi_dsub>
  402b26:	f1ba 0f00 	cmp.w	sl, #0
  402b2a:	4604      	mov	r4, r0
  402b2c:	f6bf af5f 	bge.w	4029ee <atan+0x2e>
  402b30:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402b34:	4620      	mov	r0, r4
  402b36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b3a:	2800      	cmp	r0, #0
  402b3c:	f43f af50 	beq.w	4029e0 <atan+0x20>
  402b40:	4622      	mov	r2, r4
  402b42:	4620      	mov	r0, r4
  402b44:	462b      	mov	r3, r5
  402b46:	4629      	mov	r1, r5
  402b48:	f004 f908 	bl	406d5c <__adddf3>
  402b4c:	4604      	mov	r4, r0
  402b4e:	4620      	mov	r0, r4
  402b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b54:	a35a      	add	r3, pc, #360	; (adr r3, 402cc0 <atan+0x300>)
  402b56:	e9d3 2300 	ldrd	r2, r3, [r3]
  402b5a:	f004 f8ff 	bl	406d5c <__adddf3>
  402b5e:	2200      	movs	r2, #0
  402b60:	4b61      	ldr	r3, [pc, #388]	; (402ce8 <atan+0x328>)
  402b62:	f004 fd3d 	bl	4075e0 <__aeabi_dcmpgt>
  402b66:	2800      	cmp	r0, #0
  402b68:	f43f af4d 	beq.w	402a06 <atan+0x46>
  402b6c:	4629      	mov	r1, r5
  402b6e:	4620      	mov	r0, r4
  402b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b74:	f000 f8c2 	bl	402cfc <fabs>
  402b78:	4b5c      	ldr	r3, [pc, #368]	; (402cec <atan+0x32c>)
  402b7a:	429e      	cmp	r6, r3
  402b7c:	4604      	mov	r4, r0
  402b7e:	460d      	mov	r5, r1
  402b80:	dc2f      	bgt.n	402be2 <atan+0x222>
  402b82:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  402b86:	429e      	cmp	r6, r3
  402b88:	dc54      	bgt.n	402c34 <atan+0x274>
  402b8a:	4602      	mov	r2, r0
  402b8c:	460b      	mov	r3, r1
  402b8e:	f004 f8e5 	bl	406d5c <__adddf3>
  402b92:	2200      	movs	r2, #0
  402b94:	4b54      	ldr	r3, [pc, #336]	; (402ce8 <atan+0x328>)
  402b96:	f004 f8df 	bl	406d58 <__aeabi_dsub>
  402b9a:	2200      	movs	r2, #0
  402b9c:	4606      	mov	r6, r0
  402b9e:	460f      	mov	r7, r1
  402ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402ba4:	4620      	mov	r0, r4
  402ba6:	4629      	mov	r1, r5
  402ba8:	f004 f8d8 	bl	406d5c <__adddf3>
  402bac:	4602      	mov	r2, r0
  402bae:	460b      	mov	r3, r1
  402bb0:	4630      	mov	r0, r6
  402bb2:	4639      	mov	r1, r7
  402bb4:	f004 fbae 	bl	407314 <__aeabi_ddiv>
  402bb8:	f04f 0b00 	mov.w	fp, #0
  402bbc:	4604      	mov	r4, r0
  402bbe:	460d      	mov	r5, r1
  402bc0:	e723      	b.n	402a0a <atan+0x4a>
  402bc2:	4640      	mov	r0, r8
  402bc4:	4649      	mov	r1, r9
  402bc6:	f004 f8c9 	bl	406d5c <__adddf3>
  402bca:	4622      	mov	r2, r4
  402bcc:	462b      	mov	r3, r5
  402bce:	f004 fa77 	bl	4070c0 <__aeabi_dmul>
  402bd2:	4602      	mov	r2, r0
  402bd4:	460b      	mov	r3, r1
  402bd6:	4620      	mov	r0, r4
  402bd8:	4629      	mov	r1, r5
  402bda:	f004 f8bd 	bl	406d58 <__aeabi_dsub>
  402bde:	4604      	mov	r4, r0
  402be0:	e705      	b.n	4029ee <atan+0x2e>
  402be2:	4b43      	ldr	r3, [pc, #268]	; (402cf0 <atan+0x330>)
  402be4:	429e      	cmp	r6, r3
  402be6:	dc1a      	bgt.n	402c1e <atan+0x25e>
  402be8:	2200      	movs	r2, #0
  402bea:	4b42      	ldr	r3, [pc, #264]	; (402cf4 <atan+0x334>)
  402bec:	f004 f8b4 	bl	406d58 <__aeabi_dsub>
  402bf0:	2200      	movs	r2, #0
  402bf2:	4606      	mov	r6, r0
  402bf4:	460f      	mov	r7, r1
  402bf6:	4b3f      	ldr	r3, [pc, #252]	; (402cf4 <atan+0x334>)
  402bf8:	4620      	mov	r0, r4
  402bfa:	4629      	mov	r1, r5
  402bfc:	f004 fa60 	bl	4070c0 <__aeabi_dmul>
  402c00:	2200      	movs	r2, #0
  402c02:	4b39      	ldr	r3, [pc, #228]	; (402ce8 <atan+0x328>)
  402c04:	f004 f8aa 	bl	406d5c <__adddf3>
  402c08:	4602      	mov	r2, r0
  402c0a:	460b      	mov	r3, r1
  402c0c:	4630      	mov	r0, r6
  402c0e:	4639      	mov	r1, r7
  402c10:	f004 fb80 	bl	407314 <__aeabi_ddiv>
  402c14:	f04f 0b02 	mov.w	fp, #2
  402c18:	4604      	mov	r4, r0
  402c1a:	460d      	mov	r5, r1
  402c1c:	e6f5      	b.n	402a0a <atan+0x4a>
  402c1e:	4602      	mov	r2, r0
  402c20:	460b      	mov	r3, r1
  402c22:	2000      	movs	r0, #0
  402c24:	4934      	ldr	r1, [pc, #208]	; (402cf8 <atan+0x338>)
  402c26:	f004 fb75 	bl	407314 <__aeabi_ddiv>
  402c2a:	f04f 0b03 	mov.w	fp, #3
  402c2e:	4604      	mov	r4, r0
  402c30:	460d      	mov	r5, r1
  402c32:	e6ea      	b.n	402a0a <atan+0x4a>
  402c34:	2200      	movs	r2, #0
  402c36:	4b2c      	ldr	r3, [pc, #176]	; (402ce8 <atan+0x328>)
  402c38:	f004 f88e 	bl	406d58 <__aeabi_dsub>
  402c3c:	2200      	movs	r2, #0
  402c3e:	4606      	mov	r6, r0
  402c40:	460f      	mov	r7, r1
  402c42:	4b29      	ldr	r3, [pc, #164]	; (402ce8 <atan+0x328>)
  402c44:	4620      	mov	r0, r4
  402c46:	4629      	mov	r1, r5
  402c48:	f004 f888 	bl	406d5c <__adddf3>
  402c4c:	4602      	mov	r2, r0
  402c4e:	460b      	mov	r3, r1
  402c50:	4630      	mov	r0, r6
  402c52:	4639      	mov	r1, r7
  402c54:	f004 fb5e 	bl	407314 <__aeabi_ddiv>
  402c58:	f04f 0b01 	mov.w	fp, #1
  402c5c:	4604      	mov	r4, r0
  402c5e:	460d      	mov	r5, r1
  402c60:	e6d3      	b.n	402a0a <atan+0x4a>
  402c62:	bf00      	nop
  402c64:	f3af 8000 	nop.w
  402c68:	e322da11 	.word	0xe322da11
  402c6c:	3f90ad3a 	.word	0x3f90ad3a
  402c70:	24760deb 	.word	0x24760deb
  402c74:	3fa97b4b 	.word	0x3fa97b4b
  402c78:	a0d03d51 	.word	0xa0d03d51
  402c7c:	3fb10d66 	.word	0x3fb10d66
  402c80:	c54c206e 	.word	0xc54c206e
  402c84:	3fb745cd 	.word	0x3fb745cd
  402c88:	920083ff 	.word	0x920083ff
  402c8c:	3fc24924 	.word	0x3fc24924
  402c90:	5555550d 	.word	0x5555550d
  402c94:	3fd55555 	.word	0x3fd55555
  402c98:	2c6a6c2f 	.word	0x2c6a6c2f
  402c9c:	bfa2b444 	.word	0xbfa2b444
  402ca0:	52defd9a 	.word	0x52defd9a
  402ca4:	3fadde2d 	.word	0x3fadde2d
  402ca8:	af749a6d 	.word	0xaf749a6d
  402cac:	3fb3b0f2 	.word	0x3fb3b0f2
  402cb0:	fe231671 	.word	0xfe231671
  402cb4:	3fbc71c6 	.word	0x3fbc71c6
  402cb8:	9998ebc4 	.word	0x9998ebc4
  402cbc:	3fc99999 	.word	0x3fc99999
  402cc0:	8800759c 	.word	0x8800759c
  402cc4:	7e37e43c 	.word	0x7e37e43c
  402cc8:	440fffff 	.word	0x440fffff
  402ccc:	7ff00000 	.word	0x7ff00000
  402cd0:	3ff921fb 	.word	0x3ff921fb
  402cd4:	bff921fb 	.word	0xbff921fb
  402cd8:	54442d18 	.word	0x54442d18
  402cdc:	3fdbffff 	.word	0x3fdbffff
  402ce0:	004081c8 	.word	0x004081c8
  402ce4:	004081a8 	.word	0x004081a8
  402ce8:	3ff00000 	.word	0x3ff00000
  402cec:	3ff2ffff 	.word	0x3ff2ffff
  402cf0:	40037fff 	.word	0x40037fff
  402cf4:	3ff80000 	.word	0x3ff80000
  402cf8:	bff00000 	.word	0xbff00000

00402cfc <fabs>:
  402cfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402d00:	4770      	bx	lr
  402d02:	bf00      	nop

00402d04 <matherr>:
  402d04:	2000      	movs	r0, #0
  402d06:	4770      	bx	lr

00402d08 <atof>:
  402d08:	2100      	movs	r1, #0
  402d0a:	f001 bc11 	b.w	404530 <strtod>

00402d0e <atoi>:
  402d0e:	220a      	movs	r2, #10
  402d10:	2100      	movs	r1, #0
  402d12:	f001 bcd5 	b.w	4046c0 <strtol>
	...

00402d18 <__errno>:
  402d18:	4b01      	ldr	r3, [pc, #4]	; (402d20 <__errno+0x8>)
  402d1a:	6818      	ldr	r0, [r3, #0]
  402d1c:	4770      	bx	lr
  402d1e:	bf00      	nop
  402d20:	20000078 	.word	0x20000078

00402d24 <__libc_init_array>:
  402d24:	b570      	push	{r4, r5, r6, lr}
  402d26:	4b0e      	ldr	r3, [pc, #56]	; (402d60 <__libc_init_array+0x3c>)
  402d28:	4c0e      	ldr	r4, [pc, #56]	; (402d64 <__libc_init_array+0x40>)
  402d2a:	1ae4      	subs	r4, r4, r3
  402d2c:	10a4      	asrs	r4, r4, #2
  402d2e:	2500      	movs	r5, #0
  402d30:	461e      	mov	r6, r3
  402d32:	42a5      	cmp	r5, r4
  402d34:	d004      	beq.n	402d40 <__libc_init_array+0x1c>
  402d36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402d3a:	4798      	blx	r3
  402d3c:	3501      	adds	r5, #1
  402d3e:	e7f8      	b.n	402d32 <__libc_init_array+0xe>
  402d40:	f005 fbde 	bl	408500 <_init>
  402d44:	4c08      	ldr	r4, [pc, #32]	; (402d68 <__libc_init_array+0x44>)
  402d46:	4b09      	ldr	r3, [pc, #36]	; (402d6c <__libc_init_array+0x48>)
  402d48:	1ae4      	subs	r4, r4, r3
  402d4a:	10a4      	asrs	r4, r4, #2
  402d4c:	2500      	movs	r5, #0
  402d4e:	461e      	mov	r6, r3
  402d50:	42a5      	cmp	r5, r4
  402d52:	d004      	beq.n	402d5e <__libc_init_array+0x3a>
  402d54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402d58:	4798      	blx	r3
  402d5a:	3501      	adds	r5, #1
  402d5c:	e7f8      	b.n	402d50 <__libc_init_array+0x2c>
  402d5e:	bd70      	pop	{r4, r5, r6, pc}
  402d60:	0040850c 	.word	0x0040850c
  402d64:	0040850c 	.word	0x0040850c
  402d68:	00408510 	.word	0x00408510
  402d6c:	0040850c 	.word	0x0040850c

00402d70 <memcpy>:
  402d70:	b510      	push	{r4, lr}
  402d72:	1e43      	subs	r3, r0, #1
  402d74:	440a      	add	r2, r1
  402d76:	4291      	cmp	r1, r2
  402d78:	d004      	beq.n	402d84 <memcpy+0x14>
  402d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
  402d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
  402d82:	e7f8      	b.n	402d76 <memcpy+0x6>
  402d84:	bd10      	pop	{r4, pc}

00402d86 <memset>:
  402d86:	4402      	add	r2, r0
  402d88:	4603      	mov	r3, r0
  402d8a:	4293      	cmp	r3, r2
  402d8c:	d002      	beq.n	402d94 <memset+0xe>
  402d8e:	f803 1b01 	strb.w	r1, [r3], #1
  402d92:	e7fa      	b.n	402d8a <memset+0x4>
  402d94:	4770      	bx	lr

00402d96 <__cvt>:
  402d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d9a:	b088      	sub	sp, #32
  402d9c:	2b00      	cmp	r3, #0
  402d9e:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402da0:	9912      	ldr	r1, [sp, #72]	; 0x48
  402da2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402da4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402da8:	461e      	mov	r6, r3
  402daa:	f027 0720 	bic.w	r7, r7, #32
  402dae:	bfbb      	ittet	lt
  402db0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402db4:	461e      	movlt	r6, r3
  402db6:	2300      	movge	r3, #0
  402db8:	232d      	movlt	r3, #45	; 0x2d
  402dba:	2f46      	cmp	r7, #70	; 0x46
  402dbc:	4614      	mov	r4, r2
  402dbe:	700b      	strb	r3, [r1, #0]
  402dc0:	d003      	beq.n	402dca <__cvt+0x34>
  402dc2:	2f45      	cmp	r7, #69	; 0x45
  402dc4:	d103      	bne.n	402dce <__cvt+0x38>
  402dc6:	3501      	adds	r5, #1
  402dc8:	e001      	b.n	402dce <__cvt+0x38>
  402dca:	2303      	movs	r3, #3
  402dcc:	e000      	b.n	402dd0 <__cvt+0x3a>
  402dce:	2302      	movs	r3, #2
  402dd0:	aa07      	add	r2, sp, #28
  402dd2:	9204      	str	r2, [sp, #16]
  402dd4:	aa06      	add	r2, sp, #24
  402dd6:	9203      	str	r2, [sp, #12]
  402dd8:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402ddc:	4622      	mov	r2, r4
  402dde:	4633      	mov	r3, r6
  402de0:	f001 fdd6 	bl	404990 <_dtoa_r>
  402de4:	2f47      	cmp	r7, #71	; 0x47
  402de6:	4680      	mov	r8, r0
  402de8:	d102      	bne.n	402df0 <__cvt+0x5a>
  402dea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402dec:	07db      	lsls	r3, r3, #31
  402dee:	d528      	bpl.n	402e42 <__cvt+0xac>
  402df0:	2f46      	cmp	r7, #70	; 0x46
  402df2:	eb08 0905 	add.w	r9, r8, r5
  402df6:	d111      	bne.n	402e1c <__cvt+0x86>
  402df8:	f898 3000 	ldrb.w	r3, [r8]
  402dfc:	2b30      	cmp	r3, #48	; 0x30
  402dfe:	d10a      	bne.n	402e16 <__cvt+0x80>
  402e00:	2200      	movs	r2, #0
  402e02:	2300      	movs	r3, #0
  402e04:	4620      	mov	r0, r4
  402e06:	4631      	mov	r1, r6
  402e08:	f004 fbc2 	bl	407590 <__aeabi_dcmpeq>
  402e0c:	b918      	cbnz	r0, 402e16 <__cvt+0x80>
  402e0e:	f1c5 0501 	rsb	r5, r5, #1
  402e12:	f8ca 5000 	str.w	r5, [sl]
  402e16:	f8da 3000 	ldr.w	r3, [sl]
  402e1a:	4499      	add	r9, r3
  402e1c:	2200      	movs	r2, #0
  402e1e:	2300      	movs	r3, #0
  402e20:	4620      	mov	r0, r4
  402e22:	4631      	mov	r1, r6
  402e24:	f004 fbb4 	bl	407590 <__aeabi_dcmpeq>
  402e28:	b908      	cbnz	r0, 402e2e <__cvt+0x98>
  402e2a:	2230      	movs	r2, #48	; 0x30
  402e2c:	e002      	b.n	402e34 <__cvt+0x9e>
  402e2e:	f8cd 901c 	str.w	r9, [sp, #28]
  402e32:	e006      	b.n	402e42 <__cvt+0xac>
  402e34:	9b07      	ldr	r3, [sp, #28]
  402e36:	4599      	cmp	r9, r3
  402e38:	d903      	bls.n	402e42 <__cvt+0xac>
  402e3a:	1c59      	adds	r1, r3, #1
  402e3c:	9107      	str	r1, [sp, #28]
  402e3e:	701a      	strb	r2, [r3, #0]
  402e40:	e7f8      	b.n	402e34 <__cvt+0x9e>
  402e42:	9b07      	ldr	r3, [sp, #28]
  402e44:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402e46:	ebc8 0303 	rsb	r3, r8, r3
  402e4a:	4640      	mov	r0, r8
  402e4c:	6013      	str	r3, [r2, #0]
  402e4e:	b008      	add	sp, #32
  402e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402e54 <__exponent>:
  402e54:	b573      	push	{r0, r1, r4, r5, r6, lr}
  402e56:	4603      	mov	r3, r0
  402e58:	2900      	cmp	r1, #0
  402e5a:	bfb8      	it	lt
  402e5c:	4249      	neglt	r1, r1
  402e5e:	f803 2b02 	strb.w	r2, [r3], #2
  402e62:	bfb4      	ite	lt
  402e64:	222d      	movlt	r2, #45	; 0x2d
  402e66:	222b      	movge	r2, #43	; 0x2b
  402e68:	2909      	cmp	r1, #9
  402e6a:	7042      	strb	r2, [r0, #1]
  402e6c:	dd19      	ble.n	402ea2 <__exponent+0x4e>
  402e6e:	f10d 0207 	add.w	r2, sp, #7
  402e72:	4616      	mov	r6, r2
  402e74:	250a      	movs	r5, #10
  402e76:	fb91 f4f5 	sdiv	r4, r1, r5
  402e7a:	fb05 1114 	mls	r1, r5, r4, r1
  402e7e:	3130      	adds	r1, #48	; 0x30
  402e80:	2c09      	cmp	r4, #9
  402e82:	f802 1d01 	strb.w	r1, [r2, #-1]!
  402e86:	4621      	mov	r1, r4
  402e88:	dcf5      	bgt.n	402e76 <__exponent+0x22>
  402e8a:	3130      	adds	r1, #48	; 0x30
  402e8c:	1e54      	subs	r4, r2, #1
  402e8e:	f802 1c01 	strb.w	r1, [r2, #-1]
  402e92:	42b4      	cmp	r4, r6
  402e94:	461a      	mov	r2, r3
  402e96:	d20a      	bcs.n	402eae <__exponent+0x5a>
  402e98:	f814 2b01 	ldrb.w	r2, [r4], #1
  402e9c:	f803 2b01 	strb.w	r2, [r3], #1
  402ea0:	e7f7      	b.n	402e92 <__exponent+0x3e>
  402ea2:	2430      	movs	r4, #48	; 0x30
  402ea4:	461a      	mov	r2, r3
  402ea6:	4421      	add	r1, r4
  402ea8:	f802 4b02 	strb.w	r4, [r2], #2
  402eac:	7059      	strb	r1, [r3, #1]
  402eae:	1a10      	subs	r0, r2, r0
  402eb0:	b002      	add	sp, #8
  402eb2:	bd70      	pop	{r4, r5, r6, pc}

00402eb4 <_printf_float>:
  402eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402eb8:	b091      	sub	sp, #68	; 0x44
  402eba:	460c      	mov	r4, r1
  402ebc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  402ec0:	4616      	mov	r6, r2
  402ec2:	461f      	mov	r7, r3
  402ec4:	4605      	mov	r5, r0
  402ec6:	f002 ff9f 	bl	405e08 <_localeconv_r>
  402eca:	6803      	ldr	r3, [r0, #0]
  402ecc:	9309      	str	r3, [sp, #36]	; 0x24
  402ece:	4618      	mov	r0, r3
  402ed0:	f000 fd0e 	bl	4038f0 <strlen>
  402ed4:	2300      	movs	r3, #0
  402ed6:	930e      	str	r3, [sp, #56]	; 0x38
  402ed8:	f8d8 3000 	ldr.w	r3, [r8]
  402edc:	900a      	str	r0, [sp, #40]	; 0x28
  402ede:	3307      	adds	r3, #7
  402ee0:	f023 0307 	bic.w	r3, r3, #7
  402ee4:	f103 0208 	add.w	r2, r3, #8
  402ee8:	f894 9018 	ldrb.w	r9, [r4, #24]
  402eec:	f8d4 b000 	ldr.w	fp, [r4]
  402ef0:	f8c8 2000 	str.w	r2, [r8]
  402ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ef8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402efc:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  402f00:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  402f04:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  402f08:	930b      	str	r3, [sp, #44]	; 0x2c
  402f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402f0e:	4ba7      	ldr	r3, [pc, #668]	; (4031ac <_printf_float+0x2f8>)
  402f10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f12:	4640      	mov	r0, r8
  402f14:	f004 fb6e 	bl	4075f4 <__aeabi_dcmpun>
  402f18:	b9a0      	cbnz	r0, 402f44 <_printf_float+0x90>
  402f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402f1e:	4ba3      	ldr	r3, [pc, #652]	; (4031ac <_printf_float+0x2f8>)
  402f20:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f22:	4640      	mov	r0, r8
  402f24:	f004 fb48 	bl	4075b8 <__aeabi_dcmple>
  402f28:	b960      	cbnz	r0, 402f44 <_printf_float+0x90>
  402f2a:	2200      	movs	r2, #0
  402f2c:	2300      	movs	r3, #0
  402f2e:	4640      	mov	r0, r8
  402f30:	4651      	mov	r1, sl
  402f32:	f004 fb37 	bl	4075a4 <__aeabi_dcmplt>
  402f36:	b110      	cbz	r0, 402f3e <_printf_float+0x8a>
  402f38:	232d      	movs	r3, #45	; 0x2d
  402f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402f3e:	4b9c      	ldr	r3, [pc, #624]	; (4031b0 <_printf_float+0x2fc>)
  402f40:	4a9c      	ldr	r2, [pc, #624]	; (4031b4 <_printf_float+0x300>)
  402f42:	e00a      	b.n	402f5a <_printf_float+0xa6>
  402f44:	4642      	mov	r2, r8
  402f46:	4653      	mov	r3, sl
  402f48:	4640      	mov	r0, r8
  402f4a:	4651      	mov	r1, sl
  402f4c:	f004 fb52 	bl	4075f4 <__aeabi_dcmpun>
  402f50:	2800      	cmp	r0, #0
  402f52:	f000 8192 	beq.w	40327a <_printf_float+0x3c6>
  402f56:	4b98      	ldr	r3, [pc, #608]	; (4031b8 <_printf_float+0x304>)
  402f58:	4a98      	ldr	r2, [pc, #608]	; (4031bc <_printf_float+0x308>)
  402f5a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  402f5e:	bf8c      	ite	hi
  402f60:	4690      	movhi	r8, r2
  402f62:	4698      	movls	r8, r3
  402f64:	2303      	movs	r3, #3
  402f66:	6123      	str	r3, [r4, #16]
  402f68:	f02b 0304 	bic.w	r3, fp, #4
  402f6c:	6023      	str	r3, [r4, #0]
  402f6e:	f04f 0a00 	mov.w	sl, #0
  402f72:	e03d      	b.n	402ff0 <_printf_float+0x13c>
  402f74:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  402f78:	f000 818a 	beq.w	403290 <_printf_float+0x3dc>
  402f7c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  402f80:	f000 8186 	beq.w	403290 <_printf_float+0x3dc>
  402f84:	6023      	str	r3, [r4, #0]
  402f86:	2100      	movs	r1, #0
  402f88:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402f8c:	9301      	str	r3, [sp, #4]
  402f8e:	6863      	ldr	r3, [r4, #4]
  402f90:	9005      	str	r0, [sp, #20]
  402f92:	9202      	str	r2, [sp, #8]
  402f94:	9300      	str	r3, [sp, #0]
  402f96:	4642      	mov	r2, r8
  402f98:	4653      	mov	r3, sl
  402f9a:	9106      	str	r1, [sp, #24]
  402f9c:	f8cd 9010 	str.w	r9, [sp, #16]
  402fa0:	f8cd e00c 	str.w	lr, [sp, #12]
  402fa4:	4628      	mov	r0, r5
  402fa6:	f7ff fef6 	bl	402d96 <__cvt>
  402faa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  402fae:	2b47      	cmp	r3, #71	; 0x47
  402fb0:	4680      	mov	r8, r0
  402fb2:	f000 8184 	beq.w	4032be <_printf_float+0x40a>
  402fb6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402fba:	990d      	ldr	r1, [sp, #52]	; 0x34
  402fbc:	f200 818d 	bhi.w	4032da <_printf_float+0x426>
  402fc0:	3901      	subs	r1, #1
  402fc2:	464a      	mov	r2, r9
  402fc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
  402fc8:	910d      	str	r1, [sp, #52]	; 0x34
  402fca:	f7ff ff43 	bl	402e54 <__exponent>
  402fce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402fd0:	1883      	adds	r3, r0, r2
  402fd2:	2a01      	cmp	r2, #1
  402fd4:	4682      	mov	sl, r0
  402fd6:	6123      	str	r3, [r4, #16]
  402fd8:	f300 817c 	bgt.w	4032d4 <_printf_float+0x420>
  402fdc:	6822      	ldr	r2, [r4, #0]
  402fde:	07d1      	lsls	r1, r2, #31
  402fe0:	f100 8178 	bmi.w	4032d4 <_printf_float+0x420>
  402fe4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  402fe8:	b113      	cbz	r3, 402ff0 <_printf_float+0x13c>
  402fea:	232d      	movs	r3, #45	; 0x2d
  402fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402ff0:	9700      	str	r7, [sp, #0]
  402ff2:	4633      	mov	r3, r6
  402ff4:	aa0f      	add	r2, sp, #60	; 0x3c
  402ff6:	4621      	mov	r1, r4
  402ff8:	4628      	mov	r0, r5
  402ffa:	f000 f99f 	bl	40333c <_printf_common>
  402ffe:	3001      	adds	r0, #1
  403000:	d102      	bne.n	403008 <_printf_float+0x154>
  403002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403006:	e196      	b.n	403336 <_printf_float+0x482>
  403008:	6823      	ldr	r3, [r4, #0]
  40300a:	055a      	lsls	r2, r3, #21
  40300c:	d401      	bmi.n	403012 <_printf_float+0x15e>
  40300e:	6923      	ldr	r3, [r4, #16]
  403010:	e065      	b.n	4030de <_printf_float+0x22a>
  403012:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  403016:	f240 80d5 	bls.w	4031c4 <_printf_float+0x310>
  40301a:	2200      	movs	r2, #0
  40301c:	2300      	movs	r3, #0
  40301e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403022:	f004 fab5 	bl	407590 <__aeabi_dcmpeq>
  403026:	b378      	cbz	r0, 403088 <_printf_float+0x1d4>
  403028:	2301      	movs	r3, #1
  40302a:	4a65      	ldr	r2, [pc, #404]	; (4031c0 <_printf_float+0x30c>)
  40302c:	4631      	mov	r1, r6
  40302e:	4628      	mov	r0, r5
  403030:	47b8      	blx	r7
  403032:	3001      	adds	r0, #1
  403034:	d0e5      	beq.n	403002 <_printf_float+0x14e>
  403036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403038:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40303a:	429a      	cmp	r2, r3
  40303c:	db0b      	blt.n	403056 <_printf_float+0x1a2>
  40303e:	6823      	ldr	r3, [r4, #0]
  403040:	07d8      	lsls	r0, r3, #31
  403042:	d408      	bmi.n	403056 <_printf_float+0x1a2>
  403044:	6823      	ldr	r3, [r4, #0]
  403046:	079b      	lsls	r3, r3, #30
  403048:	f140 8111 	bpl.w	40326e <_printf_float+0x3ba>
  40304c:	f04f 0800 	mov.w	r8, #0
  403050:	f104 0919 	add.w	r9, r4, #25
  403054:	e106      	b.n	403264 <_printf_float+0x3b0>
  403056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403058:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40305a:	4631      	mov	r1, r6
  40305c:	4628      	mov	r0, r5
  40305e:	47b8      	blx	r7
  403060:	3001      	adds	r0, #1
  403062:	d0ce      	beq.n	403002 <_printf_float+0x14e>
  403064:	f04f 0800 	mov.w	r8, #0
  403068:	f104 091a 	add.w	r9, r4, #26
  40306c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40306e:	3b01      	subs	r3, #1
  403070:	4598      	cmp	r8, r3
  403072:	dae7      	bge.n	403044 <_printf_float+0x190>
  403074:	2301      	movs	r3, #1
  403076:	464a      	mov	r2, r9
  403078:	4631      	mov	r1, r6
  40307a:	4628      	mov	r0, r5
  40307c:	47b8      	blx	r7
  40307e:	3001      	adds	r0, #1
  403080:	d0bf      	beq.n	403002 <_printf_float+0x14e>
  403082:	f108 0801 	add.w	r8, r8, #1
  403086:	e7f1      	b.n	40306c <_printf_float+0x1b8>
  403088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40308a:	2b00      	cmp	r3, #0
  40308c:	dc29      	bgt.n	4030e2 <_printf_float+0x22e>
  40308e:	2301      	movs	r3, #1
  403090:	4a4b      	ldr	r2, [pc, #300]	; (4031c0 <_printf_float+0x30c>)
  403092:	4631      	mov	r1, r6
  403094:	4628      	mov	r0, r5
  403096:	47b8      	blx	r7
  403098:	3001      	adds	r0, #1
  40309a:	d0b2      	beq.n	403002 <_printf_float+0x14e>
  40309c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40309e:	b923      	cbnz	r3, 4030aa <_printf_float+0x1f6>
  4030a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4030a2:	b913      	cbnz	r3, 4030aa <_printf_float+0x1f6>
  4030a4:	6823      	ldr	r3, [r4, #0]
  4030a6:	07d9      	lsls	r1, r3, #31
  4030a8:	d5cc      	bpl.n	403044 <_printf_float+0x190>
  4030aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4030ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4030ae:	4631      	mov	r1, r6
  4030b0:	4628      	mov	r0, r5
  4030b2:	47b8      	blx	r7
  4030b4:	3001      	adds	r0, #1
  4030b6:	d0a4      	beq.n	403002 <_printf_float+0x14e>
  4030b8:	f04f 0900 	mov.w	r9, #0
  4030bc:	f104 0a1a 	add.w	sl, r4, #26
  4030c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4030c2:	425b      	negs	r3, r3
  4030c4:	4599      	cmp	r9, r3
  4030c6:	da09      	bge.n	4030dc <_printf_float+0x228>
  4030c8:	2301      	movs	r3, #1
  4030ca:	4652      	mov	r2, sl
  4030cc:	4631      	mov	r1, r6
  4030ce:	4628      	mov	r0, r5
  4030d0:	47b8      	blx	r7
  4030d2:	3001      	adds	r0, #1
  4030d4:	d095      	beq.n	403002 <_printf_float+0x14e>
  4030d6:	f109 0901 	add.w	r9, r9, #1
  4030da:	e7f1      	b.n	4030c0 <_printf_float+0x20c>
  4030dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4030de:	4642      	mov	r2, r8
  4030e0:	e0a7      	b.n	403232 <_printf_float+0x37e>
  4030e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4030e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4030e6:	429a      	cmp	r2, r3
  4030e8:	bfa8      	it	ge
  4030ea:	461a      	movge	r2, r3
  4030ec:	2a00      	cmp	r2, #0
  4030ee:	4691      	mov	r9, r2
  4030f0:	dc06      	bgt.n	403100 <_printf_float+0x24c>
  4030f2:	f04f 0a00 	mov.w	sl, #0
  4030f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  4030fa:	f104 0b1a 	add.w	fp, r4, #26
  4030fe:	e011      	b.n	403124 <_printf_float+0x270>
  403100:	4613      	mov	r3, r2
  403102:	4631      	mov	r1, r6
  403104:	4642      	mov	r2, r8
  403106:	4628      	mov	r0, r5
  403108:	47b8      	blx	r7
  40310a:	3001      	adds	r0, #1
  40310c:	d1f1      	bne.n	4030f2 <_printf_float+0x23e>
  40310e:	e778      	b.n	403002 <_printf_float+0x14e>
  403110:	2301      	movs	r3, #1
  403112:	465a      	mov	r2, fp
  403114:	4631      	mov	r1, r6
  403116:	4628      	mov	r0, r5
  403118:	47b8      	blx	r7
  40311a:	3001      	adds	r0, #1
  40311c:	f43f af71 	beq.w	403002 <_printf_float+0x14e>
  403120:	f10a 0a01 	add.w	sl, sl, #1
  403124:	6da3      	ldr	r3, [r4, #88]	; 0x58
  403126:	ebc9 0203 	rsb	r2, r9, r3
  40312a:	4592      	cmp	sl, r2
  40312c:	dbf0      	blt.n	403110 <_printf_float+0x25c>
  40312e:	eb08 0903 	add.w	r9, r8, r3
  403132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403136:	429a      	cmp	r2, r3
  403138:	db0f      	blt.n	40315a <_printf_float+0x2a6>
  40313a:	6823      	ldr	r3, [r4, #0]
  40313c:	07da      	lsls	r2, r3, #31
  40313e:	d40c      	bmi.n	40315a <_printf_float+0x2a6>
  403140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403142:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403144:	4498      	add	r8, r3
  403146:	ebc9 0808 	rsb	r8, r9, r8
  40314a:	1a9b      	subs	r3, r3, r2
  40314c:	4598      	cmp	r8, r3
  40314e:	bfa8      	it	ge
  403150:	4698      	movge	r8, r3
  403152:	f1b8 0f00 	cmp.w	r8, #0
  403156:	dc08      	bgt.n	40316a <_printf_float+0x2b6>
  403158:	e00f      	b.n	40317a <_printf_float+0x2c6>
  40315a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40315c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40315e:	4631      	mov	r1, r6
  403160:	4628      	mov	r0, r5
  403162:	47b8      	blx	r7
  403164:	3001      	adds	r0, #1
  403166:	d1eb      	bne.n	403140 <_printf_float+0x28c>
  403168:	e74b      	b.n	403002 <_printf_float+0x14e>
  40316a:	4643      	mov	r3, r8
  40316c:	464a      	mov	r2, r9
  40316e:	4631      	mov	r1, r6
  403170:	4628      	mov	r0, r5
  403172:	47b8      	blx	r7
  403174:	3001      	adds	r0, #1
  403176:	f43f af44 	beq.w	403002 <_printf_float+0x14e>
  40317a:	f04f 0900 	mov.w	r9, #0
  40317e:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  403182:	f104 0a1a 	add.w	sl, r4, #26
  403186:	e009      	b.n	40319c <_printf_float+0x2e8>
  403188:	2301      	movs	r3, #1
  40318a:	4652      	mov	r2, sl
  40318c:	4631      	mov	r1, r6
  40318e:	4628      	mov	r0, r5
  403190:	47b8      	blx	r7
  403192:	3001      	adds	r0, #1
  403194:	f43f af35 	beq.w	403002 <_printf_float+0x14e>
  403198:	f109 0901 	add.w	r9, r9, #1
  40319c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40319e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4031a0:	1a9b      	subs	r3, r3, r2
  4031a2:	ebc8 0303 	rsb	r3, r8, r3
  4031a6:	4599      	cmp	r9, r3
  4031a8:	dbee      	blt.n	403188 <_printf_float+0x2d4>
  4031aa:	e74b      	b.n	403044 <_printf_float+0x190>
  4031ac:	7fefffff 	.word	0x7fefffff
  4031b0:	004081ec 	.word	0x004081ec
  4031b4:	004081f0 	.word	0x004081f0
  4031b8:	004081f4 	.word	0x004081f4
  4031bc:	004081f8 	.word	0x004081f8
  4031c0:	004081fc 	.word	0x004081fc
  4031c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4031c6:	2a01      	cmp	r2, #1
  4031c8:	dc01      	bgt.n	4031ce <_printf_float+0x31a>
  4031ca:	07db      	lsls	r3, r3, #31
  4031cc:	d538      	bpl.n	403240 <_printf_float+0x38c>
  4031ce:	2301      	movs	r3, #1
  4031d0:	4642      	mov	r2, r8
  4031d2:	4631      	mov	r1, r6
  4031d4:	4628      	mov	r0, r5
  4031d6:	47b8      	blx	r7
  4031d8:	3001      	adds	r0, #1
  4031da:	f43f af12 	beq.w	403002 <_printf_float+0x14e>
  4031de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4031e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4031e2:	4631      	mov	r1, r6
  4031e4:	4628      	mov	r0, r5
  4031e6:	47b8      	blx	r7
  4031e8:	3001      	adds	r0, #1
  4031ea:	f43f af0a 	beq.w	403002 <_printf_float+0x14e>
  4031ee:	2200      	movs	r2, #0
  4031f0:	2300      	movs	r3, #0
  4031f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4031f6:	f004 f9cb 	bl	407590 <__aeabi_dcmpeq>
  4031fa:	b120      	cbz	r0, 403206 <_printf_float+0x352>
  4031fc:	f04f 0800 	mov.w	r8, #0
  403200:	f104 091a 	add.w	r9, r4, #26
  403204:	e00e      	b.n	403224 <_printf_float+0x370>
  403206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403208:	f108 0201 	add.w	r2, r8, #1
  40320c:	3b01      	subs	r3, #1
  40320e:	e019      	b.n	403244 <_printf_float+0x390>
  403210:	2301      	movs	r3, #1
  403212:	464a      	mov	r2, r9
  403214:	4631      	mov	r1, r6
  403216:	4628      	mov	r0, r5
  403218:	47b8      	blx	r7
  40321a:	3001      	adds	r0, #1
  40321c:	f43f aef1 	beq.w	403002 <_printf_float+0x14e>
  403220:	f108 0801 	add.w	r8, r8, #1
  403224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403226:	3b01      	subs	r3, #1
  403228:	4598      	cmp	r8, r3
  40322a:	dbf1      	blt.n	403210 <_printf_float+0x35c>
  40322c:	4653      	mov	r3, sl
  40322e:	f104 0250 	add.w	r2, r4, #80	; 0x50
  403232:	4631      	mov	r1, r6
  403234:	4628      	mov	r0, r5
  403236:	47b8      	blx	r7
  403238:	3001      	adds	r0, #1
  40323a:	f47f af03 	bne.w	403044 <_printf_float+0x190>
  40323e:	e6e0      	b.n	403002 <_printf_float+0x14e>
  403240:	2301      	movs	r3, #1
  403242:	4642      	mov	r2, r8
  403244:	4631      	mov	r1, r6
  403246:	4628      	mov	r0, r5
  403248:	47b8      	blx	r7
  40324a:	3001      	adds	r0, #1
  40324c:	d1ee      	bne.n	40322c <_printf_float+0x378>
  40324e:	e6d8      	b.n	403002 <_printf_float+0x14e>
  403250:	2301      	movs	r3, #1
  403252:	464a      	mov	r2, r9
  403254:	4631      	mov	r1, r6
  403256:	4628      	mov	r0, r5
  403258:	47b8      	blx	r7
  40325a:	3001      	adds	r0, #1
  40325c:	f43f aed1 	beq.w	403002 <_printf_float+0x14e>
  403260:	f108 0801 	add.w	r8, r8, #1
  403264:	68e3      	ldr	r3, [r4, #12]
  403266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403268:	1a9b      	subs	r3, r3, r2
  40326a:	4598      	cmp	r8, r3
  40326c:	dbf0      	blt.n	403250 <_printf_float+0x39c>
  40326e:	68e0      	ldr	r0, [r4, #12]
  403270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403272:	4298      	cmp	r0, r3
  403274:	bfb8      	it	lt
  403276:	4618      	movlt	r0, r3
  403278:	e05d      	b.n	403336 <_printf_float+0x482>
  40327a:	6862      	ldr	r2, [r4, #4]
  40327c:	1c53      	adds	r3, r2, #1
  40327e:	a80e      	add	r0, sp, #56	; 0x38
  403280:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  403284:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  403288:	f47f ae74 	bne.w	402f74 <_printf_float+0xc0>
  40328c:	2206      	movs	r2, #6
  40328e:	e001      	b.n	403294 <_printf_float+0x3e0>
  403290:	b912      	cbnz	r2, 403298 <_printf_float+0x3e4>
  403292:	2201      	movs	r2, #1
  403294:	6062      	str	r2, [r4, #4]
  403296:	e675      	b.n	402f84 <_printf_float+0xd0>
  403298:	2100      	movs	r1, #0
  40329a:	9106      	str	r1, [sp, #24]
  40329c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  4032a0:	e88d 000c 	stmia.w	sp, {r2, r3}
  4032a4:	6023      	str	r3, [r4, #0]
  4032a6:	9005      	str	r0, [sp, #20]
  4032a8:	4642      	mov	r2, r8
  4032aa:	f8cd 9010 	str.w	r9, [sp, #16]
  4032ae:	f8cd e00c 	str.w	lr, [sp, #12]
  4032b2:	9102      	str	r1, [sp, #8]
  4032b4:	4653      	mov	r3, sl
  4032b6:	4628      	mov	r0, r5
  4032b8:	f7ff fd6d 	bl	402d96 <__cvt>
  4032bc:	4680      	mov	r8, r0
  4032be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4032c0:	1cd8      	adds	r0, r3, #3
  4032c2:	db02      	blt.n	4032ca <_printf_float+0x416>
  4032c4:	6862      	ldr	r2, [r4, #4]
  4032c6:	4293      	cmp	r3, r2
  4032c8:	dd1d      	ble.n	403306 <_printf_float+0x452>
  4032ca:	f1a9 0902 	sub.w	r9, r9, #2
  4032ce:	fa5f f989 	uxtb.w	r9, r9
  4032d2:	e670      	b.n	402fb6 <_printf_float+0x102>
  4032d4:	3301      	adds	r3, #1
  4032d6:	6123      	str	r3, [r4, #16]
  4032d8:	e684      	b.n	402fe4 <_printf_float+0x130>
  4032da:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  4032de:	d114      	bne.n	40330a <_printf_float+0x456>
  4032e0:	2900      	cmp	r1, #0
  4032e2:	6863      	ldr	r3, [r4, #4]
  4032e4:	dd07      	ble.n	4032f6 <_printf_float+0x442>
  4032e6:	6121      	str	r1, [r4, #16]
  4032e8:	b913      	cbnz	r3, 4032f0 <_printf_float+0x43c>
  4032ea:	6822      	ldr	r2, [r4, #0]
  4032ec:	07d2      	lsls	r2, r2, #31
  4032ee:	d51d      	bpl.n	40332c <_printf_float+0x478>
  4032f0:	3301      	adds	r3, #1
  4032f2:	440b      	add	r3, r1
  4032f4:	e019      	b.n	40332a <_printf_float+0x476>
  4032f6:	b913      	cbnz	r3, 4032fe <_printf_float+0x44a>
  4032f8:	6822      	ldr	r2, [r4, #0]
  4032fa:	07d0      	lsls	r0, r2, #31
  4032fc:	d501      	bpl.n	403302 <_printf_float+0x44e>
  4032fe:	3302      	adds	r3, #2
  403300:	e013      	b.n	40332a <_printf_float+0x476>
  403302:	2301      	movs	r3, #1
  403304:	e011      	b.n	40332a <_printf_float+0x476>
  403306:	f04f 0967 	mov.w	r9, #103	; 0x67
  40330a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40330c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40330e:	4293      	cmp	r3, r2
  403310:	db05      	blt.n	40331e <_printf_float+0x46a>
  403312:	6822      	ldr	r2, [r4, #0]
  403314:	6123      	str	r3, [r4, #16]
  403316:	07d1      	lsls	r1, r2, #31
  403318:	d508      	bpl.n	40332c <_printf_float+0x478>
  40331a:	3301      	adds	r3, #1
  40331c:	e005      	b.n	40332a <_printf_float+0x476>
  40331e:	2b00      	cmp	r3, #0
  403320:	bfd4      	ite	le
  403322:	f1c3 0302 	rsble	r3, r3, #2
  403326:	2301      	movgt	r3, #1
  403328:	4413      	add	r3, r2
  40332a:	6123      	str	r3, [r4, #16]
  40332c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40332e:	65a3      	str	r3, [r4, #88]	; 0x58
  403330:	f04f 0a00 	mov.w	sl, #0
  403334:	e656      	b.n	402fe4 <_printf_float+0x130>
  403336:	b011      	add	sp, #68	; 0x44
  403338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040333c <_printf_common>:
  40333c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403340:	4691      	mov	r9, r2
  403342:	461f      	mov	r7, r3
  403344:	690a      	ldr	r2, [r1, #16]
  403346:	688b      	ldr	r3, [r1, #8]
  403348:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40334c:	4293      	cmp	r3, r2
  40334e:	bfb8      	it	lt
  403350:	4613      	movlt	r3, r2
  403352:	f8c9 3000 	str.w	r3, [r9]
  403356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  40335a:	4606      	mov	r6, r0
  40335c:	460c      	mov	r4, r1
  40335e:	b112      	cbz	r2, 403366 <_printf_common+0x2a>
  403360:	3301      	adds	r3, #1
  403362:	f8c9 3000 	str.w	r3, [r9]
  403366:	6823      	ldr	r3, [r4, #0]
  403368:	0699      	lsls	r1, r3, #26
  40336a:	bf42      	ittt	mi
  40336c:	f8d9 3000 	ldrmi.w	r3, [r9]
  403370:	3302      	addmi	r3, #2
  403372:	f8c9 3000 	strmi.w	r3, [r9]
  403376:	6825      	ldr	r5, [r4, #0]
  403378:	f015 0506 	ands.w	r5, r5, #6
  40337c:	d110      	bne.n	4033a0 <_printf_common+0x64>
  40337e:	f104 0a19 	add.w	sl, r4, #25
  403382:	e007      	b.n	403394 <_printf_common+0x58>
  403384:	2301      	movs	r3, #1
  403386:	4652      	mov	r2, sl
  403388:	4639      	mov	r1, r7
  40338a:	4630      	mov	r0, r6
  40338c:	47c0      	blx	r8
  40338e:	3001      	adds	r0, #1
  403390:	d01a      	beq.n	4033c8 <_printf_common+0x8c>
  403392:	3501      	adds	r5, #1
  403394:	68e3      	ldr	r3, [r4, #12]
  403396:	f8d9 2000 	ldr.w	r2, [r9]
  40339a:	1a9b      	subs	r3, r3, r2
  40339c:	429d      	cmp	r5, r3
  40339e:	dbf1      	blt.n	403384 <_printf_common+0x48>
  4033a0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4033a4:	6822      	ldr	r2, [r4, #0]
  4033a6:	3300      	adds	r3, #0
  4033a8:	bf18      	it	ne
  4033aa:	2301      	movne	r3, #1
  4033ac:	0692      	lsls	r2, r2, #26
  4033ae:	d50f      	bpl.n	4033d0 <_printf_common+0x94>
  4033b0:	18e1      	adds	r1, r4, r3
  4033b2:	1c5a      	adds	r2, r3, #1
  4033b4:	2030      	movs	r0, #48	; 0x30
  4033b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4033ba:	4422      	add	r2, r4
  4033bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4033c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4033c4:	3302      	adds	r3, #2
  4033c6:	e003      	b.n	4033d0 <_printf_common+0x94>
  4033c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4033cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4033d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4033d4:	4639      	mov	r1, r7
  4033d6:	4630      	mov	r0, r6
  4033d8:	47c0      	blx	r8
  4033da:	3001      	adds	r0, #1
  4033dc:	d0f4      	beq.n	4033c8 <_printf_common+0x8c>
  4033de:	6822      	ldr	r2, [r4, #0]
  4033e0:	f8d9 5000 	ldr.w	r5, [r9]
  4033e4:	68e3      	ldr	r3, [r4, #12]
  4033e6:	f002 0206 	and.w	r2, r2, #6
  4033ea:	2a04      	cmp	r2, #4
  4033ec:	bf08      	it	eq
  4033ee:	1b5d      	subeq	r5, r3, r5
  4033f0:	6922      	ldr	r2, [r4, #16]
  4033f2:	68a3      	ldr	r3, [r4, #8]
  4033f4:	bf0c      	ite	eq
  4033f6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  4033fa:	2500      	movne	r5, #0
  4033fc:	4293      	cmp	r3, r2
  4033fe:	bfc4      	itt	gt
  403400:	1a9b      	subgt	r3, r3, r2
  403402:	18ed      	addgt	r5, r5, r3
  403404:	f04f 0900 	mov.w	r9, #0
  403408:	341a      	adds	r4, #26
  40340a:	454d      	cmp	r5, r9
  40340c:	d009      	beq.n	403422 <_printf_common+0xe6>
  40340e:	2301      	movs	r3, #1
  403410:	4622      	mov	r2, r4
  403412:	4639      	mov	r1, r7
  403414:	4630      	mov	r0, r6
  403416:	47c0      	blx	r8
  403418:	3001      	adds	r0, #1
  40341a:	d0d5      	beq.n	4033c8 <_printf_common+0x8c>
  40341c:	f109 0901 	add.w	r9, r9, #1
  403420:	e7f3      	b.n	40340a <_printf_common+0xce>
  403422:	2000      	movs	r0, #0
  403424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403428 <_printf_i>:
  403428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40342c:	4617      	mov	r7, r2
  40342e:	7e0a      	ldrb	r2, [r1, #24]
  403430:	b085      	sub	sp, #20
  403432:	2a6e      	cmp	r2, #110	; 0x6e
  403434:	4698      	mov	r8, r3
  403436:	4606      	mov	r6, r0
  403438:	460c      	mov	r4, r1
  40343a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40343c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  403440:	f000 80ae 	beq.w	4035a0 <_printf_i+0x178>
  403444:	d811      	bhi.n	40346a <_printf_i+0x42>
  403446:	2a63      	cmp	r2, #99	; 0x63
  403448:	d022      	beq.n	403490 <_printf_i+0x68>
  40344a:	d809      	bhi.n	403460 <_printf_i+0x38>
  40344c:	2a00      	cmp	r2, #0
  40344e:	f000 80bb 	beq.w	4035c8 <_printf_i+0x1a0>
  403452:	2a58      	cmp	r2, #88	; 0x58
  403454:	f040 80ca 	bne.w	4035ec <_printf_i+0x1c4>
  403458:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  40345c:	4983      	ldr	r1, [pc, #524]	; (40366c <_printf_i+0x244>)
  40345e:	e055      	b.n	40350c <_printf_i+0xe4>
  403460:	2a64      	cmp	r2, #100	; 0x64
  403462:	d01e      	beq.n	4034a2 <_printf_i+0x7a>
  403464:	2a69      	cmp	r2, #105	; 0x69
  403466:	d01c      	beq.n	4034a2 <_printf_i+0x7a>
  403468:	e0c0      	b.n	4035ec <_printf_i+0x1c4>
  40346a:	2a73      	cmp	r2, #115	; 0x73
  40346c:	f000 80b0 	beq.w	4035d0 <_printf_i+0x1a8>
  403470:	d809      	bhi.n	403486 <_printf_i+0x5e>
  403472:	2a6f      	cmp	r2, #111	; 0x6f
  403474:	d02e      	beq.n	4034d4 <_printf_i+0xac>
  403476:	2a70      	cmp	r2, #112	; 0x70
  403478:	f040 80b8 	bne.w	4035ec <_printf_i+0x1c4>
  40347c:	680a      	ldr	r2, [r1, #0]
  40347e:	f042 0220 	orr.w	r2, r2, #32
  403482:	600a      	str	r2, [r1, #0]
  403484:	e03e      	b.n	403504 <_printf_i+0xdc>
  403486:	2a75      	cmp	r2, #117	; 0x75
  403488:	d024      	beq.n	4034d4 <_printf_i+0xac>
  40348a:	2a78      	cmp	r2, #120	; 0x78
  40348c:	d03a      	beq.n	403504 <_printf_i+0xdc>
  40348e:	e0ad      	b.n	4035ec <_printf_i+0x1c4>
  403490:	681a      	ldr	r2, [r3, #0]
  403492:	f101 0542 	add.w	r5, r1, #66	; 0x42
  403496:	1d11      	adds	r1, r2, #4
  403498:	6019      	str	r1, [r3, #0]
  40349a:	6813      	ldr	r3, [r2, #0]
  40349c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4034a0:	e0a8      	b.n	4035f4 <_printf_i+0x1cc>
  4034a2:	6821      	ldr	r1, [r4, #0]
  4034a4:	681a      	ldr	r2, [r3, #0]
  4034a6:	f011 0f80 	tst.w	r1, #128	; 0x80
  4034aa:	d002      	beq.n	4034b2 <_printf_i+0x8a>
  4034ac:	1d11      	adds	r1, r2, #4
  4034ae:	6019      	str	r1, [r3, #0]
  4034b0:	e008      	b.n	4034c4 <_printf_i+0x9c>
  4034b2:	f011 0f40 	tst.w	r1, #64	; 0x40
  4034b6:	f102 0104 	add.w	r1, r2, #4
  4034ba:	6019      	str	r1, [r3, #0]
  4034bc:	d002      	beq.n	4034c4 <_printf_i+0x9c>
  4034be:	f9b2 3000 	ldrsh.w	r3, [r2]
  4034c2:	e000      	b.n	4034c6 <_printf_i+0x9e>
  4034c4:	6813      	ldr	r3, [r2, #0]
  4034c6:	2b00      	cmp	r3, #0
  4034c8:	da3c      	bge.n	403544 <_printf_i+0x11c>
  4034ca:	222d      	movs	r2, #45	; 0x2d
  4034cc:	425b      	negs	r3, r3
  4034ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4034d2:	e037      	b.n	403544 <_printf_i+0x11c>
  4034d4:	6821      	ldr	r1, [r4, #0]
  4034d6:	681a      	ldr	r2, [r3, #0]
  4034d8:	f011 0f80 	tst.w	r1, #128	; 0x80
  4034dc:	d002      	beq.n	4034e4 <_printf_i+0xbc>
  4034de:	1d11      	adds	r1, r2, #4
  4034e0:	6019      	str	r1, [r3, #0]
  4034e2:	e007      	b.n	4034f4 <_printf_i+0xcc>
  4034e4:	f011 0f40 	tst.w	r1, #64	; 0x40
  4034e8:	f102 0104 	add.w	r1, r2, #4
  4034ec:	6019      	str	r1, [r3, #0]
  4034ee:	d001      	beq.n	4034f4 <_printf_i+0xcc>
  4034f0:	8813      	ldrh	r3, [r2, #0]
  4034f2:	e000      	b.n	4034f6 <_printf_i+0xce>
  4034f4:	6813      	ldr	r3, [r2, #0]
  4034f6:	7e22      	ldrb	r2, [r4, #24]
  4034f8:	495c      	ldr	r1, [pc, #368]	; (40366c <_printf_i+0x244>)
  4034fa:	2a6f      	cmp	r2, #111	; 0x6f
  4034fc:	bf14      	ite	ne
  4034fe:	220a      	movne	r2, #10
  403500:	2208      	moveq	r2, #8
  403502:	e01b      	b.n	40353c <_printf_i+0x114>
  403504:	2278      	movs	r2, #120	; 0x78
  403506:	495a      	ldr	r1, [pc, #360]	; (403670 <_printf_i+0x248>)
  403508:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  40350c:	6822      	ldr	r2, [r4, #0]
  40350e:	6818      	ldr	r0, [r3, #0]
  403510:	f012 0f80 	tst.w	r2, #128	; 0x80
  403514:	f100 0504 	add.w	r5, r0, #4
  403518:	601d      	str	r5, [r3, #0]
  40351a:	d103      	bne.n	403524 <_printf_i+0xfc>
  40351c:	0655      	lsls	r5, r2, #25
  40351e:	d501      	bpl.n	403524 <_printf_i+0xfc>
  403520:	8803      	ldrh	r3, [r0, #0]
  403522:	e000      	b.n	403526 <_printf_i+0xfe>
  403524:	6803      	ldr	r3, [r0, #0]
  403526:	07d0      	lsls	r0, r2, #31
  403528:	bf44      	itt	mi
  40352a:	f042 0220 	orrmi.w	r2, r2, #32
  40352e:	6022      	strmi	r2, [r4, #0]
  403530:	b91b      	cbnz	r3, 40353a <_printf_i+0x112>
  403532:	6822      	ldr	r2, [r4, #0]
  403534:	f022 0220 	bic.w	r2, r2, #32
  403538:	6022      	str	r2, [r4, #0]
  40353a:	2210      	movs	r2, #16
  40353c:	2000      	movs	r0, #0
  40353e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  403542:	e001      	b.n	403548 <_printf_i+0x120>
  403544:	4949      	ldr	r1, [pc, #292]	; (40366c <_printf_i+0x244>)
  403546:	220a      	movs	r2, #10
  403548:	6865      	ldr	r5, [r4, #4]
  40354a:	60a5      	str	r5, [r4, #8]
  40354c:	2d00      	cmp	r5, #0
  40354e:	db08      	blt.n	403562 <_printf_i+0x13a>
  403550:	6820      	ldr	r0, [r4, #0]
  403552:	f020 0004 	bic.w	r0, r0, #4
  403556:	6020      	str	r0, [r4, #0]
  403558:	b92b      	cbnz	r3, 403566 <_printf_i+0x13e>
  40355a:	2d00      	cmp	r5, #0
  40355c:	d17d      	bne.n	40365a <_printf_i+0x232>
  40355e:	4675      	mov	r5, lr
  403560:	e00c      	b.n	40357c <_printf_i+0x154>
  403562:	2b00      	cmp	r3, #0
  403564:	d079      	beq.n	40365a <_printf_i+0x232>
  403566:	4675      	mov	r5, lr
  403568:	fbb3 f0f2 	udiv	r0, r3, r2
  40356c:	fb02 3310 	mls	r3, r2, r0, r3
  403570:	5ccb      	ldrb	r3, [r1, r3]
  403572:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403576:	4603      	mov	r3, r0
  403578:	2800      	cmp	r0, #0
  40357a:	d1f5      	bne.n	403568 <_printf_i+0x140>
  40357c:	2a08      	cmp	r2, #8
  40357e:	d10b      	bne.n	403598 <_printf_i+0x170>
  403580:	6823      	ldr	r3, [r4, #0]
  403582:	07da      	lsls	r2, r3, #31
  403584:	d508      	bpl.n	403598 <_printf_i+0x170>
  403586:	6923      	ldr	r3, [r4, #16]
  403588:	6862      	ldr	r2, [r4, #4]
  40358a:	429a      	cmp	r2, r3
  40358c:	bfde      	ittt	le
  40358e:	2330      	movle	r3, #48	; 0x30
  403590:	f805 3c01 	strble.w	r3, [r5, #-1]
  403594:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  403598:	ebc5 030e 	rsb	r3, r5, lr
  40359c:	6123      	str	r3, [r4, #16]
  40359e:	e02e      	b.n	4035fe <_printf_i+0x1d6>
  4035a0:	6808      	ldr	r0, [r1, #0]
  4035a2:	681a      	ldr	r2, [r3, #0]
  4035a4:	6949      	ldr	r1, [r1, #20]
  4035a6:	f010 0f80 	tst.w	r0, #128	; 0x80
  4035aa:	d003      	beq.n	4035b4 <_printf_i+0x18c>
  4035ac:	1d10      	adds	r0, r2, #4
  4035ae:	6018      	str	r0, [r3, #0]
  4035b0:	6813      	ldr	r3, [r2, #0]
  4035b2:	e008      	b.n	4035c6 <_printf_i+0x19e>
  4035b4:	f010 0f40 	tst.w	r0, #64	; 0x40
  4035b8:	f102 0004 	add.w	r0, r2, #4
  4035bc:	6018      	str	r0, [r3, #0]
  4035be:	6813      	ldr	r3, [r2, #0]
  4035c0:	d001      	beq.n	4035c6 <_printf_i+0x19e>
  4035c2:	8019      	strh	r1, [r3, #0]
  4035c4:	e000      	b.n	4035c8 <_printf_i+0x1a0>
  4035c6:	6019      	str	r1, [r3, #0]
  4035c8:	2300      	movs	r3, #0
  4035ca:	6123      	str	r3, [r4, #16]
  4035cc:	4675      	mov	r5, lr
  4035ce:	e016      	b.n	4035fe <_printf_i+0x1d6>
  4035d0:	681a      	ldr	r2, [r3, #0]
  4035d2:	1d11      	adds	r1, r2, #4
  4035d4:	6019      	str	r1, [r3, #0]
  4035d6:	6815      	ldr	r5, [r2, #0]
  4035d8:	6862      	ldr	r2, [r4, #4]
  4035da:	2100      	movs	r1, #0
  4035dc:	4628      	mov	r0, r5
  4035de:	f002 fc9f 	bl	405f20 <memchr>
  4035e2:	b108      	cbz	r0, 4035e8 <_printf_i+0x1c0>
  4035e4:	1b40      	subs	r0, r0, r5
  4035e6:	6060      	str	r0, [r4, #4]
  4035e8:	6863      	ldr	r3, [r4, #4]
  4035ea:	e004      	b.n	4035f6 <_printf_i+0x1ce>
  4035ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4035f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4035f4:	2301      	movs	r3, #1
  4035f6:	6123      	str	r3, [r4, #16]
  4035f8:	2300      	movs	r3, #0
  4035fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4035fe:	f8cd 8000 	str.w	r8, [sp]
  403602:	463b      	mov	r3, r7
  403604:	aa03      	add	r2, sp, #12
  403606:	4621      	mov	r1, r4
  403608:	4630      	mov	r0, r6
  40360a:	f7ff fe97 	bl	40333c <_printf_common>
  40360e:	3001      	adds	r0, #1
  403610:	d102      	bne.n	403618 <_printf_i+0x1f0>
  403612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403616:	e026      	b.n	403666 <_printf_i+0x23e>
  403618:	6923      	ldr	r3, [r4, #16]
  40361a:	462a      	mov	r2, r5
  40361c:	4639      	mov	r1, r7
  40361e:	4630      	mov	r0, r6
  403620:	47c0      	blx	r8
  403622:	3001      	adds	r0, #1
  403624:	d0f5      	beq.n	403612 <_printf_i+0x1ea>
  403626:	6823      	ldr	r3, [r4, #0]
  403628:	079b      	lsls	r3, r3, #30
  40362a:	d510      	bpl.n	40364e <_printf_i+0x226>
  40362c:	2500      	movs	r5, #0
  40362e:	f104 0919 	add.w	r9, r4, #25
  403632:	e007      	b.n	403644 <_printf_i+0x21c>
  403634:	2301      	movs	r3, #1
  403636:	464a      	mov	r2, r9
  403638:	4639      	mov	r1, r7
  40363a:	4630      	mov	r0, r6
  40363c:	47c0      	blx	r8
  40363e:	3001      	adds	r0, #1
  403640:	d0e7      	beq.n	403612 <_printf_i+0x1ea>
  403642:	3501      	adds	r5, #1
  403644:	68e3      	ldr	r3, [r4, #12]
  403646:	9a03      	ldr	r2, [sp, #12]
  403648:	1a9b      	subs	r3, r3, r2
  40364a:	429d      	cmp	r5, r3
  40364c:	dbf2      	blt.n	403634 <_printf_i+0x20c>
  40364e:	68e0      	ldr	r0, [r4, #12]
  403650:	9b03      	ldr	r3, [sp, #12]
  403652:	4298      	cmp	r0, r3
  403654:	bfb8      	it	lt
  403656:	4618      	movlt	r0, r3
  403658:	e005      	b.n	403666 <_printf_i+0x23e>
  40365a:	780b      	ldrb	r3, [r1, #0]
  40365c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403660:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403664:	e78a      	b.n	40357c <_printf_i+0x154>
  403666:	b005      	add	sp, #20
  403668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40366c:	004081fe 	.word	0x004081fe
  403670:	0040820f 	.word	0x0040820f

00403674 <iprintf>:
  403674:	b40f      	push	{r0, r1, r2, r3}
  403676:	4b0a      	ldr	r3, [pc, #40]	; (4036a0 <iprintf+0x2c>)
  403678:	b513      	push	{r0, r1, r4, lr}
  40367a:	681c      	ldr	r4, [r3, #0]
  40367c:	b124      	cbz	r4, 403688 <iprintf+0x14>
  40367e:	69a3      	ldr	r3, [r4, #24]
  403680:	b913      	cbnz	r3, 403688 <iprintf+0x14>
  403682:	4620      	mov	r0, r4
  403684:	f002 f812 	bl	4056ac <__sinit>
  403688:	ab05      	add	r3, sp, #20
  40368a:	9a04      	ldr	r2, [sp, #16]
  40368c:	68a1      	ldr	r1, [r4, #8]
  40368e:	9301      	str	r3, [sp, #4]
  403690:	4620      	mov	r0, r4
  403692:	f003 f961 	bl	406958 <_vfiprintf_r>
  403696:	b002      	add	sp, #8
  403698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40369c:	b004      	add	sp, #16
  40369e:	4770      	bx	lr
  4036a0:	20000078 	.word	0x20000078

004036a4 <_puts_r>:
  4036a4:	b570      	push	{r4, r5, r6, lr}
  4036a6:	460e      	mov	r6, r1
  4036a8:	4605      	mov	r5, r0
  4036aa:	b118      	cbz	r0, 4036b4 <_puts_r+0x10>
  4036ac:	6983      	ldr	r3, [r0, #24]
  4036ae:	b90b      	cbnz	r3, 4036b4 <_puts_r+0x10>
  4036b0:	f001 fffc 	bl	4056ac <__sinit>
  4036b4:	69ab      	ldr	r3, [r5, #24]
  4036b6:	68ac      	ldr	r4, [r5, #8]
  4036b8:	b913      	cbnz	r3, 4036c0 <_puts_r+0x1c>
  4036ba:	4628      	mov	r0, r5
  4036bc:	f001 fff6 	bl	4056ac <__sinit>
  4036c0:	4b22      	ldr	r3, [pc, #136]	; (40374c <_puts_r+0xa8>)
  4036c2:	429c      	cmp	r4, r3
  4036c4:	d101      	bne.n	4036ca <_puts_r+0x26>
  4036c6:	686c      	ldr	r4, [r5, #4]
  4036c8:	e008      	b.n	4036dc <_puts_r+0x38>
  4036ca:	4b21      	ldr	r3, [pc, #132]	; (403750 <_puts_r+0xac>)
  4036cc:	429c      	cmp	r4, r3
  4036ce:	d101      	bne.n	4036d4 <_puts_r+0x30>
  4036d0:	68ac      	ldr	r4, [r5, #8]
  4036d2:	e003      	b.n	4036dc <_puts_r+0x38>
  4036d4:	4b1f      	ldr	r3, [pc, #124]	; (403754 <_puts_r+0xb0>)
  4036d6:	429c      	cmp	r4, r3
  4036d8:	bf08      	it	eq
  4036da:	68ec      	ldreq	r4, [r5, #12]
  4036dc:	89a3      	ldrh	r3, [r4, #12]
  4036de:	071b      	lsls	r3, r3, #28
  4036e0:	d501      	bpl.n	4036e6 <_puts_r+0x42>
  4036e2:	6923      	ldr	r3, [r4, #16]
  4036e4:	b93b      	cbnz	r3, 4036f6 <_puts_r+0x52>
  4036e6:	4621      	mov	r1, r4
  4036e8:	4628      	mov	r0, r5
  4036ea:	f001 f853 	bl	404794 <__swsetup_r>
  4036ee:	b110      	cbz	r0, 4036f6 <_puts_r+0x52>
  4036f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4036f4:	bd70      	pop	{r4, r5, r6, pc}
  4036f6:	3e01      	subs	r6, #1
  4036f8:	68a3      	ldr	r3, [r4, #8]
  4036fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  4036fe:	3b01      	subs	r3, #1
  403700:	60a3      	str	r3, [r4, #8]
  403702:	b191      	cbz	r1, 40372a <_puts_r+0x86>
  403704:	2b00      	cmp	r3, #0
  403706:	da04      	bge.n	403712 <_puts_r+0x6e>
  403708:	69a2      	ldr	r2, [r4, #24]
  40370a:	4293      	cmp	r3, r2
  40370c:	db06      	blt.n	40371c <_puts_r+0x78>
  40370e:	290a      	cmp	r1, #10
  403710:	d004      	beq.n	40371c <_puts_r+0x78>
  403712:	6823      	ldr	r3, [r4, #0]
  403714:	1c5a      	adds	r2, r3, #1
  403716:	6022      	str	r2, [r4, #0]
  403718:	7019      	strb	r1, [r3, #0]
  40371a:	e7ed      	b.n	4036f8 <_puts_r+0x54>
  40371c:	4622      	mov	r2, r4
  40371e:	4628      	mov	r0, r5
  403720:	f000 ffe4 	bl	4046ec <__swbuf_r>
  403724:	3001      	adds	r0, #1
  403726:	d1e7      	bne.n	4036f8 <_puts_r+0x54>
  403728:	e7e2      	b.n	4036f0 <_puts_r+0x4c>
  40372a:	2b00      	cmp	r3, #0
  40372c:	da08      	bge.n	403740 <_puts_r+0x9c>
  40372e:	4622      	mov	r2, r4
  403730:	210a      	movs	r1, #10
  403732:	4628      	mov	r0, r5
  403734:	f000 ffda 	bl	4046ec <__swbuf_r>
  403738:	3001      	adds	r0, #1
  40373a:	d0d9      	beq.n	4036f0 <_puts_r+0x4c>
  40373c:	200a      	movs	r0, #10
  40373e:	bd70      	pop	{r4, r5, r6, pc}
  403740:	6823      	ldr	r3, [r4, #0]
  403742:	200a      	movs	r0, #10
  403744:	1c5a      	adds	r2, r3, #1
  403746:	6022      	str	r2, [r4, #0]
  403748:	7018      	strb	r0, [r3, #0]
  40374a:	bd70      	pop	{r4, r5, r6, pc}
  40374c:	00408280 	.word	0x00408280
  403750:	004082a0 	.word	0x004082a0
  403754:	004082c0 	.word	0x004082c0

00403758 <puts>:
  403758:	4b02      	ldr	r3, [pc, #8]	; (403764 <puts+0xc>)
  40375a:	4601      	mov	r1, r0
  40375c:	6818      	ldr	r0, [r3, #0]
  40375e:	f7ff bfa1 	b.w	4036a4 <_puts_r>
  403762:	bf00      	nop
  403764:	20000078 	.word	0x20000078

00403768 <setbuf>:
  403768:	2900      	cmp	r1, #0
  40376a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40376e:	bf0c      	ite	eq
  403770:	2202      	moveq	r2, #2
  403772:	2200      	movne	r2, #0
  403774:	f000 b800 	b.w	403778 <setvbuf>

00403778 <setvbuf>:
  403778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  40377c:	461d      	mov	r5, r3
  40377e:	4b4f      	ldr	r3, [pc, #316]	; (4038bc <setvbuf+0x144>)
  403780:	681e      	ldr	r6, [r3, #0]
  403782:	4604      	mov	r4, r0
  403784:	460f      	mov	r7, r1
  403786:	4690      	mov	r8, r2
  403788:	b126      	cbz	r6, 403794 <setvbuf+0x1c>
  40378a:	69b3      	ldr	r3, [r6, #24]
  40378c:	b913      	cbnz	r3, 403794 <setvbuf+0x1c>
  40378e:	4630      	mov	r0, r6
  403790:	f001 ff8c 	bl	4056ac <__sinit>
  403794:	4b4a      	ldr	r3, [pc, #296]	; (4038c0 <setvbuf+0x148>)
  403796:	429c      	cmp	r4, r3
  403798:	d101      	bne.n	40379e <setvbuf+0x26>
  40379a:	6874      	ldr	r4, [r6, #4]
  40379c:	e008      	b.n	4037b0 <setvbuf+0x38>
  40379e:	4b49      	ldr	r3, [pc, #292]	; (4038c4 <setvbuf+0x14c>)
  4037a0:	429c      	cmp	r4, r3
  4037a2:	d101      	bne.n	4037a8 <setvbuf+0x30>
  4037a4:	68b4      	ldr	r4, [r6, #8]
  4037a6:	e003      	b.n	4037b0 <setvbuf+0x38>
  4037a8:	4b47      	ldr	r3, [pc, #284]	; (4038c8 <setvbuf+0x150>)
  4037aa:	429c      	cmp	r4, r3
  4037ac:	bf08      	it	eq
  4037ae:	68f4      	ldreq	r4, [r6, #12]
  4037b0:	f1b8 0f02 	cmp.w	r8, #2
  4037b4:	d004      	beq.n	4037c0 <setvbuf+0x48>
  4037b6:	f1b8 0f01 	cmp.w	r8, #1
  4037ba:	d879      	bhi.n	4038b0 <setvbuf+0x138>
  4037bc:	2d00      	cmp	r5, #0
  4037be:	db77      	blt.n	4038b0 <setvbuf+0x138>
  4037c0:	4621      	mov	r1, r4
  4037c2:	4630      	mov	r0, r6
  4037c4:	f001 ff08 	bl	4055d8 <_fflush_r>
  4037c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4037ca:	b141      	cbz	r1, 4037de <setvbuf+0x66>
  4037cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4037d0:	4299      	cmp	r1, r3
  4037d2:	d002      	beq.n	4037da <setvbuf+0x62>
  4037d4:	4630      	mov	r0, r6
  4037d6:	f002 ffeb 	bl	4067b0 <_free_r>
  4037da:	2300      	movs	r3, #0
  4037dc:	6363      	str	r3, [r4, #52]	; 0x34
  4037de:	2300      	movs	r3, #0
  4037e0:	61a3      	str	r3, [r4, #24]
  4037e2:	6063      	str	r3, [r4, #4]
  4037e4:	89a3      	ldrh	r3, [r4, #12]
  4037e6:	061b      	lsls	r3, r3, #24
  4037e8:	d503      	bpl.n	4037f2 <setvbuf+0x7a>
  4037ea:	6921      	ldr	r1, [r4, #16]
  4037ec:	4630      	mov	r0, r6
  4037ee:	f002 ffdf 	bl	4067b0 <_free_r>
  4037f2:	89a3      	ldrh	r3, [r4, #12]
  4037f4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4037f8:	f023 0303 	bic.w	r3, r3, #3
  4037fc:	f1b8 0f02 	cmp.w	r8, #2
  403800:	81a3      	strh	r3, [r4, #12]
  403802:	d01e      	beq.n	403842 <setvbuf+0xca>
  403804:	ab01      	add	r3, sp, #4
  403806:	466a      	mov	r2, sp
  403808:	4621      	mov	r1, r4
  40380a:	4630      	mov	r0, r6
  40380c:	f002 fb0a 	bl	405e24 <__swhatbuf_r>
  403810:	89a3      	ldrh	r3, [r4, #12]
  403812:	4318      	orrs	r0, r3
  403814:	81a0      	strh	r0, [r4, #12]
  403816:	b90d      	cbnz	r5, 40381c <setvbuf+0xa4>
  403818:	9d00      	ldr	r5, [sp, #0]
  40381a:	e000      	b.n	40381e <setvbuf+0xa6>
  40381c:	bb2f      	cbnz	r7, 40386a <setvbuf+0xf2>
  40381e:	4628      	mov	r0, r5
  403820:	f002 fb60 	bl	405ee4 <malloc>
  403824:	4607      	mov	r7, r0
  403826:	b9d0      	cbnz	r0, 40385e <setvbuf+0xe6>
  403828:	f8dd 9000 	ldr.w	r9, [sp]
  40382c:	45a9      	cmp	r9, r5
  40382e:	d102      	bne.n	403836 <setvbuf+0xbe>
  403830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403834:	e006      	b.n	403844 <setvbuf+0xcc>
  403836:	4648      	mov	r0, r9
  403838:	f002 fb54 	bl	405ee4 <malloc>
  40383c:	4607      	mov	r7, r0
  40383e:	b978      	cbnz	r0, 403860 <setvbuf+0xe8>
  403840:	e7f6      	b.n	403830 <setvbuf+0xb8>
  403842:	2000      	movs	r0, #0
  403844:	89a3      	ldrh	r3, [r4, #12]
  403846:	f043 0302 	orr.w	r3, r3, #2
  40384a:	81a3      	strh	r3, [r4, #12]
  40384c:	2300      	movs	r3, #0
  40384e:	60a3      	str	r3, [r4, #8]
  403850:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403854:	6023      	str	r3, [r4, #0]
  403856:	6123      	str	r3, [r4, #16]
  403858:	2301      	movs	r3, #1
  40385a:	6163      	str	r3, [r4, #20]
  40385c:	e02a      	b.n	4038b4 <setvbuf+0x13c>
  40385e:	46a9      	mov	r9, r5
  403860:	89a3      	ldrh	r3, [r4, #12]
  403862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403866:	81a3      	strh	r3, [r4, #12]
  403868:	464d      	mov	r5, r9
  40386a:	69b3      	ldr	r3, [r6, #24]
  40386c:	b913      	cbnz	r3, 403874 <setvbuf+0xfc>
  40386e:	4630      	mov	r0, r6
  403870:	f001 ff1c 	bl	4056ac <__sinit>
  403874:	f1b8 0f01 	cmp.w	r8, #1
  403878:	bf08      	it	eq
  40387a:	89a3      	ldrheq	r3, [r4, #12]
  40387c:	6027      	str	r7, [r4, #0]
  40387e:	bf04      	itt	eq
  403880:	f043 0301 	orreq.w	r3, r3, #1
  403884:	81a3      	strheq	r3, [r4, #12]
  403886:	89a3      	ldrh	r3, [r4, #12]
  403888:	6127      	str	r7, [r4, #16]
  40388a:	f003 0008 	and.w	r0, r3, #8
  40388e:	b280      	uxth	r0, r0
  403890:	6165      	str	r5, [r4, #20]
  403892:	b158      	cbz	r0, 4038ac <setvbuf+0x134>
  403894:	f013 0301 	ands.w	r3, r3, #1
  403898:	f04f 0000 	mov.w	r0, #0
  40389c:	bf1d      	ittte	ne
  40389e:	426d      	negne	r5, r5
  4038a0:	60a0      	strne	r0, [r4, #8]
  4038a2:	61a5      	strne	r5, [r4, #24]
  4038a4:	60a5      	streq	r5, [r4, #8]
  4038a6:	bf08      	it	eq
  4038a8:	4618      	moveq	r0, r3
  4038aa:	e003      	b.n	4038b4 <setvbuf+0x13c>
  4038ac:	60a0      	str	r0, [r4, #8]
  4038ae:	e001      	b.n	4038b4 <setvbuf+0x13c>
  4038b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4038b4:	b003      	add	sp, #12
  4038b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4038ba:	bf00      	nop
  4038bc:	20000078 	.word	0x20000078
  4038c0:	00408280 	.word	0x00408280
  4038c4:	004082a0 	.word	0x004082a0
  4038c8:	004082c0 	.word	0x004082c0

004038cc <strcmp>:
  4038cc:	f810 2b01 	ldrb.w	r2, [r0], #1
  4038d0:	f811 3b01 	ldrb.w	r3, [r1], #1
  4038d4:	2a01      	cmp	r2, #1
  4038d6:	bf28      	it	cs
  4038d8:	429a      	cmpcs	r2, r3
  4038da:	d0f7      	beq.n	4038cc <strcmp>
  4038dc:	1ad0      	subs	r0, r2, r3
  4038de:	4770      	bx	lr

004038e0 <strcpy>:
  4038e0:	4603      	mov	r3, r0
  4038e2:	f811 2b01 	ldrb.w	r2, [r1], #1
  4038e6:	f803 2b01 	strb.w	r2, [r3], #1
  4038ea:	2a00      	cmp	r2, #0
  4038ec:	d1f9      	bne.n	4038e2 <strcpy+0x2>
  4038ee:	4770      	bx	lr

004038f0 <strlen>:
  4038f0:	4603      	mov	r3, r0
  4038f2:	f813 2b01 	ldrb.w	r2, [r3], #1
  4038f6:	2a00      	cmp	r2, #0
  4038f8:	d1fb      	bne.n	4038f2 <strlen+0x2>
  4038fa:	1a18      	subs	r0, r3, r0
  4038fc:	3801      	subs	r0, #1
  4038fe:	4770      	bx	lr

00403900 <sulp>:
  403900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403904:	460f      	mov	r7, r1
  403906:	4690      	mov	r8, r2
  403908:	f002 fe20 	bl	40654c <__ulp>
  40390c:	4604      	mov	r4, r0
  40390e:	460d      	mov	r5, r1
  403910:	f1b8 0f00 	cmp.w	r8, #0
  403914:	d011      	beq.n	40393a <sulp+0x3a>
  403916:	f3c7 530a 	ubfx	r3, r7, #20, #11
  40391a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40391e:	2b00      	cmp	r3, #0
  403920:	dd0b      	ble.n	40393a <sulp+0x3a>
  403922:	051b      	lsls	r3, r3, #20
  403924:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
  403928:	2400      	movs	r4, #0
  40392a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
  40392e:	4622      	mov	r2, r4
  403930:	462b      	mov	r3, r5
  403932:	f003 fbc5 	bl	4070c0 <__aeabi_dmul>
  403936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40393a:	4620      	mov	r0, r4
  40393c:	4629      	mov	r1, r5
  40393e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403942:	0000      	movs	r0, r0
  403944:	0000      	movs	r0, r0
	...

00403948 <_strtod_l>:
  403948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40394c:	461f      	mov	r7, r3
  40394e:	b09f      	sub	sp, #124	; 0x7c
  403950:	2300      	movs	r3, #0
  403952:	4682      	mov	sl, r0
  403954:	4638      	mov	r0, r7
  403956:	931a      	str	r3, [sp, #104]	; 0x68
  403958:	9106      	str	r1, [sp, #24]
  40395a:	9215      	str	r2, [sp, #84]	; 0x54
  40395c:	f002 fa51 	bl	405e02 <__localeconv_l>
  403960:	4606      	mov	r6, r0
  403962:	6800      	ldr	r0, [r0, #0]
  403964:	f7ff ffc4 	bl	4038f0 <strlen>
  403968:	9b06      	ldr	r3, [sp, #24]
  40396a:	4604      	mov	r4, r0
  40396c:	f04f 0800 	mov.w	r8, #0
  403970:	f04f 0900 	mov.w	r9, #0
  403974:	9319      	str	r3, [sp, #100]	; 0x64
  403976:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403978:	781a      	ldrb	r2, [r3, #0]
  40397a:	2a0d      	cmp	r2, #13
  40397c:	d805      	bhi.n	40398a <_strtod_l+0x42>
  40397e:	2a09      	cmp	r2, #9
  403980:	d213      	bcs.n	4039aa <_strtod_l+0x62>
  403982:	2a00      	cmp	r2, #0
  403984:	f000 8196 	beq.w	403cb4 <_strtod_l+0x36c>
  403988:	e011      	b.n	4039ae <_strtod_l+0x66>
  40398a:	2a2b      	cmp	r2, #43	; 0x2b
  40398c:	d004      	beq.n	403998 <_strtod_l+0x50>
  40398e:	2a2d      	cmp	r2, #45	; 0x2d
  403990:	d004      	beq.n	40399c <_strtod_l+0x54>
  403992:	2a20      	cmp	r2, #32
  403994:	d10b      	bne.n	4039ae <_strtod_l+0x66>
  403996:	e008      	b.n	4039aa <_strtod_l+0x62>
  403998:	2200      	movs	r2, #0
  40399a:	e000      	b.n	40399e <_strtod_l+0x56>
  40399c:	2201      	movs	r2, #1
  40399e:	920e      	str	r2, [sp, #56]	; 0x38
  4039a0:	1c5a      	adds	r2, r3, #1
  4039a2:	9219      	str	r2, [sp, #100]	; 0x64
  4039a4:	785b      	ldrb	r3, [r3, #1]
  4039a6:	b923      	cbnz	r3, 4039b2 <_strtod_l+0x6a>
  4039a8:	e184      	b.n	403cb4 <_strtod_l+0x36c>
  4039aa:	3301      	adds	r3, #1
  4039ac:	e7e2      	b.n	403974 <_strtod_l+0x2c>
  4039ae:	2300      	movs	r3, #0
  4039b0:	930e      	str	r3, [sp, #56]	; 0x38
  4039b2:	9d19      	ldr	r5, [sp, #100]	; 0x64
  4039b4:	782b      	ldrb	r3, [r5, #0]
  4039b6:	2b30      	cmp	r3, #48	; 0x30
  4039b8:	d15d      	bne.n	403a76 <_strtod_l+0x12e>
  4039ba:	786b      	ldrb	r3, [r5, #1]
  4039bc:	2b58      	cmp	r3, #88	; 0x58
  4039be:	d001      	beq.n	4039c4 <_strtod_l+0x7c>
  4039c0:	2b78      	cmp	r3, #120	; 0x78
  4039c2:	d14d      	bne.n	403a60 <_strtod_l+0x118>
  4039c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4039c6:	9301      	str	r3, [sp, #4]
  4039c8:	ab1a      	add	r3, sp, #104	; 0x68
  4039ca:	9300      	str	r3, [sp, #0]
  4039cc:	9702      	str	r7, [sp, #8]
  4039ce:	ab1b      	add	r3, sp, #108	; 0x6c
  4039d0:	4a9d      	ldr	r2, [pc, #628]	; (403c48 <_strtod_l+0x300>)
  4039d2:	a919      	add	r1, sp, #100	; 0x64
  4039d4:	4650      	mov	r0, sl
  4039d6:	f001 ff3e 	bl	405856 <__gethex>
  4039da:	f010 0607 	ands.w	r6, r0, #7
  4039de:	4604      	mov	r4, r0
  4039e0:	f000 856f 	beq.w	4044c2 <_strtod_l+0xb7a>
  4039e4:	2e06      	cmp	r6, #6
  4039e6:	d105      	bne.n	4039f4 <_strtod_l+0xac>
  4039e8:	3501      	adds	r5, #1
  4039ea:	2300      	movs	r3, #0
  4039ec:	9519      	str	r5, [sp, #100]	; 0x64
  4039ee:	930e      	str	r3, [sp, #56]	; 0x38
  4039f0:	f000 bd67 	b.w	4044c2 <_strtod_l+0xb7a>
  4039f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4039f6:	b13a      	cbz	r2, 403a08 <_strtod_l+0xc0>
  4039f8:	2135      	movs	r1, #53	; 0x35
  4039fa:	a81c      	add	r0, sp, #112	; 0x70
  4039fc:	f002 fe8e 	bl	40671c <__copybits>
  403a00:	991a      	ldr	r1, [sp, #104]	; 0x68
  403a02:	4650      	mov	r0, sl
  403a04:	f002 fb11 	bl	40602a <_Bfree>
  403a08:	2e06      	cmp	r6, #6
  403a0a:	d822      	bhi.n	403a52 <_strtod_l+0x10a>
  403a0c:	e8df f006 	tbb	[pc, r6]
  403a10:	18080d04 	.word	0x18080d04
  403a14:	0d1d      	.short	0x0d1d
  403a16:	04          	.byte	0x04
  403a17:	00          	.byte	0x00
  403a18:	f04f 0900 	mov.w	r9, #0
  403a1c:	46c8      	mov	r8, r9
  403a1e:	e018      	b.n	403a52 <_strtod_l+0x10a>
  403a20:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403a24:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
  403a28:	e013      	b.n	403a52 <_strtod_l+0x10a>
  403a2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403a2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  403a2e:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403a32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  403a36:	f202 4233 	addw	r2, r2, #1075	; 0x433
  403a3a:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
  403a3e:	e008      	b.n	403a52 <_strtod_l+0x10a>
  403a40:	f8df 9208 	ldr.w	r9, [pc, #520]	; 403c4c <_strtod_l+0x304>
  403a44:	f04f 0800 	mov.w	r8, #0
  403a48:	e003      	b.n	403a52 <_strtod_l+0x10a>
  403a4a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
  403a4e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  403a52:	0721      	lsls	r1, r4, #28
  403a54:	f140 8535 	bpl.w	4044c2 <_strtod_l+0xb7a>
  403a58:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
  403a5c:	f000 bd31 	b.w	4044c2 <_strtod_l+0xb7a>
  403a60:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403a62:	1c5a      	adds	r2, r3, #1
  403a64:	9219      	str	r2, [sp, #100]	; 0x64
  403a66:	785b      	ldrb	r3, [r3, #1]
  403a68:	2b30      	cmp	r3, #48	; 0x30
  403a6a:	d0f9      	beq.n	403a60 <_strtod_l+0x118>
  403a6c:	2b00      	cmp	r3, #0
  403a6e:	f000 8528 	beq.w	4044c2 <_strtod_l+0xb7a>
  403a72:	2301      	movs	r3, #1
  403a74:	e000      	b.n	403a78 <_strtod_l+0x130>
  403a76:	2300      	movs	r3, #0
  403a78:	9308      	str	r3, [sp, #32]
  403a7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403a7c:	9309      	str	r3, [sp, #36]	; 0x24
  403a7e:	2300      	movs	r3, #0
  403a80:	9305      	str	r3, [sp, #20]
  403a82:	469b      	mov	fp, r3
  403a84:	9304      	str	r3, [sp, #16]
  403a86:	220a      	movs	r2, #10
  403a88:	9819      	ldr	r0, [sp, #100]	; 0x64
  403a8a:	7805      	ldrb	r5, [r0, #0]
  403a8c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
  403a90:	b2d9      	uxtb	r1, r3
  403a92:	2909      	cmp	r1, #9
  403a94:	d80e      	bhi.n	403ab4 <_strtod_l+0x16c>
  403a96:	9904      	ldr	r1, [sp, #16]
  403a98:	2908      	cmp	r1, #8
  403a9a:	bfc5      	ittet	gt
  403a9c:	9905      	ldrgt	r1, [sp, #20]
  403a9e:	fb02 3301 	mlagt	r3, r2, r1, r3
  403aa2:	fb02 3b0b 	mlale	fp, r2, fp, r3
  403aa6:	9305      	strgt	r3, [sp, #20]
  403aa8:	9b04      	ldr	r3, [sp, #16]
  403aaa:	3001      	adds	r0, #1
  403aac:	3301      	adds	r3, #1
  403aae:	9304      	str	r3, [sp, #16]
  403ab0:	9019      	str	r0, [sp, #100]	; 0x64
  403ab2:	e7e9      	b.n	403a88 <_strtod_l+0x140>
  403ab4:	4622      	mov	r2, r4
  403ab6:	6831      	ldr	r1, [r6, #0]
  403ab8:	f003 f8bd 	bl	406c36 <strncmp>
  403abc:	b128      	cbz	r0, 403aca <_strtod_l+0x182>
  403abe:	2000      	movs	r0, #0
  403ac0:	462b      	mov	r3, r5
  403ac2:	4602      	mov	r2, r0
  403ac4:	9d04      	ldr	r5, [sp, #16]
  403ac6:	4601      	mov	r1, r0
  403ac8:	e04d      	b.n	403b66 <_strtod_l+0x21e>
  403aca:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403acc:	191a      	adds	r2, r3, r4
  403ace:	9219      	str	r2, [sp, #100]	; 0x64
  403ad0:	9a04      	ldr	r2, [sp, #16]
  403ad2:	5d1b      	ldrb	r3, [r3, r4]
  403ad4:	2a00      	cmp	r2, #0
  403ad6:	d13f      	bne.n	403b58 <_strtod_l+0x210>
  403ad8:	4610      	mov	r0, r2
  403ada:	2b30      	cmp	r3, #48	; 0x30
  403adc:	d105      	bne.n	403aea <_strtod_l+0x1a2>
  403ade:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403ae0:	1c5a      	adds	r2, r3, #1
  403ae2:	9219      	str	r2, [sp, #100]	; 0x64
  403ae4:	3001      	adds	r0, #1
  403ae6:	785b      	ldrb	r3, [r3, #1]
  403ae8:	e7f7      	b.n	403ada <_strtod_l+0x192>
  403aea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
  403aee:	2a08      	cmp	r2, #8
  403af0:	d83f      	bhi.n	403b72 <_strtod_l+0x22a>
  403af2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403af4:	9209      	str	r2, [sp, #36]	; 0x24
  403af6:	4602      	mov	r2, r0
  403af8:	2000      	movs	r0, #0
  403afa:	4605      	mov	r5, r0
  403afc:	3b30      	subs	r3, #48	; 0x30
  403afe:	f100 0101 	add.w	r1, r0, #1
  403b02:	d023      	beq.n	403b4c <_strtod_l+0x204>
  403b04:	440a      	add	r2, r1
  403b06:	182e      	adds	r6, r5, r0
  403b08:	4629      	mov	r1, r5
  403b0a:	240a      	movs	r4, #10
  403b0c:	42b1      	cmp	r1, r6
  403b0e:	d00c      	beq.n	403b2a <_strtod_l+0x1e2>
  403b10:	3101      	adds	r1, #1
  403b12:	1e4f      	subs	r7, r1, #1
  403b14:	2f08      	cmp	r7, #8
  403b16:	dc02      	bgt.n	403b1e <_strtod_l+0x1d6>
  403b18:	fb04 fb0b 	mul.w	fp, r4, fp
  403b1c:	e7f6      	b.n	403b0c <_strtod_l+0x1c4>
  403b1e:	2910      	cmp	r1, #16
  403b20:	bfde      	ittt	le
  403b22:	9f05      	ldrle	r7, [sp, #20]
  403b24:	4367      	mulle	r7, r4
  403b26:	9705      	strle	r7, [sp, #20]
  403b28:	e7f0      	b.n	403b0c <_strtod_l+0x1c4>
  403b2a:	4428      	add	r0, r5
  403b2c:	2808      	cmp	r0, #8
  403b2e:	f100 0501 	add.w	r5, r0, #1
  403b32:	dc03      	bgt.n	403b3c <_strtod_l+0x1f4>
  403b34:	210a      	movs	r1, #10
  403b36:	fb01 3b0b 	mla	fp, r1, fp, r3
  403b3a:	e006      	b.n	403b4a <_strtod_l+0x202>
  403b3c:	2d10      	cmp	r5, #16
  403b3e:	bfdf      	itttt	le
  403b40:	9805      	ldrle	r0, [sp, #20]
  403b42:	210a      	movle	r1, #10
  403b44:	fb01 3300 	mlale	r3, r1, r0, r3
  403b48:	9305      	strle	r3, [sp, #20]
  403b4a:	2100      	movs	r1, #0
  403b4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403b4e:	1c58      	adds	r0, r3, #1
  403b50:	9019      	str	r0, [sp, #100]	; 0x64
  403b52:	785b      	ldrb	r3, [r3, #1]
  403b54:	4608      	mov	r0, r1
  403b56:	e001      	b.n	403b5c <_strtod_l+0x214>
  403b58:	9d04      	ldr	r5, [sp, #16]
  403b5a:	4602      	mov	r2, r0
  403b5c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  403b60:	2909      	cmp	r1, #9
  403b62:	d9cb      	bls.n	403afc <_strtod_l+0x1b4>
  403b64:	2101      	movs	r1, #1
  403b66:	2b65      	cmp	r3, #101	; 0x65
  403b68:	d001      	beq.n	403b6e <_strtod_l+0x226>
  403b6a:	2b45      	cmp	r3, #69	; 0x45
  403b6c:	d154      	bne.n	403c18 <_strtod_l+0x2d0>
  403b6e:	b96d      	cbnz	r5, 403b8c <_strtod_l+0x244>
  403b70:	e004      	b.n	403b7c <_strtod_l+0x234>
  403b72:	2b65      	cmp	r3, #101	; 0x65
  403b74:	f040 84b3 	bne.w	4044de <_strtod_l+0xb96>
  403b78:	2200      	movs	r2, #0
  403b7a:	2101      	movs	r1, #1
  403b7c:	b928      	cbnz	r0, 403b8a <_strtod_l+0x242>
  403b7e:	9b08      	ldr	r3, [sp, #32]
  403b80:	2b00      	cmp	r3, #0
  403b82:	f000 8097 	beq.w	403cb4 <_strtod_l+0x36c>
  403b86:	4605      	mov	r5, r0
  403b88:	e000      	b.n	403b8c <_strtod_l+0x244>
  403b8a:	2500      	movs	r5, #0
  403b8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403b8e:	9306      	str	r3, [sp, #24]
  403b90:	3301      	adds	r3, #1
  403b92:	9319      	str	r3, [sp, #100]	; 0x64
  403b94:	9b06      	ldr	r3, [sp, #24]
  403b96:	785b      	ldrb	r3, [r3, #1]
  403b98:	2b2b      	cmp	r3, #43	; 0x2b
  403b9a:	d006      	beq.n	403baa <_strtod_l+0x262>
  403b9c:	2b2d      	cmp	r3, #45	; 0x2d
  403b9e:	d002      	beq.n	403ba6 <_strtod_l+0x25e>
  403ba0:	2400      	movs	r4, #0
  403ba2:	9407      	str	r4, [sp, #28]
  403ba4:	e008      	b.n	403bb8 <_strtod_l+0x270>
  403ba6:	2301      	movs	r3, #1
  403ba8:	e000      	b.n	403bac <_strtod_l+0x264>
  403baa:	2300      	movs	r3, #0
  403bac:	9307      	str	r3, [sp, #28]
  403bae:	9b06      	ldr	r3, [sp, #24]
  403bb0:	3302      	adds	r3, #2
  403bb2:	9319      	str	r3, [sp, #100]	; 0x64
  403bb4:	9b06      	ldr	r3, [sp, #24]
  403bb6:	789b      	ldrb	r3, [r3, #2]
  403bb8:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  403bbc:	2c09      	cmp	r4, #9
  403bbe:	d829      	bhi.n	403c14 <_strtod_l+0x2cc>
  403bc0:	2b30      	cmp	r3, #48	; 0x30
  403bc2:	d104      	bne.n	403bce <_strtod_l+0x286>
  403bc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bc6:	1c5c      	adds	r4, r3, #1
  403bc8:	9419      	str	r4, [sp, #100]	; 0x64
  403bca:	785b      	ldrb	r3, [r3, #1]
  403bcc:	e7f8      	b.n	403bc0 <_strtod_l+0x278>
  403bce:	f1a3 0431 	sub.w	r4, r3, #49	; 0x31
  403bd2:	2c08      	cmp	r4, #8
  403bd4:	d820      	bhi.n	403c18 <_strtod_l+0x2d0>
  403bd6:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  403bda:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bdc:	f04f 0e0a 	mov.w	lr, #10
  403be0:	461e      	mov	r6, r3
  403be2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403be4:	1c5c      	adds	r4, r3, #1
  403be6:	9419      	str	r4, [sp, #100]	; 0x64
  403be8:	785b      	ldrb	r3, [r3, #1]
  403bea:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
  403bee:	f1bc 0f09 	cmp.w	ip, #9
  403bf2:	d803      	bhi.n	403bfc <_strtod_l+0x2b4>
  403bf4:	fb0e 3707 	mla	r7, lr, r7, r3
  403bf8:	3f30      	subs	r7, #48	; 0x30
  403bfa:	e7f2      	b.n	403be2 <_strtod_l+0x29a>
  403bfc:	1ba4      	subs	r4, r4, r6
  403bfe:	2c08      	cmp	r4, #8
  403c00:	f644 641f 	movw	r4, #19999	; 0x4e1f
  403c04:	dc02      	bgt.n	403c0c <_strtod_l+0x2c4>
  403c06:	42bc      	cmp	r4, r7
  403c08:	bfa8      	it	ge
  403c0a:	463c      	movge	r4, r7
  403c0c:	9e07      	ldr	r6, [sp, #28]
  403c0e:	b126      	cbz	r6, 403c1a <_strtod_l+0x2d2>
  403c10:	4264      	negs	r4, r4
  403c12:	e002      	b.n	403c1a <_strtod_l+0x2d2>
  403c14:	9c06      	ldr	r4, [sp, #24]
  403c16:	9419      	str	r4, [sp, #100]	; 0x64
  403c18:	2400      	movs	r4, #0
  403c1a:	2d00      	cmp	r5, #0
  403c1c:	d153      	bne.n	403cc6 <_strtod_l+0x37e>
  403c1e:	2800      	cmp	r0, #0
  403c20:	f040 844f 	bne.w	4044c2 <_strtod_l+0xb7a>
  403c24:	9a08      	ldr	r2, [sp, #32]
  403c26:	2a00      	cmp	r2, #0
  403c28:	f040 844b 	bne.w	4044c2 <_strtod_l+0xb7a>
  403c2c:	2900      	cmp	r1, #0
  403c2e:	d141      	bne.n	403cb4 <_strtod_l+0x36c>
  403c30:	2b4e      	cmp	r3, #78	; 0x4e
  403c32:	d020      	beq.n	403c76 <_strtod_l+0x32e>
  403c34:	dc02      	bgt.n	403c3c <_strtod_l+0x2f4>
  403c36:	2b49      	cmp	r3, #73	; 0x49
  403c38:	d00a      	beq.n	403c50 <_strtod_l+0x308>
  403c3a:	e03b      	b.n	403cb4 <_strtod_l+0x36c>
  403c3c:	2b69      	cmp	r3, #105	; 0x69
  403c3e:	d007      	beq.n	403c50 <_strtod_l+0x308>
  403c40:	2b6e      	cmp	r3, #110	; 0x6e
  403c42:	d018      	beq.n	403c76 <_strtod_l+0x32e>
  403c44:	e036      	b.n	403cb4 <_strtod_l+0x36c>
  403c46:	bf00      	nop
  403c48:	00408248 	.word	0x00408248
  403c4c:	7ff00000 	.word	0x7ff00000
  403c50:	49ab      	ldr	r1, [pc, #684]	; (403f00 <_strtod_l+0x5b8>)
  403c52:	a819      	add	r0, sp, #100	; 0x64
  403c54:	f002 f831 	bl	405cba <__match>
  403c58:	b360      	cbz	r0, 403cb4 <_strtod_l+0x36c>
  403c5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c5c:	49a9      	ldr	r1, [pc, #676]	; (403f04 <_strtod_l+0x5bc>)
  403c5e:	3b01      	subs	r3, #1
  403c60:	a819      	add	r0, sp, #100	; 0x64
  403c62:	9319      	str	r3, [sp, #100]	; 0x64
  403c64:	f002 f829 	bl	405cba <__match>
  403c68:	b910      	cbnz	r0, 403c70 <_strtod_l+0x328>
  403c6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c6c:	3301      	adds	r3, #1
  403c6e:	9319      	str	r3, [sp, #100]	; 0x64
  403c70:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 403f20 <_strtod_l+0x5d8>
  403c74:	e01a      	b.n	403cac <_strtod_l+0x364>
  403c76:	49a4      	ldr	r1, [pc, #656]	; (403f08 <_strtod_l+0x5c0>)
  403c78:	a819      	add	r0, sp, #100	; 0x64
  403c7a:	f002 f81e 	bl	405cba <__match>
  403c7e:	b1c8      	cbz	r0, 403cb4 <_strtod_l+0x36c>
  403c80:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c82:	781b      	ldrb	r3, [r3, #0]
  403c84:	2b28      	cmp	r3, #40	; 0x28
  403c86:	d10f      	bne.n	403ca8 <_strtod_l+0x360>
  403c88:	aa1c      	add	r2, sp, #112	; 0x70
  403c8a:	49a0      	ldr	r1, [pc, #640]	; (403f0c <_strtod_l+0x5c4>)
  403c8c:	a819      	add	r0, sp, #100	; 0x64
  403c8e:	f002 f827 	bl	405ce0 <__hexnan>
  403c92:	2805      	cmp	r0, #5
  403c94:	d108      	bne.n	403ca8 <_strtod_l+0x360>
  403c96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403c98:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403c9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
  403ca0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
  403ca4:	f000 bc0d 	b.w	4044c2 <_strtod_l+0xb7a>
  403ca8:	f8df 9278 	ldr.w	r9, [pc, #632]	; 403f24 <_strtod_l+0x5dc>
  403cac:	f04f 0800 	mov.w	r8, #0
  403cb0:	f000 bc07 	b.w	4044c2 <_strtod_l+0xb7a>
  403cb4:	9b06      	ldr	r3, [sp, #24]
  403cb6:	9319      	str	r3, [sp, #100]	; 0x64
  403cb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403cba:	2b00      	cmp	r3, #0
  403cbc:	f000 840c 	beq.w	4044d8 <_strtod_l+0xb90>
  403cc0:	2300      	movs	r3, #0
  403cc2:	930e      	str	r3, [sp, #56]	; 0x38
  403cc4:	e3ff      	b.n	4044c6 <_strtod_l+0xb7e>
  403cc6:	9b04      	ldr	r3, [sp, #16]
  403cc8:	4658      	mov	r0, fp
  403cca:	2b00      	cmp	r3, #0
  403ccc:	bf08      	it	eq
  403cce:	462b      	moveq	r3, r5
  403cd0:	2d10      	cmp	r5, #16
  403cd2:	eba4 0702 	sub.w	r7, r4, r2
  403cd6:	9304      	str	r3, [sp, #16]
  403cd8:	462c      	mov	r4, r5
  403cda:	bfa8      	it	ge
  403cdc:	2410      	movge	r4, #16
  403cde:	f003 f979 	bl	406fd4 <__aeabi_ui2d>
  403ce2:	2c09      	cmp	r4, #9
  403ce4:	4680      	mov	r8, r0
  403ce6:	4689      	mov	r9, r1
  403ce8:	dd13      	ble.n	403d12 <_strtod_l+0x3ca>
  403cea:	4b89      	ldr	r3, [pc, #548]	; (403f10 <_strtod_l+0x5c8>)
  403cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  403cf0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  403cf4:	f003 f9e4 	bl	4070c0 <__aeabi_dmul>
  403cf8:	4680      	mov	r8, r0
  403cfa:	9805      	ldr	r0, [sp, #20]
  403cfc:	4689      	mov	r9, r1
  403cfe:	f003 f969 	bl	406fd4 <__aeabi_ui2d>
  403d02:	4602      	mov	r2, r0
  403d04:	460b      	mov	r3, r1
  403d06:	4640      	mov	r0, r8
  403d08:	4649      	mov	r1, r9
  403d0a:	f003 f827 	bl	406d5c <__adddf3>
  403d0e:	4680      	mov	r8, r0
  403d10:	4689      	mov	r9, r1
  403d12:	2d0f      	cmp	r5, #15
  403d14:	dc33      	bgt.n	403d7e <_strtod_l+0x436>
  403d16:	2f00      	cmp	r7, #0
  403d18:	f000 83d3 	beq.w	4044c2 <_strtod_l+0xb7a>
  403d1c:	dd22      	ble.n	403d64 <_strtod_l+0x41c>
  403d1e:	2f16      	cmp	r7, #22
  403d20:	dc07      	bgt.n	403d32 <_strtod_l+0x3ea>
  403d22:	4d7b      	ldr	r5, [pc, #492]	; (403f10 <_strtod_l+0x5c8>)
  403d24:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
  403d28:	4642      	mov	r2, r8
  403d2a:	464b      	mov	r3, r9
  403d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d30:	e013      	b.n	403d5a <_strtod_l+0x412>
  403d32:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
  403d36:	429f      	cmp	r7, r3
  403d38:	dc21      	bgt.n	403d7e <_strtod_l+0x436>
  403d3a:	4c75      	ldr	r4, [pc, #468]	; (403f10 <_strtod_l+0x5c8>)
  403d3c:	f1c5 050f 	rsb	r5, r5, #15
  403d40:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  403d44:	1b7d      	subs	r5, r7, r5
  403d46:	4642      	mov	r2, r8
  403d48:	464b      	mov	r3, r9
  403d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d4e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  403d52:	f003 f9b5 	bl	4070c0 <__aeabi_dmul>
  403d56:	e9d4 2300 	ldrd	r2, r3, [r4]
  403d5a:	f003 f9b1 	bl	4070c0 <__aeabi_dmul>
  403d5e:	4680      	mov	r8, r0
  403d60:	4689      	mov	r9, r1
  403d62:	e3ae      	b.n	4044c2 <_strtod_l+0xb7a>
  403d64:	f117 0f16 	cmn.w	r7, #22
  403d68:	db09      	blt.n	403d7e <_strtod_l+0x436>
  403d6a:	4d69      	ldr	r5, [pc, #420]	; (403f10 <_strtod_l+0x5c8>)
  403d6c:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
  403d70:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d74:	4640      	mov	r0, r8
  403d76:	4649      	mov	r1, r9
  403d78:	f003 facc 	bl	407314 <__aeabi_ddiv>
  403d7c:	e7ef      	b.n	403d5e <_strtod_l+0x416>
  403d7e:	1b2c      	subs	r4, r5, r4
  403d80:	443c      	add	r4, r7
  403d82:	2c00      	cmp	r4, #0
  403d84:	dd5d      	ble.n	403e42 <_strtod_l+0x4fa>
  403d86:	f014 010f 	ands.w	r1, r4, #15
  403d8a:	d00a      	beq.n	403da2 <_strtod_l+0x45a>
  403d8c:	4b60      	ldr	r3, [pc, #384]	; (403f10 <_strtod_l+0x5c8>)
  403d8e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  403d92:	4642      	mov	r2, r8
  403d94:	464b      	mov	r3, r9
  403d96:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d9a:	f003 f991 	bl	4070c0 <__aeabi_dmul>
  403d9e:	4680      	mov	r8, r0
  403da0:	4689      	mov	r9, r1
  403da2:	f034 040f 	bics.w	r4, r4, #15
  403da6:	f000 80c1 	beq.w	403f2c <_strtod_l+0x5e4>
  403daa:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  403dae:	dd0f      	ble.n	403dd0 <_strtod_l+0x488>
  403db0:	f04f 0b00 	mov.w	fp, #0
  403db4:	f8cd b010 	str.w	fp, [sp, #16]
  403db8:	f8cd b01c 	str.w	fp, [sp, #28]
  403dbc:	f8cd b018 	str.w	fp, [sp, #24]
  403dc0:	2322      	movs	r3, #34	; 0x22
  403dc2:	f8ca 3000 	str.w	r3, [sl]
  403dc6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403f20 <_strtod_l+0x5d8>
  403dca:	f04f 0800 	mov.w	r8, #0
  403dce:	e188      	b.n	4040e2 <_strtod_l+0x79a>
  403dd0:	2300      	movs	r3, #0
  403dd2:	4e50      	ldr	r6, [pc, #320]	; (403f14 <_strtod_l+0x5cc>)
  403dd4:	9305      	str	r3, [sp, #20]
  403dd6:	1124      	asrs	r4, r4, #4
  403dd8:	4640      	mov	r0, r8
  403dda:	4649      	mov	r1, r9
  403ddc:	2c01      	cmp	r4, #1
  403dde:	dd0c      	ble.n	403dfa <_strtod_l+0x4b2>
  403de0:	07e2      	lsls	r2, r4, #31
  403de2:	d504      	bpl.n	403dee <_strtod_l+0x4a6>
  403de4:	e9d6 2300 	ldrd	r2, r3, [r6]
  403de8:	f003 f96a 	bl	4070c0 <__aeabi_dmul>
  403dec:	2301      	movs	r3, #1
  403dee:	9a05      	ldr	r2, [sp, #20]
  403df0:	3201      	adds	r2, #1
  403df2:	9205      	str	r2, [sp, #20]
  403df4:	1064      	asrs	r4, r4, #1
  403df6:	3608      	adds	r6, #8
  403df8:	e7f0      	b.n	403ddc <_strtod_l+0x494>
  403dfa:	b10b      	cbz	r3, 403e00 <_strtod_l+0x4b8>
  403dfc:	4680      	mov	r8, r0
  403dfe:	4689      	mov	r9, r1
  403e00:	4b44      	ldr	r3, [pc, #272]	; (403f14 <_strtod_l+0x5cc>)
  403e02:	9a05      	ldr	r2, [sp, #20]
  403e04:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  403e08:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
  403e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
  403e10:	4642      	mov	r2, r8
  403e12:	464b      	mov	r3, r9
  403e14:	f003 f954 	bl	4070c0 <__aeabi_dmul>
  403e18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  403e1c:	4689      	mov	r9, r1
  403e1e:	460a      	mov	r2, r1
  403e20:	0d1b      	lsrs	r3, r3, #20
  403e22:	493d      	ldr	r1, [pc, #244]	; (403f18 <_strtod_l+0x5d0>)
  403e24:	051b      	lsls	r3, r3, #20
  403e26:	428b      	cmp	r3, r1
  403e28:	4680      	mov	r8, r0
  403e2a:	d8c1      	bhi.n	403db0 <_strtod_l+0x468>
  403e2c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
  403e30:	428b      	cmp	r3, r1
  403e32:	bf86      	itte	hi
  403e34:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 403f28 <_strtod_l+0x5e0>
  403e38:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
  403e3c:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
  403e40:	e074      	b.n	403f2c <_strtod_l+0x5e4>
  403e42:	d073      	beq.n	403f2c <_strtod_l+0x5e4>
  403e44:	4264      	negs	r4, r4
  403e46:	f014 020f 	ands.w	r2, r4, #15
  403e4a:	d00a      	beq.n	403e62 <_strtod_l+0x51a>
  403e4c:	4b30      	ldr	r3, [pc, #192]	; (403f10 <_strtod_l+0x5c8>)
  403e4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403e52:	4640      	mov	r0, r8
  403e54:	4649      	mov	r1, r9
  403e56:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e5a:	f003 fa5b 	bl	407314 <__aeabi_ddiv>
  403e5e:	4680      	mov	r8, r0
  403e60:	4689      	mov	r9, r1
  403e62:	1124      	asrs	r4, r4, #4
  403e64:	d062      	beq.n	403f2c <_strtod_l+0x5e4>
  403e66:	2c1f      	cmp	r4, #31
  403e68:	dd08      	ble.n	403e7c <_strtod_l+0x534>
  403e6a:	f04f 0b00 	mov.w	fp, #0
  403e6e:	f8cd b010 	str.w	fp, [sp, #16]
  403e72:	f8cd b01c 	str.w	fp, [sp, #28]
  403e76:	f8cd b018 	str.w	fp, [sp, #24]
  403e7a:	e12b      	b.n	4040d4 <_strtod_l+0x78c>
  403e7c:	f014 0f10 	tst.w	r4, #16
  403e80:	bf0c      	ite	eq
  403e82:	2300      	moveq	r3, #0
  403e84:	236a      	movne	r3, #106	; 0x6a
  403e86:	4e25      	ldr	r6, [pc, #148]	; (403f1c <_strtod_l+0x5d4>)
  403e88:	9305      	str	r3, [sp, #20]
  403e8a:	4640      	mov	r0, r8
  403e8c:	4649      	mov	r1, r9
  403e8e:	2300      	movs	r3, #0
  403e90:	2c00      	cmp	r4, #0
  403e92:	dd09      	ble.n	403ea8 <_strtod_l+0x560>
  403e94:	07e2      	lsls	r2, r4, #31
  403e96:	d504      	bpl.n	403ea2 <_strtod_l+0x55a>
  403e98:	e9d6 2300 	ldrd	r2, r3, [r6]
  403e9c:	f003 f910 	bl	4070c0 <__aeabi_dmul>
  403ea0:	2301      	movs	r3, #1
  403ea2:	1064      	asrs	r4, r4, #1
  403ea4:	3608      	adds	r6, #8
  403ea6:	e7f3      	b.n	403e90 <_strtod_l+0x548>
  403ea8:	b10b      	cbz	r3, 403eae <_strtod_l+0x566>
  403eaa:	4680      	mov	r8, r0
  403eac:	4689      	mov	r9, r1
  403eae:	9b05      	ldr	r3, [sp, #20]
  403eb0:	b1eb      	cbz	r3, 403eee <_strtod_l+0x5a6>
  403eb2:	f3c9 530a 	ubfx	r3, r9, #20, #11
  403eb6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  403eba:	2b00      	cmp	r3, #0
  403ebc:	4649      	mov	r1, r9
  403ebe:	dd16      	ble.n	403eee <_strtod_l+0x5a6>
  403ec0:	2b1f      	cmp	r3, #31
  403ec2:	dd0e      	ble.n	403ee2 <_strtod_l+0x59a>
  403ec4:	2b34      	cmp	r3, #52	; 0x34
  403ec6:	bfde      	ittt	le
  403ec8:	3b20      	suble	r3, #32
  403eca:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
  403ece:	fa02 f303 	lslle.w	r3, r2, r3
  403ed2:	f04f 0800 	mov.w	r8, #0
  403ed6:	bfcc      	ite	gt
  403ed8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
  403edc:	ea03 0901 	andle.w	r9, r3, r1
  403ee0:	e005      	b.n	403eee <_strtod_l+0x5a6>
  403ee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  403ee6:	fa02 f303 	lsl.w	r3, r2, r3
  403eea:	ea03 0808 	and.w	r8, r3, r8
  403eee:	2200      	movs	r2, #0
  403ef0:	2300      	movs	r3, #0
  403ef2:	4640      	mov	r0, r8
  403ef4:	4649      	mov	r1, r9
  403ef6:	f003 fb4b 	bl	407590 <__aeabi_dcmpeq>
  403efa:	2800      	cmp	r0, #0
  403efc:	d1b5      	bne.n	403e6a <_strtod_l+0x522>
  403efe:	e017      	b.n	403f30 <_strtod_l+0x5e8>
  403f00:	004081f1 	.word	0x004081f1
  403f04:	00408273 	.word	0x00408273
  403f08:	004081f9 	.word	0x004081f9
  403f0c:	0040825c 	.word	0x0040825c
  403f10:	004082f0 	.word	0x004082f0
  403f14:	004083b8 	.word	0x004083b8
  403f18:	7ca00000 	.word	0x7ca00000
  403f1c:	00408220 	.word	0x00408220
  403f20:	7ff00000 	.word	0x7ff00000
  403f24:	fff80000 	.word	0xfff80000
  403f28:	7fefffff 	.word	0x7fefffff
  403f2c:	2300      	movs	r3, #0
  403f2e:	9305      	str	r3, [sp, #20]
  403f30:	f8cd b000 	str.w	fp, [sp]
  403f34:	462b      	mov	r3, r5
  403f36:	9a04      	ldr	r2, [sp, #16]
  403f38:	9909      	ldr	r1, [sp, #36]	; 0x24
  403f3a:	4650      	mov	r0, sl
  403f3c:	f002 f8c7 	bl	4060ce <__s2b>
  403f40:	9007      	str	r0, [sp, #28]
  403f42:	2800      	cmp	r0, #0
  403f44:	f43f af34 	beq.w	403db0 <_strtod_l+0x468>
  403f48:	2f00      	cmp	r7, #0
  403f4a:	f1c7 0300 	rsb	r3, r7, #0
  403f4e:	bfa8      	it	ge
  403f50:	2300      	movge	r3, #0
  403f52:	930f      	str	r3, [sp, #60]	; 0x3c
  403f54:	f04f 0b00 	mov.w	fp, #0
  403f58:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
  403f5c:	9314      	str	r3, [sp, #80]	; 0x50
  403f5e:	f8cd b010 	str.w	fp, [sp, #16]
  403f62:	9b07      	ldr	r3, [sp, #28]
  403f64:	4650      	mov	r0, sl
  403f66:	6859      	ldr	r1, [r3, #4]
  403f68:	f002 f82a 	bl	405fc0 <_Balloc>
  403f6c:	9006      	str	r0, [sp, #24]
  403f6e:	2800      	cmp	r0, #0
  403f70:	f43f af26 	beq.w	403dc0 <_strtod_l+0x478>
  403f74:	9b07      	ldr	r3, [sp, #28]
  403f76:	691a      	ldr	r2, [r3, #16]
  403f78:	3202      	adds	r2, #2
  403f7a:	f103 010c 	add.w	r1, r3, #12
  403f7e:	0092      	lsls	r2, r2, #2
  403f80:	300c      	adds	r0, #12
  403f82:	f7fe fef5 	bl	402d70 <memcpy>
  403f86:	ab1c      	add	r3, sp, #112	; 0x70
  403f88:	9301      	str	r3, [sp, #4]
  403f8a:	ab1b      	add	r3, sp, #108	; 0x6c
  403f8c:	9300      	str	r3, [sp, #0]
  403f8e:	4642      	mov	r2, r8
  403f90:	464b      	mov	r3, r9
  403f92:	4650      	mov	r0, sl
  403f94:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  403f98:	f002 fb49 	bl	40662e <__d2b>
  403f9c:	901a      	str	r0, [sp, #104]	; 0x68
  403f9e:	2800      	cmp	r0, #0
  403fa0:	f43f af0e 	beq.w	403dc0 <_strtod_l+0x478>
  403fa4:	2101      	movs	r1, #1
  403fa6:	4650      	mov	r0, sl
  403fa8:	f002 f91c 	bl	4061e4 <__i2b>
  403fac:	9004      	str	r0, [sp, #16]
  403fae:	2800      	cmp	r0, #0
  403fb0:	f43f af06 	beq.w	403dc0 <_strtod_l+0x478>
  403fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  403fb6:	9905      	ldr	r1, [sp, #20]
  403fb8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
  403fba:	2b00      	cmp	r3, #0
  403fbc:	bfad      	iteet	ge
  403fbe:	9a0f      	ldrge	r2, [sp, #60]	; 0x3c
  403fc0:	9a14      	ldrlt	r2, [sp, #80]	; 0x50
  403fc2:	9e0f      	ldrlt	r6, [sp, #60]	; 0x3c
  403fc4:	18d6      	addge	r6, r2, r3
  403fc6:	bfb8      	it	lt
  403fc8:	1ad2      	sublt	r2, r2, r3
  403fca:	eba3 0301 	sub.w	r3, r3, r1
  403fce:	4423      	add	r3, r4
  403fd0:	49af      	ldr	r1, [pc, #700]	; (404290 <_strtod_l+0x948>)
  403fd2:	bfa8      	it	ge
  403fd4:	9a14      	ldrge	r2, [sp, #80]	; 0x50
  403fd6:	3b01      	subs	r3, #1
  403fd8:	428b      	cmp	r3, r1
  403fda:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
  403fde:	f280 8085 	bge.w	4040ec <_strtod_l+0x7a4>
  403fe2:	1ac9      	subs	r1, r1, r3
  403fe4:	291f      	cmp	r1, #31
  403fe6:	bfc8      	it	gt
  403fe8:	4daa      	ldrgt	r5, [pc, #680]	; (404294 <_strtod_l+0x94c>)
  403fea:	f04f 0701 	mov.w	r7, #1
  403fee:	bfd4      	ite	le
  403ff0:	fa07 f301 	lslle.w	r3, r7, r1
  403ff4:	1aed      	subgt	r5, r5, r3
  403ff6:	eba4 0401 	sub.w	r4, r4, r1
  403ffa:	bfd9      	ittee	le
  403ffc:	9309      	strle	r3, [sp, #36]	; 0x24
  403ffe:	2500      	movle	r5, #0
  404000:	fa07 f505 	lslgt.w	r5, r7, r5
  404004:	9709      	strgt	r7, [sp, #36]	; 0x24
  404006:	1937      	adds	r7, r6, r4
  404008:	9b05      	ldr	r3, [sp, #20]
  40400a:	42be      	cmp	r6, r7
  40400c:	4414      	add	r4, r2
  40400e:	441c      	add	r4, r3
  404010:	4633      	mov	r3, r6
  404012:	bfa8      	it	ge
  404014:	463b      	movge	r3, r7
  404016:	42a3      	cmp	r3, r4
  404018:	bfa8      	it	ge
  40401a:	4623      	movge	r3, r4
  40401c:	2b00      	cmp	r3, #0
  40401e:	bfc2      	ittt	gt
  404020:	1aff      	subgt	r7, r7, r3
  404022:	1ae4      	subgt	r4, r4, r3
  404024:	1af6      	subgt	r6, r6, r3
  404026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404028:	2b00      	cmp	r3, #0
  40402a:	d163      	bne.n	4040f4 <_strtod_l+0x7ac>
  40402c:	2f00      	cmp	r7, #0
  40402e:	dc7a      	bgt.n	404126 <_strtod_l+0x7de>
  404030:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404032:	2b00      	cmp	r3, #0
  404034:	f040 8081 	bne.w	40413a <_strtod_l+0x7f2>
  404038:	2c00      	cmp	r4, #0
  40403a:	f300 8088 	bgt.w	40414e <_strtod_l+0x806>
  40403e:	2e00      	cmp	r6, #0
  404040:	f300 808f 	bgt.w	404162 <_strtod_l+0x81a>
  404044:	9a06      	ldr	r2, [sp, #24]
  404046:	991a      	ldr	r1, [sp, #104]	; 0x68
  404048:	4650      	mov	r0, sl
  40404a:	f002 fa20 	bl	40648e <__mdiff>
  40404e:	4683      	mov	fp, r0
  404050:	2800      	cmp	r0, #0
  404052:	f43f aeb5 	beq.w	403dc0 <_strtod_l+0x478>
  404056:	2400      	movs	r4, #0
  404058:	68c3      	ldr	r3, [r0, #12]
  40405a:	9904      	ldr	r1, [sp, #16]
  40405c:	60c4      	str	r4, [r0, #12]
  40405e:	9308      	str	r3, [sp, #32]
  404060:	f002 f9f9 	bl	406456 <__mcmp>
  404064:	42a0      	cmp	r0, r4
  404066:	f280 808b 	bge.w	404180 <_strtod_l+0x838>
  40406a:	9b08      	ldr	r3, [sp, #32]
  40406c:	2b00      	cmp	r3, #0
  40406e:	f040 8201 	bne.w	404474 <_strtod_l+0xb2c>
  404072:	f1b8 0f00 	cmp.w	r8, #0
  404076:	f040 81fd 	bne.w	404474 <_strtod_l+0xb2c>
  40407a:	f3c9 0313 	ubfx	r3, r9, #0, #20
  40407e:	2b00      	cmp	r3, #0
  404080:	f040 81f8 	bne.w	404474 <_strtod_l+0xb2c>
  404084:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  404088:	0d1b      	lsrs	r3, r3, #20
  40408a:	051b      	lsls	r3, r3, #20
  40408c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  404090:	f240 81f0 	bls.w	404474 <_strtod_l+0xb2c>
  404094:	f8db 3014 	ldr.w	r3, [fp, #20]
  404098:	2b00      	cmp	r3, #0
  40409a:	d06c      	beq.n	404176 <_strtod_l+0x82e>
  40409c:	4659      	mov	r1, fp
  40409e:	2201      	movs	r2, #1
  4040a0:	4650      	mov	r0, sl
  4040a2:	f002 f987 	bl	4063b4 <__lshift>
  4040a6:	9904      	ldr	r1, [sp, #16]
  4040a8:	4683      	mov	fp, r0
  4040aa:	f002 f9d4 	bl	406456 <__mcmp>
  4040ae:	2800      	cmp	r0, #0
  4040b0:	f340 81e0 	ble.w	404474 <_strtod_l+0xb2c>
  4040b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4040b8:	9a05      	ldr	r2, [sp, #20]
  4040ba:	0d1b      	lsrs	r3, r3, #20
  4040bc:	051b      	lsls	r3, r3, #20
  4040be:	2a00      	cmp	r2, #0
  4040c0:	f000 808d 	beq.w	4041de <_strtod_l+0x896>
  4040c4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  4040c8:	f300 8089 	bgt.w	4041de <_strtod_l+0x896>
  4040cc:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  4040d0:	f300 81d2 	bgt.w	404478 <_strtod_l+0xb30>
  4040d4:	2322      	movs	r3, #34	; 0x22
  4040d6:	f04f 0800 	mov.w	r8, #0
  4040da:	f04f 0900 	mov.w	r9, #0
  4040de:	f8ca 3000 	str.w	r3, [sl]
  4040e2:	9b07      	ldr	r3, [sp, #28]
  4040e4:	2b00      	cmp	r3, #0
  4040e6:	f040 81d8 	bne.w	40449a <_strtod_l+0xb52>
  4040ea:	e1ea      	b.n	4044c2 <_strtod_l+0xb7a>
  4040ec:	2301      	movs	r3, #1
  4040ee:	2500      	movs	r5, #0
  4040f0:	9309      	str	r3, [sp, #36]	; 0x24
  4040f2:	e788      	b.n	404006 <_strtod_l+0x6be>
  4040f4:	461a      	mov	r2, r3
  4040f6:	9904      	ldr	r1, [sp, #16]
  4040f8:	4650      	mov	r0, sl
  4040fa:	f002 f90d 	bl	406318 <__pow5mult>
  4040fe:	9004      	str	r0, [sp, #16]
  404100:	2800      	cmp	r0, #0
  404102:	f43f ae5d 	beq.w	403dc0 <_strtod_l+0x478>
  404106:	4601      	mov	r1, r0
  404108:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40410a:	4650      	mov	r0, sl
  40410c:	f002 f873 	bl	4061f6 <__multiply>
  404110:	9008      	str	r0, [sp, #32]
  404112:	2800      	cmp	r0, #0
  404114:	f43f ae54 	beq.w	403dc0 <_strtod_l+0x478>
  404118:	991a      	ldr	r1, [sp, #104]	; 0x68
  40411a:	4650      	mov	r0, sl
  40411c:	f001 ff85 	bl	40602a <_Bfree>
  404120:	9b08      	ldr	r3, [sp, #32]
  404122:	931a      	str	r3, [sp, #104]	; 0x68
  404124:	e782      	b.n	40402c <_strtod_l+0x6e4>
  404126:	463a      	mov	r2, r7
  404128:	991a      	ldr	r1, [sp, #104]	; 0x68
  40412a:	4650      	mov	r0, sl
  40412c:	f002 f942 	bl	4063b4 <__lshift>
  404130:	901a      	str	r0, [sp, #104]	; 0x68
  404132:	2800      	cmp	r0, #0
  404134:	f47f af7c 	bne.w	404030 <_strtod_l+0x6e8>
  404138:	e642      	b.n	403dc0 <_strtod_l+0x478>
  40413a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40413c:	9906      	ldr	r1, [sp, #24]
  40413e:	4650      	mov	r0, sl
  404140:	f002 f8ea 	bl	406318 <__pow5mult>
  404144:	9006      	str	r0, [sp, #24]
  404146:	2800      	cmp	r0, #0
  404148:	f47f af76 	bne.w	404038 <_strtod_l+0x6f0>
  40414c:	e638      	b.n	403dc0 <_strtod_l+0x478>
  40414e:	4622      	mov	r2, r4
  404150:	9906      	ldr	r1, [sp, #24]
  404152:	4650      	mov	r0, sl
  404154:	f002 f92e 	bl	4063b4 <__lshift>
  404158:	9006      	str	r0, [sp, #24]
  40415a:	2800      	cmp	r0, #0
  40415c:	f47f af6f 	bne.w	40403e <_strtod_l+0x6f6>
  404160:	e62e      	b.n	403dc0 <_strtod_l+0x478>
  404162:	4632      	mov	r2, r6
  404164:	9904      	ldr	r1, [sp, #16]
  404166:	4650      	mov	r0, sl
  404168:	f002 f924 	bl	4063b4 <__lshift>
  40416c:	9004      	str	r0, [sp, #16]
  40416e:	2800      	cmp	r0, #0
  404170:	f47f af68 	bne.w	404044 <_strtod_l+0x6fc>
  404174:	e624      	b.n	403dc0 <_strtod_l+0x478>
  404176:	f8db 3010 	ldr.w	r3, [fp, #16]
  40417a:	2b01      	cmp	r3, #1
  40417c:	dc8e      	bgt.n	40409c <_strtod_l+0x754>
  40417e:	e179      	b.n	404474 <_strtod_l+0xb2c>
  404180:	d161      	bne.n	404246 <_strtod_l+0x8fe>
  404182:	9a08      	ldr	r2, [sp, #32]
  404184:	f3c9 0313 	ubfx	r3, r9, #0, #20
  404188:	b322      	cbz	r2, 4041d4 <_strtod_l+0x88c>
  40418a:	4943      	ldr	r1, [pc, #268]	; (404298 <_strtod_l+0x950>)
  40418c:	428b      	cmp	r3, r1
  40418e:	464a      	mov	r2, r9
  404190:	d12e      	bne.n	4041f0 <_strtod_l+0x8a8>
  404192:	9b05      	ldr	r3, [sp, #20]
  404194:	4641      	mov	r1, r8
  404196:	b163      	cbz	r3, 4041b2 <_strtod_l+0x86a>
  404198:	4b40      	ldr	r3, [pc, #256]	; (40429c <_strtod_l+0x954>)
  40419a:	4013      	ands	r3, r2
  40419c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  4041a0:	d807      	bhi.n	4041b2 <_strtod_l+0x86a>
  4041a2:	0d1b      	lsrs	r3, r3, #20
  4041a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  4041a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4041ac:	fa00 f303 	lsl.w	r3, r0, r3
  4041b0:	e001      	b.n	4041b6 <_strtod_l+0x86e>
  4041b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  4041b6:	428b      	cmp	r3, r1
  4041b8:	d11a      	bne.n	4041f0 <_strtod_l+0x8a8>
  4041ba:	4939      	ldr	r1, [pc, #228]	; (4042a0 <_strtod_l+0x958>)
  4041bc:	428a      	cmp	r2, r1
  4041be:	d102      	bne.n	4041c6 <_strtod_l+0x87e>
  4041c0:	3301      	adds	r3, #1
  4041c2:	f43f adfd 	beq.w	403dc0 <_strtod_l+0x478>
  4041c6:	4b35      	ldr	r3, [pc, #212]	; (40429c <_strtod_l+0x954>)
  4041c8:	4013      	ands	r3, r2
  4041ca:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
  4041ce:	f04f 0800 	mov.w	r8, #0
  4041d2:	e14f      	b.n	404474 <_strtod_l+0xb2c>
  4041d4:	b963      	cbnz	r3, 4041f0 <_strtod_l+0x8a8>
  4041d6:	f1b8 0f00 	cmp.w	r8, #0
  4041da:	d109      	bne.n	4041f0 <_strtod_l+0x8a8>
  4041dc:	e76a      	b.n	4040b4 <_strtod_l+0x76c>
  4041de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  4041e2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
  4041e6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
  4041ea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  4041ee:	e141      	b.n	404474 <_strtod_l+0xb2c>
  4041f0:	b115      	cbz	r5, 4041f8 <_strtod_l+0x8b0>
  4041f2:	ea15 0f09 	tst.w	r5, r9
  4041f6:	e002      	b.n	4041fe <_strtod_l+0x8b6>
  4041f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4041fa:	ea13 0f08 	tst.w	r3, r8
  4041fe:	f000 8139 	beq.w	404474 <_strtod_l+0xb2c>
  404202:	9b08      	ldr	r3, [sp, #32]
  404204:	9a05      	ldr	r2, [sp, #20]
  404206:	4640      	mov	r0, r8
  404208:	4649      	mov	r1, r9
  40420a:	b153      	cbz	r3, 404222 <_strtod_l+0x8da>
  40420c:	f7ff fb78 	bl	403900 <sulp>
  404210:	4602      	mov	r2, r0
  404212:	460b      	mov	r3, r1
  404214:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404218:	f002 fda0 	bl	406d5c <__adddf3>
  40421c:	4680      	mov	r8, r0
  40421e:	4689      	mov	r9, r1
  404220:	e128      	b.n	404474 <_strtod_l+0xb2c>
  404222:	f7ff fb6d 	bl	403900 <sulp>
  404226:	4602      	mov	r2, r0
  404228:	460b      	mov	r3, r1
  40422a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40422e:	f002 fd93 	bl	406d58 <__aeabi_dsub>
  404232:	2200      	movs	r2, #0
  404234:	2300      	movs	r3, #0
  404236:	4680      	mov	r8, r0
  404238:	4689      	mov	r9, r1
  40423a:	f003 f9a9 	bl	407590 <__aeabi_dcmpeq>
  40423e:	2800      	cmp	r0, #0
  404240:	f47f af48 	bne.w	4040d4 <_strtod_l+0x78c>
  404244:	e116      	b.n	404474 <_strtod_l+0xb2c>
  404246:	9904      	ldr	r1, [sp, #16]
  404248:	4658      	mov	r0, fp
  40424a:	f002 fa3e 	bl	4066ca <__ratio>
  40424e:	2200      	movs	r2, #0
  404250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  404254:	4606      	mov	r6, r0
  404256:	460f      	mov	r7, r1
  404258:	f003 f9ae 	bl	4075b8 <__aeabi_dcmple>
  40425c:	2800      	cmp	r0, #0
  40425e:	d03e      	beq.n	4042de <_strtod_l+0x996>
  404260:	9b08      	ldr	r3, [sp, #32]
  404262:	b113      	cbz	r3, 40426a <_strtod_l+0x922>
  404264:	2600      	movs	r6, #0
  404266:	4f0f      	ldr	r7, [pc, #60]	; (4042a4 <_strtod_l+0x95c>)
  404268:	e010      	b.n	40428c <_strtod_l+0x944>
  40426a:	f1b8 0f00 	cmp.w	r8, #0
  40426e:	d103      	bne.n	404278 <_strtod_l+0x930>
  404270:	f3c9 0313 	ubfx	r3, r9, #0, #20
  404274:	b93b      	cbnz	r3, 404286 <_strtod_l+0x93e>
  404276:	e019      	b.n	4042ac <_strtod_l+0x964>
  404278:	f1b8 0f01 	cmp.w	r8, #1
  40427c:	d103      	bne.n	404286 <_strtod_l+0x93e>
  40427e:	f1b9 0f00 	cmp.w	r9, #0
  404282:	f43f af27 	beq.w	4040d4 <_strtod_l+0x78c>
  404286:	4f08      	ldr	r7, [pc, #32]	; (4042a8 <_strtod_l+0x960>)
  404288:	2600      	movs	r6, #0
  40428a:	2400      	movs	r4, #0
  40428c:	4d05      	ldr	r5, [pc, #20]	; (4042a4 <_strtod_l+0x95c>)
  40428e:	e03b      	b.n	404308 <_strtod_l+0x9c0>
  404290:	fffffc02 	.word	0xfffffc02
  404294:	fffffbe2 	.word	0xfffffbe2
  404298:	000fffff 	.word	0x000fffff
  40429c:	7ff00000 	.word	0x7ff00000
  4042a0:	7fefffff 	.word	0x7fefffff
  4042a4:	3ff00000 	.word	0x3ff00000
  4042a8:	bff00000 	.word	0xbff00000
  4042ac:	2200      	movs	r2, #0
  4042ae:	4b9a      	ldr	r3, [pc, #616]	; (404518 <_strtod_l+0xbd0>)
  4042b0:	4630      	mov	r0, r6
  4042b2:	4639      	mov	r1, r7
  4042b4:	f003 f976 	bl	4075a4 <__aeabi_dcmplt>
  4042b8:	b940      	cbnz	r0, 4042cc <_strtod_l+0x984>
  4042ba:	2200      	movs	r2, #0
  4042bc:	4b97      	ldr	r3, [pc, #604]	; (40451c <_strtod_l+0xbd4>)
  4042be:	4630      	mov	r0, r6
  4042c0:	4639      	mov	r1, r7
  4042c2:	f002 fefd 	bl	4070c0 <__aeabi_dmul>
  4042c6:	4604      	mov	r4, r0
  4042c8:	460d      	mov	r5, r1
  4042ca:	e001      	b.n	4042d0 <_strtod_l+0x988>
  4042cc:	9c08      	ldr	r4, [sp, #32]
  4042ce:	4d93      	ldr	r5, [pc, #588]	; (40451c <_strtod_l+0xbd4>)
  4042d0:	9416      	str	r4, [sp, #88]	; 0x58
  4042d2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4042d6:	9317      	str	r3, [sp, #92]	; 0x5c
  4042d8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
  4042dc:	e014      	b.n	404308 <_strtod_l+0x9c0>
  4042de:	4b8f      	ldr	r3, [pc, #572]	; (40451c <_strtod_l+0xbd4>)
  4042e0:	2200      	movs	r2, #0
  4042e2:	4630      	mov	r0, r6
  4042e4:	4639      	mov	r1, r7
  4042e6:	f002 feeb 	bl	4070c0 <__aeabi_dmul>
  4042ea:	9b08      	ldr	r3, [sp, #32]
  4042ec:	4604      	mov	r4, r0
  4042ee:	460d      	mov	r5, r1
  4042f0:	b923      	cbnz	r3, 4042fc <_strtod_l+0x9b4>
  4042f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4042f6:	9010      	str	r0, [sp, #64]	; 0x40
  4042f8:	9311      	str	r3, [sp, #68]	; 0x44
  4042fa:	e003      	b.n	404304 <_strtod_l+0x9bc>
  4042fc:	4602      	mov	r2, r0
  4042fe:	460b      	mov	r3, r1
  404300:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  404304:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
  404308:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  40430c:	0d1b      	lsrs	r3, r3, #20
  40430e:	051b      	lsls	r3, r3, #20
  404310:	9309      	str	r3, [sp, #36]	; 0x24
  404312:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404314:	4b82      	ldr	r3, [pc, #520]	; (404520 <_strtod_l+0xbd8>)
  404316:	429a      	cmp	r2, r3
  404318:	d12b      	bne.n	404372 <_strtod_l+0xa2a>
  40431a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40431e:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  404322:	4640      	mov	r0, r8
  404324:	4649      	mov	r1, r9
  404326:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  40432a:	f002 f90f 	bl	40654c <__ulp>
  40432e:	4602      	mov	r2, r0
  404330:	460b      	mov	r3, r1
  404332:	4630      	mov	r0, r6
  404334:	4639      	mov	r1, r7
  404336:	f002 fec3 	bl	4070c0 <__aeabi_dmul>
  40433a:	4642      	mov	r2, r8
  40433c:	464b      	mov	r3, r9
  40433e:	f002 fd0d 	bl	406d5c <__adddf3>
  404342:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404346:	0d1b      	lsrs	r3, r3, #20
  404348:	4a76      	ldr	r2, [pc, #472]	; (404524 <_strtod_l+0xbdc>)
  40434a:	051b      	lsls	r3, r3, #20
  40434c:	4293      	cmp	r3, r2
  40434e:	4680      	mov	r8, r0
  404350:	d90c      	bls.n	40436c <_strtod_l+0xa24>
  404352:	4b75      	ldr	r3, [pc, #468]	; (404528 <_strtod_l+0xbe0>)
  404354:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404356:	429a      	cmp	r2, r3
  404358:	d103      	bne.n	404362 <_strtod_l+0xa1a>
  40435a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40435c:	3301      	adds	r3, #1
  40435e:	f43f ad2f 	beq.w	403dc0 <_strtod_l+0x478>
  404362:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 404528 <_strtod_l+0xbe0>
  404366:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  40436a:	e072      	b.n	404452 <_strtod_l+0xb0a>
  40436c:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
  404370:	e039      	b.n	4043e6 <_strtod_l+0xa9e>
  404372:	9b05      	ldr	r3, [sp, #20]
  404374:	b33b      	cbz	r3, 4043c6 <_strtod_l+0xa7e>
  404376:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404378:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  40437c:	d823      	bhi.n	4043c6 <_strtod_l+0xa7e>
  40437e:	a35e      	add	r3, pc, #376	; (adr r3, 4044f8 <_strtod_l+0xbb0>)
  404380:	e9d3 2300 	ldrd	r2, r3, [r3]
  404384:	4620      	mov	r0, r4
  404386:	4629      	mov	r1, r5
  404388:	f003 f916 	bl	4075b8 <__aeabi_dcmple>
  40438c:	b1b8      	cbz	r0, 4043be <_strtod_l+0xa76>
  40438e:	4629      	mov	r1, r5
  404390:	4620      	mov	r0, r4
  404392:	f003 f96d 	bl	407670 <__aeabi_d2uiz>
  404396:	2800      	cmp	r0, #0
  404398:	bf08      	it	eq
  40439a:	2001      	moveq	r0, #1
  40439c:	f002 fe1a 	bl	406fd4 <__aeabi_ui2d>
  4043a0:	9b08      	ldr	r3, [sp, #32]
  4043a2:	4604      	mov	r4, r0
  4043a4:	460d      	mov	r5, r1
  4043a6:	b923      	cbnz	r3, 4043b2 <_strtod_l+0xa6a>
  4043a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4043ac:	9012      	str	r0, [sp, #72]	; 0x48
  4043ae:	9313      	str	r3, [sp, #76]	; 0x4c
  4043b0:	e003      	b.n	4043ba <_strtod_l+0xa72>
  4043b2:	4602      	mov	r2, r0
  4043b4:	460b      	mov	r3, r1
  4043b6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4043ba:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
  4043be:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4043c0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
  4043c4:	1a9f      	subs	r7, r3, r2
  4043c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4043ca:	f002 f8bf 	bl	40654c <__ulp>
  4043ce:	4602      	mov	r2, r0
  4043d0:	460b      	mov	r3, r1
  4043d2:	4630      	mov	r0, r6
  4043d4:	4639      	mov	r1, r7
  4043d6:	f002 fe73 	bl	4070c0 <__aeabi_dmul>
  4043da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4043de:	f002 fcbd 	bl	406d5c <__adddf3>
  4043e2:	4680      	mov	r8, r0
  4043e4:	4689      	mov	r9, r1
  4043e6:	9b05      	ldr	r3, [sp, #20]
  4043e8:	bb9b      	cbnz	r3, 404452 <_strtod_l+0xb0a>
  4043ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4043ee:	0d1b      	lsrs	r3, r3, #20
  4043f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4043f2:	051b      	lsls	r3, r3, #20
  4043f4:	429a      	cmp	r2, r3
  4043f6:	464e      	mov	r6, r9
  4043f8:	d12b      	bne.n	404452 <_strtod_l+0xb0a>
  4043fa:	4629      	mov	r1, r5
  4043fc:	4620      	mov	r0, r4
  4043fe:	f003 f90f 	bl	407620 <__aeabi_d2iz>
  404402:	f002 fdf7 	bl	406ff4 <__aeabi_i2d>
  404406:	460b      	mov	r3, r1
  404408:	4602      	mov	r2, r0
  40440a:	4629      	mov	r1, r5
  40440c:	4620      	mov	r0, r4
  40440e:	f002 fca3 	bl	406d58 <__aeabi_dsub>
  404412:	9b08      	ldr	r3, [sp, #32]
  404414:	4604      	mov	r4, r0
  404416:	460d      	mov	r5, r1
  404418:	b92b      	cbnz	r3, 404426 <_strtod_l+0xade>
  40441a:	f1b8 0f00 	cmp.w	r8, #0
  40441e:	d102      	bne.n	404426 <_strtod_l+0xade>
  404420:	f3c9 0613 	ubfx	r6, r9, #0, #20
  404424:	b17e      	cbz	r6, 404446 <_strtod_l+0xafe>
  404426:	a336      	add	r3, pc, #216	; (adr r3, 404500 <_strtod_l+0xbb8>)
  404428:	e9d3 2300 	ldrd	r2, r3, [r3]
  40442c:	4620      	mov	r0, r4
  40442e:	4629      	mov	r1, r5
  404430:	f003 f8b8 	bl	4075a4 <__aeabi_dcmplt>
  404434:	bb88      	cbnz	r0, 40449a <_strtod_l+0xb52>
  404436:	a334      	add	r3, pc, #208	; (adr r3, 404508 <_strtod_l+0xbc0>)
  404438:	e9d3 2300 	ldrd	r2, r3, [r3]
  40443c:	4620      	mov	r0, r4
  40443e:	4629      	mov	r1, r5
  404440:	f003 f8ce 	bl	4075e0 <__aeabi_dcmpgt>
  404444:	e004      	b.n	404450 <_strtod_l+0xb08>
  404446:	a332      	add	r3, pc, #200	; (adr r3, 404510 <_strtod_l+0xbc8>)
  404448:	e9d3 2300 	ldrd	r2, r3, [r3]
  40444c:	f003 f8aa 	bl	4075a4 <__aeabi_dcmplt>
  404450:	bb18      	cbnz	r0, 40449a <_strtod_l+0xb52>
  404452:	991a      	ldr	r1, [sp, #104]	; 0x68
  404454:	4650      	mov	r0, sl
  404456:	f001 fde8 	bl	40602a <_Bfree>
  40445a:	9906      	ldr	r1, [sp, #24]
  40445c:	4650      	mov	r0, sl
  40445e:	f001 fde4 	bl	40602a <_Bfree>
  404462:	9904      	ldr	r1, [sp, #16]
  404464:	4650      	mov	r0, sl
  404466:	f001 fde0 	bl	40602a <_Bfree>
  40446a:	4659      	mov	r1, fp
  40446c:	4650      	mov	r0, sl
  40446e:	f001 fddc 	bl	40602a <_Bfree>
  404472:	e576      	b.n	403f62 <_strtod_l+0x61a>
  404474:	9b05      	ldr	r3, [sp, #20]
  404476:	b183      	cbz	r3, 40449a <_strtod_l+0xb52>
  404478:	4b2c      	ldr	r3, [pc, #176]	; (40452c <_strtod_l+0xbe4>)
  40447a:	930d      	str	r3, [sp, #52]	; 0x34
  40447c:	2300      	movs	r3, #0
  40447e:	930c      	str	r3, [sp, #48]	; 0x30
  404480:	4640      	mov	r0, r8
  404482:	4649      	mov	r1, r9
  404484:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404488:	f002 fe1a 	bl	4070c0 <__aeabi_dmul>
  40448c:	4680      	mov	r8, r0
  40448e:	4689      	mov	r9, r1
  404490:	b919      	cbnz	r1, 40449a <_strtod_l+0xb52>
  404492:	b910      	cbnz	r0, 40449a <_strtod_l+0xb52>
  404494:	2322      	movs	r3, #34	; 0x22
  404496:	f8ca 3000 	str.w	r3, [sl]
  40449a:	991a      	ldr	r1, [sp, #104]	; 0x68
  40449c:	4650      	mov	r0, sl
  40449e:	f001 fdc4 	bl	40602a <_Bfree>
  4044a2:	9906      	ldr	r1, [sp, #24]
  4044a4:	4650      	mov	r0, sl
  4044a6:	f001 fdc0 	bl	40602a <_Bfree>
  4044aa:	9904      	ldr	r1, [sp, #16]
  4044ac:	4650      	mov	r0, sl
  4044ae:	f001 fdbc 	bl	40602a <_Bfree>
  4044b2:	9907      	ldr	r1, [sp, #28]
  4044b4:	4650      	mov	r0, sl
  4044b6:	f001 fdb8 	bl	40602a <_Bfree>
  4044ba:	4659      	mov	r1, fp
  4044bc:	4650      	mov	r0, sl
  4044be:	f001 fdb4 	bl	40602a <_Bfree>
  4044c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4044c4:	b113      	cbz	r3, 4044cc <_strtod_l+0xb84>
  4044c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4044c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4044ca:	6013      	str	r3, [r2, #0]
  4044cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4044ce:	b11b      	cbz	r3, 4044d8 <_strtod_l+0xb90>
  4044d0:	4642      	mov	r2, r8
  4044d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
  4044d6:	e007      	b.n	4044e8 <_strtod_l+0xba0>
  4044d8:	4642      	mov	r2, r8
  4044da:	464b      	mov	r3, r9
  4044dc:	e004      	b.n	4044e8 <_strtod_l+0xba0>
  4044de:	2500      	movs	r5, #0
  4044e0:	462a      	mov	r2, r5
  4044e2:	2101      	movs	r1, #1
  4044e4:	f7ff bb41 	b.w	403b6a <_strtod_l+0x222>
  4044e8:	4610      	mov	r0, r2
  4044ea:	4619      	mov	r1, r3
  4044ec:	b01f      	add	sp, #124	; 0x7c
  4044ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044f2:	bf00      	nop
  4044f4:	f3af 8000 	nop.w
  4044f8:	ffc00000 	.word	0xffc00000
  4044fc:	41dfffff 	.word	0x41dfffff
  404500:	94a03595 	.word	0x94a03595
  404504:	3fdfffff 	.word	0x3fdfffff
  404508:	35afe535 	.word	0x35afe535
  40450c:	3fe00000 	.word	0x3fe00000
  404510:	94a03595 	.word	0x94a03595
  404514:	3fcfffff 	.word	0x3fcfffff
  404518:	3ff00000 	.word	0x3ff00000
  40451c:	3fe00000 	.word	0x3fe00000
  404520:	7fe00000 	.word	0x7fe00000
  404524:	7c9fffff 	.word	0x7c9fffff
  404528:	7fefffff 	.word	0x7fefffff
  40452c:	39500000 	.word	0x39500000

00404530 <strtod>:
  404530:	4b06      	ldr	r3, [pc, #24]	; (40454c <strtod+0x1c>)
  404532:	4a07      	ldr	r2, [pc, #28]	; (404550 <strtod+0x20>)
  404534:	b410      	push	{r4}
  404536:	681c      	ldr	r4, [r3, #0]
  404538:	6a23      	ldr	r3, [r4, #32]
  40453a:	2b00      	cmp	r3, #0
  40453c:	bf08      	it	eq
  40453e:	4613      	moveq	r3, r2
  404540:	460a      	mov	r2, r1
  404542:	4601      	mov	r1, r0
  404544:	4620      	mov	r0, r4
  404546:	bc10      	pop	{r4}
  404548:	f7ff b9fe 	b.w	403948 <_strtod_l>
  40454c:	20000078 	.word	0x20000078
  404550:	2000007c 	.word	0x2000007c

00404554 <__strtok_r>:
  404554:	b5f0      	push	{r4, r5, r6, r7, lr}
  404556:	b948      	cbnz	r0, 40456c <__strtok_r+0x18>
  404558:	6810      	ldr	r0, [r2, #0]
  40455a:	b938      	cbnz	r0, 40456c <__strtok_r+0x18>
  40455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40455e:	f817 6b01 	ldrb.w	r6, [r7], #1
  404562:	b15e      	cbz	r6, 40457c <__strtok_r+0x28>
  404564:	42b5      	cmp	r5, r6
  404566:	d1fa      	bne.n	40455e <__strtok_r+0xa>
  404568:	b12b      	cbz	r3, 404576 <__strtok_r+0x22>
  40456a:	4620      	mov	r0, r4
  40456c:	4604      	mov	r4, r0
  40456e:	460f      	mov	r7, r1
  404570:	f814 5b01 	ldrb.w	r5, [r4], #1
  404574:	e7f3      	b.n	40455e <__strtok_r+0xa>
  404576:	6014      	str	r4, [r2, #0]
  404578:	7003      	strb	r3, [r0, #0]
  40457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40457c:	b94d      	cbnz	r5, 404592 <__strtok_r+0x3e>
  40457e:	6015      	str	r5, [r2, #0]
  404580:	4628      	mov	r0, r5
  404582:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404584:	f817 6b01 	ldrb.w	r6, [r7], #1
  404588:	42b5      	cmp	r5, r6
  40458a:	d007      	beq.n	40459c <__strtok_r+0x48>
  40458c:	2e00      	cmp	r6, #0
  40458e:	d1f9      	bne.n	404584 <__strtok_r+0x30>
  404590:	461c      	mov	r4, r3
  404592:	4623      	mov	r3, r4
  404594:	460f      	mov	r7, r1
  404596:	f813 5b01 	ldrb.w	r5, [r3], #1
  40459a:	e7f3      	b.n	404584 <__strtok_r+0x30>
  40459c:	b115      	cbz	r5, 4045a4 <__strtok_r+0x50>
  40459e:	2100      	movs	r1, #0
  4045a0:	7021      	strb	r1, [r4, #0]
  4045a2:	e000      	b.n	4045a6 <__strtok_r+0x52>
  4045a4:	462b      	mov	r3, r5
  4045a6:	6013      	str	r3, [r2, #0]
  4045a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

004045aa <strtok_r>:
  4045aa:	2301      	movs	r3, #1
  4045ac:	f7ff bfd2 	b.w	404554 <__strtok_r>

004045b0 <_strtol_l.isra.0>:
  4045b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4045b4:	4680      	mov	r8, r0
  4045b6:	4689      	mov	r9, r1
  4045b8:	4692      	mov	sl, r2
  4045ba:	461e      	mov	r6, r3
  4045bc:	460f      	mov	r7, r1
  4045be:	463d      	mov	r5, r7
  4045c0:	9808      	ldr	r0, [sp, #32]
  4045c2:	f815 4b01 	ldrb.w	r4, [r5], #1
  4045c6:	f001 fc19 	bl	405dfc <__locale_ctype_ptr_l>
  4045ca:	4420      	add	r0, r4
  4045cc:	7842      	ldrb	r2, [r0, #1]
  4045ce:	f002 0208 	and.w	r2, r2, #8
  4045d2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
  4045d6:	b10a      	cbz	r2, 4045dc <_strtol_l.isra.0+0x2c>
  4045d8:	462f      	mov	r7, r5
  4045da:	e7f0      	b.n	4045be <_strtol_l.isra.0+0xe>
  4045dc:	2c2d      	cmp	r4, #45	; 0x2d
  4045de:	d103      	bne.n	4045e8 <_strtol_l.isra.0+0x38>
  4045e0:	1cbd      	adds	r5, r7, #2
  4045e2:	787c      	ldrb	r4, [r7, #1]
  4045e4:	2301      	movs	r3, #1
  4045e6:	e003      	b.n	4045f0 <_strtol_l.isra.0+0x40>
  4045e8:	2c2b      	cmp	r4, #43	; 0x2b
  4045ea:	bf04      	itt	eq
  4045ec:	787c      	ldrbeq	r4, [r7, #1]
  4045ee:	1cbd      	addeq	r5, r7, #2
  4045f0:	b116      	cbz	r6, 4045f8 <_strtol_l.isra.0+0x48>
  4045f2:	2e10      	cmp	r6, #16
  4045f4:	d10a      	bne.n	40460c <_strtol_l.isra.0+0x5c>
  4045f6:	e05e      	b.n	4046b6 <_strtol_l.isra.0+0x106>
  4045f8:	2c30      	cmp	r4, #48	; 0x30
  4045fa:	d15a      	bne.n	4046b2 <_strtol_l.isra.0+0x102>
  4045fc:	782a      	ldrb	r2, [r5, #0]
  4045fe:	f002 02df 	and.w	r2, r2, #223	; 0xdf
  404602:	2a58      	cmp	r2, #88	; 0x58
  404604:	d150      	bne.n	4046a8 <_strtol_l.isra.0+0xf8>
  404606:	786c      	ldrb	r4, [r5, #1]
  404608:	2610      	movs	r6, #16
  40460a:	3502      	adds	r5, #2
  40460c:	2b00      	cmp	r3, #0
  40460e:	bf14      	ite	ne
  404610:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
  404614:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
  404618:	fbb2 fef6 	udiv	lr, r2, r6
  40461c:	fb06 211e 	mls	r1, r6, lr, r2
  404620:	2200      	movs	r2, #0
  404622:	4610      	mov	r0, r2
  404624:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
  404628:	2f09      	cmp	r7, #9
  40462a:	d801      	bhi.n	404630 <_strtol_l.isra.0+0x80>
  40462c:	463c      	mov	r4, r7
  40462e:	e00a      	b.n	404646 <_strtol_l.isra.0+0x96>
  404630:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
  404634:	2f19      	cmp	r7, #25
  404636:	d801      	bhi.n	40463c <_strtol_l.isra.0+0x8c>
  404638:	3c37      	subs	r4, #55	; 0x37
  40463a:	e004      	b.n	404646 <_strtol_l.isra.0+0x96>
  40463c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
  404640:	2f19      	cmp	r7, #25
  404642:	d813      	bhi.n	40466c <_strtol_l.isra.0+0xbc>
  404644:	3c57      	subs	r4, #87	; 0x57
  404646:	42a6      	cmp	r6, r4
  404648:	dd10      	ble.n	40466c <_strtol_l.isra.0+0xbc>
  40464a:	1c57      	adds	r7, r2, #1
  40464c:	d00b      	beq.n	404666 <_strtol_l.isra.0+0xb6>
  40464e:	4586      	cmp	lr, r0
  404650:	d307      	bcc.n	404662 <_strtol_l.isra.0+0xb2>
  404652:	d101      	bne.n	404658 <_strtol_l.isra.0+0xa8>
  404654:	42a1      	cmp	r1, r4
  404656:	db03      	blt.n	404660 <_strtol_l.isra.0+0xb0>
  404658:	fb00 4006 	mla	r0, r0, r6, r4
  40465c:	2201      	movs	r2, #1
  40465e:	e002      	b.n	404666 <_strtol_l.isra.0+0xb6>
  404660:	4670      	mov	r0, lr
  404662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  404666:	f815 4b01 	ldrb.w	r4, [r5], #1
  40466a:	e7db      	b.n	404624 <_strtol_l.isra.0+0x74>
  40466c:	1c51      	adds	r1, r2, #1
  40466e:	d10e      	bne.n	40468e <_strtol_l.isra.0+0xde>
  404670:	2b00      	cmp	r3, #0
  404672:	f04f 0322 	mov.w	r3, #34	; 0x22
  404676:	bf14      	ite	ne
  404678:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  40467c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  404680:	f8c8 3000 	str.w	r3, [r8]
  404684:	f1ba 0f00 	cmp.w	sl, #0
  404688:	d107      	bne.n	40469a <_strtol_l.isra.0+0xea>
  40468a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40468e:	b103      	cbz	r3, 404692 <_strtol_l.isra.0+0xe2>
  404690:	4240      	negs	r0, r0
  404692:	f1ba 0f00 	cmp.w	sl, #0
  404696:	d011      	beq.n	4046bc <_strtol_l.isra.0+0x10c>
  404698:	b10a      	cbz	r2, 40469e <_strtol_l.isra.0+0xee>
  40469a:	3d01      	subs	r5, #1
  40469c:	e000      	b.n	4046a0 <_strtol_l.isra.0+0xf0>
  40469e:	464d      	mov	r5, r9
  4046a0:	f8ca 5000 	str.w	r5, [sl]
  4046a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4046a8:	2430      	movs	r4, #48	; 0x30
  4046aa:	2e00      	cmp	r6, #0
  4046ac:	d1ae      	bne.n	40460c <_strtol_l.isra.0+0x5c>
  4046ae:	2608      	movs	r6, #8
  4046b0:	e7ac      	b.n	40460c <_strtol_l.isra.0+0x5c>
  4046b2:	260a      	movs	r6, #10
  4046b4:	e7aa      	b.n	40460c <_strtol_l.isra.0+0x5c>
  4046b6:	2c30      	cmp	r4, #48	; 0x30
  4046b8:	d0a0      	beq.n	4045fc <_strtol_l.isra.0+0x4c>
  4046ba:	e7a7      	b.n	40460c <_strtol_l.isra.0+0x5c>
  4046bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004046c0 <strtol>:
  4046c0:	4b08      	ldr	r3, [pc, #32]	; (4046e4 <strtol+0x24>)
  4046c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  4046c4:	681c      	ldr	r4, [r3, #0]
  4046c6:	4d08      	ldr	r5, [pc, #32]	; (4046e8 <strtol+0x28>)
  4046c8:	6a23      	ldr	r3, [r4, #32]
  4046ca:	2b00      	cmp	r3, #0
  4046cc:	bf08      	it	eq
  4046ce:	462b      	moveq	r3, r5
  4046d0:	9300      	str	r3, [sp, #0]
  4046d2:	4613      	mov	r3, r2
  4046d4:	460a      	mov	r2, r1
  4046d6:	4601      	mov	r1, r0
  4046d8:	4620      	mov	r0, r4
  4046da:	f7ff ff69 	bl	4045b0 <_strtol_l.isra.0>
  4046de:	b003      	add	sp, #12
  4046e0:	bd30      	pop	{r4, r5, pc}
  4046e2:	bf00      	nop
  4046e4:	20000078 	.word	0x20000078
  4046e8:	2000007c 	.word	0x2000007c

004046ec <__swbuf_r>:
  4046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4046ee:	460f      	mov	r7, r1
  4046f0:	4614      	mov	r4, r2
  4046f2:	4605      	mov	r5, r0
  4046f4:	b118      	cbz	r0, 4046fe <__swbuf_r+0x12>
  4046f6:	6983      	ldr	r3, [r0, #24]
  4046f8:	b90b      	cbnz	r3, 4046fe <__swbuf_r+0x12>
  4046fa:	f000 ffd7 	bl	4056ac <__sinit>
  4046fe:	4b22      	ldr	r3, [pc, #136]	; (404788 <__swbuf_r+0x9c>)
  404700:	429c      	cmp	r4, r3
  404702:	d101      	bne.n	404708 <__swbuf_r+0x1c>
  404704:	686c      	ldr	r4, [r5, #4]
  404706:	e008      	b.n	40471a <__swbuf_r+0x2e>
  404708:	4b20      	ldr	r3, [pc, #128]	; (40478c <__swbuf_r+0xa0>)
  40470a:	429c      	cmp	r4, r3
  40470c:	d101      	bne.n	404712 <__swbuf_r+0x26>
  40470e:	68ac      	ldr	r4, [r5, #8]
  404710:	e003      	b.n	40471a <__swbuf_r+0x2e>
  404712:	4b1f      	ldr	r3, [pc, #124]	; (404790 <__swbuf_r+0xa4>)
  404714:	429c      	cmp	r4, r3
  404716:	bf08      	it	eq
  404718:	68ec      	ldreq	r4, [r5, #12]
  40471a:	69a3      	ldr	r3, [r4, #24]
  40471c:	60a3      	str	r3, [r4, #8]
  40471e:	89a3      	ldrh	r3, [r4, #12]
  404720:	071a      	lsls	r2, r3, #28
  404722:	d509      	bpl.n	404738 <__swbuf_r+0x4c>
  404724:	6923      	ldr	r3, [r4, #16]
  404726:	b13b      	cbz	r3, 404738 <__swbuf_r+0x4c>
  404728:	6823      	ldr	r3, [r4, #0]
  40472a:	6920      	ldr	r0, [r4, #16]
  40472c:	1a18      	subs	r0, r3, r0
  40472e:	6963      	ldr	r3, [r4, #20]
  404730:	4298      	cmp	r0, r3
  404732:	b2fe      	uxtb	r6, r7
  404734:	db0f      	blt.n	404756 <__swbuf_r+0x6a>
  404736:	e008      	b.n	40474a <__swbuf_r+0x5e>
  404738:	4621      	mov	r1, r4
  40473a:	4628      	mov	r0, r5
  40473c:	f000 f82a 	bl	404794 <__swsetup_r>
  404740:	2800      	cmp	r0, #0
  404742:	d0f1      	beq.n	404728 <__swbuf_r+0x3c>
  404744:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  404748:	e01b      	b.n	404782 <__swbuf_r+0x96>
  40474a:	4621      	mov	r1, r4
  40474c:	4628      	mov	r0, r5
  40474e:	f000 ff43 	bl	4055d8 <_fflush_r>
  404752:	2800      	cmp	r0, #0
  404754:	d1f6      	bne.n	404744 <__swbuf_r+0x58>
  404756:	68a3      	ldr	r3, [r4, #8]
  404758:	3b01      	subs	r3, #1
  40475a:	60a3      	str	r3, [r4, #8]
  40475c:	6823      	ldr	r3, [r4, #0]
  40475e:	1c5a      	adds	r2, r3, #1
  404760:	6022      	str	r2, [r4, #0]
  404762:	701f      	strb	r7, [r3, #0]
  404764:	6963      	ldr	r3, [r4, #20]
  404766:	3001      	adds	r0, #1
  404768:	4298      	cmp	r0, r3
  40476a:	d004      	beq.n	404776 <__swbuf_r+0x8a>
  40476c:	89a3      	ldrh	r3, [r4, #12]
  40476e:	07db      	lsls	r3, r3, #31
  404770:	d507      	bpl.n	404782 <__swbuf_r+0x96>
  404772:	2e0a      	cmp	r6, #10
  404774:	d105      	bne.n	404782 <__swbuf_r+0x96>
  404776:	4621      	mov	r1, r4
  404778:	4628      	mov	r0, r5
  40477a:	f000 ff2d 	bl	4055d8 <_fflush_r>
  40477e:	2800      	cmp	r0, #0
  404780:	d1e0      	bne.n	404744 <__swbuf_r+0x58>
  404782:	4630      	mov	r0, r6
  404784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404786:	bf00      	nop
  404788:	00408280 	.word	0x00408280
  40478c:	004082a0 	.word	0x004082a0
  404790:	004082c0 	.word	0x004082c0

00404794 <__swsetup_r>:
  404794:	4b32      	ldr	r3, [pc, #200]	; (404860 <__swsetup_r+0xcc>)
  404796:	b570      	push	{r4, r5, r6, lr}
  404798:	681d      	ldr	r5, [r3, #0]
  40479a:	4606      	mov	r6, r0
  40479c:	460c      	mov	r4, r1
  40479e:	b125      	cbz	r5, 4047aa <__swsetup_r+0x16>
  4047a0:	69ab      	ldr	r3, [r5, #24]
  4047a2:	b913      	cbnz	r3, 4047aa <__swsetup_r+0x16>
  4047a4:	4628      	mov	r0, r5
  4047a6:	f000 ff81 	bl	4056ac <__sinit>
  4047aa:	4b2e      	ldr	r3, [pc, #184]	; (404864 <__swsetup_r+0xd0>)
  4047ac:	429c      	cmp	r4, r3
  4047ae:	d101      	bne.n	4047b4 <__swsetup_r+0x20>
  4047b0:	686c      	ldr	r4, [r5, #4]
  4047b2:	e008      	b.n	4047c6 <__swsetup_r+0x32>
  4047b4:	4b2c      	ldr	r3, [pc, #176]	; (404868 <__swsetup_r+0xd4>)
  4047b6:	429c      	cmp	r4, r3
  4047b8:	d101      	bne.n	4047be <__swsetup_r+0x2a>
  4047ba:	68ac      	ldr	r4, [r5, #8]
  4047bc:	e003      	b.n	4047c6 <__swsetup_r+0x32>
  4047be:	4b2b      	ldr	r3, [pc, #172]	; (40486c <__swsetup_r+0xd8>)
  4047c0:	429c      	cmp	r4, r3
  4047c2:	bf08      	it	eq
  4047c4:	68ec      	ldreq	r4, [r5, #12]
  4047c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047ca:	b29a      	uxth	r2, r3
  4047cc:	0715      	lsls	r5, r2, #28
  4047ce:	d41d      	bmi.n	40480c <__swsetup_r+0x78>
  4047d0:	06d0      	lsls	r0, r2, #27
  4047d2:	d402      	bmi.n	4047da <__swsetup_r+0x46>
  4047d4:	2209      	movs	r2, #9
  4047d6:	6032      	str	r2, [r6, #0]
  4047d8:	e03a      	b.n	404850 <__swsetup_r+0xbc>
  4047da:	0751      	lsls	r1, r2, #29
  4047dc:	d512      	bpl.n	404804 <__swsetup_r+0x70>
  4047de:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4047e0:	b141      	cbz	r1, 4047f4 <__swsetup_r+0x60>
  4047e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4047e6:	4299      	cmp	r1, r3
  4047e8:	d002      	beq.n	4047f0 <__swsetup_r+0x5c>
  4047ea:	4630      	mov	r0, r6
  4047ec:	f001 ffe0 	bl	4067b0 <_free_r>
  4047f0:	2300      	movs	r3, #0
  4047f2:	6363      	str	r3, [r4, #52]	; 0x34
  4047f4:	89a3      	ldrh	r3, [r4, #12]
  4047f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4047fa:	81a3      	strh	r3, [r4, #12]
  4047fc:	2300      	movs	r3, #0
  4047fe:	6063      	str	r3, [r4, #4]
  404800:	6923      	ldr	r3, [r4, #16]
  404802:	6023      	str	r3, [r4, #0]
  404804:	89a3      	ldrh	r3, [r4, #12]
  404806:	f043 0308 	orr.w	r3, r3, #8
  40480a:	81a3      	strh	r3, [r4, #12]
  40480c:	6923      	ldr	r3, [r4, #16]
  40480e:	b94b      	cbnz	r3, 404824 <__swsetup_r+0x90>
  404810:	89a3      	ldrh	r3, [r4, #12]
  404812:	f403 7320 	and.w	r3, r3, #640	; 0x280
  404816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40481a:	d003      	beq.n	404824 <__swsetup_r+0x90>
  40481c:	4621      	mov	r1, r4
  40481e:	4630      	mov	r0, r6
  404820:	f001 fb24 	bl	405e6c <__smakebuf_r>
  404824:	89a2      	ldrh	r2, [r4, #12]
  404826:	f012 0301 	ands.w	r3, r2, #1
  40482a:	d005      	beq.n	404838 <__swsetup_r+0xa4>
  40482c:	2300      	movs	r3, #0
  40482e:	60a3      	str	r3, [r4, #8]
  404830:	6963      	ldr	r3, [r4, #20]
  404832:	425b      	negs	r3, r3
  404834:	61a3      	str	r3, [r4, #24]
  404836:	e003      	b.n	404840 <__swsetup_r+0xac>
  404838:	0792      	lsls	r2, r2, #30
  40483a:	bf58      	it	pl
  40483c:	6963      	ldrpl	r3, [r4, #20]
  40483e:	60a3      	str	r3, [r4, #8]
  404840:	6923      	ldr	r3, [r4, #16]
  404842:	b95b      	cbnz	r3, 40485c <__swsetup_r+0xc8>
  404844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404848:	f003 0080 	and.w	r0, r3, #128	; 0x80
  40484c:	b280      	uxth	r0, r0
  40484e:	b130      	cbz	r0, 40485e <__swsetup_r+0xca>
  404850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404854:	81a3      	strh	r3, [r4, #12]
  404856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40485a:	bd70      	pop	{r4, r5, r6, pc}
  40485c:	2000      	movs	r0, #0
  40485e:	bd70      	pop	{r4, r5, r6, pc}
  404860:	20000078 	.word	0x20000078
  404864:	00408280 	.word	0x00408280
  404868:	004082a0 	.word	0x004082a0
  40486c:	004082c0 	.word	0x004082c0

00404870 <quorem>:
  404870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404874:	6903      	ldr	r3, [r0, #16]
  404876:	690c      	ldr	r4, [r1, #16]
  404878:	429c      	cmp	r4, r3
  40487a:	4680      	mov	r8, r0
  40487c:	f300 8083 	bgt.w	404986 <quorem+0x116>
  404880:	3c01      	subs	r4, #1
  404882:	f101 0714 	add.w	r7, r1, #20
  404886:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  40488a:	f100 0614 	add.w	r6, r0, #20
  40488e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  404892:	eb06 030e 	add.w	r3, r6, lr
  404896:	9301      	str	r3, [sp, #4]
  404898:	3501      	adds	r5, #1
  40489a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  40489e:	fbb3 f5f5 	udiv	r5, r3, r5
  4048a2:	eb07 090e 	add.w	r9, r7, lr
  4048a6:	2d00      	cmp	r5, #0
  4048a8:	d039      	beq.n	40491e <quorem+0xae>
  4048aa:	f04f 0a00 	mov.w	sl, #0
  4048ae:	4638      	mov	r0, r7
  4048b0:	46b4      	mov	ip, r6
  4048b2:	46d3      	mov	fp, sl
  4048b4:	f850 2b04 	ldr.w	r2, [r0], #4
  4048b8:	b293      	uxth	r3, r2
  4048ba:	fb05 a303 	mla	r3, r5, r3, sl
  4048be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4048c2:	b29b      	uxth	r3, r3
  4048c4:	ebc3 030b 	rsb	r3, r3, fp
  4048c8:	0c12      	lsrs	r2, r2, #16
  4048ca:	f8bc b000 	ldrh.w	fp, [ip]
  4048ce:	fb05 a202 	mla	r2, r5, r2, sl
  4048d2:	fa13 f38b 	uxtah	r3, r3, fp
  4048d6:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4048da:	fa1f fb82 	uxth.w	fp, r2
  4048de:	f8dc 2000 	ldr.w	r2, [ip]
  4048e2:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4048e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4048ea:	b29b      	uxth	r3, r3
  4048ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4048f0:	4581      	cmp	r9, r0
  4048f2:	ea4f 4b22 	mov.w	fp, r2, asr #16
  4048f6:	f84c 3b04 	str.w	r3, [ip], #4
  4048fa:	d2db      	bcs.n	4048b4 <quorem+0x44>
  4048fc:	f856 300e 	ldr.w	r3, [r6, lr]
  404900:	b96b      	cbnz	r3, 40491e <quorem+0xae>
  404902:	9b01      	ldr	r3, [sp, #4]
  404904:	3b04      	subs	r3, #4
  404906:	429e      	cmp	r6, r3
  404908:	461a      	mov	r2, r3
  40490a:	d302      	bcc.n	404912 <quorem+0xa2>
  40490c:	f8c8 4010 	str.w	r4, [r8, #16]
  404910:	e005      	b.n	40491e <quorem+0xae>
  404912:	6812      	ldr	r2, [r2, #0]
  404914:	3b04      	subs	r3, #4
  404916:	2a00      	cmp	r2, #0
  404918:	d1f8      	bne.n	40490c <quorem+0x9c>
  40491a:	3c01      	subs	r4, #1
  40491c:	e7f3      	b.n	404906 <quorem+0x96>
  40491e:	4640      	mov	r0, r8
  404920:	f001 fd99 	bl	406456 <__mcmp>
  404924:	2800      	cmp	r0, #0
  404926:	db2c      	blt.n	404982 <quorem+0x112>
  404928:	3501      	adds	r5, #1
  40492a:	4630      	mov	r0, r6
  40492c:	f04f 0e00 	mov.w	lr, #0
  404930:	f857 1b04 	ldr.w	r1, [r7], #4
  404934:	f8d0 c000 	ldr.w	ip, [r0]
  404938:	b28a      	uxth	r2, r1
  40493a:	ebc2 030e 	rsb	r3, r2, lr
  40493e:	0c09      	lsrs	r1, r1, #16
  404940:	fa13 f38c 	uxtah	r3, r3, ip
  404944:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  404948:	eb02 4223 	add.w	r2, r2, r3, asr #16
  40494c:	b29b      	uxth	r3, r3
  40494e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404952:	45b9      	cmp	r9, r7
  404954:	ea4f 4e22 	mov.w	lr, r2, asr #16
  404958:	f840 3b04 	str.w	r3, [r0], #4
  40495c:	d2e8      	bcs.n	404930 <quorem+0xc0>
  40495e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  404962:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  404966:	b962      	cbnz	r2, 404982 <quorem+0x112>
  404968:	3b04      	subs	r3, #4
  40496a:	429e      	cmp	r6, r3
  40496c:	461a      	mov	r2, r3
  40496e:	d302      	bcc.n	404976 <quorem+0x106>
  404970:	f8c8 4010 	str.w	r4, [r8, #16]
  404974:	e005      	b.n	404982 <quorem+0x112>
  404976:	6812      	ldr	r2, [r2, #0]
  404978:	3b04      	subs	r3, #4
  40497a:	2a00      	cmp	r2, #0
  40497c:	d1f8      	bne.n	404970 <quorem+0x100>
  40497e:	3c01      	subs	r4, #1
  404980:	e7f3      	b.n	40496a <quorem+0xfa>
  404982:	4628      	mov	r0, r5
  404984:	e000      	b.n	404988 <quorem+0x118>
  404986:	2000      	movs	r0, #0
  404988:	b003      	add	sp, #12
  40498a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00404990 <_dtoa_r>:
  404990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404994:	6a45      	ldr	r5, [r0, #36]	; 0x24
  404996:	b095      	sub	sp, #84	; 0x54
  404998:	4682      	mov	sl, r0
  40499a:	9c21      	ldr	r4, [sp, #132]	; 0x84
  40499c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4049a0:	b945      	cbnz	r5, 4049b4 <_dtoa_r+0x24>
  4049a2:	2010      	movs	r0, #16
  4049a4:	f001 fa9e 	bl	405ee4 <malloc>
  4049a8:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  4049ac:	6045      	str	r5, [r0, #4]
  4049ae:	6085      	str	r5, [r0, #8]
  4049b0:	6005      	str	r5, [r0, #0]
  4049b2:	60c5      	str	r5, [r0, #12]
  4049b4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4049b8:	6819      	ldr	r1, [r3, #0]
  4049ba:	b159      	cbz	r1, 4049d4 <_dtoa_r+0x44>
  4049bc:	685a      	ldr	r2, [r3, #4]
  4049be:	604a      	str	r2, [r1, #4]
  4049c0:	2301      	movs	r3, #1
  4049c2:	4093      	lsls	r3, r2
  4049c4:	608b      	str	r3, [r1, #8]
  4049c6:	4650      	mov	r0, sl
  4049c8:	f001 fb2f 	bl	40602a <_Bfree>
  4049cc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4049d0:	2200      	movs	r2, #0
  4049d2:	601a      	str	r2, [r3, #0]
  4049d4:	9b03      	ldr	r3, [sp, #12]
  4049d6:	4aa0      	ldr	r2, [pc, #640]	; (404c58 <_dtoa_r+0x2c8>)
  4049d8:	2b00      	cmp	r3, #0
  4049da:	bfbf      	itttt	lt
  4049dc:	2301      	movlt	r3, #1
  4049de:	6023      	strlt	r3, [r4, #0]
  4049e0:	9b03      	ldrlt	r3, [sp, #12]
  4049e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4049e6:	bfb8      	it	lt
  4049e8:	9303      	strlt	r3, [sp, #12]
  4049ea:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4049ee:	bfa4      	itt	ge
  4049f0:	2300      	movge	r3, #0
  4049f2:	6023      	strge	r3, [r4, #0]
  4049f4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  4049f8:	0d1b      	lsrs	r3, r3, #20
  4049fa:	051b      	lsls	r3, r3, #20
  4049fc:	4293      	cmp	r3, r2
  4049fe:	d11d      	bne.n	404a3c <_dtoa_r+0xac>
  404a00:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404a02:	f242 730f 	movw	r3, #9999	; 0x270f
  404a06:	6013      	str	r3, [r2, #0]
  404a08:	9b02      	ldr	r3, [sp, #8]
  404a0a:	b943      	cbnz	r3, 404a1e <_dtoa_r+0x8e>
  404a0c:	4a93      	ldr	r2, [pc, #588]	; (404c5c <_dtoa_r+0x2cc>)
  404a0e:	4b94      	ldr	r3, [pc, #592]	; (404c60 <_dtoa_r+0x2d0>)
  404a10:	f3c8 0013 	ubfx	r0, r8, #0, #20
  404a14:	2800      	cmp	r0, #0
  404a16:	bf14      	ite	ne
  404a18:	4618      	movne	r0, r3
  404a1a:	4610      	moveq	r0, r2
  404a1c:	e000      	b.n	404a20 <_dtoa_r+0x90>
  404a1e:	4890      	ldr	r0, [pc, #576]	; (404c60 <_dtoa_r+0x2d0>)
  404a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404a22:	2b00      	cmp	r3, #0
  404a24:	f000 854a 	beq.w	4054bc <_dtoa_r+0xb2c>
  404a28:	78c3      	ldrb	r3, [r0, #3]
  404a2a:	b113      	cbz	r3, 404a32 <_dtoa_r+0xa2>
  404a2c:	f100 0308 	add.w	r3, r0, #8
  404a30:	e000      	b.n	404a34 <_dtoa_r+0xa4>
  404a32:	1cc3      	adds	r3, r0, #3
  404a34:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404a36:	6013      	str	r3, [r2, #0]
  404a38:	f000 bd40 	b.w	4054bc <_dtoa_r+0xb2c>
  404a3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  404a40:	2200      	movs	r2, #0
  404a42:	2300      	movs	r3, #0
  404a44:	4620      	mov	r0, r4
  404a46:	4629      	mov	r1, r5
  404a48:	f002 fda2 	bl	407590 <__aeabi_dcmpeq>
  404a4c:	4607      	mov	r7, r0
  404a4e:	b158      	cbz	r0, 404a68 <_dtoa_r+0xd8>
  404a50:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404a52:	2301      	movs	r3, #1
  404a54:	6013      	str	r3, [r2, #0]
  404a56:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404a58:	2b00      	cmp	r3, #0
  404a5a:	f000 8522 	beq.w	4054a2 <_dtoa_r+0xb12>
  404a5e:	4881      	ldr	r0, [pc, #516]	; (404c64 <_dtoa_r+0x2d4>)
  404a60:	6018      	str	r0, [r3, #0]
  404a62:	3801      	subs	r0, #1
  404a64:	f000 bd2a 	b.w	4054bc <_dtoa_r+0xb2c>
  404a68:	ab12      	add	r3, sp, #72	; 0x48
  404a6a:	9301      	str	r3, [sp, #4]
  404a6c:	ab13      	add	r3, sp, #76	; 0x4c
  404a6e:	9300      	str	r3, [sp, #0]
  404a70:	4622      	mov	r2, r4
  404a72:	462b      	mov	r3, r5
  404a74:	4650      	mov	r0, sl
  404a76:	f001 fdda 	bl	40662e <__d2b>
  404a7a:	f3c8 560a 	ubfx	r6, r8, #20, #11
  404a7e:	9004      	str	r0, [sp, #16]
  404a80:	b156      	cbz	r6, 404a98 <_dtoa_r+0x108>
  404a82:	f3c5 0313 	ubfx	r3, r5, #0, #20
  404a86:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  404a8a:	4620      	mov	r0, r4
  404a8c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404a90:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  404a94:	9711      	str	r7, [sp, #68]	; 0x44
  404a96:	e01d      	b.n	404ad4 <_dtoa_r+0x144>
  404a98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a9a:	9e12      	ldr	r6, [sp, #72]	; 0x48
  404a9c:	441e      	add	r6, r3
  404a9e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404aa2:	2b20      	cmp	r3, #32
  404aa4:	dd0a      	ble.n	404abc <_dtoa_r+0x12c>
  404aa6:	9a02      	ldr	r2, [sp, #8]
  404aa8:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404aac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404ab0:	fa22 f000 	lsr.w	r0, r2, r0
  404ab4:	fa08 f303 	lsl.w	r3, r8, r3
  404ab8:	4318      	orrs	r0, r3
  404aba:	e004      	b.n	404ac6 <_dtoa_r+0x136>
  404abc:	f1c3 0020 	rsb	r0, r3, #32
  404ac0:	9b02      	ldr	r3, [sp, #8]
  404ac2:	fa03 f000 	lsl.w	r0, r3, r0
  404ac6:	f002 fa85 	bl	406fd4 <__aeabi_ui2d>
  404aca:	2301      	movs	r3, #1
  404acc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404ad0:	3e01      	subs	r6, #1
  404ad2:	9311      	str	r3, [sp, #68]	; 0x44
  404ad4:	2200      	movs	r2, #0
  404ad6:	4b64      	ldr	r3, [pc, #400]	; (404c68 <_dtoa_r+0x2d8>)
  404ad8:	f002 f93e 	bl	406d58 <__aeabi_dsub>
  404adc:	a358      	add	r3, pc, #352	; (adr r3, 404c40 <_dtoa_r+0x2b0>)
  404ade:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ae2:	f002 faed 	bl	4070c0 <__aeabi_dmul>
  404ae6:	a358      	add	r3, pc, #352	; (adr r3, 404c48 <_dtoa_r+0x2b8>)
  404ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
  404aec:	f002 f936 	bl	406d5c <__adddf3>
  404af0:	4604      	mov	r4, r0
  404af2:	4630      	mov	r0, r6
  404af4:	460d      	mov	r5, r1
  404af6:	f002 fa7d 	bl	406ff4 <__aeabi_i2d>
  404afa:	a355      	add	r3, pc, #340	; (adr r3, 404c50 <_dtoa_r+0x2c0>)
  404afc:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b00:	f002 fade 	bl	4070c0 <__aeabi_dmul>
  404b04:	4602      	mov	r2, r0
  404b06:	460b      	mov	r3, r1
  404b08:	4620      	mov	r0, r4
  404b0a:	4629      	mov	r1, r5
  404b0c:	f002 f926 	bl	406d5c <__adddf3>
  404b10:	4604      	mov	r4, r0
  404b12:	460d      	mov	r5, r1
  404b14:	f002 fd84 	bl	407620 <__aeabi_d2iz>
  404b18:	2200      	movs	r2, #0
  404b1a:	4683      	mov	fp, r0
  404b1c:	2300      	movs	r3, #0
  404b1e:	4620      	mov	r0, r4
  404b20:	4629      	mov	r1, r5
  404b22:	f002 fd3f 	bl	4075a4 <__aeabi_dcmplt>
  404b26:	b158      	cbz	r0, 404b40 <_dtoa_r+0x1b0>
  404b28:	4658      	mov	r0, fp
  404b2a:	f002 fa63 	bl	406ff4 <__aeabi_i2d>
  404b2e:	4602      	mov	r2, r0
  404b30:	460b      	mov	r3, r1
  404b32:	4620      	mov	r0, r4
  404b34:	4629      	mov	r1, r5
  404b36:	f002 fd2b 	bl	407590 <__aeabi_dcmpeq>
  404b3a:	b908      	cbnz	r0, 404b40 <_dtoa_r+0x1b0>
  404b3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  404b40:	f1bb 0f16 	cmp.w	fp, #22
  404b44:	d80d      	bhi.n	404b62 <_dtoa_r+0x1d2>
  404b46:	4949      	ldr	r1, [pc, #292]	; (404c6c <_dtoa_r+0x2dc>)
  404b48:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  404b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404b50:	e9d1 0100 	ldrd	r0, r1, [r1]
  404b54:	f002 fd44 	bl	4075e0 <__aeabi_dcmpgt>
  404b58:	b130      	cbz	r0, 404b68 <_dtoa_r+0x1d8>
  404b5a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  404b5e:	2300      	movs	r3, #0
  404b60:	e000      	b.n	404b64 <_dtoa_r+0x1d4>
  404b62:	2301      	movs	r3, #1
  404b64:	9310      	str	r3, [sp, #64]	; 0x40
  404b66:	e000      	b.n	404b6a <_dtoa_r+0x1da>
  404b68:	9010      	str	r0, [sp, #64]	; 0x40
  404b6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404b6c:	1b9e      	subs	r6, r3, r6
  404b6e:	1e73      	subs	r3, r6, #1
  404b70:	9307      	str	r3, [sp, #28]
  404b72:	bf43      	ittte	mi
  404b74:	f1c3 0800 	rsbmi	r8, r3, #0
  404b78:	2300      	movmi	r3, #0
  404b7a:	9307      	strmi	r3, [sp, #28]
  404b7c:	f04f 0800 	movpl.w	r8, #0
  404b80:	f1bb 0f00 	cmp.w	fp, #0
  404b84:	db06      	blt.n	404b94 <_dtoa_r+0x204>
  404b86:	9b07      	ldr	r3, [sp, #28]
  404b88:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  404b8c:	445b      	add	r3, fp
  404b8e:	9307      	str	r3, [sp, #28]
  404b90:	2700      	movs	r7, #0
  404b92:	e005      	b.n	404ba0 <_dtoa_r+0x210>
  404b94:	2300      	movs	r3, #0
  404b96:	ebcb 0808 	rsb	r8, fp, r8
  404b9a:	f1cb 0700 	rsb	r7, fp, #0
  404b9e:	930b      	str	r3, [sp, #44]	; 0x2c
  404ba0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404ba2:	2b09      	cmp	r3, #9
  404ba4:	d827      	bhi.n	404bf6 <_dtoa_r+0x266>
  404ba6:	2b05      	cmp	r3, #5
  404ba8:	bfc4      	itt	gt
  404baa:	3b04      	subgt	r3, #4
  404bac:	931e      	strgt	r3, [sp, #120]	; 0x78
  404bae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404bb0:	f1a3 0302 	sub.w	r3, r3, #2
  404bb4:	bfcc      	ite	gt
  404bb6:	2500      	movgt	r5, #0
  404bb8:	2501      	movle	r5, #1
  404bba:	2b03      	cmp	r3, #3
  404bbc:	d820      	bhi.n	404c00 <_dtoa_r+0x270>
  404bbe:	e8df f003 	tbb	[pc, r3]
  404bc2:	0e06      	.short	0x0e06
  404bc4:	0402      	.short	0x0402
  404bc6:	2301      	movs	r3, #1
  404bc8:	e002      	b.n	404bd0 <_dtoa_r+0x240>
  404bca:	2301      	movs	r3, #1
  404bcc:	e008      	b.n	404be0 <_dtoa_r+0x250>
  404bce:	2300      	movs	r3, #0
  404bd0:	930a      	str	r3, [sp, #40]	; 0x28
  404bd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404bd4:	2b00      	cmp	r3, #0
  404bd6:	dd1d      	ble.n	404c14 <_dtoa_r+0x284>
  404bd8:	4699      	mov	r9, r3
  404bda:	9305      	str	r3, [sp, #20]
  404bdc:	e021      	b.n	404c22 <_dtoa_r+0x292>
  404bde:	2300      	movs	r3, #0
  404be0:	930a      	str	r3, [sp, #40]	; 0x28
  404be2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404be4:	eb0b 0903 	add.w	r9, fp, r3
  404be8:	f109 0301 	add.w	r3, r9, #1
  404bec:	2b01      	cmp	r3, #1
  404bee:	9305      	str	r3, [sp, #20]
  404bf0:	bfb8      	it	lt
  404bf2:	2301      	movlt	r3, #1
  404bf4:	e015      	b.n	404c22 <_dtoa_r+0x292>
  404bf6:	2501      	movs	r5, #1
  404bf8:	2300      	movs	r3, #0
  404bfa:	931e      	str	r3, [sp, #120]	; 0x78
  404bfc:	950a      	str	r5, [sp, #40]	; 0x28
  404bfe:	e001      	b.n	404c04 <_dtoa_r+0x274>
  404c00:	2301      	movs	r3, #1
  404c02:	930a      	str	r3, [sp, #40]	; 0x28
  404c04:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  404c08:	2200      	movs	r2, #0
  404c0a:	f8cd 9014 	str.w	r9, [sp, #20]
  404c0e:	2312      	movs	r3, #18
  404c10:	921f      	str	r2, [sp, #124]	; 0x7c
  404c12:	e006      	b.n	404c22 <_dtoa_r+0x292>
  404c14:	f04f 0901 	mov.w	r9, #1
  404c18:	f8cd 9014 	str.w	r9, [sp, #20]
  404c1c:	464b      	mov	r3, r9
  404c1e:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  404c22:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  404c26:	2200      	movs	r2, #0
  404c28:	6062      	str	r2, [r4, #4]
  404c2a:	2104      	movs	r1, #4
  404c2c:	f101 0214 	add.w	r2, r1, #20
  404c30:	429a      	cmp	r2, r3
  404c32:	d81d      	bhi.n	404c70 <_dtoa_r+0x2e0>
  404c34:	6862      	ldr	r2, [r4, #4]
  404c36:	3201      	adds	r2, #1
  404c38:	6062      	str	r2, [r4, #4]
  404c3a:	0049      	lsls	r1, r1, #1
  404c3c:	e7f6      	b.n	404c2c <_dtoa_r+0x29c>
  404c3e:	bf00      	nop
  404c40:	636f4361 	.word	0x636f4361
  404c44:	3fd287a7 	.word	0x3fd287a7
  404c48:	8b60c8b3 	.word	0x8b60c8b3
  404c4c:	3fc68a28 	.word	0x3fc68a28
  404c50:	509f79fb 	.word	0x509f79fb
  404c54:	3fd34413 	.word	0x3fd34413
  404c58:	7ff00000 	.word	0x7ff00000
  404c5c:	00408270 	.word	0x00408270
  404c60:	00408279 	.word	0x00408279
  404c64:	004081fd 	.word	0x004081fd
  404c68:	3ff80000 	.word	0x3ff80000
  404c6c:	004082f0 	.word	0x004082f0
  404c70:	6861      	ldr	r1, [r4, #4]
  404c72:	4650      	mov	r0, sl
  404c74:	f001 f9a4 	bl	405fc0 <_Balloc>
  404c78:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  404c7c:	6020      	str	r0, [r4, #0]
  404c7e:	681b      	ldr	r3, [r3, #0]
  404c80:	9306      	str	r3, [sp, #24]
  404c82:	9b05      	ldr	r3, [sp, #20]
  404c84:	2b0e      	cmp	r3, #14
  404c86:	f200 815d 	bhi.w	404f44 <_dtoa_r+0x5b4>
  404c8a:	2d00      	cmp	r5, #0
  404c8c:	f000 815a 	beq.w	404f44 <_dtoa_r+0x5b4>
  404c90:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  404c94:	f1bb 0f00 	cmp.w	fp, #0
  404c98:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  404c9c:	dd31      	ble.n	404d02 <_dtoa_r+0x372>
  404c9e:	4aa0      	ldr	r2, [pc, #640]	; (404f20 <_dtoa_r+0x590>)
  404ca0:	f00b 030f 	and.w	r3, fp, #15
  404ca4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404ca8:	e9d3 3400 	ldrd	r3, r4, [r3]
  404cac:	ea4f 152b 	mov.w	r5, fp, asr #4
  404cb0:	06e8      	lsls	r0, r5, #27
  404cb2:	e9cd 3408 	strd	r3, r4, [sp, #32]
  404cb6:	d50c      	bpl.n	404cd2 <_dtoa_r+0x342>
  404cb8:	4b9a      	ldr	r3, [pc, #616]	; (404f24 <_dtoa_r+0x594>)
  404cba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404cbe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404cc2:	f002 fb27 	bl	407314 <__aeabi_ddiv>
  404cc6:	f005 050f 	and.w	r5, r5, #15
  404cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404cce:	2403      	movs	r4, #3
  404cd0:	e000      	b.n	404cd4 <_dtoa_r+0x344>
  404cd2:	2402      	movs	r4, #2
  404cd4:	4e93      	ldr	r6, [pc, #588]	; (404f24 <_dtoa_r+0x594>)
  404cd6:	b16d      	cbz	r5, 404cf4 <_dtoa_r+0x364>
  404cd8:	07e9      	lsls	r1, r5, #31
  404cda:	d508      	bpl.n	404cee <_dtoa_r+0x35e>
  404cdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404ce0:	e9d6 2300 	ldrd	r2, r3, [r6]
  404ce4:	f002 f9ec 	bl	4070c0 <__aeabi_dmul>
  404ce8:	e9cd 0108 	strd	r0, r1, [sp, #32]
  404cec:	3401      	adds	r4, #1
  404cee:	106d      	asrs	r5, r5, #1
  404cf0:	3608      	adds	r6, #8
  404cf2:	e7f0      	b.n	404cd6 <_dtoa_r+0x346>
  404cf4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  404cf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404cfc:	f002 fb0a 	bl	407314 <__aeabi_ddiv>
  404d00:	e020      	b.n	404d44 <_dtoa_r+0x3b4>
  404d02:	f1cb 0500 	rsb	r5, fp, #0
  404d06:	b305      	cbz	r5, 404d4a <_dtoa_r+0x3ba>
  404d08:	4b85      	ldr	r3, [pc, #532]	; (404f20 <_dtoa_r+0x590>)
  404d0a:	4e86      	ldr	r6, [pc, #536]	; (404f24 <_dtoa_r+0x594>)
  404d0c:	f005 020f 	and.w	r2, r5, #15
  404d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404d14:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404d1c:	f002 f9d0 	bl	4070c0 <__aeabi_dmul>
  404d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d24:	112d      	asrs	r5, r5, #4
  404d26:	2300      	movs	r3, #0
  404d28:	2402      	movs	r4, #2
  404d2a:	b155      	cbz	r5, 404d42 <_dtoa_r+0x3b2>
  404d2c:	07ea      	lsls	r2, r5, #31
  404d2e:	d505      	bpl.n	404d3c <_dtoa_r+0x3ac>
  404d30:	e9d6 2300 	ldrd	r2, r3, [r6]
  404d34:	f002 f9c4 	bl	4070c0 <__aeabi_dmul>
  404d38:	3401      	adds	r4, #1
  404d3a:	2301      	movs	r3, #1
  404d3c:	106d      	asrs	r5, r5, #1
  404d3e:	3608      	adds	r6, #8
  404d40:	e7f3      	b.n	404d2a <_dtoa_r+0x39a>
  404d42:	b11b      	cbz	r3, 404d4c <_dtoa_r+0x3bc>
  404d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d48:	e000      	b.n	404d4c <_dtoa_r+0x3bc>
  404d4a:	2402      	movs	r4, #2
  404d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404d4e:	b1e3      	cbz	r3, 404d8a <_dtoa_r+0x3fa>
  404d50:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  404d54:	2200      	movs	r2, #0
  404d56:	4b74      	ldr	r3, [pc, #464]	; (404f28 <_dtoa_r+0x598>)
  404d58:	4628      	mov	r0, r5
  404d5a:	4631      	mov	r1, r6
  404d5c:	f002 fc22 	bl	4075a4 <__aeabi_dcmplt>
  404d60:	b198      	cbz	r0, 404d8a <_dtoa_r+0x3fa>
  404d62:	9b05      	ldr	r3, [sp, #20]
  404d64:	b18b      	cbz	r3, 404d8a <_dtoa_r+0x3fa>
  404d66:	f1b9 0f00 	cmp.w	r9, #0
  404d6a:	f340 80e7 	ble.w	404f3c <_dtoa_r+0x5ac>
  404d6e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  404d72:	9308      	str	r3, [sp, #32]
  404d74:	4631      	mov	r1, r6
  404d76:	2200      	movs	r2, #0
  404d78:	4b6c      	ldr	r3, [pc, #432]	; (404f2c <_dtoa_r+0x59c>)
  404d7a:	4628      	mov	r0, r5
  404d7c:	f002 f9a0 	bl	4070c0 <__aeabi_dmul>
  404d80:	3401      	adds	r4, #1
  404d82:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d86:	464e      	mov	r6, r9
  404d88:	e002      	b.n	404d90 <_dtoa_r+0x400>
  404d8a:	9e05      	ldr	r6, [sp, #20]
  404d8c:	f8cd b020 	str.w	fp, [sp, #32]
  404d90:	4620      	mov	r0, r4
  404d92:	f002 f92f 	bl	406ff4 <__aeabi_i2d>
  404d96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404d9a:	f002 f991 	bl	4070c0 <__aeabi_dmul>
  404d9e:	4b64      	ldr	r3, [pc, #400]	; (404f30 <_dtoa_r+0x5a0>)
  404da0:	2200      	movs	r2, #0
  404da2:	f001 ffdb 	bl	406d5c <__adddf3>
  404da6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  404daa:	4604      	mov	r4, r0
  404dac:	930c      	str	r3, [sp, #48]	; 0x30
  404dae:	461d      	mov	r5, r3
  404db0:	b9d6      	cbnz	r6, 404de8 <_dtoa_r+0x458>
  404db2:	2200      	movs	r2, #0
  404db4:	4b5f      	ldr	r3, [pc, #380]	; (404f34 <_dtoa_r+0x5a4>)
  404db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404dba:	f001 ffcd 	bl	406d58 <__aeabi_dsub>
  404dbe:	4622      	mov	r2, r4
  404dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404dc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404dc6:	f002 fc0b 	bl	4075e0 <__aeabi_dcmpgt>
  404dca:	2800      	cmp	r0, #0
  404dcc:	f040 8240 	bne.w	405250 <_dtoa_r+0x8c0>
  404dd0:	990c      	ldr	r1, [sp, #48]	; 0x30
  404dd2:	4622      	mov	r2, r4
  404dd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  404dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ddc:	f002 fbe2 	bl	4075a4 <__aeabi_dcmplt>
  404de0:	2800      	cmp	r0, #0
  404de2:	f040 822c 	bne.w	40523e <_dtoa_r+0x8ae>
  404de6:	e0a9      	b.n	404f3c <_dtoa_r+0x5ac>
  404de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404dea:	4b4d      	ldr	r3, [pc, #308]	; (404f20 <_dtoa_r+0x590>)
  404dec:	1e71      	subs	r1, r6, #1
  404dee:	2a00      	cmp	r2, #0
  404df0:	d049      	beq.n	404e86 <_dtoa_r+0x4f6>
  404df2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  404df6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404dfa:	2000      	movs	r0, #0
  404dfc:	494e      	ldr	r1, [pc, #312]	; (404f38 <_dtoa_r+0x5a8>)
  404dfe:	f002 fa89 	bl	407314 <__aeabi_ddiv>
  404e02:	4622      	mov	r2, r4
  404e04:	462b      	mov	r3, r5
  404e06:	f001 ffa7 	bl	406d58 <__aeabi_dsub>
  404e0a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404e0e:	9c06      	ldr	r4, [sp, #24]
  404e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e14:	f002 fc04 	bl	407620 <__aeabi_d2iz>
  404e18:	4605      	mov	r5, r0
  404e1a:	f002 f8eb 	bl	406ff4 <__aeabi_i2d>
  404e1e:	4602      	mov	r2, r0
  404e20:	460b      	mov	r3, r1
  404e22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e26:	f001 ff97 	bl	406d58 <__aeabi_dsub>
  404e2a:	3530      	adds	r5, #48	; 0x30
  404e2c:	f804 5b01 	strb.w	r5, [r4], #1
  404e30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404e38:	f002 fbb4 	bl	4075a4 <__aeabi_dcmplt>
  404e3c:	2800      	cmp	r0, #0
  404e3e:	f040 8320 	bne.w	405482 <_dtoa_r+0xaf2>
  404e42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404e46:	2000      	movs	r0, #0
  404e48:	4937      	ldr	r1, [pc, #220]	; (404f28 <_dtoa_r+0x598>)
  404e4a:	f001 ff85 	bl	406d58 <__aeabi_dsub>
  404e4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404e52:	f002 fba7 	bl	4075a4 <__aeabi_dcmplt>
  404e56:	2800      	cmp	r0, #0
  404e58:	f040 80d2 	bne.w	405000 <_dtoa_r+0x670>
  404e5c:	9b06      	ldr	r3, [sp, #24]
  404e5e:	1ae3      	subs	r3, r4, r3
  404e60:	42b3      	cmp	r3, r6
  404e62:	da6b      	bge.n	404f3c <_dtoa_r+0x5ac>
  404e64:	2200      	movs	r2, #0
  404e66:	4b31      	ldr	r3, [pc, #196]	; (404f2c <_dtoa_r+0x59c>)
  404e68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404e6c:	f002 f928 	bl	4070c0 <__aeabi_dmul>
  404e70:	2200      	movs	r2, #0
  404e72:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404e76:	4b2d      	ldr	r3, [pc, #180]	; (404f2c <_dtoa_r+0x59c>)
  404e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e7c:	f002 f920 	bl	4070c0 <__aeabi_dmul>
  404e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404e84:	e7c4      	b.n	404e10 <_dtoa_r+0x480>
  404e86:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404e8a:	4622      	mov	r2, r4
  404e8c:	462b      	mov	r3, r5
  404e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
  404e92:	f002 f915 	bl	4070c0 <__aeabi_dmul>
  404e96:	9b06      	ldr	r3, [sp, #24]
  404e98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404e9c:	199c      	adds	r4, r3, r6
  404e9e:	461d      	mov	r5, r3
  404ea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ea4:	f002 fbbc 	bl	407620 <__aeabi_d2iz>
  404ea8:	4606      	mov	r6, r0
  404eaa:	f002 f8a3 	bl	406ff4 <__aeabi_i2d>
  404eae:	3630      	adds	r6, #48	; 0x30
  404eb0:	4602      	mov	r2, r0
  404eb2:	460b      	mov	r3, r1
  404eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404eb8:	f001 ff4e 	bl	406d58 <__aeabi_dsub>
  404ebc:	f805 6b01 	strb.w	r6, [r5], #1
  404ec0:	42ac      	cmp	r4, r5
  404ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404ec6:	f04f 0200 	mov.w	r2, #0
  404eca:	d123      	bne.n	404f14 <_dtoa_r+0x584>
  404ecc:	4b1a      	ldr	r3, [pc, #104]	; (404f38 <_dtoa_r+0x5a8>)
  404ece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404ed2:	f001 ff43 	bl	406d5c <__adddf3>
  404ed6:	4602      	mov	r2, r0
  404ed8:	460b      	mov	r3, r1
  404eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ede:	f002 fb7f 	bl	4075e0 <__aeabi_dcmpgt>
  404ee2:	2800      	cmp	r0, #0
  404ee4:	f040 808c 	bne.w	405000 <_dtoa_r+0x670>
  404ee8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404eec:	2000      	movs	r0, #0
  404eee:	4912      	ldr	r1, [pc, #72]	; (404f38 <_dtoa_r+0x5a8>)
  404ef0:	f001 ff32 	bl	406d58 <__aeabi_dsub>
  404ef4:	4602      	mov	r2, r0
  404ef6:	460b      	mov	r3, r1
  404ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404efc:	f002 fb52 	bl	4075a4 <__aeabi_dcmplt>
  404f00:	b1e0      	cbz	r0, 404f3c <_dtoa_r+0x5ac>
  404f02:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  404f06:	2b30      	cmp	r3, #48	; 0x30
  404f08:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  404f0c:	f040 82b9 	bne.w	405482 <_dtoa_r+0xaf2>
  404f10:	4614      	mov	r4, r2
  404f12:	e7f6      	b.n	404f02 <_dtoa_r+0x572>
  404f14:	4b05      	ldr	r3, [pc, #20]	; (404f2c <_dtoa_r+0x59c>)
  404f16:	f002 f8d3 	bl	4070c0 <__aeabi_dmul>
  404f1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404f1e:	e7bf      	b.n	404ea0 <_dtoa_r+0x510>
  404f20:	004082f0 	.word	0x004082f0
  404f24:	004083b8 	.word	0x004083b8
  404f28:	3ff00000 	.word	0x3ff00000
  404f2c:	40240000 	.word	0x40240000
  404f30:	401c0000 	.word	0x401c0000
  404f34:	40140000 	.word	0x40140000
  404f38:	3fe00000 	.word	0x3fe00000
  404f3c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  404f40:	e9cd 3402 	strd	r3, r4, [sp, #8]
  404f44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404f46:	2b00      	cmp	r3, #0
  404f48:	db7d      	blt.n	405046 <_dtoa_r+0x6b6>
  404f4a:	f1bb 0f0e 	cmp.w	fp, #14
  404f4e:	dc7a      	bgt.n	405046 <_dtoa_r+0x6b6>
  404f50:	4bab      	ldr	r3, [pc, #684]	; (405200 <_dtoa_r+0x870>)
  404f52:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  404f56:	e9d3 6700 	ldrd	r6, r7, [r3]
  404f5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404f5c:	2b00      	cmp	r3, #0
  404f5e:	da14      	bge.n	404f8a <_dtoa_r+0x5fa>
  404f60:	9b05      	ldr	r3, [sp, #20]
  404f62:	2b00      	cmp	r3, #0
  404f64:	dc11      	bgt.n	404f8a <_dtoa_r+0x5fa>
  404f66:	f040 816c 	bne.w	405242 <_dtoa_r+0x8b2>
  404f6a:	2200      	movs	r2, #0
  404f6c:	4ba5      	ldr	r3, [pc, #660]	; (405204 <_dtoa_r+0x874>)
  404f6e:	4630      	mov	r0, r6
  404f70:	4639      	mov	r1, r7
  404f72:	f002 f8a5 	bl	4070c0 <__aeabi_dmul>
  404f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404f7a:	f002 fb27 	bl	4075cc <__aeabi_dcmpge>
  404f7e:	9d05      	ldr	r5, [sp, #20]
  404f80:	462e      	mov	r6, r5
  404f82:	2800      	cmp	r0, #0
  404f84:	f040 815f 	bne.w	405246 <_dtoa_r+0x8b6>
  404f88:	e165      	b.n	405256 <_dtoa_r+0x8c6>
  404f8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  404f8e:	9c06      	ldr	r4, [sp, #24]
  404f90:	4632      	mov	r2, r6
  404f92:	463b      	mov	r3, r7
  404f94:	4640      	mov	r0, r8
  404f96:	4649      	mov	r1, r9
  404f98:	f002 f9bc 	bl	407314 <__aeabi_ddiv>
  404f9c:	f002 fb40 	bl	407620 <__aeabi_d2iz>
  404fa0:	4605      	mov	r5, r0
  404fa2:	f002 f827 	bl	406ff4 <__aeabi_i2d>
  404fa6:	4632      	mov	r2, r6
  404fa8:	463b      	mov	r3, r7
  404faa:	f002 f889 	bl	4070c0 <__aeabi_dmul>
  404fae:	460b      	mov	r3, r1
  404fb0:	4602      	mov	r2, r0
  404fb2:	4649      	mov	r1, r9
  404fb4:	4640      	mov	r0, r8
  404fb6:	f001 fecf 	bl	406d58 <__aeabi_dsub>
  404fba:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  404fbe:	9b06      	ldr	r3, [sp, #24]
  404fc0:	f804 eb01 	strb.w	lr, [r4], #1
  404fc4:	ebc3 0e04 	rsb	lr, r3, r4
  404fc8:	9b05      	ldr	r3, [sp, #20]
  404fca:	4573      	cmp	r3, lr
  404fcc:	d12e      	bne.n	40502c <_dtoa_r+0x69c>
  404fce:	4602      	mov	r2, r0
  404fd0:	460b      	mov	r3, r1
  404fd2:	f001 fec3 	bl	406d5c <__adddf3>
  404fd6:	4680      	mov	r8, r0
  404fd8:	4689      	mov	r9, r1
  404fda:	4602      	mov	r2, r0
  404fdc:	460b      	mov	r3, r1
  404fde:	4630      	mov	r0, r6
  404fe0:	4639      	mov	r1, r7
  404fe2:	f002 fadf 	bl	4075a4 <__aeabi_dcmplt>
  404fe6:	b978      	cbnz	r0, 405008 <_dtoa_r+0x678>
  404fe8:	4642      	mov	r2, r8
  404fea:	464b      	mov	r3, r9
  404fec:	4630      	mov	r0, r6
  404fee:	4639      	mov	r1, r7
  404ff0:	f002 face 	bl	407590 <__aeabi_dcmpeq>
  404ff4:	2800      	cmp	r0, #0
  404ff6:	f000 8246 	beq.w	405486 <_dtoa_r+0xaf6>
  404ffa:	07eb      	lsls	r3, r5, #31
  404ffc:	d404      	bmi.n	405008 <_dtoa_r+0x678>
  404ffe:	e242      	b.n	405486 <_dtoa_r+0xaf6>
  405000:	f8dd b020 	ldr.w	fp, [sp, #32]
  405004:	e000      	b.n	405008 <_dtoa_r+0x678>
  405006:	461c      	mov	r4, r3
  405008:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  40500c:	2a39      	cmp	r2, #57	; 0x39
  40500e:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  405012:	d107      	bne.n	405024 <_dtoa_r+0x694>
  405014:	9a06      	ldr	r2, [sp, #24]
  405016:	429a      	cmp	r2, r3
  405018:	d1f5      	bne.n	405006 <_dtoa_r+0x676>
  40501a:	9906      	ldr	r1, [sp, #24]
  40501c:	2230      	movs	r2, #48	; 0x30
  40501e:	f10b 0b01 	add.w	fp, fp, #1
  405022:	700a      	strb	r2, [r1, #0]
  405024:	781a      	ldrb	r2, [r3, #0]
  405026:	3201      	adds	r2, #1
  405028:	701a      	strb	r2, [r3, #0]
  40502a:	e22c      	b.n	405486 <_dtoa_r+0xaf6>
  40502c:	2200      	movs	r2, #0
  40502e:	4b76      	ldr	r3, [pc, #472]	; (405208 <_dtoa_r+0x878>)
  405030:	f002 f846 	bl	4070c0 <__aeabi_dmul>
  405034:	2200      	movs	r2, #0
  405036:	2300      	movs	r3, #0
  405038:	4680      	mov	r8, r0
  40503a:	4689      	mov	r9, r1
  40503c:	f002 faa8 	bl	407590 <__aeabi_dcmpeq>
  405040:	2800      	cmp	r0, #0
  405042:	d0a5      	beq.n	404f90 <_dtoa_r+0x600>
  405044:	e21f      	b.n	405486 <_dtoa_r+0xaf6>
  405046:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405048:	2a00      	cmp	r2, #0
  40504a:	d02b      	beq.n	4050a4 <_dtoa_r+0x714>
  40504c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40504e:	2a01      	cmp	r2, #1
  405050:	dc0a      	bgt.n	405068 <_dtoa_r+0x6d8>
  405052:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405054:	b112      	cbz	r2, 40505c <_dtoa_r+0x6cc>
  405056:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40505a:	e002      	b.n	405062 <_dtoa_r+0x6d2>
  40505c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40505e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405062:	463d      	mov	r5, r7
  405064:	4644      	mov	r4, r8
  405066:	e013      	b.n	405090 <_dtoa_r+0x700>
  405068:	9b05      	ldr	r3, [sp, #20]
  40506a:	1e5d      	subs	r5, r3, #1
  40506c:	42af      	cmp	r7, r5
  40506e:	bfbf      	itttt	lt
  405070:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  405072:	1bea      	sublt	r2, r5, r7
  405074:	189b      	addlt	r3, r3, r2
  405076:	930b      	strlt	r3, [sp, #44]	; 0x2c
  405078:	9b05      	ldr	r3, [sp, #20]
  40507a:	bfb6      	itet	lt
  40507c:	462f      	movlt	r7, r5
  40507e:	1b7d      	subge	r5, r7, r5
  405080:	2500      	movlt	r5, #0
  405082:	2b00      	cmp	r3, #0
  405084:	bfab      	itete	ge
  405086:	9b05      	ldrge	r3, [sp, #20]
  405088:	ebc3 0408 	rsblt	r4, r3, r8
  40508c:	4644      	movge	r4, r8
  40508e:	2300      	movlt	r3, #0
  405090:	9a07      	ldr	r2, [sp, #28]
  405092:	2101      	movs	r1, #1
  405094:	441a      	add	r2, r3
  405096:	4650      	mov	r0, sl
  405098:	4498      	add	r8, r3
  40509a:	9207      	str	r2, [sp, #28]
  40509c:	f001 f8a2 	bl	4061e4 <__i2b>
  4050a0:	4606      	mov	r6, r0
  4050a2:	e002      	b.n	4050aa <_dtoa_r+0x71a>
  4050a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4050a6:	463d      	mov	r5, r7
  4050a8:	4644      	mov	r4, r8
  4050aa:	b15c      	cbz	r4, 4050c4 <_dtoa_r+0x734>
  4050ac:	9b07      	ldr	r3, [sp, #28]
  4050ae:	2b00      	cmp	r3, #0
  4050b0:	dd08      	ble.n	4050c4 <_dtoa_r+0x734>
  4050b2:	42a3      	cmp	r3, r4
  4050b4:	9a07      	ldr	r2, [sp, #28]
  4050b6:	bfa8      	it	ge
  4050b8:	4623      	movge	r3, r4
  4050ba:	ebc3 0808 	rsb	r8, r3, r8
  4050be:	1ae4      	subs	r4, r4, r3
  4050c0:	1ad3      	subs	r3, r2, r3
  4050c2:	9307      	str	r3, [sp, #28]
  4050c4:	2f00      	cmp	r7, #0
  4050c6:	dd1d      	ble.n	405104 <_dtoa_r+0x774>
  4050c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050ca:	b1ab      	cbz	r3, 4050f8 <_dtoa_r+0x768>
  4050cc:	b18d      	cbz	r5, 4050f2 <_dtoa_r+0x762>
  4050ce:	4631      	mov	r1, r6
  4050d0:	462a      	mov	r2, r5
  4050d2:	4650      	mov	r0, sl
  4050d4:	f001 f920 	bl	406318 <__pow5mult>
  4050d8:	9a04      	ldr	r2, [sp, #16]
  4050da:	4601      	mov	r1, r0
  4050dc:	4606      	mov	r6, r0
  4050de:	4650      	mov	r0, sl
  4050e0:	f001 f889 	bl	4061f6 <__multiply>
  4050e4:	9904      	ldr	r1, [sp, #16]
  4050e6:	9008      	str	r0, [sp, #32]
  4050e8:	4650      	mov	r0, sl
  4050ea:	f000 ff9e 	bl	40602a <_Bfree>
  4050ee:	9b08      	ldr	r3, [sp, #32]
  4050f0:	9304      	str	r3, [sp, #16]
  4050f2:	1b7a      	subs	r2, r7, r5
  4050f4:	d006      	beq.n	405104 <_dtoa_r+0x774>
  4050f6:	e000      	b.n	4050fa <_dtoa_r+0x76a>
  4050f8:	463a      	mov	r2, r7
  4050fa:	9904      	ldr	r1, [sp, #16]
  4050fc:	4650      	mov	r0, sl
  4050fe:	f001 f90b 	bl	406318 <__pow5mult>
  405102:	9004      	str	r0, [sp, #16]
  405104:	2101      	movs	r1, #1
  405106:	4650      	mov	r0, sl
  405108:	f001 f86c 	bl	4061e4 <__i2b>
  40510c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40510e:	4605      	mov	r5, r0
  405110:	b35b      	cbz	r3, 40516a <_dtoa_r+0x7da>
  405112:	461a      	mov	r2, r3
  405114:	4601      	mov	r1, r0
  405116:	4650      	mov	r0, sl
  405118:	f001 f8fe 	bl	406318 <__pow5mult>
  40511c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40511e:	2b01      	cmp	r3, #1
  405120:	4605      	mov	r5, r0
  405122:	dc18      	bgt.n	405156 <_dtoa_r+0x7c6>
  405124:	9b02      	ldr	r3, [sp, #8]
  405126:	b983      	cbnz	r3, 40514a <_dtoa_r+0x7ba>
  405128:	9b03      	ldr	r3, [sp, #12]
  40512a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40512e:	b973      	cbnz	r3, 40514e <_dtoa_r+0x7be>
  405130:	9b03      	ldr	r3, [sp, #12]
  405132:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  405136:	0d3f      	lsrs	r7, r7, #20
  405138:	053f      	lsls	r7, r7, #20
  40513a:	b14f      	cbz	r7, 405150 <_dtoa_r+0x7c0>
  40513c:	9b07      	ldr	r3, [sp, #28]
  40513e:	3301      	adds	r3, #1
  405140:	f108 0801 	add.w	r8, r8, #1
  405144:	9307      	str	r3, [sp, #28]
  405146:	2701      	movs	r7, #1
  405148:	e002      	b.n	405150 <_dtoa_r+0x7c0>
  40514a:	2700      	movs	r7, #0
  40514c:	e000      	b.n	405150 <_dtoa_r+0x7c0>
  40514e:	9f02      	ldr	r7, [sp, #8]
  405150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405152:	b173      	cbz	r3, 405172 <_dtoa_r+0x7e2>
  405154:	e000      	b.n	405158 <_dtoa_r+0x7c8>
  405156:	2700      	movs	r7, #0
  405158:	692b      	ldr	r3, [r5, #16]
  40515a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  40515e:	6918      	ldr	r0, [r3, #16]
  405160:	f000 fff3 	bl	40614a <__hi0bits>
  405164:	f1c0 0020 	rsb	r0, r0, #32
  405168:	e004      	b.n	405174 <_dtoa_r+0x7e4>
  40516a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40516c:	2b01      	cmp	r3, #1
  40516e:	ddd9      	ble.n	405124 <_dtoa_r+0x794>
  405170:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  405172:	2001      	movs	r0, #1
  405174:	9b07      	ldr	r3, [sp, #28]
  405176:	4418      	add	r0, r3
  405178:	f010 001f 	ands.w	r0, r0, #31
  40517c:	d008      	beq.n	405190 <_dtoa_r+0x800>
  40517e:	f1c0 0320 	rsb	r3, r0, #32
  405182:	2b04      	cmp	r3, #4
  405184:	dd02      	ble.n	40518c <_dtoa_r+0x7fc>
  405186:	f1c0 001c 	rsb	r0, r0, #28
  40518a:	e002      	b.n	405192 <_dtoa_r+0x802>
  40518c:	d006      	beq.n	40519c <_dtoa_r+0x80c>
  40518e:	4618      	mov	r0, r3
  405190:	301c      	adds	r0, #28
  405192:	9b07      	ldr	r3, [sp, #28]
  405194:	4403      	add	r3, r0
  405196:	4480      	add	r8, r0
  405198:	4404      	add	r4, r0
  40519a:	9307      	str	r3, [sp, #28]
  40519c:	f1b8 0f00 	cmp.w	r8, #0
  4051a0:	dd05      	ble.n	4051ae <_dtoa_r+0x81e>
  4051a2:	4642      	mov	r2, r8
  4051a4:	9904      	ldr	r1, [sp, #16]
  4051a6:	4650      	mov	r0, sl
  4051a8:	f001 f904 	bl	4063b4 <__lshift>
  4051ac:	9004      	str	r0, [sp, #16]
  4051ae:	9b07      	ldr	r3, [sp, #28]
  4051b0:	2b00      	cmp	r3, #0
  4051b2:	dd05      	ble.n	4051c0 <_dtoa_r+0x830>
  4051b4:	4629      	mov	r1, r5
  4051b6:	461a      	mov	r2, r3
  4051b8:	4650      	mov	r0, sl
  4051ba:	f001 f8fb 	bl	4063b4 <__lshift>
  4051be:	4605      	mov	r5, r0
  4051c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4051c2:	b31b      	cbz	r3, 40520c <_dtoa_r+0x87c>
  4051c4:	4629      	mov	r1, r5
  4051c6:	9804      	ldr	r0, [sp, #16]
  4051c8:	f001 f945 	bl	406456 <__mcmp>
  4051cc:	2800      	cmp	r0, #0
  4051ce:	da1d      	bge.n	40520c <_dtoa_r+0x87c>
  4051d0:	2300      	movs	r3, #0
  4051d2:	220a      	movs	r2, #10
  4051d4:	9904      	ldr	r1, [sp, #16]
  4051d6:	4650      	mov	r0, sl
  4051d8:	f000 ff3e 	bl	406058 <__multadd>
  4051dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4051de:	9004      	str	r0, [sp, #16]
  4051e0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  4051e4:	2b00      	cmp	r3, #0
  4051e6:	f000 8160 	beq.w	4054aa <_dtoa_r+0xb1a>
  4051ea:	4631      	mov	r1, r6
  4051ec:	2300      	movs	r3, #0
  4051ee:	220a      	movs	r2, #10
  4051f0:	4650      	mov	r0, sl
  4051f2:	f000 ff31 	bl	406058 <__multadd>
  4051f6:	f1b9 0f00 	cmp.w	r9, #0
  4051fa:	4606      	mov	r6, r0
  4051fc:	dc3e      	bgt.n	40527c <_dtoa_r+0x8ec>
  4051fe:	e03a      	b.n	405276 <_dtoa_r+0x8e6>
  405200:	004082f0 	.word	0x004082f0
  405204:	40140000 	.word	0x40140000
  405208:	40240000 	.word	0x40240000
  40520c:	9b05      	ldr	r3, [sp, #20]
  40520e:	2b00      	cmp	r3, #0
  405210:	dc2b      	bgt.n	40526a <_dtoa_r+0x8da>
  405212:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405214:	2b02      	cmp	r3, #2
  405216:	dd28      	ble.n	40526a <_dtoa_r+0x8da>
  405218:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40521c:	f1b9 0f00 	cmp.w	r9, #0
  405220:	d111      	bne.n	405246 <_dtoa_r+0x8b6>
  405222:	4629      	mov	r1, r5
  405224:	464b      	mov	r3, r9
  405226:	2205      	movs	r2, #5
  405228:	4650      	mov	r0, sl
  40522a:	f000 ff15 	bl	406058 <__multadd>
  40522e:	4601      	mov	r1, r0
  405230:	4605      	mov	r5, r0
  405232:	9804      	ldr	r0, [sp, #16]
  405234:	f001 f90f 	bl	406456 <__mcmp>
  405238:	2800      	cmp	r0, #0
  40523a:	dc0c      	bgt.n	405256 <_dtoa_r+0x8c6>
  40523c:	e003      	b.n	405246 <_dtoa_r+0x8b6>
  40523e:	4635      	mov	r5, r6
  405240:	e000      	b.n	405244 <_dtoa_r+0x8b4>
  405242:	2500      	movs	r5, #0
  405244:	462e      	mov	r6, r5
  405246:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405248:	9c06      	ldr	r4, [sp, #24]
  40524a:	ea6f 0b03 	mvn.w	fp, r3
  40524e:	e009      	b.n	405264 <_dtoa_r+0x8d4>
  405250:	f8dd b020 	ldr.w	fp, [sp, #32]
  405254:	4635      	mov	r5, r6
  405256:	9b06      	ldr	r3, [sp, #24]
  405258:	9a06      	ldr	r2, [sp, #24]
  40525a:	1c5c      	adds	r4, r3, #1
  40525c:	2331      	movs	r3, #49	; 0x31
  40525e:	7013      	strb	r3, [r2, #0]
  405260:	f10b 0b01 	add.w	fp, fp, #1
  405264:	9605      	str	r6, [sp, #20]
  405266:	2600      	movs	r6, #0
  405268:	e0f9      	b.n	40545e <_dtoa_r+0xace>
  40526a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40526c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405270:	b923      	cbnz	r3, 40527c <_dtoa_r+0x8ec>
  405272:	9c06      	ldr	r4, [sp, #24]
  405274:	e0b2      	b.n	4053dc <_dtoa_r+0xa4c>
  405276:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405278:	2b02      	cmp	r3, #2
  40527a:	dccf      	bgt.n	40521c <_dtoa_r+0x88c>
  40527c:	2c00      	cmp	r4, #0
  40527e:	dd05      	ble.n	40528c <_dtoa_r+0x8fc>
  405280:	4631      	mov	r1, r6
  405282:	4622      	mov	r2, r4
  405284:	4650      	mov	r0, sl
  405286:	f001 f895 	bl	4063b4 <__lshift>
  40528a:	4606      	mov	r6, r0
  40528c:	b19f      	cbz	r7, 4052b6 <_dtoa_r+0x926>
  40528e:	6871      	ldr	r1, [r6, #4]
  405290:	4650      	mov	r0, sl
  405292:	f000 fe95 	bl	405fc0 <_Balloc>
  405296:	6932      	ldr	r2, [r6, #16]
  405298:	3202      	adds	r2, #2
  40529a:	4604      	mov	r4, r0
  40529c:	0092      	lsls	r2, r2, #2
  40529e:	f106 010c 	add.w	r1, r6, #12
  4052a2:	300c      	adds	r0, #12
  4052a4:	f7fd fd64 	bl	402d70 <memcpy>
  4052a8:	2201      	movs	r2, #1
  4052aa:	4621      	mov	r1, r4
  4052ac:	4650      	mov	r0, sl
  4052ae:	f001 f881 	bl	4063b4 <__lshift>
  4052b2:	9005      	str	r0, [sp, #20]
  4052b4:	e000      	b.n	4052b8 <_dtoa_r+0x928>
  4052b6:	9605      	str	r6, [sp, #20]
  4052b8:	9b02      	ldr	r3, [sp, #8]
  4052ba:	9f06      	ldr	r7, [sp, #24]
  4052bc:	f003 0301 	and.w	r3, r3, #1
  4052c0:	9307      	str	r3, [sp, #28]
  4052c2:	4629      	mov	r1, r5
  4052c4:	9804      	ldr	r0, [sp, #16]
  4052c6:	f7ff fad3 	bl	404870 <quorem>
  4052ca:	4631      	mov	r1, r6
  4052cc:	4604      	mov	r4, r0
  4052ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
  4052d2:	9804      	ldr	r0, [sp, #16]
  4052d4:	f001 f8bf 	bl	406456 <__mcmp>
  4052d8:	9a05      	ldr	r2, [sp, #20]
  4052da:	9002      	str	r0, [sp, #8]
  4052dc:	4629      	mov	r1, r5
  4052de:	4650      	mov	r0, sl
  4052e0:	f001 f8d5 	bl	40648e <__mdiff>
  4052e4:	68c3      	ldr	r3, [r0, #12]
  4052e6:	4602      	mov	r2, r0
  4052e8:	b93b      	cbnz	r3, 4052fa <_dtoa_r+0x96a>
  4052ea:	4601      	mov	r1, r0
  4052ec:	900a      	str	r0, [sp, #40]	; 0x28
  4052ee:	9804      	ldr	r0, [sp, #16]
  4052f0:	f001 f8b1 	bl	406456 <__mcmp>
  4052f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4052f6:	4603      	mov	r3, r0
  4052f8:	e000      	b.n	4052fc <_dtoa_r+0x96c>
  4052fa:	2301      	movs	r3, #1
  4052fc:	4611      	mov	r1, r2
  4052fe:	4650      	mov	r0, sl
  405300:	930a      	str	r3, [sp, #40]	; 0x28
  405302:	f000 fe92 	bl	40602a <_Bfree>
  405306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405308:	b953      	cbnz	r3, 405320 <_dtoa_r+0x990>
  40530a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40530c:	b942      	cbnz	r2, 405320 <_dtoa_r+0x990>
  40530e:	9a07      	ldr	r2, [sp, #28]
  405310:	b932      	cbnz	r2, 405320 <_dtoa_r+0x990>
  405312:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405316:	d02a      	beq.n	40536e <_dtoa_r+0x9de>
  405318:	9b02      	ldr	r3, [sp, #8]
  40531a:	2b00      	cmp	r3, #0
  40531c:	dc1c      	bgt.n	405358 <_dtoa_r+0x9c8>
  40531e:	e01d      	b.n	40535c <_dtoa_r+0x9cc>
  405320:	9a02      	ldr	r2, [sp, #8]
  405322:	2a00      	cmp	r2, #0
  405324:	db04      	blt.n	405330 <_dtoa_r+0x9a0>
  405326:	d11b      	bne.n	405360 <_dtoa_r+0x9d0>
  405328:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40532a:	b9ca      	cbnz	r2, 405360 <_dtoa_r+0x9d0>
  40532c:	9a07      	ldr	r2, [sp, #28]
  40532e:	b9ba      	cbnz	r2, 405360 <_dtoa_r+0x9d0>
  405330:	2b00      	cmp	r3, #0
  405332:	dd13      	ble.n	40535c <_dtoa_r+0x9cc>
  405334:	2201      	movs	r2, #1
  405336:	9904      	ldr	r1, [sp, #16]
  405338:	4650      	mov	r0, sl
  40533a:	f001 f83b 	bl	4063b4 <__lshift>
  40533e:	4629      	mov	r1, r5
  405340:	9004      	str	r0, [sp, #16]
  405342:	f001 f888 	bl	406456 <__mcmp>
  405346:	2800      	cmp	r0, #0
  405348:	dc03      	bgt.n	405352 <_dtoa_r+0x9c2>
  40534a:	d107      	bne.n	40535c <_dtoa_r+0x9cc>
  40534c:	f018 0f01 	tst.w	r8, #1
  405350:	d004      	beq.n	40535c <_dtoa_r+0x9cc>
  405352:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405356:	d00a      	beq.n	40536e <_dtoa_r+0x9de>
  405358:	f104 0831 	add.w	r8, r4, #49	; 0x31
  40535c:	1c7c      	adds	r4, r7, #1
  40535e:	e00c      	b.n	40537a <_dtoa_r+0x9ea>
  405360:	2b00      	cmp	r3, #0
  405362:	f107 0401 	add.w	r4, r7, #1
  405366:	dd0b      	ble.n	405380 <_dtoa_r+0x9f0>
  405368:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40536c:	d103      	bne.n	405376 <_dtoa_r+0x9e6>
  40536e:	2339      	movs	r3, #57	; 0x39
  405370:	703b      	strb	r3, [r7, #0]
  405372:	3701      	adds	r7, #1
  405374:	e056      	b.n	405424 <_dtoa_r+0xa94>
  405376:	f108 0801 	add.w	r8, r8, #1
  40537a:	f887 8000 	strb.w	r8, [r7]
  40537e:	e06e      	b.n	40545e <_dtoa_r+0xace>
  405380:	9b06      	ldr	r3, [sp, #24]
  405382:	f804 8c01 	strb.w	r8, [r4, #-1]
  405386:	1ae3      	subs	r3, r4, r3
  405388:	454b      	cmp	r3, r9
  40538a:	4627      	mov	r7, r4
  40538c:	d03b      	beq.n	405406 <_dtoa_r+0xa76>
  40538e:	2300      	movs	r3, #0
  405390:	220a      	movs	r2, #10
  405392:	9904      	ldr	r1, [sp, #16]
  405394:	4650      	mov	r0, sl
  405396:	f000 fe5f 	bl	406058 <__multadd>
  40539a:	9b05      	ldr	r3, [sp, #20]
  40539c:	9004      	str	r0, [sp, #16]
  40539e:	429e      	cmp	r6, r3
  4053a0:	f04f 020a 	mov.w	r2, #10
  4053a4:	f04f 0300 	mov.w	r3, #0
  4053a8:	4631      	mov	r1, r6
  4053aa:	4650      	mov	r0, sl
  4053ac:	d104      	bne.n	4053b8 <_dtoa_r+0xa28>
  4053ae:	f000 fe53 	bl	406058 <__multadd>
  4053b2:	4606      	mov	r6, r0
  4053b4:	9005      	str	r0, [sp, #20]
  4053b6:	e784      	b.n	4052c2 <_dtoa_r+0x932>
  4053b8:	f000 fe4e 	bl	406058 <__multadd>
  4053bc:	2300      	movs	r3, #0
  4053be:	4606      	mov	r6, r0
  4053c0:	220a      	movs	r2, #10
  4053c2:	9905      	ldr	r1, [sp, #20]
  4053c4:	4650      	mov	r0, sl
  4053c6:	f000 fe47 	bl	406058 <__multadd>
  4053ca:	9005      	str	r0, [sp, #20]
  4053cc:	e779      	b.n	4052c2 <_dtoa_r+0x932>
  4053ce:	2300      	movs	r3, #0
  4053d0:	220a      	movs	r2, #10
  4053d2:	9904      	ldr	r1, [sp, #16]
  4053d4:	4650      	mov	r0, sl
  4053d6:	f000 fe3f 	bl	406058 <__multadd>
  4053da:	9004      	str	r0, [sp, #16]
  4053dc:	4629      	mov	r1, r5
  4053de:	9804      	ldr	r0, [sp, #16]
  4053e0:	f7ff fa46 	bl	404870 <quorem>
  4053e4:	f100 0830 	add.w	r8, r0, #48	; 0x30
  4053e8:	f804 8b01 	strb.w	r8, [r4], #1
  4053ec:	9b06      	ldr	r3, [sp, #24]
  4053ee:	1ae3      	subs	r3, r4, r3
  4053f0:	454b      	cmp	r3, r9
  4053f2:	dbec      	blt.n	4053ce <_dtoa_r+0xa3e>
  4053f4:	9b06      	ldr	r3, [sp, #24]
  4053f6:	9605      	str	r6, [sp, #20]
  4053f8:	f1b9 0f01 	cmp.w	r9, #1
  4053fc:	bfac      	ite	ge
  4053fe:	444b      	addge	r3, r9
  405400:	3301      	addlt	r3, #1
  405402:	461f      	mov	r7, r3
  405404:	2600      	movs	r6, #0
  405406:	2201      	movs	r2, #1
  405408:	9904      	ldr	r1, [sp, #16]
  40540a:	4650      	mov	r0, sl
  40540c:	f000 ffd2 	bl	4063b4 <__lshift>
  405410:	4629      	mov	r1, r5
  405412:	9004      	str	r0, [sp, #16]
  405414:	f001 f81f 	bl	406456 <__mcmp>
  405418:	2800      	cmp	r0, #0
  40541a:	dc03      	bgt.n	405424 <_dtoa_r+0xa94>
  40541c:	d116      	bne.n	40544c <_dtoa_r+0xabc>
  40541e:	f018 0f01 	tst.w	r8, #1
  405422:	d013      	beq.n	40544c <_dtoa_r+0xabc>
  405424:	463c      	mov	r4, r7
  405426:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40542a:	2b39      	cmp	r3, #57	; 0x39
  40542c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  405430:	d109      	bne.n	405446 <_dtoa_r+0xab6>
  405432:	9b06      	ldr	r3, [sp, #24]
  405434:	4293      	cmp	r3, r2
  405436:	d104      	bne.n	405442 <_dtoa_r+0xab2>
  405438:	f10b 0b01 	add.w	fp, fp, #1
  40543c:	2331      	movs	r3, #49	; 0x31
  40543e:	9a06      	ldr	r2, [sp, #24]
  405440:	e002      	b.n	405448 <_dtoa_r+0xab8>
  405442:	4614      	mov	r4, r2
  405444:	e7ef      	b.n	405426 <_dtoa_r+0xa96>
  405446:	3301      	adds	r3, #1
  405448:	7013      	strb	r3, [r2, #0]
  40544a:	e008      	b.n	40545e <_dtoa_r+0xace>
  40544c:	463c      	mov	r4, r7
  40544e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  405452:	2b30      	cmp	r3, #48	; 0x30
  405454:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  405458:	d101      	bne.n	40545e <_dtoa_r+0xace>
  40545a:	4614      	mov	r4, r2
  40545c:	e7f7      	b.n	40544e <_dtoa_r+0xabe>
  40545e:	4629      	mov	r1, r5
  405460:	4650      	mov	r0, sl
  405462:	f000 fde2 	bl	40602a <_Bfree>
  405466:	9b05      	ldr	r3, [sp, #20]
  405468:	b16b      	cbz	r3, 405486 <_dtoa_r+0xaf6>
  40546a:	b12e      	cbz	r6, 405478 <_dtoa_r+0xae8>
  40546c:	429e      	cmp	r6, r3
  40546e:	d003      	beq.n	405478 <_dtoa_r+0xae8>
  405470:	4631      	mov	r1, r6
  405472:	4650      	mov	r0, sl
  405474:	f000 fdd9 	bl	40602a <_Bfree>
  405478:	9905      	ldr	r1, [sp, #20]
  40547a:	4650      	mov	r0, sl
  40547c:	f000 fdd5 	bl	40602a <_Bfree>
  405480:	e001      	b.n	405486 <_dtoa_r+0xaf6>
  405482:	f8dd b020 	ldr.w	fp, [sp, #32]
  405486:	9904      	ldr	r1, [sp, #16]
  405488:	4650      	mov	r0, sl
  40548a:	f000 fdce 	bl	40602a <_Bfree>
  40548e:	2300      	movs	r3, #0
  405490:	9a20      	ldr	r2, [sp, #128]	; 0x80
  405492:	7023      	strb	r3, [r4, #0]
  405494:	f10b 0301 	add.w	r3, fp, #1
  405498:	6013      	str	r3, [r2, #0]
  40549a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40549c:	b11b      	cbz	r3, 4054a6 <_dtoa_r+0xb16>
  40549e:	601c      	str	r4, [r3, #0]
  4054a0:	e001      	b.n	4054a6 <_dtoa_r+0xb16>
  4054a2:	4808      	ldr	r0, [pc, #32]	; (4054c4 <_dtoa_r+0xb34>)
  4054a4:	e00a      	b.n	4054bc <_dtoa_r+0xb2c>
  4054a6:	9806      	ldr	r0, [sp, #24]
  4054a8:	e008      	b.n	4054bc <_dtoa_r+0xb2c>
  4054aa:	f1b9 0f00 	cmp.w	r9, #0
  4054ae:	f73f aee0 	bgt.w	405272 <_dtoa_r+0x8e2>
  4054b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4054b4:	2b02      	cmp	r3, #2
  4054b6:	f77f aedc 	ble.w	405272 <_dtoa_r+0x8e2>
  4054ba:	e6af      	b.n	40521c <_dtoa_r+0x88c>
  4054bc:	b015      	add	sp, #84	; 0x54
  4054be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054c2:	bf00      	nop
  4054c4:	004081fc 	.word	0x004081fc

004054c8 <__sflush_r>:
  4054c8:	898a      	ldrh	r2, [r1, #12]
  4054ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054ce:	4605      	mov	r5, r0
  4054d0:	0710      	lsls	r0, r2, #28
  4054d2:	460c      	mov	r4, r1
  4054d4:	d459      	bmi.n	40558a <__sflush_r+0xc2>
  4054d6:	684b      	ldr	r3, [r1, #4]
  4054d8:	2b00      	cmp	r3, #0
  4054da:	dc02      	bgt.n	4054e2 <__sflush_r+0x1a>
  4054dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4054de:	2b00      	cmp	r3, #0
  4054e0:	dd17      	ble.n	405512 <__sflush_r+0x4a>
  4054e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4054e4:	b1ae      	cbz	r6, 405512 <__sflush_r+0x4a>
  4054e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  4054ea:	2300      	movs	r3, #0
  4054ec:	b292      	uxth	r2, r2
  4054ee:	682f      	ldr	r7, [r5, #0]
  4054f0:	602b      	str	r3, [r5, #0]
  4054f2:	b10a      	cbz	r2, 4054f8 <__sflush_r+0x30>
  4054f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4054f6:	e015      	b.n	405524 <__sflush_r+0x5c>
  4054f8:	6a21      	ldr	r1, [r4, #32]
  4054fa:	2301      	movs	r3, #1
  4054fc:	4628      	mov	r0, r5
  4054fe:	47b0      	blx	r6
  405500:	1c41      	adds	r1, r0, #1
  405502:	d10f      	bne.n	405524 <__sflush_r+0x5c>
  405504:	682b      	ldr	r3, [r5, #0]
  405506:	b16b      	cbz	r3, 405524 <__sflush_r+0x5c>
  405508:	2b1d      	cmp	r3, #29
  40550a:	d001      	beq.n	405510 <__sflush_r+0x48>
  40550c:	2b16      	cmp	r3, #22
  40550e:	d103      	bne.n	405518 <__sflush_r+0x50>
  405510:	602f      	str	r7, [r5, #0]
  405512:	2000      	movs	r0, #0
  405514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405518:	89a3      	ldrh	r3, [r4, #12]
  40551a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40551e:	81a3      	strh	r3, [r4, #12]
  405520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405524:	89a3      	ldrh	r3, [r4, #12]
  405526:	075a      	lsls	r2, r3, #29
  405528:	d505      	bpl.n	405536 <__sflush_r+0x6e>
  40552a:	6863      	ldr	r3, [r4, #4]
  40552c:	1ac0      	subs	r0, r0, r3
  40552e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  405530:	b10b      	cbz	r3, 405536 <__sflush_r+0x6e>
  405532:	6c23      	ldr	r3, [r4, #64]	; 0x40
  405534:	1ac0      	subs	r0, r0, r3
  405536:	2300      	movs	r3, #0
  405538:	4602      	mov	r2, r0
  40553a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40553c:	6a21      	ldr	r1, [r4, #32]
  40553e:	4628      	mov	r0, r5
  405540:	47b0      	blx	r6
  405542:	1c43      	adds	r3, r0, #1
  405544:	89a3      	ldrh	r3, [r4, #12]
  405546:	d106      	bne.n	405556 <__sflush_r+0x8e>
  405548:	6829      	ldr	r1, [r5, #0]
  40554a:	291d      	cmp	r1, #29
  40554c:	d83a      	bhi.n	4055c4 <__sflush_r+0xfc>
  40554e:	4a21      	ldr	r2, [pc, #132]	; (4055d4 <__sflush_r+0x10c>)
  405550:	40ca      	lsrs	r2, r1
  405552:	07d6      	lsls	r6, r2, #31
  405554:	d536      	bpl.n	4055c4 <__sflush_r+0xfc>
  405556:	2200      	movs	r2, #0
  405558:	6062      	str	r2, [r4, #4]
  40555a:	04d9      	lsls	r1, r3, #19
  40555c:	6922      	ldr	r2, [r4, #16]
  40555e:	6022      	str	r2, [r4, #0]
  405560:	d504      	bpl.n	40556c <__sflush_r+0xa4>
  405562:	1c42      	adds	r2, r0, #1
  405564:	d101      	bne.n	40556a <__sflush_r+0xa2>
  405566:	682b      	ldr	r3, [r5, #0]
  405568:	b903      	cbnz	r3, 40556c <__sflush_r+0xa4>
  40556a:	6560      	str	r0, [r4, #84]	; 0x54
  40556c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40556e:	602f      	str	r7, [r5, #0]
  405570:	2900      	cmp	r1, #0
  405572:	d0ce      	beq.n	405512 <__sflush_r+0x4a>
  405574:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405578:	4299      	cmp	r1, r3
  40557a:	d002      	beq.n	405582 <__sflush_r+0xba>
  40557c:	4628      	mov	r0, r5
  40557e:	f001 f917 	bl	4067b0 <_free_r>
  405582:	2000      	movs	r0, #0
  405584:	6360      	str	r0, [r4, #52]	; 0x34
  405586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40558a:	690f      	ldr	r7, [r1, #16]
  40558c:	2f00      	cmp	r7, #0
  40558e:	d0c0      	beq.n	405512 <__sflush_r+0x4a>
  405590:	0793      	lsls	r3, r2, #30
  405592:	680e      	ldr	r6, [r1, #0]
  405594:	bf08      	it	eq
  405596:	694b      	ldreq	r3, [r1, #20]
  405598:	600f      	str	r7, [r1, #0]
  40559a:	bf18      	it	ne
  40559c:	2300      	movne	r3, #0
  40559e:	ebc7 0806 	rsb	r8, r7, r6
  4055a2:	608b      	str	r3, [r1, #8]
  4055a4:	e002      	b.n	4055ac <__sflush_r+0xe4>
  4055a6:	4407      	add	r7, r0
  4055a8:	ebc0 0808 	rsb	r8, r0, r8
  4055ac:	f1b8 0f00 	cmp.w	r8, #0
  4055b0:	ddaf      	ble.n	405512 <__sflush_r+0x4a>
  4055b2:	4643      	mov	r3, r8
  4055b4:	463a      	mov	r2, r7
  4055b6:	6a21      	ldr	r1, [r4, #32]
  4055b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4055ba:	4628      	mov	r0, r5
  4055bc:	47b0      	blx	r6
  4055be:	2800      	cmp	r0, #0
  4055c0:	dcf1      	bgt.n	4055a6 <__sflush_r+0xde>
  4055c2:	89a3      	ldrh	r3, [r4, #12]
  4055c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4055c8:	81a3      	strh	r3, [r4, #12]
  4055ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4055ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055d2:	bf00      	nop
  4055d4:	20400001 	.word	0x20400001

004055d8 <_fflush_r>:
  4055d8:	b538      	push	{r3, r4, r5, lr}
  4055da:	690b      	ldr	r3, [r1, #16]
  4055dc:	4605      	mov	r5, r0
  4055de:	460c      	mov	r4, r1
  4055e0:	b1db      	cbz	r3, 40561a <_fflush_r+0x42>
  4055e2:	b118      	cbz	r0, 4055ec <_fflush_r+0x14>
  4055e4:	6983      	ldr	r3, [r0, #24]
  4055e6:	b90b      	cbnz	r3, 4055ec <_fflush_r+0x14>
  4055e8:	f000 f860 	bl	4056ac <__sinit>
  4055ec:	4b0c      	ldr	r3, [pc, #48]	; (405620 <_fflush_r+0x48>)
  4055ee:	429c      	cmp	r4, r3
  4055f0:	d101      	bne.n	4055f6 <_fflush_r+0x1e>
  4055f2:	686c      	ldr	r4, [r5, #4]
  4055f4:	e008      	b.n	405608 <_fflush_r+0x30>
  4055f6:	4b0b      	ldr	r3, [pc, #44]	; (405624 <_fflush_r+0x4c>)
  4055f8:	429c      	cmp	r4, r3
  4055fa:	d101      	bne.n	405600 <_fflush_r+0x28>
  4055fc:	68ac      	ldr	r4, [r5, #8]
  4055fe:	e003      	b.n	405608 <_fflush_r+0x30>
  405600:	4b09      	ldr	r3, [pc, #36]	; (405628 <_fflush_r+0x50>)
  405602:	429c      	cmp	r4, r3
  405604:	bf08      	it	eq
  405606:	68ec      	ldreq	r4, [r5, #12]
  405608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40560c:	b12b      	cbz	r3, 40561a <_fflush_r+0x42>
  40560e:	4621      	mov	r1, r4
  405610:	4628      	mov	r0, r5
  405612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405616:	f7ff bf57 	b.w	4054c8 <__sflush_r>
  40561a:	2000      	movs	r0, #0
  40561c:	bd38      	pop	{r3, r4, r5, pc}
  40561e:	bf00      	nop
  405620:	00408280 	.word	0x00408280
  405624:	004082a0 	.word	0x004082a0
  405628:	004082c0 	.word	0x004082c0

0040562c <_cleanup_r>:
  40562c:	4901      	ldr	r1, [pc, #4]	; (405634 <_cleanup_r+0x8>)
  40562e:	f000 b8a9 	b.w	405784 <_fwalk_reent>
  405632:	bf00      	nop
  405634:	004055d9 	.word	0x004055d9

00405638 <std.isra.0>:
  405638:	2300      	movs	r3, #0
  40563a:	b510      	push	{r4, lr}
  40563c:	4604      	mov	r4, r0
  40563e:	6003      	str	r3, [r0, #0]
  405640:	6043      	str	r3, [r0, #4]
  405642:	6083      	str	r3, [r0, #8]
  405644:	8181      	strh	r1, [r0, #12]
  405646:	6643      	str	r3, [r0, #100]	; 0x64
  405648:	81c2      	strh	r2, [r0, #14]
  40564a:	6103      	str	r3, [r0, #16]
  40564c:	6143      	str	r3, [r0, #20]
  40564e:	6183      	str	r3, [r0, #24]
  405650:	4619      	mov	r1, r3
  405652:	2208      	movs	r2, #8
  405654:	305c      	adds	r0, #92	; 0x5c
  405656:	f7fd fb96 	bl	402d86 <memset>
  40565a:	4b05      	ldr	r3, [pc, #20]	; (405670 <std.isra.0+0x38>)
  40565c:	6263      	str	r3, [r4, #36]	; 0x24
  40565e:	4b05      	ldr	r3, [pc, #20]	; (405674 <std.isra.0+0x3c>)
  405660:	62a3      	str	r3, [r4, #40]	; 0x28
  405662:	4b05      	ldr	r3, [pc, #20]	; (405678 <std.isra.0+0x40>)
  405664:	62e3      	str	r3, [r4, #44]	; 0x2c
  405666:	4b05      	ldr	r3, [pc, #20]	; (40567c <std.isra.0+0x44>)
  405668:	6224      	str	r4, [r4, #32]
  40566a:	6323      	str	r3, [r4, #48]	; 0x30
  40566c:	bd10      	pop	{r4, pc}
  40566e:	bf00      	nop
  405670:	00406bb1 	.word	0x00406bb1
  405674:	00406bd3 	.word	0x00406bd3
  405678:	00406c0b 	.word	0x00406c0b
  40567c:	00406c2f 	.word	0x00406c2f

00405680 <__sfmoreglue>:
  405680:	b570      	push	{r4, r5, r6, lr}
  405682:	2368      	movs	r3, #104	; 0x68
  405684:	1e4d      	subs	r5, r1, #1
  405686:	435d      	muls	r5, r3
  405688:	460e      	mov	r6, r1
  40568a:	f105 0174 	add.w	r1, r5, #116	; 0x74
  40568e:	f001 f8dd 	bl	40684c <_malloc_r>
  405692:	4604      	mov	r4, r0
  405694:	b140      	cbz	r0, 4056a8 <__sfmoreglue+0x28>
  405696:	2100      	movs	r1, #0
  405698:	e880 0042 	stmia.w	r0, {r1, r6}
  40569c:	300c      	adds	r0, #12
  40569e:	60a0      	str	r0, [r4, #8]
  4056a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4056a4:	f7fd fb6f 	bl	402d86 <memset>
  4056a8:	4620      	mov	r0, r4
  4056aa:	bd70      	pop	{r4, r5, r6, pc}

004056ac <__sinit>:
  4056ac:	6983      	ldr	r3, [r0, #24]
  4056ae:	b510      	push	{r4, lr}
  4056b0:	4604      	mov	r4, r0
  4056b2:	bb33      	cbnz	r3, 405702 <__sinit+0x56>
  4056b4:	6483      	str	r3, [r0, #72]	; 0x48
  4056b6:	64c3      	str	r3, [r0, #76]	; 0x4c
  4056b8:	6503      	str	r3, [r0, #80]	; 0x50
  4056ba:	4b12      	ldr	r3, [pc, #72]	; (405704 <__sinit+0x58>)
  4056bc:	4a12      	ldr	r2, [pc, #72]	; (405708 <__sinit+0x5c>)
  4056be:	681b      	ldr	r3, [r3, #0]
  4056c0:	6282      	str	r2, [r0, #40]	; 0x28
  4056c2:	4298      	cmp	r0, r3
  4056c4:	bf04      	itt	eq
  4056c6:	2301      	moveq	r3, #1
  4056c8:	6183      	streq	r3, [r0, #24]
  4056ca:	f000 f81f 	bl	40570c <__sfp>
  4056ce:	6060      	str	r0, [r4, #4]
  4056d0:	4620      	mov	r0, r4
  4056d2:	f000 f81b 	bl	40570c <__sfp>
  4056d6:	60a0      	str	r0, [r4, #8]
  4056d8:	4620      	mov	r0, r4
  4056da:	f000 f817 	bl	40570c <__sfp>
  4056de:	2200      	movs	r2, #0
  4056e0:	60e0      	str	r0, [r4, #12]
  4056e2:	2104      	movs	r1, #4
  4056e4:	6860      	ldr	r0, [r4, #4]
  4056e6:	f7ff ffa7 	bl	405638 <std.isra.0>
  4056ea:	2201      	movs	r2, #1
  4056ec:	2109      	movs	r1, #9
  4056ee:	68a0      	ldr	r0, [r4, #8]
  4056f0:	f7ff ffa2 	bl	405638 <std.isra.0>
  4056f4:	2202      	movs	r2, #2
  4056f6:	2112      	movs	r1, #18
  4056f8:	68e0      	ldr	r0, [r4, #12]
  4056fa:	f7ff ff9d 	bl	405638 <std.isra.0>
  4056fe:	2301      	movs	r3, #1
  405700:	61a3      	str	r3, [r4, #24]
  405702:	bd10      	pop	{r4, pc}
  405704:	004081e8 	.word	0x004081e8
  405708:	0040562d 	.word	0x0040562d

0040570c <__sfp>:
  40570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40570e:	4b1c      	ldr	r3, [pc, #112]	; (405780 <__sfp+0x74>)
  405710:	681e      	ldr	r6, [r3, #0]
  405712:	69b3      	ldr	r3, [r6, #24]
  405714:	4607      	mov	r7, r0
  405716:	b913      	cbnz	r3, 40571e <__sfp+0x12>
  405718:	4630      	mov	r0, r6
  40571a:	f7ff ffc7 	bl	4056ac <__sinit>
  40571e:	3648      	adds	r6, #72	; 0x48
  405720:	68b4      	ldr	r4, [r6, #8]
  405722:	6873      	ldr	r3, [r6, #4]
  405724:	3b01      	subs	r3, #1
  405726:	d404      	bmi.n	405732 <__sfp+0x26>
  405728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40572c:	b17d      	cbz	r5, 40574e <__sfp+0x42>
  40572e:	3468      	adds	r4, #104	; 0x68
  405730:	e7f8      	b.n	405724 <__sfp+0x18>
  405732:	6833      	ldr	r3, [r6, #0]
  405734:	b10b      	cbz	r3, 40573a <__sfp+0x2e>
  405736:	6836      	ldr	r6, [r6, #0]
  405738:	e7f2      	b.n	405720 <__sfp+0x14>
  40573a:	2104      	movs	r1, #4
  40573c:	4638      	mov	r0, r7
  40573e:	f7ff ff9f 	bl	405680 <__sfmoreglue>
  405742:	6030      	str	r0, [r6, #0]
  405744:	2800      	cmp	r0, #0
  405746:	d1f6      	bne.n	405736 <__sfp+0x2a>
  405748:	230c      	movs	r3, #12
  40574a:	603b      	str	r3, [r7, #0]
  40574c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40574e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  405752:	81e3      	strh	r3, [r4, #14]
  405754:	2301      	movs	r3, #1
  405756:	81a3      	strh	r3, [r4, #12]
  405758:	6665      	str	r5, [r4, #100]	; 0x64
  40575a:	6025      	str	r5, [r4, #0]
  40575c:	60a5      	str	r5, [r4, #8]
  40575e:	6065      	str	r5, [r4, #4]
  405760:	6125      	str	r5, [r4, #16]
  405762:	6165      	str	r5, [r4, #20]
  405764:	61a5      	str	r5, [r4, #24]
  405766:	2208      	movs	r2, #8
  405768:	4629      	mov	r1, r5
  40576a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  40576e:	f7fd fb0a 	bl	402d86 <memset>
  405772:	6365      	str	r5, [r4, #52]	; 0x34
  405774:	63a5      	str	r5, [r4, #56]	; 0x38
  405776:	64a5      	str	r5, [r4, #72]	; 0x48
  405778:	64e5      	str	r5, [r4, #76]	; 0x4c
  40577a:	4620      	mov	r0, r4
  40577c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40577e:	bf00      	nop
  405780:	004081e8 	.word	0x004081e8

00405784 <_fwalk_reent>:
  405784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405788:	4680      	mov	r8, r0
  40578a:	4689      	mov	r9, r1
  40578c:	f100 0448 	add.w	r4, r0, #72	; 0x48
  405790:	2600      	movs	r6, #0
  405792:	b194      	cbz	r4, 4057ba <_fwalk_reent+0x36>
  405794:	68a5      	ldr	r5, [r4, #8]
  405796:	6867      	ldr	r7, [r4, #4]
  405798:	3f01      	subs	r7, #1
  40579a:	d40c      	bmi.n	4057b6 <_fwalk_reent+0x32>
  40579c:	89ab      	ldrh	r3, [r5, #12]
  40579e:	2b01      	cmp	r3, #1
  4057a0:	d907      	bls.n	4057b2 <_fwalk_reent+0x2e>
  4057a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4057a6:	3301      	adds	r3, #1
  4057a8:	d003      	beq.n	4057b2 <_fwalk_reent+0x2e>
  4057aa:	4629      	mov	r1, r5
  4057ac:	4640      	mov	r0, r8
  4057ae:	47c8      	blx	r9
  4057b0:	4306      	orrs	r6, r0
  4057b2:	3568      	adds	r5, #104	; 0x68
  4057b4:	e7f0      	b.n	405798 <_fwalk_reent+0x14>
  4057b6:	6824      	ldr	r4, [r4, #0]
  4057b8:	e7eb      	b.n	405792 <_fwalk_reent+0xe>
  4057ba:	4630      	mov	r0, r6
  4057bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004057c0 <rshift>:
  4057c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4057c2:	6906      	ldr	r6, [r0, #16]
  4057c4:	114b      	asrs	r3, r1, #5
  4057c6:	42b3      	cmp	r3, r6
  4057c8:	f100 0514 	add.w	r5, r0, #20
  4057cc:	da27      	bge.n	40581e <rshift+0x5e>
  4057ce:	f011 011f 	ands.w	r1, r1, #31
  4057d2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
  4057d6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
  4057da:	d101      	bne.n	4057e0 <rshift+0x20>
  4057dc:	4629      	mov	r1, r5
  4057de:	e016      	b.n	40580e <rshift+0x4e>
  4057e0:	1d14      	adds	r4, r2, #4
  4057e2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  4057e6:	f1c1 0e20 	rsb	lr, r1, #32
  4057ea:	40ca      	lsrs	r2, r1
  4057ec:	462b      	mov	r3, r5
  4057ee:	42b4      	cmp	r4, r6
  4057f0:	d209      	bcs.n	405806 <rshift+0x46>
  4057f2:	6827      	ldr	r7, [r4, #0]
  4057f4:	fa07 f70e 	lsl.w	r7, r7, lr
  4057f8:	433a      	orrs	r2, r7
  4057fa:	f843 2b04 	str.w	r2, [r3], #4
  4057fe:	f854 2b04 	ldr.w	r2, [r4], #4
  405802:	40ca      	lsrs	r2, r1
  405804:	e7f3      	b.n	4057ee <rshift+0x2e>
  405806:	601a      	str	r2, [r3, #0]
  405808:	b152      	cbz	r2, 405820 <rshift+0x60>
  40580a:	3304      	adds	r3, #4
  40580c:	e008      	b.n	405820 <rshift+0x60>
  40580e:	42b2      	cmp	r2, r6
  405810:	460b      	mov	r3, r1
  405812:	d205      	bcs.n	405820 <rshift+0x60>
  405814:	f852 3b04 	ldr.w	r3, [r2], #4
  405818:	f841 3b04 	str.w	r3, [r1], #4
  40581c:	e7f7      	b.n	40580e <rshift+0x4e>
  40581e:	462b      	mov	r3, r5
  405820:	1b5b      	subs	r3, r3, r5
  405822:	109b      	asrs	r3, r3, #2
  405824:	6103      	str	r3, [r0, #16]
  405826:	b903      	cbnz	r3, 40582a <rshift+0x6a>
  405828:	6143      	str	r3, [r0, #20]
  40582a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040582c <__hexdig_fun>:
  40582c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  405830:	2b09      	cmp	r3, #9
  405832:	d801      	bhi.n	405838 <__hexdig_fun+0xc>
  405834:	3820      	subs	r0, #32
  405836:	e00a      	b.n	40584e <__hexdig_fun+0x22>
  405838:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  40583c:	2b05      	cmp	r3, #5
  40583e:	d801      	bhi.n	405844 <__hexdig_fun+0x18>
  405840:	3847      	subs	r0, #71	; 0x47
  405842:	e004      	b.n	40584e <__hexdig_fun+0x22>
  405844:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  405848:	2b05      	cmp	r3, #5
  40584a:	d802      	bhi.n	405852 <__hexdig_fun+0x26>
  40584c:	3827      	subs	r0, #39	; 0x27
  40584e:	b2c0      	uxtb	r0, r0
  405850:	4770      	bx	lr
  405852:	2000      	movs	r0, #0
  405854:	4770      	bx	lr

00405856 <__gethex>:
  405856:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40585a:	b08b      	sub	sp, #44	; 0x2c
  40585c:	468a      	mov	sl, r1
  40585e:	9002      	str	r0, [sp, #8]
  405860:	9816      	ldr	r0, [sp, #88]	; 0x58
  405862:	9306      	str	r3, [sp, #24]
  405864:	4690      	mov	r8, r2
  405866:	f000 facc 	bl	405e02 <__localeconv_l>
  40586a:	6803      	ldr	r3, [r0, #0]
  40586c:	9303      	str	r3, [sp, #12]
  40586e:	4618      	mov	r0, r3
  405870:	f7fe f83e 	bl	4038f0 <strlen>
  405874:	9b03      	ldr	r3, [sp, #12]
  405876:	9001      	str	r0, [sp, #4]
  405878:	4403      	add	r3, r0
  40587a:	f04f 0b00 	mov.w	fp, #0
  40587e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  405882:	9307      	str	r3, [sp, #28]
  405884:	f8da 3000 	ldr.w	r3, [sl]
  405888:	3302      	adds	r3, #2
  40588a:	461f      	mov	r7, r3
  40588c:	f813 0b01 	ldrb.w	r0, [r3], #1
  405890:	2830      	cmp	r0, #48	; 0x30
  405892:	d102      	bne.n	40589a <__gethex+0x44>
  405894:	f10b 0b01 	add.w	fp, fp, #1
  405898:	e7f7      	b.n	40588a <__gethex+0x34>
  40589a:	f7ff ffc7 	bl	40582c <__hexdig_fun>
  40589e:	4604      	mov	r4, r0
  4058a0:	b9e0      	cbnz	r0, 4058dc <__gethex+0x86>
  4058a2:	9a01      	ldr	r2, [sp, #4]
  4058a4:	9903      	ldr	r1, [sp, #12]
  4058a6:	4638      	mov	r0, r7
  4058a8:	f001 f9c5 	bl	406c36 <strncmp>
  4058ac:	2800      	cmp	r0, #0
  4058ae:	d134      	bne.n	40591a <__gethex+0xc4>
  4058b0:	9b01      	ldr	r3, [sp, #4]
  4058b2:	5cf8      	ldrb	r0, [r7, r3]
  4058b4:	18fe      	adds	r6, r7, r3
  4058b6:	f7ff ffb9 	bl	40582c <__hexdig_fun>
  4058ba:	b380      	cbz	r0, 40591e <__gethex+0xc8>
  4058bc:	4633      	mov	r3, r6
  4058be:	7818      	ldrb	r0, [r3, #0]
  4058c0:	2830      	cmp	r0, #48	; 0x30
  4058c2:	461f      	mov	r7, r3
  4058c4:	f103 0301 	add.w	r3, r3, #1
  4058c8:	d0f9      	beq.n	4058be <__gethex+0x68>
  4058ca:	f7ff ffaf 	bl	40582c <__hexdig_fun>
  4058ce:	fab0 f580 	clz	r5, r0
  4058d2:	096d      	lsrs	r5, r5, #5
  4058d4:	4634      	mov	r4, r6
  4058d6:	f04f 0b01 	mov.w	fp, #1
  4058da:	e001      	b.n	4058e0 <__gethex+0x8a>
  4058dc:	2500      	movs	r5, #0
  4058de:	462c      	mov	r4, r5
  4058e0:	463a      	mov	r2, r7
  4058e2:	4616      	mov	r6, r2
  4058e4:	3201      	adds	r2, #1
  4058e6:	7830      	ldrb	r0, [r6, #0]
  4058e8:	f7ff ffa0 	bl	40582c <__hexdig_fun>
  4058ec:	2800      	cmp	r0, #0
  4058ee:	d1f8      	bne.n	4058e2 <__gethex+0x8c>
  4058f0:	9a01      	ldr	r2, [sp, #4]
  4058f2:	9903      	ldr	r1, [sp, #12]
  4058f4:	4630      	mov	r0, r6
  4058f6:	f001 f99e 	bl	406c36 <strncmp>
  4058fa:	b950      	cbnz	r0, 405912 <__gethex+0xbc>
  4058fc:	b954      	cbnz	r4, 405914 <__gethex+0xbe>
  4058fe:	9b01      	ldr	r3, [sp, #4]
  405900:	18f4      	adds	r4, r6, r3
  405902:	4622      	mov	r2, r4
  405904:	4616      	mov	r6, r2
  405906:	3201      	adds	r2, #1
  405908:	7830      	ldrb	r0, [r6, #0]
  40590a:	f7ff ff8f 	bl	40582c <__hexdig_fun>
  40590e:	2800      	cmp	r0, #0
  405910:	d1f8      	bne.n	405904 <__gethex+0xae>
  405912:	b134      	cbz	r4, 405922 <__gethex+0xcc>
  405914:	1ba4      	subs	r4, r4, r6
  405916:	00a4      	lsls	r4, r4, #2
  405918:	e003      	b.n	405922 <__gethex+0xcc>
  40591a:	463e      	mov	r6, r7
  40591c:	e000      	b.n	405920 <__gethex+0xca>
  40591e:	4604      	mov	r4, r0
  405920:	2501      	movs	r5, #1
  405922:	7833      	ldrb	r3, [r6, #0]
  405924:	2b50      	cmp	r3, #80	; 0x50
  405926:	d001      	beq.n	40592c <__gethex+0xd6>
  405928:	2b70      	cmp	r3, #112	; 0x70
  40592a:	d12a      	bne.n	405982 <__gethex+0x12c>
  40592c:	7873      	ldrb	r3, [r6, #1]
  40592e:	2b2b      	cmp	r3, #43	; 0x2b
  405930:	d008      	beq.n	405944 <__gethex+0xee>
  405932:	2b2d      	cmp	r3, #45	; 0x2d
  405934:	d003      	beq.n	40593e <__gethex+0xe8>
  405936:	1c71      	adds	r1, r6, #1
  405938:	f04f 0900 	mov.w	r9, #0
  40593c:	e005      	b.n	40594a <__gethex+0xf4>
  40593e:	f04f 0901 	mov.w	r9, #1
  405942:	e001      	b.n	405948 <__gethex+0xf2>
  405944:	f04f 0900 	mov.w	r9, #0
  405948:	1cb1      	adds	r1, r6, #2
  40594a:	7808      	ldrb	r0, [r1, #0]
  40594c:	f7ff ff6e 	bl	40582c <__hexdig_fun>
  405950:	1e43      	subs	r3, r0, #1
  405952:	b2db      	uxtb	r3, r3
  405954:	2b18      	cmp	r3, #24
  405956:	d814      	bhi.n	405982 <__gethex+0x12c>
  405958:	f1a0 0210 	sub.w	r2, r0, #16
  40595c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  405960:	f7ff ff64 	bl	40582c <__hexdig_fun>
  405964:	1e43      	subs	r3, r0, #1
  405966:	b2db      	uxtb	r3, r3
  405968:	2b18      	cmp	r3, #24
  40596a:	d804      	bhi.n	405976 <__gethex+0x120>
  40596c:	230a      	movs	r3, #10
  40596e:	fb03 0202 	mla	r2, r3, r2, r0
  405972:	3a10      	subs	r2, #16
  405974:	e7f2      	b.n	40595c <__gethex+0x106>
  405976:	f1b9 0f00 	cmp.w	r9, #0
  40597a:	d000      	beq.n	40597e <__gethex+0x128>
  40597c:	4252      	negs	r2, r2
  40597e:	4414      	add	r4, r2
  405980:	e000      	b.n	405984 <__gethex+0x12e>
  405982:	4631      	mov	r1, r6
  405984:	f8ca 1000 	str.w	r1, [sl]
  405988:	b12d      	cbz	r5, 405996 <__gethex+0x140>
  40598a:	f1bb 0f00 	cmp.w	fp, #0
  40598e:	bf14      	ite	ne
  405990:	2000      	movne	r0, #0
  405992:	2006      	moveq	r0, #6
  405994:	e17c      	b.n	405c90 <__gethex+0x43a>
  405996:	1bf3      	subs	r3, r6, r7
  405998:	3b01      	subs	r3, #1
  40599a:	4629      	mov	r1, r5
  40599c:	2b07      	cmp	r3, #7
  40599e:	dd02      	ble.n	4059a6 <__gethex+0x150>
  4059a0:	3101      	adds	r1, #1
  4059a2:	105b      	asrs	r3, r3, #1
  4059a4:	e7fa      	b.n	40599c <__gethex+0x146>
  4059a6:	9802      	ldr	r0, [sp, #8]
  4059a8:	f000 fb0a 	bl	405fc0 <_Balloc>
  4059ac:	9b01      	ldr	r3, [sp, #4]
  4059ae:	f100 0a14 	add.w	sl, r0, #20
  4059b2:	f04f 0900 	mov.w	r9, #0
  4059b6:	f1c3 0301 	rsb	r3, r3, #1
  4059ba:	4605      	mov	r5, r0
  4059bc:	f8cd a010 	str.w	sl, [sp, #16]
  4059c0:	46cb      	mov	fp, r9
  4059c2:	9308      	str	r3, [sp, #32]
  4059c4:	42b7      	cmp	r7, r6
  4059c6:	d22f      	bcs.n	405a28 <__gethex+0x1d2>
  4059c8:	1e73      	subs	r3, r6, #1
  4059ca:	9305      	str	r3, [sp, #20]
  4059cc:	9a07      	ldr	r2, [sp, #28]
  4059ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  4059d2:	4293      	cmp	r3, r2
  4059d4:	d00b      	beq.n	4059ee <__gethex+0x198>
  4059d6:	f1bb 0f20 	cmp.w	fp, #32
  4059da:	d116      	bne.n	405a0a <__gethex+0x1b4>
  4059dc:	9b04      	ldr	r3, [sp, #16]
  4059de:	f8c3 9000 	str.w	r9, [r3]
  4059e2:	3304      	adds	r3, #4
  4059e4:	f04f 0900 	mov.w	r9, #0
  4059e8:	9304      	str	r3, [sp, #16]
  4059ea:	46cb      	mov	fp, r9
  4059ec:	e00d      	b.n	405a0a <__gethex+0x1b4>
  4059ee:	9b05      	ldr	r3, [sp, #20]
  4059f0:	9a08      	ldr	r2, [sp, #32]
  4059f2:	4413      	add	r3, r2
  4059f4:	429f      	cmp	r7, r3
  4059f6:	d8ee      	bhi.n	4059d6 <__gethex+0x180>
  4059f8:	4618      	mov	r0, r3
  4059fa:	9a01      	ldr	r2, [sp, #4]
  4059fc:	9903      	ldr	r1, [sp, #12]
  4059fe:	9309      	str	r3, [sp, #36]	; 0x24
  405a00:	f001 f919 	bl	406c36 <strncmp>
  405a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405a06:	b168      	cbz	r0, 405a24 <__gethex+0x1ce>
  405a08:	e7e5      	b.n	4059d6 <__gethex+0x180>
  405a0a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
  405a0e:	f7ff ff0d 	bl	40582c <__hexdig_fun>
  405a12:	f000 000f 	and.w	r0, r0, #15
  405a16:	fa00 f00b 	lsl.w	r0, r0, fp
  405a1a:	9b05      	ldr	r3, [sp, #20]
  405a1c:	ea49 0900 	orr.w	r9, r9, r0
  405a20:	f10b 0b04 	add.w	fp, fp, #4
  405a24:	461e      	mov	r6, r3
  405a26:	e7cd      	b.n	4059c4 <__gethex+0x16e>
  405a28:	9804      	ldr	r0, [sp, #16]
  405a2a:	f840 9b04 	str.w	r9, [r0], #4
  405a2e:	ebca 0000 	rsb	r0, sl, r0
  405a32:	1080      	asrs	r0, r0, #2
  405a34:	6128      	str	r0, [r5, #16]
  405a36:	0147      	lsls	r7, r0, #5
  405a38:	4648      	mov	r0, r9
  405a3a:	f000 fb86 	bl	40614a <__hi0bits>
  405a3e:	f8d8 6000 	ldr.w	r6, [r8]
  405a42:	1a38      	subs	r0, r7, r0
  405a44:	42b0      	cmp	r0, r6
  405a46:	dd26      	ble.n	405a96 <__gethex+0x240>
  405a48:	1b87      	subs	r7, r0, r6
  405a4a:	4639      	mov	r1, r7
  405a4c:	4628      	mov	r0, r5
  405a4e:	f000 fe7f 	bl	406750 <__any_on>
  405a52:	b1c8      	cbz	r0, 405a88 <__gethex+0x232>
  405a54:	1e7b      	subs	r3, r7, #1
  405a56:	1159      	asrs	r1, r3, #5
  405a58:	f003 021f 	and.w	r2, r3, #31
  405a5c:	f04f 0901 	mov.w	r9, #1
  405a60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
  405a64:	fa09 f202 	lsl.w	r2, r9, r2
  405a68:	420a      	tst	r2, r1
  405a6a:	d00e      	beq.n	405a8a <__gethex+0x234>
  405a6c:	454b      	cmp	r3, r9
  405a6e:	dc02      	bgt.n	405a76 <__gethex+0x220>
  405a70:	f04f 0902 	mov.w	r9, #2
  405a74:	e009      	b.n	405a8a <__gethex+0x234>
  405a76:	1eb9      	subs	r1, r7, #2
  405a78:	4628      	mov	r0, r5
  405a7a:	f000 fe69 	bl	406750 <__any_on>
  405a7e:	2800      	cmp	r0, #0
  405a80:	d0f6      	beq.n	405a70 <__gethex+0x21a>
  405a82:	f04f 0903 	mov.w	r9, #3
  405a86:	e000      	b.n	405a8a <__gethex+0x234>
  405a88:	4681      	mov	r9, r0
  405a8a:	4639      	mov	r1, r7
  405a8c:	4628      	mov	r0, r5
  405a8e:	f7ff fe97 	bl	4057c0 <rshift>
  405a92:	443c      	add	r4, r7
  405a94:	e00c      	b.n	405ab0 <__gethex+0x25a>
  405a96:	da09      	bge.n	405aac <__gethex+0x256>
  405a98:	1a37      	subs	r7, r6, r0
  405a9a:	4629      	mov	r1, r5
  405a9c:	463a      	mov	r2, r7
  405a9e:	9802      	ldr	r0, [sp, #8]
  405aa0:	f000 fc88 	bl	4063b4 <__lshift>
  405aa4:	1be4      	subs	r4, r4, r7
  405aa6:	4605      	mov	r5, r0
  405aa8:	f100 0a14 	add.w	sl, r0, #20
  405aac:	f04f 0900 	mov.w	r9, #0
  405ab0:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405ab4:	429c      	cmp	r4, r3
  405ab6:	dd08      	ble.n	405aca <__gethex+0x274>
  405ab8:	9802      	ldr	r0, [sp, #8]
  405aba:	4629      	mov	r1, r5
  405abc:	f000 fab5 	bl	40602a <_Bfree>
  405ac0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405ac2:	2300      	movs	r3, #0
  405ac4:	6013      	str	r3, [r2, #0]
  405ac6:	20a3      	movs	r0, #163	; 0xa3
  405ac8:	e0e2      	b.n	405c90 <__gethex+0x43a>
  405aca:	f8d8 0004 	ldr.w	r0, [r8, #4]
  405ace:	4284      	cmp	r4, r0
  405ad0:	da53      	bge.n	405b7a <__gethex+0x324>
  405ad2:	1b04      	subs	r4, r0, r4
  405ad4:	42a6      	cmp	r6, r4
  405ad6:	dc2e      	bgt.n	405b36 <__gethex+0x2e0>
  405ad8:	f8d8 300c 	ldr.w	r3, [r8, #12]
  405adc:	2b02      	cmp	r3, #2
  405ade:	d01a      	beq.n	405b16 <__gethex+0x2c0>
  405ae0:	2b03      	cmp	r3, #3
  405ae2:	d01c      	beq.n	405b1e <__gethex+0x2c8>
  405ae4:	2b01      	cmp	r3, #1
  405ae6:	d11d      	bne.n	405b24 <__gethex+0x2ce>
  405ae8:	42a6      	cmp	r6, r4
  405aea:	d11b      	bne.n	405b24 <__gethex+0x2ce>
  405aec:	2e01      	cmp	r6, #1
  405aee:	dc0b      	bgt.n	405b08 <__gethex+0x2b2>
  405af0:	9a06      	ldr	r2, [sp, #24]
  405af2:	f8d8 3004 	ldr.w	r3, [r8, #4]
  405af6:	6013      	str	r3, [r2, #0]
  405af8:	2301      	movs	r3, #1
  405afa:	612b      	str	r3, [r5, #16]
  405afc:	f8ca 3000 	str.w	r3, [sl]
  405b00:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405b02:	2062      	movs	r0, #98	; 0x62
  405b04:	601d      	str	r5, [r3, #0]
  405b06:	e0c3      	b.n	405c90 <__gethex+0x43a>
  405b08:	1e71      	subs	r1, r6, #1
  405b0a:	4628      	mov	r0, r5
  405b0c:	f000 fe20 	bl	406750 <__any_on>
  405b10:	2800      	cmp	r0, #0
  405b12:	d1ed      	bne.n	405af0 <__gethex+0x29a>
  405b14:	e006      	b.n	405b24 <__gethex+0x2ce>
  405b16:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b18:	2b00      	cmp	r3, #0
  405b1a:	d0e9      	beq.n	405af0 <__gethex+0x29a>
  405b1c:	e002      	b.n	405b24 <__gethex+0x2ce>
  405b1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b20:	2b00      	cmp	r3, #0
  405b22:	d1e5      	bne.n	405af0 <__gethex+0x29a>
  405b24:	9802      	ldr	r0, [sp, #8]
  405b26:	4629      	mov	r1, r5
  405b28:	f000 fa7f 	bl	40602a <_Bfree>
  405b2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405b2e:	2300      	movs	r3, #0
  405b30:	6013      	str	r3, [r2, #0]
  405b32:	2050      	movs	r0, #80	; 0x50
  405b34:	e0ac      	b.n	405c90 <__gethex+0x43a>
  405b36:	1e67      	subs	r7, r4, #1
  405b38:	f1b9 0f00 	cmp.w	r9, #0
  405b3c:	d106      	bne.n	405b4c <__gethex+0x2f6>
  405b3e:	b13f      	cbz	r7, 405b50 <__gethex+0x2fa>
  405b40:	4639      	mov	r1, r7
  405b42:	4628      	mov	r0, r5
  405b44:	f000 fe04 	bl	406750 <__any_on>
  405b48:	4681      	mov	r9, r0
  405b4a:	e001      	b.n	405b50 <__gethex+0x2fa>
  405b4c:	f04f 0901 	mov.w	r9, #1
  405b50:	117a      	asrs	r2, r7, #5
  405b52:	2301      	movs	r3, #1
  405b54:	f007 071f 	and.w	r7, r7, #31
  405b58:	fa03 f707 	lsl.w	r7, r3, r7
  405b5c:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  405b60:	4621      	mov	r1, r4
  405b62:	421f      	tst	r7, r3
  405b64:	4628      	mov	r0, r5
  405b66:	bf18      	it	ne
  405b68:	f049 0902 	orrne.w	r9, r9, #2
  405b6c:	1b36      	subs	r6, r6, r4
  405b6e:	f7ff fe27 	bl	4057c0 <rshift>
  405b72:	2702      	movs	r7, #2
  405b74:	f8d8 4004 	ldr.w	r4, [r8, #4]
  405b78:	e000      	b.n	405b7c <__gethex+0x326>
  405b7a:	2701      	movs	r7, #1
  405b7c:	f1b9 0f00 	cmp.w	r9, #0
  405b80:	f000 8081 	beq.w	405c86 <__gethex+0x430>
  405b84:	f8d8 300c 	ldr.w	r3, [r8, #12]
  405b88:	2b02      	cmp	r3, #2
  405b8a:	d00e      	beq.n	405baa <__gethex+0x354>
  405b8c:	2b03      	cmp	r3, #3
  405b8e:	d010      	beq.n	405bb2 <__gethex+0x35c>
  405b90:	2b01      	cmp	r3, #1
  405b92:	d176      	bne.n	405c82 <__gethex+0x42c>
  405b94:	f019 0f02 	tst.w	r9, #2
  405b98:	d073      	beq.n	405c82 <__gethex+0x42c>
  405b9a:	f8da 0000 	ldr.w	r0, [sl]
  405b9e:	ea49 0900 	orr.w	r9, r9, r0
  405ba2:	f019 0f01 	tst.w	r9, #1
  405ba6:	d107      	bne.n	405bb8 <__gethex+0x362>
  405ba8:	e06b      	b.n	405c82 <__gethex+0x42c>
  405baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405bac:	f1c3 0301 	rsb	r3, r3, #1
  405bb0:	9315      	str	r3, [sp, #84]	; 0x54
  405bb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405bb4:	2b00      	cmp	r3, #0
  405bb6:	d064      	beq.n	405c82 <__gethex+0x42c>
  405bb8:	f8d5 a010 	ldr.w	sl, [r5, #16]
  405bbc:	f105 0314 	add.w	r3, r5, #20
  405bc0:	ea4f 098a 	mov.w	r9, sl, lsl #2
  405bc4:	eb03 0109 	add.w	r1, r3, r9
  405bc8:	2000      	movs	r0, #0
  405bca:	681a      	ldr	r2, [r3, #0]
  405bcc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
  405bd0:	d002      	beq.n	405bd8 <__gethex+0x382>
  405bd2:	3201      	adds	r2, #1
  405bd4:	601a      	str	r2, [r3, #0]
  405bd6:	e020      	b.n	405c1a <__gethex+0x3c4>
  405bd8:	f843 0b04 	str.w	r0, [r3], #4
  405bdc:	4299      	cmp	r1, r3
  405bde:	d8f4      	bhi.n	405bca <__gethex+0x374>
  405be0:	68ab      	ldr	r3, [r5, #8]
  405be2:	459a      	cmp	sl, r3
  405be4:	db12      	blt.n	405c0c <__gethex+0x3b6>
  405be6:	6869      	ldr	r1, [r5, #4]
  405be8:	9802      	ldr	r0, [sp, #8]
  405bea:	3101      	adds	r1, #1
  405bec:	f000 f9e8 	bl	405fc0 <_Balloc>
  405bf0:	692a      	ldr	r2, [r5, #16]
  405bf2:	3202      	adds	r2, #2
  405bf4:	f105 010c 	add.w	r1, r5, #12
  405bf8:	4683      	mov	fp, r0
  405bfa:	0092      	lsls	r2, r2, #2
  405bfc:	300c      	adds	r0, #12
  405bfe:	f7fd f8b7 	bl	402d70 <memcpy>
  405c02:	4629      	mov	r1, r5
  405c04:	9802      	ldr	r0, [sp, #8]
  405c06:	f000 fa10 	bl	40602a <_Bfree>
  405c0a:	465d      	mov	r5, fp
  405c0c:	692b      	ldr	r3, [r5, #16]
  405c0e:	1c5a      	adds	r2, r3, #1
  405c10:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  405c14:	612a      	str	r2, [r5, #16]
  405c16:	2201      	movs	r2, #1
  405c18:	615a      	str	r2, [r3, #20]
  405c1a:	2f02      	cmp	r7, #2
  405c1c:	f105 0214 	add.w	r2, r5, #20
  405c20:	d111      	bne.n	405c46 <__gethex+0x3f0>
  405c22:	f8d8 3000 	ldr.w	r3, [r8]
  405c26:	3b01      	subs	r3, #1
  405c28:	429e      	cmp	r6, r3
  405c2a:	d127      	bne.n	405c7c <__gethex+0x426>
  405c2c:	1171      	asrs	r1, r6, #5
  405c2e:	2301      	movs	r3, #1
  405c30:	f006 061f 	and.w	r6, r6, #31
  405c34:	fa03 f606 	lsl.w	r6, r3, r6
  405c38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  405c3c:	421e      	tst	r6, r3
  405c3e:	bf0c      	ite	eq
  405c40:	2702      	moveq	r7, #2
  405c42:	2701      	movne	r7, #1
  405c44:	e01a      	b.n	405c7c <__gethex+0x426>
  405c46:	692b      	ldr	r3, [r5, #16]
  405c48:	459a      	cmp	sl, r3
  405c4a:	da0a      	bge.n	405c62 <__gethex+0x40c>
  405c4c:	2101      	movs	r1, #1
  405c4e:	4628      	mov	r0, r5
  405c50:	f7ff fdb6 	bl	4057c0 <rshift>
  405c54:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405c58:	3401      	adds	r4, #1
  405c5a:	429c      	cmp	r4, r3
  405c5c:	f73f af2c 	bgt.w	405ab8 <__gethex+0x262>
  405c60:	e00b      	b.n	405c7a <__gethex+0x424>
  405c62:	f016 061f 	ands.w	r6, r6, #31
  405c66:	d008      	beq.n	405c7a <__gethex+0x424>
  405c68:	4491      	add	r9, r2
  405c6a:	f1c6 0620 	rsb	r6, r6, #32
  405c6e:	f859 0c04 	ldr.w	r0, [r9, #-4]
  405c72:	f000 fa6a 	bl	40614a <__hi0bits>
  405c76:	42b0      	cmp	r0, r6
  405c78:	dbe8      	blt.n	405c4c <__gethex+0x3f6>
  405c7a:	2701      	movs	r7, #1
  405c7c:	f047 0720 	orr.w	r7, r7, #32
  405c80:	e001      	b.n	405c86 <__gethex+0x430>
  405c82:	f047 0710 	orr.w	r7, r7, #16
  405c86:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405c88:	601d      	str	r5, [r3, #0]
  405c8a:	9b06      	ldr	r3, [sp, #24]
  405c8c:	4638      	mov	r0, r7
  405c8e:	601c      	str	r4, [r3, #0]
  405c90:	b00b      	add	sp, #44	; 0x2c
  405c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405c96 <L_shift>:
  405c96:	f1c2 0208 	rsb	r2, r2, #8
  405c9a:	0092      	lsls	r2, r2, #2
  405c9c:	b570      	push	{r4, r5, r6, lr}
  405c9e:	f1c2 0620 	rsb	r6, r2, #32
  405ca2:	6843      	ldr	r3, [r0, #4]
  405ca4:	6805      	ldr	r5, [r0, #0]
  405ca6:	fa03 f406 	lsl.w	r4, r3, r6
  405caa:	432c      	orrs	r4, r5
  405cac:	40d3      	lsrs	r3, r2
  405cae:	6004      	str	r4, [r0, #0]
  405cb0:	f840 3f04 	str.w	r3, [r0, #4]!
  405cb4:	4288      	cmp	r0, r1
  405cb6:	d3f4      	bcc.n	405ca2 <L_shift+0xc>
  405cb8:	bd70      	pop	{r4, r5, r6, pc}

00405cba <__match>:
  405cba:	b530      	push	{r4, r5, lr}
  405cbc:	6803      	ldr	r3, [r0, #0]
  405cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
  405cc2:	3301      	adds	r3, #1
  405cc4:	b14c      	cbz	r4, 405cda <__match+0x20>
  405cc6:	781a      	ldrb	r2, [r3, #0]
  405cc8:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
  405ccc:	2d19      	cmp	r5, #25
  405cce:	bf98      	it	ls
  405cd0:	3220      	addls	r2, #32
  405cd2:	42a2      	cmp	r2, r4
  405cd4:	d0f3      	beq.n	405cbe <__match+0x4>
  405cd6:	2000      	movs	r0, #0
  405cd8:	bd30      	pop	{r4, r5, pc}
  405cda:	6003      	str	r3, [r0, #0]
  405cdc:	2001      	movs	r0, #1
  405cde:	bd30      	pop	{r4, r5, pc}

00405ce0 <__hexnan>:
  405ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405ce4:	680b      	ldr	r3, [r1, #0]
  405ce6:	f8d0 b000 	ldr.w	fp, [r0]
  405cea:	115e      	asrs	r6, r3, #5
  405cec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  405cf0:	f013 031f 	ands.w	r3, r3, #31
  405cf4:	b085      	sub	sp, #20
  405cf6:	bf18      	it	ne
  405cf8:	3604      	addne	r6, #4
  405cfa:	1f35      	subs	r5, r6, #4
  405cfc:	4617      	mov	r7, r2
  405cfe:	2200      	movs	r2, #0
  405d00:	4682      	mov	sl, r0
  405d02:	9301      	str	r3, [sp, #4]
  405d04:	f846 2c04 	str.w	r2, [r6, #-4]
  405d08:	46a8      	mov	r8, r5
  405d0a:	462c      	mov	r4, r5
  405d0c:	9200      	str	r2, [sp, #0]
  405d0e:	4691      	mov	r9, r2
  405d10:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
  405d14:	2900      	cmp	r1, #0
  405d16:	d03c      	beq.n	405d92 <__hexnan+0xb2>
  405d18:	4608      	mov	r0, r1
  405d1a:	9203      	str	r2, [sp, #12]
  405d1c:	9102      	str	r1, [sp, #8]
  405d1e:	f7ff fd85 	bl	40582c <__hexdig_fun>
  405d22:	9a03      	ldr	r2, [sp, #12]
  405d24:	bb00      	cbnz	r0, 405d68 <__hexnan+0x88>
  405d26:	9902      	ldr	r1, [sp, #8]
  405d28:	2920      	cmp	r1, #32
  405d2a:	d816      	bhi.n	405d5a <__hexnan+0x7a>
  405d2c:	9b00      	ldr	r3, [sp, #0]
  405d2e:	4599      	cmp	r9, r3
  405d30:	ddee      	ble.n	405d10 <__hexnan+0x30>
  405d32:	4544      	cmp	r4, r8
  405d34:	d205      	bcs.n	405d42 <__hexnan+0x62>
  405d36:	2a07      	cmp	r2, #7
  405d38:	dc03      	bgt.n	405d42 <__hexnan+0x62>
  405d3a:	4641      	mov	r1, r8
  405d3c:	4620      	mov	r0, r4
  405d3e:	f7ff ffaa 	bl	405c96 <L_shift>
  405d42:	42bc      	cmp	r4, r7
  405d44:	d923      	bls.n	405d8e <__hexnan+0xae>
  405d46:	2300      	movs	r3, #0
  405d48:	f1a4 0804 	sub.w	r8, r4, #4
  405d4c:	f844 3c04 	str.w	r3, [r4, #-4]
  405d50:	f8cd 9000 	str.w	r9, [sp]
  405d54:	4644      	mov	r4, r8
  405d56:	461a      	mov	r2, r3
  405d58:	e7da      	b.n	405d10 <__hexnan+0x30>
  405d5a:	2929      	cmp	r1, #41	; 0x29
  405d5c:	d148      	bne.n	405df0 <__hexnan+0x110>
  405d5e:	f10b 0301 	add.w	r3, fp, #1
  405d62:	f8ca 3000 	str.w	r3, [sl]
  405d66:	e014      	b.n	405d92 <__hexnan+0xb2>
  405d68:	3201      	adds	r2, #1
  405d6a:	2a08      	cmp	r2, #8
  405d6c:	f109 0901 	add.w	r9, r9, #1
  405d70:	dd06      	ble.n	405d80 <__hexnan+0xa0>
  405d72:	42bc      	cmp	r4, r7
  405d74:	d9cc      	bls.n	405d10 <__hexnan+0x30>
  405d76:	2300      	movs	r3, #0
  405d78:	f844 3c04 	str.w	r3, [r4, #-4]
  405d7c:	2201      	movs	r2, #1
  405d7e:	3c04      	subs	r4, #4
  405d80:	6821      	ldr	r1, [r4, #0]
  405d82:	f000 000f 	and.w	r0, r0, #15
  405d86:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
  405d8a:	6020      	str	r0, [r4, #0]
  405d8c:	e7c0      	b.n	405d10 <__hexnan+0x30>
  405d8e:	2208      	movs	r2, #8
  405d90:	e7be      	b.n	405d10 <__hexnan+0x30>
  405d92:	f1b9 0f00 	cmp.w	r9, #0
  405d96:	d02b      	beq.n	405df0 <__hexnan+0x110>
  405d98:	4544      	cmp	r4, r8
  405d9a:	d205      	bcs.n	405da8 <__hexnan+0xc8>
  405d9c:	2a07      	cmp	r2, #7
  405d9e:	dc03      	bgt.n	405da8 <__hexnan+0xc8>
  405da0:	4641      	mov	r1, r8
  405da2:	4620      	mov	r0, r4
  405da4:	f7ff ff77 	bl	405c96 <L_shift>
  405da8:	42bc      	cmp	r4, r7
  405daa:	d90c      	bls.n	405dc6 <__hexnan+0xe6>
  405dac:	463b      	mov	r3, r7
  405dae:	f854 2b04 	ldr.w	r2, [r4], #4
  405db2:	f843 2b04 	str.w	r2, [r3], #4
  405db6:	42a5      	cmp	r5, r4
  405db8:	d2f9      	bcs.n	405dae <__hexnan+0xce>
  405dba:	2200      	movs	r2, #0
  405dbc:	f843 2b04 	str.w	r2, [r3], #4
  405dc0:	429d      	cmp	r5, r3
  405dc2:	d2fb      	bcs.n	405dbc <__hexnan+0xdc>
  405dc4:	e00b      	b.n	405dde <__hexnan+0xfe>
  405dc6:	9b01      	ldr	r3, [sp, #4]
  405dc8:	b14b      	cbz	r3, 405dde <__hexnan+0xfe>
  405dca:	f1c3 0220 	rsb	r2, r3, #32
  405dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  405dd2:	40d3      	lsrs	r3, r2
  405dd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
  405dd8:	4013      	ands	r3, r2
  405dda:	f846 3c04 	str.w	r3, [r6, #-4]
  405dde:	682b      	ldr	r3, [r5, #0]
  405de0:	b943      	cbnz	r3, 405df4 <__hexnan+0x114>
  405de2:	42bd      	cmp	r5, r7
  405de4:	d102      	bne.n	405dec <__hexnan+0x10c>
  405de6:	2301      	movs	r3, #1
  405de8:	602b      	str	r3, [r5, #0]
  405dea:	e003      	b.n	405df4 <__hexnan+0x114>
  405dec:	3d04      	subs	r5, #4
  405dee:	e7f6      	b.n	405dde <__hexnan+0xfe>
  405df0:	2004      	movs	r0, #4
  405df2:	e000      	b.n	405df6 <__hexnan+0x116>
  405df4:	2005      	movs	r0, #5
  405df6:	b005      	add	sp, #20
  405df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405dfc <__locale_ctype_ptr_l>:
  405dfc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  405e00:	4770      	bx	lr

00405e02 <__localeconv_l>:
  405e02:	30f0      	adds	r0, #240	; 0xf0
  405e04:	4770      	bx	lr
	...

00405e08 <_localeconv_r>:
  405e08:	4b04      	ldr	r3, [pc, #16]	; (405e1c <_localeconv_r+0x14>)
  405e0a:	681b      	ldr	r3, [r3, #0]
  405e0c:	6a18      	ldr	r0, [r3, #32]
  405e0e:	4b04      	ldr	r3, [pc, #16]	; (405e20 <_localeconv_r+0x18>)
  405e10:	2800      	cmp	r0, #0
  405e12:	bf08      	it	eq
  405e14:	4618      	moveq	r0, r3
  405e16:	30f0      	adds	r0, #240	; 0xf0
  405e18:	4770      	bx	lr
  405e1a:	bf00      	nop
  405e1c:	20000078 	.word	0x20000078
  405e20:	2000007c 	.word	0x2000007c

00405e24 <__swhatbuf_r>:
  405e24:	b570      	push	{r4, r5, r6, lr}
  405e26:	460e      	mov	r6, r1
  405e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405e2c:	2900      	cmp	r1, #0
  405e2e:	b090      	sub	sp, #64	; 0x40
  405e30:	4614      	mov	r4, r2
  405e32:	461d      	mov	r5, r3
  405e34:	da06      	bge.n	405e44 <__swhatbuf_r+0x20>
  405e36:	2300      	movs	r3, #0
  405e38:	602b      	str	r3, [r5, #0]
  405e3a:	89b3      	ldrh	r3, [r6, #12]
  405e3c:	061a      	lsls	r2, r3, #24
  405e3e:	d50e      	bpl.n	405e5e <__swhatbuf_r+0x3a>
  405e40:	2340      	movs	r3, #64	; 0x40
  405e42:	e00e      	b.n	405e62 <__swhatbuf_r+0x3e>
  405e44:	aa01      	add	r2, sp, #4
  405e46:	f000 ff3b 	bl	406cc0 <_fstat_r>
  405e4a:	2800      	cmp	r0, #0
  405e4c:	dbf3      	blt.n	405e36 <__swhatbuf_r+0x12>
  405e4e:	9a02      	ldr	r2, [sp, #8]
  405e50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405e54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  405e58:	425a      	negs	r2, r3
  405e5a:	415a      	adcs	r2, r3
  405e5c:	602a      	str	r2, [r5, #0]
  405e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405e62:	2000      	movs	r0, #0
  405e64:	6023      	str	r3, [r4, #0]
  405e66:	b010      	add	sp, #64	; 0x40
  405e68:	bd70      	pop	{r4, r5, r6, pc}
	...

00405e6c <__smakebuf_r>:
  405e6c:	898b      	ldrh	r3, [r1, #12]
  405e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  405e70:	079e      	lsls	r6, r3, #30
  405e72:	4605      	mov	r5, r0
  405e74:	460c      	mov	r4, r1
  405e76:	d410      	bmi.n	405e9a <__smakebuf_r+0x2e>
  405e78:	ab01      	add	r3, sp, #4
  405e7a:	466a      	mov	r2, sp
  405e7c:	f7ff ffd2 	bl	405e24 <__swhatbuf_r>
  405e80:	9900      	ldr	r1, [sp, #0]
  405e82:	4606      	mov	r6, r0
  405e84:	4628      	mov	r0, r5
  405e86:	f000 fce1 	bl	40684c <_malloc_r>
  405e8a:	b968      	cbnz	r0, 405ea8 <__smakebuf_r+0x3c>
  405e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e90:	059a      	lsls	r2, r3, #22
  405e92:	d422      	bmi.n	405eda <__smakebuf_r+0x6e>
  405e94:	f043 0302 	orr.w	r3, r3, #2
  405e98:	81a3      	strh	r3, [r4, #12]
  405e9a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  405e9e:	6023      	str	r3, [r4, #0]
  405ea0:	6123      	str	r3, [r4, #16]
  405ea2:	2301      	movs	r3, #1
  405ea4:	6163      	str	r3, [r4, #20]
  405ea6:	e018      	b.n	405eda <__smakebuf_r+0x6e>
  405ea8:	4b0d      	ldr	r3, [pc, #52]	; (405ee0 <__smakebuf_r+0x74>)
  405eaa:	62ab      	str	r3, [r5, #40]	; 0x28
  405eac:	89a3      	ldrh	r3, [r4, #12]
  405eae:	6020      	str	r0, [r4, #0]
  405eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405eb4:	81a3      	strh	r3, [r4, #12]
  405eb6:	9b00      	ldr	r3, [sp, #0]
  405eb8:	6163      	str	r3, [r4, #20]
  405eba:	9b01      	ldr	r3, [sp, #4]
  405ebc:	6120      	str	r0, [r4, #16]
  405ebe:	b14b      	cbz	r3, 405ed4 <__smakebuf_r+0x68>
  405ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405ec4:	4628      	mov	r0, r5
  405ec6:	f000 ff0d 	bl	406ce4 <_isatty_r>
  405eca:	b118      	cbz	r0, 405ed4 <__smakebuf_r+0x68>
  405ecc:	89a3      	ldrh	r3, [r4, #12]
  405ece:	f043 0301 	orr.w	r3, r3, #1
  405ed2:	81a3      	strh	r3, [r4, #12]
  405ed4:	89a0      	ldrh	r0, [r4, #12]
  405ed6:	4330      	orrs	r0, r6
  405ed8:	81a0      	strh	r0, [r4, #12]
  405eda:	b002      	add	sp, #8
  405edc:	bd70      	pop	{r4, r5, r6, pc}
  405ede:	bf00      	nop
  405ee0:	0040562d 	.word	0x0040562d

00405ee4 <malloc>:
  405ee4:	4b02      	ldr	r3, [pc, #8]	; (405ef0 <malloc+0xc>)
  405ee6:	4601      	mov	r1, r0
  405ee8:	6818      	ldr	r0, [r3, #0]
  405eea:	f000 bcaf 	b.w	40684c <_malloc_r>
  405eee:	bf00      	nop
  405ef0:	20000078 	.word	0x20000078

00405ef4 <__ascii_mbtowc>:
  405ef4:	b082      	sub	sp, #8
  405ef6:	b901      	cbnz	r1, 405efa <__ascii_mbtowc+0x6>
  405ef8:	a901      	add	r1, sp, #4
  405efa:	b13a      	cbz	r2, 405f0c <__ascii_mbtowc+0x18>
  405efc:	b143      	cbz	r3, 405f10 <__ascii_mbtowc+0x1c>
  405efe:	7813      	ldrb	r3, [r2, #0]
  405f00:	600b      	str	r3, [r1, #0]
  405f02:	7812      	ldrb	r2, [r2, #0]
  405f04:	1c10      	adds	r0, r2, #0
  405f06:	bf18      	it	ne
  405f08:	2001      	movne	r0, #1
  405f0a:	e003      	b.n	405f14 <__ascii_mbtowc+0x20>
  405f0c:	4610      	mov	r0, r2
  405f0e:	e001      	b.n	405f14 <__ascii_mbtowc+0x20>
  405f10:	f06f 0001 	mvn.w	r0, #1
  405f14:	b002      	add	sp, #8
  405f16:	4770      	bx	lr
	...

00405f20 <memchr>:
  405f20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f24:	2a10      	cmp	r2, #16
  405f26:	db2b      	blt.n	405f80 <memchr+0x60>
  405f28:	f010 0f07 	tst.w	r0, #7
  405f2c:	d008      	beq.n	405f40 <memchr+0x20>
  405f2e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f32:	3a01      	subs	r2, #1
  405f34:	428b      	cmp	r3, r1
  405f36:	d02d      	beq.n	405f94 <memchr+0x74>
  405f38:	f010 0f07 	tst.w	r0, #7
  405f3c:	b342      	cbz	r2, 405f90 <memchr+0x70>
  405f3e:	d1f6      	bne.n	405f2e <memchr+0xe>
  405f40:	b4f0      	push	{r4, r5, r6, r7}
  405f42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405f46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405f4a:	f022 0407 	bic.w	r4, r2, #7
  405f4e:	f07f 0700 	mvns.w	r7, #0
  405f52:	2300      	movs	r3, #0
  405f54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405f58:	3c08      	subs	r4, #8
  405f5a:	ea85 0501 	eor.w	r5, r5, r1
  405f5e:	ea86 0601 	eor.w	r6, r6, r1
  405f62:	fa85 f547 	uadd8	r5, r5, r7
  405f66:	faa3 f587 	sel	r5, r3, r7
  405f6a:	fa86 f647 	uadd8	r6, r6, r7
  405f6e:	faa5 f687 	sel	r6, r5, r7
  405f72:	b98e      	cbnz	r6, 405f98 <memchr+0x78>
  405f74:	d1ee      	bne.n	405f54 <memchr+0x34>
  405f76:	bcf0      	pop	{r4, r5, r6, r7}
  405f78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f7c:	f002 0207 	and.w	r2, r2, #7
  405f80:	b132      	cbz	r2, 405f90 <memchr+0x70>
  405f82:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f86:	3a01      	subs	r2, #1
  405f88:	ea83 0301 	eor.w	r3, r3, r1
  405f8c:	b113      	cbz	r3, 405f94 <memchr+0x74>
  405f8e:	d1f8      	bne.n	405f82 <memchr+0x62>
  405f90:	2000      	movs	r0, #0
  405f92:	4770      	bx	lr
  405f94:	3801      	subs	r0, #1
  405f96:	4770      	bx	lr
  405f98:	2d00      	cmp	r5, #0
  405f9a:	bf06      	itte	eq
  405f9c:	4635      	moveq	r5, r6
  405f9e:	3803      	subeq	r0, #3
  405fa0:	3807      	subne	r0, #7
  405fa2:	f015 0f01 	tst.w	r5, #1
  405fa6:	d107      	bne.n	405fb8 <memchr+0x98>
  405fa8:	3001      	adds	r0, #1
  405faa:	f415 7f80 	tst.w	r5, #256	; 0x100
  405fae:	bf02      	ittt	eq
  405fb0:	3001      	addeq	r0, #1
  405fb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405fb6:	3001      	addeq	r0, #1
  405fb8:	bcf0      	pop	{r4, r5, r6, r7}
  405fba:	3801      	subs	r0, #1
  405fbc:	4770      	bx	lr
  405fbe:	bf00      	nop

00405fc0 <_Balloc>:
  405fc0:	b570      	push	{r4, r5, r6, lr}
  405fc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
  405fc4:	4604      	mov	r4, r0
  405fc6:	460e      	mov	r6, r1
  405fc8:	b93d      	cbnz	r5, 405fda <_Balloc+0x1a>
  405fca:	2010      	movs	r0, #16
  405fcc:	f7ff ff8a 	bl	405ee4 <malloc>
  405fd0:	6260      	str	r0, [r4, #36]	; 0x24
  405fd2:	6045      	str	r5, [r0, #4]
  405fd4:	6085      	str	r5, [r0, #8]
  405fd6:	6005      	str	r5, [r0, #0]
  405fd8:	60c5      	str	r5, [r0, #12]
  405fda:	6a65      	ldr	r5, [r4, #36]	; 0x24
  405fdc:	68eb      	ldr	r3, [r5, #12]
  405fde:	b143      	cbz	r3, 405ff2 <_Balloc+0x32>
  405fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405fe2:	68db      	ldr	r3, [r3, #12]
  405fe4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  405fe8:	b178      	cbz	r0, 40600a <_Balloc+0x4a>
  405fea:	6802      	ldr	r2, [r0, #0]
  405fec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  405ff0:	e017      	b.n	406022 <_Balloc+0x62>
  405ff2:	2221      	movs	r2, #33	; 0x21
  405ff4:	2104      	movs	r1, #4
  405ff6:	4620      	mov	r0, r4
  405ff8:	f000 fbcc 	bl	406794 <_calloc_r>
  405ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405ffe:	60e8      	str	r0, [r5, #12]
  406000:	68db      	ldr	r3, [r3, #12]
  406002:	2b00      	cmp	r3, #0
  406004:	d1ec      	bne.n	405fe0 <_Balloc+0x20>
  406006:	2000      	movs	r0, #0
  406008:	bd70      	pop	{r4, r5, r6, pc}
  40600a:	2101      	movs	r1, #1
  40600c:	fa01 f506 	lsl.w	r5, r1, r6
  406010:	1d6a      	adds	r2, r5, #5
  406012:	0092      	lsls	r2, r2, #2
  406014:	4620      	mov	r0, r4
  406016:	f000 fbbd 	bl	406794 <_calloc_r>
  40601a:	2800      	cmp	r0, #0
  40601c:	d0f3      	beq.n	406006 <_Balloc+0x46>
  40601e:	6046      	str	r6, [r0, #4]
  406020:	6085      	str	r5, [r0, #8]
  406022:	2300      	movs	r3, #0
  406024:	6103      	str	r3, [r0, #16]
  406026:	60c3      	str	r3, [r0, #12]
  406028:	bd70      	pop	{r4, r5, r6, pc}

0040602a <_Bfree>:
  40602a:	b570      	push	{r4, r5, r6, lr}
  40602c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40602e:	4606      	mov	r6, r0
  406030:	460d      	mov	r5, r1
  406032:	b93c      	cbnz	r4, 406044 <_Bfree+0x1a>
  406034:	2010      	movs	r0, #16
  406036:	f7ff ff55 	bl	405ee4 <malloc>
  40603a:	6270      	str	r0, [r6, #36]	; 0x24
  40603c:	6044      	str	r4, [r0, #4]
  40603e:	6084      	str	r4, [r0, #8]
  406040:	6004      	str	r4, [r0, #0]
  406042:	60c4      	str	r4, [r0, #12]
  406044:	b13d      	cbz	r5, 406056 <_Bfree+0x2c>
  406046:	6a73      	ldr	r3, [r6, #36]	; 0x24
  406048:	686a      	ldr	r2, [r5, #4]
  40604a:	68db      	ldr	r3, [r3, #12]
  40604c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406050:	6029      	str	r1, [r5, #0]
  406052:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406056:	bd70      	pop	{r4, r5, r6, pc}

00406058 <__multadd>:
  406058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40605c:	690d      	ldr	r5, [r1, #16]
  40605e:	461f      	mov	r7, r3
  406060:	4606      	mov	r6, r0
  406062:	460c      	mov	r4, r1
  406064:	f101 0e14 	add.w	lr, r1, #20
  406068:	2300      	movs	r3, #0
  40606a:	f8de 0000 	ldr.w	r0, [lr]
  40606e:	b281      	uxth	r1, r0
  406070:	fb02 7101 	mla	r1, r2, r1, r7
  406074:	0c0f      	lsrs	r7, r1, #16
  406076:	0c00      	lsrs	r0, r0, #16
  406078:	fb02 7000 	mla	r0, r2, r0, r7
  40607c:	b289      	uxth	r1, r1
  40607e:	3301      	adds	r3, #1
  406080:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  406084:	429d      	cmp	r5, r3
  406086:	ea4f 4710 	mov.w	r7, r0, lsr #16
  40608a:	f84e 1b04 	str.w	r1, [lr], #4
  40608e:	dcec      	bgt.n	40606a <__multadd+0x12>
  406090:	b1d7      	cbz	r7, 4060c8 <__multadd+0x70>
  406092:	68a3      	ldr	r3, [r4, #8]
  406094:	429d      	cmp	r5, r3
  406096:	db12      	blt.n	4060be <__multadd+0x66>
  406098:	6861      	ldr	r1, [r4, #4]
  40609a:	4630      	mov	r0, r6
  40609c:	3101      	adds	r1, #1
  40609e:	f7ff ff8f 	bl	405fc0 <_Balloc>
  4060a2:	6922      	ldr	r2, [r4, #16]
  4060a4:	3202      	adds	r2, #2
  4060a6:	f104 010c 	add.w	r1, r4, #12
  4060aa:	4680      	mov	r8, r0
  4060ac:	0092      	lsls	r2, r2, #2
  4060ae:	300c      	adds	r0, #12
  4060b0:	f7fc fe5e 	bl	402d70 <memcpy>
  4060b4:	4621      	mov	r1, r4
  4060b6:	4630      	mov	r0, r6
  4060b8:	f7ff ffb7 	bl	40602a <_Bfree>
  4060bc:	4644      	mov	r4, r8
  4060be:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4060c2:	3501      	adds	r5, #1
  4060c4:	615f      	str	r7, [r3, #20]
  4060c6:	6125      	str	r5, [r4, #16]
  4060c8:	4620      	mov	r0, r4
  4060ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004060ce <__s2b>:
  4060ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4060d2:	460c      	mov	r4, r1
  4060d4:	4615      	mov	r5, r2
  4060d6:	461f      	mov	r7, r3
  4060d8:	2209      	movs	r2, #9
  4060da:	3308      	adds	r3, #8
  4060dc:	4606      	mov	r6, r0
  4060de:	fb93 f3f2 	sdiv	r3, r3, r2
  4060e2:	2100      	movs	r1, #0
  4060e4:	2201      	movs	r2, #1
  4060e6:	429a      	cmp	r2, r3
  4060e8:	da02      	bge.n	4060f0 <__s2b+0x22>
  4060ea:	0052      	lsls	r2, r2, #1
  4060ec:	3101      	adds	r1, #1
  4060ee:	e7fa      	b.n	4060e6 <__s2b+0x18>
  4060f0:	4630      	mov	r0, r6
  4060f2:	f7ff ff65 	bl	405fc0 <_Balloc>
  4060f6:	9b08      	ldr	r3, [sp, #32]
  4060f8:	6143      	str	r3, [r0, #20]
  4060fa:	2d09      	cmp	r5, #9
  4060fc:	f04f 0301 	mov.w	r3, #1
  406100:	6103      	str	r3, [r0, #16]
  406102:	dd11      	ble.n	406128 <__s2b+0x5a>
  406104:	f104 0809 	add.w	r8, r4, #9
  406108:	46c1      	mov	r9, r8
  40610a:	442c      	add	r4, r5
  40610c:	f819 3b01 	ldrb.w	r3, [r9], #1
  406110:	4601      	mov	r1, r0
  406112:	3b30      	subs	r3, #48	; 0x30
  406114:	220a      	movs	r2, #10
  406116:	4630      	mov	r0, r6
  406118:	f7ff ff9e 	bl	406058 <__multadd>
  40611c:	45a1      	cmp	r9, r4
  40611e:	d1f5      	bne.n	40610c <__s2b+0x3e>
  406120:	eb08 0405 	add.w	r4, r8, r5
  406124:	3c08      	subs	r4, #8
  406126:	e001      	b.n	40612c <__s2b+0x5e>
  406128:	340a      	adds	r4, #10
  40612a:	2509      	movs	r5, #9
  40612c:	1b2d      	subs	r5, r5, r4
  40612e:	1963      	adds	r3, r4, r5
  406130:	429f      	cmp	r7, r3
  406132:	dd08      	ble.n	406146 <__s2b+0x78>
  406134:	f814 3b01 	ldrb.w	r3, [r4], #1
  406138:	4601      	mov	r1, r0
  40613a:	3b30      	subs	r3, #48	; 0x30
  40613c:	220a      	movs	r2, #10
  40613e:	4630      	mov	r0, r6
  406140:	f7ff ff8a 	bl	406058 <__multadd>
  406144:	e7f3      	b.n	40612e <__s2b+0x60>
  406146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040614a <__hi0bits>:
  40614a:	0c03      	lsrs	r3, r0, #16
  40614c:	041b      	lsls	r3, r3, #16
  40614e:	b913      	cbnz	r3, 406156 <__hi0bits+0xc>
  406150:	0400      	lsls	r0, r0, #16
  406152:	2310      	movs	r3, #16
  406154:	e000      	b.n	406158 <__hi0bits+0xe>
  406156:	2300      	movs	r3, #0
  406158:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40615c:	bf04      	itt	eq
  40615e:	0200      	lsleq	r0, r0, #8
  406160:	3308      	addeq	r3, #8
  406162:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  406166:	bf04      	itt	eq
  406168:	0100      	lsleq	r0, r0, #4
  40616a:	3304      	addeq	r3, #4
  40616c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  406170:	bf04      	itt	eq
  406172:	0080      	lsleq	r0, r0, #2
  406174:	3302      	addeq	r3, #2
  406176:	2800      	cmp	r0, #0
  406178:	db03      	blt.n	406182 <__hi0bits+0x38>
  40617a:	0042      	lsls	r2, r0, #1
  40617c:	d503      	bpl.n	406186 <__hi0bits+0x3c>
  40617e:	1c58      	adds	r0, r3, #1
  406180:	4770      	bx	lr
  406182:	4618      	mov	r0, r3
  406184:	4770      	bx	lr
  406186:	2020      	movs	r0, #32
  406188:	4770      	bx	lr

0040618a <__lo0bits>:
  40618a:	6803      	ldr	r3, [r0, #0]
  40618c:	f013 0207 	ands.w	r2, r3, #7
  406190:	d00b      	beq.n	4061aa <__lo0bits+0x20>
  406192:	07d9      	lsls	r1, r3, #31
  406194:	d422      	bmi.n	4061dc <__lo0bits+0x52>
  406196:	079a      	lsls	r2, r3, #30
  406198:	bf4b      	itete	mi
  40619a:	085b      	lsrmi	r3, r3, #1
  40619c:	089b      	lsrpl	r3, r3, #2
  40619e:	6003      	strmi	r3, [r0, #0]
  4061a0:	6003      	strpl	r3, [r0, #0]
  4061a2:	bf4c      	ite	mi
  4061a4:	2001      	movmi	r0, #1
  4061a6:	2002      	movpl	r0, #2
  4061a8:	4770      	bx	lr
  4061aa:	b299      	uxth	r1, r3
  4061ac:	b909      	cbnz	r1, 4061b2 <__lo0bits+0x28>
  4061ae:	0c1b      	lsrs	r3, r3, #16
  4061b0:	2210      	movs	r2, #16
  4061b2:	f013 0fff 	tst.w	r3, #255	; 0xff
  4061b6:	bf04      	itt	eq
  4061b8:	0a1b      	lsreq	r3, r3, #8
  4061ba:	3208      	addeq	r2, #8
  4061bc:	0719      	lsls	r1, r3, #28
  4061be:	bf04      	itt	eq
  4061c0:	091b      	lsreq	r3, r3, #4
  4061c2:	3204      	addeq	r2, #4
  4061c4:	0799      	lsls	r1, r3, #30
  4061c6:	bf04      	itt	eq
  4061c8:	089b      	lsreq	r3, r3, #2
  4061ca:	3202      	addeq	r2, #2
  4061cc:	07d9      	lsls	r1, r3, #31
  4061ce:	d402      	bmi.n	4061d6 <__lo0bits+0x4c>
  4061d0:	085b      	lsrs	r3, r3, #1
  4061d2:	d005      	beq.n	4061e0 <__lo0bits+0x56>
  4061d4:	3201      	adds	r2, #1
  4061d6:	6003      	str	r3, [r0, #0]
  4061d8:	4610      	mov	r0, r2
  4061da:	4770      	bx	lr
  4061dc:	2000      	movs	r0, #0
  4061de:	4770      	bx	lr
  4061e0:	2020      	movs	r0, #32
  4061e2:	4770      	bx	lr

004061e4 <__i2b>:
  4061e4:	b510      	push	{r4, lr}
  4061e6:	460c      	mov	r4, r1
  4061e8:	2101      	movs	r1, #1
  4061ea:	f7ff fee9 	bl	405fc0 <_Balloc>
  4061ee:	2201      	movs	r2, #1
  4061f0:	6144      	str	r4, [r0, #20]
  4061f2:	6102      	str	r2, [r0, #16]
  4061f4:	bd10      	pop	{r4, pc}

004061f6 <__multiply>:
  4061f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061fa:	4614      	mov	r4, r2
  4061fc:	690a      	ldr	r2, [r1, #16]
  4061fe:	6923      	ldr	r3, [r4, #16]
  406200:	429a      	cmp	r2, r3
  406202:	bfb8      	it	lt
  406204:	460b      	movlt	r3, r1
  406206:	4688      	mov	r8, r1
  406208:	bfbc      	itt	lt
  40620a:	46a0      	movlt	r8, r4
  40620c:	461c      	movlt	r4, r3
  40620e:	f8d8 7010 	ldr.w	r7, [r8, #16]
  406212:	f8d4 9010 	ldr.w	r9, [r4, #16]
  406216:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40621a:	f8d8 1004 	ldr.w	r1, [r8, #4]
  40621e:	eb07 0609 	add.w	r6, r7, r9
  406222:	429e      	cmp	r6, r3
  406224:	bfc8      	it	gt
  406226:	3101      	addgt	r1, #1
  406228:	f7ff feca 	bl	405fc0 <_Balloc>
  40622c:	f100 0514 	add.w	r5, r0, #20
  406230:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  406234:	462b      	mov	r3, r5
  406236:	2200      	movs	r2, #0
  406238:	4563      	cmp	r3, ip
  40623a:	d202      	bcs.n	406242 <__multiply+0x4c>
  40623c:	f843 2b04 	str.w	r2, [r3], #4
  406240:	e7fa      	b.n	406238 <__multiply+0x42>
  406242:	f104 0214 	add.w	r2, r4, #20
  406246:	f108 0114 	add.w	r1, r8, #20
  40624a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  40624e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  406252:	9300      	str	r3, [sp, #0]
  406254:	9b00      	ldr	r3, [sp, #0]
  406256:	9201      	str	r2, [sp, #4]
  406258:	4293      	cmp	r3, r2
  40625a:	d957      	bls.n	40630c <__multiply+0x116>
  40625c:	f8b2 b000 	ldrh.w	fp, [r2]
  406260:	f1bb 0f00 	cmp.w	fp, #0
  406264:	d023      	beq.n	4062ae <__multiply+0xb8>
  406266:	4689      	mov	r9, r1
  406268:	46ae      	mov	lr, r5
  40626a:	f04f 0800 	mov.w	r8, #0
  40626e:	f859 4b04 	ldr.w	r4, [r9], #4
  406272:	f8be a000 	ldrh.w	sl, [lr]
  406276:	b2a3      	uxth	r3, r4
  406278:	fb0b a303 	mla	r3, fp, r3, sl
  40627c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  406280:	f8de 4000 	ldr.w	r4, [lr]
  406284:	4443      	add	r3, r8
  406286:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40628a:	fb0b 840a 	mla	r4, fp, sl, r8
  40628e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  406292:	46f2      	mov	sl, lr
  406294:	b29b      	uxth	r3, r3
  406296:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  40629a:	454f      	cmp	r7, r9
  40629c:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4062a0:	f84a 3b04 	str.w	r3, [sl], #4
  4062a4:	d901      	bls.n	4062aa <__multiply+0xb4>
  4062a6:	46d6      	mov	lr, sl
  4062a8:	e7e1      	b.n	40626e <__multiply+0x78>
  4062aa:	f8ce 8004 	str.w	r8, [lr, #4]
  4062ae:	9b01      	ldr	r3, [sp, #4]
  4062b0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  4062b4:	3204      	adds	r2, #4
  4062b6:	f1ba 0f00 	cmp.w	sl, #0
  4062ba:	d021      	beq.n	406300 <__multiply+0x10a>
  4062bc:	682b      	ldr	r3, [r5, #0]
  4062be:	462c      	mov	r4, r5
  4062c0:	4689      	mov	r9, r1
  4062c2:	f04f 0800 	mov.w	r8, #0
  4062c6:	f8b9 e000 	ldrh.w	lr, [r9]
  4062ca:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  4062ce:	fb0a be0e 	mla	lr, sl, lr, fp
  4062d2:	44f0      	add	r8, lr
  4062d4:	46a3      	mov	fp, r4
  4062d6:	b29b      	uxth	r3, r3
  4062d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4062dc:	f84b 3b04 	str.w	r3, [fp], #4
  4062e0:	f859 3b04 	ldr.w	r3, [r9], #4
  4062e4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  4062e8:	0c1b      	lsrs	r3, r3, #16
  4062ea:	fb0a e303 	mla	r3, sl, r3, lr
  4062ee:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  4062f2:	454f      	cmp	r7, r9
  4062f4:	ea4f 4813 	mov.w	r8, r3, lsr #16
  4062f8:	d901      	bls.n	4062fe <__multiply+0x108>
  4062fa:	465c      	mov	r4, fp
  4062fc:	e7e3      	b.n	4062c6 <__multiply+0xd0>
  4062fe:	6063      	str	r3, [r4, #4]
  406300:	3504      	adds	r5, #4
  406302:	e7a7      	b.n	406254 <__multiply+0x5e>
  406304:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  406308:	b913      	cbnz	r3, 406310 <__multiply+0x11a>
  40630a:	3e01      	subs	r6, #1
  40630c:	2e00      	cmp	r6, #0
  40630e:	dcf9      	bgt.n	406304 <__multiply+0x10e>
  406310:	6106      	str	r6, [r0, #16]
  406312:	b003      	add	sp, #12
  406314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406318 <__pow5mult>:
  406318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40631c:	4615      	mov	r5, r2
  40631e:	f012 0203 	ands.w	r2, r2, #3
  406322:	4606      	mov	r6, r0
  406324:	460f      	mov	r7, r1
  406326:	d007      	beq.n	406338 <__pow5mult+0x20>
  406328:	3a01      	subs	r2, #1
  40632a:	4c21      	ldr	r4, [pc, #132]	; (4063b0 <__pow5mult+0x98>)
  40632c:	2300      	movs	r3, #0
  40632e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  406332:	f7ff fe91 	bl	406058 <__multadd>
  406336:	4607      	mov	r7, r0
  406338:	10ad      	asrs	r5, r5, #2
  40633a:	d036      	beq.n	4063aa <__pow5mult+0x92>
  40633c:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40633e:	b93c      	cbnz	r4, 406350 <__pow5mult+0x38>
  406340:	2010      	movs	r0, #16
  406342:	f7ff fdcf 	bl	405ee4 <malloc>
  406346:	6270      	str	r0, [r6, #36]	; 0x24
  406348:	6044      	str	r4, [r0, #4]
  40634a:	6084      	str	r4, [r0, #8]
  40634c:	6004      	str	r4, [r0, #0]
  40634e:	60c4      	str	r4, [r0, #12]
  406350:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  406354:	f8d8 4008 	ldr.w	r4, [r8, #8]
  406358:	b94c      	cbnz	r4, 40636e <__pow5mult+0x56>
  40635a:	f240 2171 	movw	r1, #625	; 0x271
  40635e:	4630      	mov	r0, r6
  406360:	f7ff ff40 	bl	4061e4 <__i2b>
  406364:	2300      	movs	r3, #0
  406366:	f8c8 0008 	str.w	r0, [r8, #8]
  40636a:	4604      	mov	r4, r0
  40636c:	6003      	str	r3, [r0, #0]
  40636e:	f04f 0800 	mov.w	r8, #0
  406372:	07eb      	lsls	r3, r5, #31
  406374:	d50a      	bpl.n	40638c <__pow5mult+0x74>
  406376:	4639      	mov	r1, r7
  406378:	4622      	mov	r2, r4
  40637a:	4630      	mov	r0, r6
  40637c:	f7ff ff3b 	bl	4061f6 <__multiply>
  406380:	4639      	mov	r1, r7
  406382:	4681      	mov	r9, r0
  406384:	4630      	mov	r0, r6
  406386:	f7ff fe50 	bl	40602a <_Bfree>
  40638a:	464f      	mov	r7, r9
  40638c:	106d      	asrs	r5, r5, #1
  40638e:	d00c      	beq.n	4063aa <__pow5mult+0x92>
  406390:	6820      	ldr	r0, [r4, #0]
  406392:	b108      	cbz	r0, 406398 <__pow5mult+0x80>
  406394:	4604      	mov	r4, r0
  406396:	e7ec      	b.n	406372 <__pow5mult+0x5a>
  406398:	4622      	mov	r2, r4
  40639a:	4621      	mov	r1, r4
  40639c:	4630      	mov	r0, r6
  40639e:	f7ff ff2a 	bl	4061f6 <__multiply>
  4063a2:	6020      	str	r0, [r4, #0]
  4063a4:	f8c0 8000 	str.w	r8, [r0]
  4063a8:	e7f4      	b.n	406394 <__pow5mult+0x7c>
  4063aa:	4638      	mov	r0, r7
  4063ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4063b0:	004083e0 	.word	0x004083e0

004063b4 <__lshift>:
  4063b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4063b8:	460c      	mov	r4, r1
  4063ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4063be:	6926      	ldr	r6, [r4, #16]
  4063c0:	6849      	ldr	r1, [r1, #4]
  4063c2:	68a3      	ldr	r3, [r4, #8]
  4063c4:	4456      	add	r6, sl
  4063c6:	4607      	mov	r7, r0
  4063c8:	4691      	mov	r9, r2
  4063ca:	1c75      	adds	r5, r6, #1
  4063cc:	42ab      	cmp	r3, r5
  4063ce:	da02      	bge.n	4063d6 <__lshift+0x22>
  4063d0:	3101      	adds	r1, #1
  4063d2:	005b      	lsls	r3, r3, #1
  4063d4:	e7fa      	b.n	4063cc <__lshift+0x18>
  4063d6:	4638      	mov	r0, r7
  4063d8:	f7ff fdf2 	bl	405fc0 <_Balloc>
  4063dc:	2300      	movs	r3, #0
  4063de:	4680      	mov	r8, r0
  4063e0:	f100 0114 	add.w	r1, r0, #20
  4063e4:	461a      	mov	r2, r3
  4063e6:	4553      	cmp	r3, sl
  4063e8:	da03      	bge.n	4063f2 <__lshift+0x3e>
  4063ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4063ee:	3301      	adds	r3, #1
  4063f0:	e7f9      	b.n	4063e6 <__lshift+0x32>
  4063f2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  4063f6:	6920      	ldr	r0, [r4, #16]
  4063f8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4063fc:	f019 091f 	ands.w	r9, r9, #31
  406400:	f104 0114 	add.w	r1, r4, #20
  406404:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  406408:	d014      	beq.n	406434 <__lshift+0x80>
  40640a:	f1c9 0c20 	rsb	ip, r9, #32
  40640e:	2200      	movs	r2, #0
  406410:	6808      	ldr	r0, [r1, #0]
  406412:	fa00 f009 	lsl.w	r0, r0, r9
  406416:	4302      	orrs	r2, r0
  406418:	469a      	mov	sl, r3
  40641a:	f843 2b04 	str.w	r2, [r3], #4
  40641e:	f851 2b04 	ldr.w	r2, [r1], #4
  406422:	458e      	cmp	lr, r1
  406424:	fa22 f20c 	lsr.w	r2, r2, ip
  406428:	d8f2      	bhi.n	406410 <__lshift+0x5c>
  40642a:	f8ca 2004 	str.w	r2, [sl, #4]
  40642e:	b142      	cbz	r2, 406442 <__lshift+0x8e>
  406430:	1cb5      	adds	r5, r6, #2
  406432:	e006      	b.n	406442 <__lshift+0x8e>
  406434:	3b04      	subs	r3, #4
  406436:	f851 2b04 	ldr.w	r2, [r1], #4
  40643a:	f843 2f04 	str.w	r2, [r3, #4]!
  40643e:	458e      	cmp	lr, r1
  406440:	d8f9      	bhi.n	406436 <__lshift+0x82>
  406442:	3d01      	subs	r5, #1
  406444:	4638      	mov	r0, r7
  406446:	f8c8 5010 	str.w	r5, [r8, #16]
  40644a:	4621      	mov	r1, r4
  40644c:	f7ff fded 	bl	40602a <_Bfree>
  406450:	4640      	mov	r0, r8
  406452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00406456 <__mcmp>:
  406456:	6903      	ldr	r3, [r0, #16]
  406458:	690a      	ldr	r2, [r1, #16]
  40645a:	1a9b      	subs	r3, r3, r2
  40645c:	b510      	push	{r4, lr}
  40645e:	d111      	bne.n	406484 <__mcmp+0x2e>
  406460:	0092      	lsls	r2, r2, #2
  406462:	3014      	adds	r0, #20
  406464:	3114      	adds	r1, #20
  406466:	1883      	adds	r3, r0, r2
  406468:	440a      	add	r2, r1
  40646a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40646e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  406472:	428c      	cmp	r4, r1
  406474:	d002      	beq.n	40647c <__mcmp+0x26>
  406476:	d307      	bcc.n	406488 <__mcmp+0x32>
  406478:	2001      	movs	r0, #1
  40647a:	bd10      	pop	{r4, pc}
  40647c:	4298      	cmp	r0, r3
  40647e:	d3f4      	bcc.n	40646a <__mcmp+0x14>
  406480:	2000      	movs	r0, #0
  406482:	bd10      	pop	{r4, pc}
  406484:	4618      	mov	r0, r3
  406486:	bd10      	pop	{r4, pc}
  406488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40648c:	bd10      	pop	{r4, pc}

0040648e <__mdiff>:
  40648e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406492:	460c      	mov	r4, r1
  406494:	4607      	mov	r7, r0
  406496:	4611      	mov	r1, r2
  406498:	4620      	mov	r0, r4
  40649a:	4615      	mov	r5, r2
  40649c:	f7ff ffdb 	bl	406456 <__mcmp>
  4064a0:	1e06      	subs	r6, r0, #0
  4064a2:	d108      	bne.n	4064b6 <__mdiff+0x28>
  4064a4:	4631      	mov	r1, r6
  4064a6:	4638      	mov	r0, r7
  4064a8:	f7ff fd8a 	bl	405fc0 <_Balloc>
  4064ac:	2301      	movs	r3, #1
  4064ae:	6103      	str	r3, [r0, #16]
  4064b0:	6146      	str	r6, [r0, #20]
  4064b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4064b6:	bfbc      	itt	lt
  4064b8:	4623      	movlt	r3, r4
  4064ba:	462c      	movlt	r4, r5
  4064bc:	4638      	mov	r0, r7
  4064be:	6861      	ldr	r1, [r4, #4]
  4064c0:	bfba      	itte	lt
  4064c2:	461d      	movlt	r5, r3
  4064c4:	2601      	movlt	r6, #1
  4064c6:	2600      	movge	r6, #0
  4064c8:	f7ff fd7a 	bl	405fc0 <_Balloc>
  4064cc:	692b      	ldr	r3, [r5, #16]
  4064ce:	60c6      	str	r6, [r0, #12]
  4064d0:	6926      	ldr	r6, [r4, #16]
  4064d2:	f105 0914 	add.w	r9, r5, #20
  4064d6:	3414      	adds	r4, #20
  4064d8:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  4064dc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  4064e0:	f100 0514 	add.w	r5, r0, #20
  4064e4:	f04f 0c00 	mov.w	ip, #0
  4064e8:	f854 3b04 	ldr.w	r3, [r4], #4
  4064ec:	f859 2b04 	ldr.w	r2, [r9], #4
  4064f0:	fa1c f183 	uxtah	r1, ip, r3
  4064f4:	fa1f fe82 	uxth.w	lr, r2
  4064f8:	0c12      	lsrs	r2, r2, #16
  4064fa:	ebce 0101 	rsb	r1, lr, r1
  4064fe:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  406502:	eb03 4321 	add.w	r3, r3, r1, asr #16
  406506:	b289      	uxth	r1, r1
  406508:	ea4f 4c23 	mov.w	ip, r3, asr #16
  40650c:	45c8      	cmp	r8, r9
  40650e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  406512:	46a6      	mov	lr, r4
  406514:	f845 3b04 	str.w	r3, [r5], #4
  406518:	d8e6      	bhi.n	4064e8 <__mdiff+0x5a>
  40651a:	45be      	cmp	lr, r7
  40651c:	d20e      	bcs.n	40653c <__mdiff+0xae>
  40651e:	f85e 1b04 	ldr.w	r1, [lr], #4
  406522:	fa1c f281 	uxtah	r2, ip, r1
  406526:	1413      	asrs	r3, r2, #16
  406528:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  40652c:	b292      	uxth	r2, r2
  40652e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406532:	ea4f 4c23 	mov.w	ip, r3, asr #16
  406536:	f845 2b04 	str.w	r2, [r5], #4
  40653a:	e7ee      	b.n	40651a <__mdiff+0x8c>
  40653c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  406540:	b90b      	cbnz	r3, 406546 <__mdiff+0xb8>
  406542:	3e01      	subs	r6, #1
  406544:	e7fa      	b.n	40653c <__mdiff+0xae>
  406546:	6106      	str	r6, [r0, #16]
  406548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040654c <__ulp>:
  40654c:	4b10      	ldr	r3, [pc, #64]	; (406590 <__ulp+0x44>)
  40654e:	400b      	ands	r3, r1
  406550:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  406554:	2b00      	cmp	r3, #0
  406556:	dd02      	ble.n	40655e <__ulp+0x12>
  406558:	2000      	movs	r0, #0
  40655a:	4619      	mov	r1, r3
  40655c:	4770      	bx	lr
  40655e:	425b      	negs	r3, r3
  406560:	151b      	asrs	r3, r3, #20
  406562:	2b13      	cmp	r3, #19
  406564:	f04f 0000 	mov.w	r0, #0
  406568:	f04f 0100 	mov.w	r1, #0
  40656c:	dc04      	bgt.n	406578 <__ulp+0x2c>
  40656e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  406572:	fa42 f103 	asr.w	r1, r2, r3
  406576:	4770      	bx	lr
  406578:	3b14      	subs	r3, #20
  40657a:	2b1e      	cmp	r3, #30
  40657c:	f04f 0201 	mov.w	r2, #1
  406580:	bfda      	itte	le
  406582:	f1c3 031f 	rsble	r3, r3, #31
  406586:	fa02 f303 	lslle.w	r3, r2, r3
  40658a:	4613      	movgt	r3, r2
  40658c:	4618      	mov	r0, r3
  40658e:	4770      	bx	lr
  406590:	7ff00000 	.word	0x7ff00000

00406594 <__b2d>:
  406594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406596:	6905      	ldr	r5, [r0, #16]
  406598:	f100 0614 	add.w	r6, r0, #20
  40659c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  4065a0:	1f2f      	subs	r7, r5, #4
  4065a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
  4065a6:	4620      	mov	r0, r4
  4065a8:	f7ff fdcf 	bl	40614a <__hi0bits>
  4065ac:	f1c0 0320 	rsb	r3, r0, #32
  4065b0:	280a      	cmp	r0, #10
  4065b2:	600b      	str	r3, [r1, #0]
  4065b4:	dc14      	bgt.n	4065e0 <__b2d+0x4c>
  4065b6:	f1c0 0e0b 	rsb	lr, r0, #11
  4065ba:	fa24 f10e 	lsr.w	r1, r4, lr
  4065be:	42be      	cmp	r6, r7
  4065c0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
  4065c4:	bf34      	ite	cc
  4065c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
  4065ca:	2100      	movcs	r1, #0
  4065cc:	3015      	adds	r0, #21
  4065ce:	fa04 f000 	lsl.w	r0, r4, r0
  4065d2:	fa21 f10e 	lsr.w	r1, r1, lr
  4065d6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  4065da:	ea40 0201 	orr.w	r2, r0, r1
  4065de:	e023      	b.n	406628 <__b2d+0x94>
  4065e0:	42be      	cmp	r6, r7
  4065e2:	bf3a      	itte	cc
  4065e4:	f1a5 0708 	subcc.w	r7, r5, #8
  4065e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
  4065ec:	2100      	movcs	r1, #0
  4065ee:	380b      	subs	r0, #11
  4065f0:	d015      	beq.n	40661e <__b2d+0x8a>
  4065f2:	4084      	lsls	r4, r0
  4065f4:	f1c0 0520 	rsb	r5, r0, #32
  4065f8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
  4065fc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
  406600:	42b7      	cmp	r7, r6
  406602:	fa21 fe05 	lsr.w	lr, r1, r5
  406606:	ea44 030e 	orr.w	r3, r4, lr
  40660a:	bf8c      	ite	hi
  40660c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
  406610:	2400      	movls	r4, #0
  406612:	fa01 f000 	lsl.w	r0, r1, r0
  406616:	40ec      	lsrs	r4, r5
  406618:	ea40 0204 	orr.w	r2, r0, r4
  40661c:	e004      	b.n	406628 <__b2d+0x94>
  40661e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
  406622:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  406626:	460a      	mov	r2, r1
  406628:	4610      	mov	r0, r2
  40662a:	4619      	mov	r1, r3
  40662c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040662e <__d2b>:
  40662e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  406632:	2101      	movs	r1, #1
  406634:	461c      	mov	r4, r3
  406636:	4690      	mov	r8, r2
  406638:	9e08      	ldr	r6, [sp, #32]
  40663a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40663c:	f7ff fcc0 	bl	405fc0 <_Balloc>
  406640:	f3c4 0213 	ubfx	r2, r4, #0, #20
  406644:	f3c4 540a 	ubfx	r4, r4, #20, #11
  406648:	4607      	mov	r7, r0
  40664a:	b10c      	cbz	r4, 406650 <__d2b+0x22>
  40664c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  406650:	9201      	str	r2, [sp, #4]
  406652:	f1b8 0f00 	cmp.w	r8, #0
  406656:	d019      	beq.n	40668c <__d2b+0x5e>
  406658:	a802      	add	r0, sp, #8
  40665a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40665e:	f7ff fd94 	bl	40618a <__lo0bits>
  406662:	9b00      	ldr	r3, [sp, #0]
  406664:	b148      	cbz	r0, 40667a <__d2b+0x4c>
  406666:	9a01      	ldr	r2, [sp, #4]
  406668:	f1c0 0120 	rsb	r1, r0, #32
  40666c:	fa02 f101 	lsl.w	r1, r2, r1
  406670:	430b      	orrs	r3, r1
  406672:	40c2      	lsrs	r2, r0
  406674:	617b      	str	r3, [r7, #20]
  406676:	9201      	str	r2, [sp, #4]
  406678:	e000      	b.n	40667c <__d2b+0x4e>
  40667a:	617b      	str	r3, [r7, #20]
  40667c:	9b01      	ldr	r3, [sp, #4]
  40667e:	61bb      	str	r3, [r7, #24]
  406680:	2b00      	cmp	r3, #0
  406682:	bf14      	ite	ne
  406684:	2102      	movne	r1, #2
  406686:	2101      	moveq	r1, #1
  406688:	6139      	str	r1, [r7, #16]
  40668a:	e007      	b.n	40669c <__d2b+0x6e>
  40668c:	a801      	add	r0, sp, #4
  40668e:	f7ff fd7c 	bl	40618a <__lo0bits>
  406692:	9b01      	ldr	r3, [sp, #4]
  406694:	617b      	str	r3, [r7, #20]
  406696:	2101      	movs	r1, #1
  406698:	6139      	str	r1, [r7, #16]
  40669a:	3020      	adds	r0, #32
  40669c:	b134      	cbz	r4, 4066ac <__d2b+0x7e>
  40669e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  4066a2:	4404      	add	r4, r0
  4066a4:	6034      	str	r4, [r6, #0]
  4066a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4066aa:	e009      	b.n	4066c0 <__d2b+0x92>
  4066ac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  4066b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4066b4:	6030      	str	r0, [r6, #0]
  4066b6:	6918      	ldr	r0, [r3, #16]
  4066b8:	f7ff fd47 	bl	40614a <__hi0bits>
  4066bc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4066c0:	6028      	str	r0, [r5, #0]
  4066c2:	4638      	mov	r0, r7
  4066c4:	b002      	add	sp, #8
  4066c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004066ca <__ratio>:
  4066ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4066ce:	4688      	mov	r8, r1
  4066d0:	4669      	mov	r1, sp
  4066d2:	4681      	mov	r9, r0
  4066d4:	f7ff ff5e 	bl	406594 <__b2d>
  4066d8:	460d      	mov	r5, r1
  4066da:	4604      	mov	r4, r0
  4066dc:	a901      	add	r1, sp, #4
  4066de:	4640      	mov	r0, r8
  4066e0:	f7ff ff58 	bl	406594 <__b2d>
  4066e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
  4066e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
  4066ec:	460f      	mov	r7, r1
  4066ee:	1a9a      	subs	r2, r3, r2
  4066f0:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4066f4:	1ac9      	subs	r1, r1, r3
  4066f6:	eb01 1342 	add.w	r3, r1, r2, lsl #5
  4066fa:	2b00      	cmp	r3, #0
  4066fc:	bfc8      	it	gt
  4066fe:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
  406702:	4606      	mov	r6, r0
  406704:	bfd8      	it	le
  406706:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
  40670a:	4632      	mov	r2, r6
  40670c:	463b      	mov	r3, r7
  40670e:	4620      	mov	r0, r4
  406710:	4629      	mov	r1, r5
  406712:	f000 fdff 	bl	407314 <__aeabi_ddiv>
  406716:	b003      	add	sp, #12
  406718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0040671c <__copybits>:
  40671c:	3901      	subs	r1, #1
  40671e:	b510      	push	{r4, lr}
  406720:	1149      	asrs	r1, r1, #5
  406722:	6914      	ldr	r4, [r2, #16]
  406724:	3101      	adds	r1, #1
  406726:	f102 0314 	add.w	r3, r2, #20
  40672a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  40672e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  406732:	42a3      	cmp	r3, r4
  406734:	4602      	mov	r2, r0
  406736:	d204      	bcs.n	406742 <__copybits+0x26>
  406738:	f853 2b04 	ldr.w	r2, [r3], #4
  40673c:	f840 2b04 	str.w	r2, [r0], #4
  406740:	e7f7      	b.n	406732 <__copybits+0x16>
  406742:	2300      	movs	r3, #0
  406744:	428a      	cmp	r2, r1
  406746:	d202      	bcs.n	40674e <__copybits+0x32>
  406748:	f842 3b04 	str.w	r3, [r2], #4
  40674c:	e7fa      	b.n	406744 <__copybits+0x28>
  40674e:	bd10      	pop	{r4, pc}

00406750 <__any_on>:
  406750:	f100 0214 	add.w	r2, r0, #20
  406754:	6900      	ldr	r0, [r0, #16]
  406756:	114b      	asrs	r3, r1, #5
  406758:	4298      	cmp	r0, r3
  40675a:	b510      	push	{r4, lr}
  40675c:	db0c      	blt.n	406778 <__any_on+0x28>
  40675e:	dd0c      	ble.n	40677a <__any_on+0x2a>
  406760:	f011 011f 	ands.w	r1, r1, #31
  406764:	d009      	beq.n	40677a <__any_on+0x2a>
  406766:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
  40676a:	fa24 f001 	lsr.w	r0, r4, r1
  40676e:	fa00 f101 	lsl.w	r1, r0, r1
  406772:	428c      	cmp	r4, r1
  406774:	d10c      	bne.n	406790 <__any_on+0x40>
  406776:	e000      	b.n	40677a <__any_on+0x2a>
  406778:	4603      	mov	r3, r0
  40677a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40677e:	4293      	cmp	r3, r2
  406780:	d904      	bls.n	40678c <__any_on+0x3c>
  406782:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  406786:	2900      	cmp	r1, #0
  406788:	d0f9      	beq.n	40677e <__any_on+0x2e>
  40678a:	e001      	b.n	406790 <__any_on+0x40>
  40678c:	2000      	movs	r0, #0
  40678e:	bd10      	pop	{r4, pc}
  406790:	2001      	movs	r0, #1
  406792:	bd10      	pop	{r4, pc}

00406794 <_calloc_r>:
  406794:	b538      	push	{r3, r4, r5, lr}
  406796:	fb02 f401 	mul.w	r4, r2, r1
  40679a:	4621      	mov	r1, r4
  40679c:	f000 f856 	bl	40684c <_malloc_r>
  4067a0:	4605      	mov	r5, r0
  4067a2:	b118      	cbz	r0, 4067ac <_calloc_r+0x18>
  4067a4:	4622      	mov	r2, r4
  4067a6:	2100      	movs	r1, #0
  4067a8:	f7fc faed 	bl	402d86 <memset>
  4067ac:	4628      	mov	r0, r5
  4067ae:	bd38      	pop	{r3, r4, r5, pc}

004067b0 <_free_r>:
  4067b0:	b538      	push	{r3, r4, r5, lr}
  4067b2:	4605      	mov	r5, r0
  4067b4:	2900      	cmp	r1, #0
  4067b6:	d046      	beq.n	406846 <_free_r+0x96>
  4067b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4067bc:	1f0c      	subs	r4, r1, #4
  4067be:	2b00      	cmp	r3, #0
  4067c0:	bfb8      	it	lt
  4067c2:	18e4      	addlt	r4, r4, r3
  4067c4:	f000 fab0 	bl	406d28 <__malloc_lock>
  4067c8:	4a1f      	ldr	r2, [pc, #124]	; (406848 <_free_r+0x98>)
  4067ca:	6813      	ldr	r3, [r2, #0]
  4067cc:	4611      	mov	r1, r2
  4067ce:	b913      	cbnz	r3, 4067d6 <_free_r+0x26>
  4067d0:	6063      	str	r3, [r4, #4]
  4067d2:	6014      	str	r4, [r2, #0]
  4067d4:	e032      	b.n	40683c <_free_r+0x8c>
  4067d6:	42a3      	cmp	r3, r4
  4067d8:	d90e      	bls.n	4067f8 <_free_r+0x48>
  4067da:	6822      	ldr	r2, [r4, #0]
  4067dc:	18a0      	adds	r0, r4, r2
  4067de:	4283      	cmp	r3, r0
  4067e0:	bf04      	itt	eq
  4067e2:	6818      	ldreq	r0, [r3, #0]
  4067e4:	685b      	ldreq	r3, [r3, #4]
  4067e6:	6063      	str	r3, [r4, #4]
  4067e8:	bf04      	itt	eq
  4067ea:	1812      	addeq	r2, r2, r0
  4067ec:	6022      	streq	r2, [r4, #0]
  4067ee:	600c      	str	r4, [r1, #0]
  4067f0:	e024      	b.n	40683c <_free_r+0x8c>
  4067f2:	42a2      	cmp	r2, r4
  4067f4:	d803      	bhi.n	4067fe <_free_r+0x4e>
  4067f6:	4613      	mov	r3, r2
  4067f8:	685a      	ldr	r2, [r3, #4]
  4067fa:	2a00      	cmp	r2, #0
  4067fc:	d1f9      	bne.n	4067f2 <_free_r+0x42>
  4067fe:	6818      	ldr	r0, [r3, #0]
  406800:	1819      	adds	r1, r3, r0
  406802:	42a1      	cmp	r1, r4
  406804:	d10b      	bne.n	40681e <_free_r+0x6e>
  406806:	6821      	ldr	r1, [r4, #0]
  406808:	4401      	add	r1, r0
  40680a:	1858      	adds	r0, r3, r1
  40680c:	4282      	cmp	r2, r0
  40680e:	6019      	str	r1, [r3, #0]
  406810:	d114      	bne.n	40683c <_free_r+0x8c>
  406812:	6810      	ldr	r0, [r2, #0]
  406814:	6852      	ldr	r2, [r2, #4]
  406816:	605a      	str	r2, [r3, #4]
  406818:	4401      	add	r1, r0
  40681a:	6019      	str	r1, [r3, #0]
  40681c:	e00e      	b.n	40683c <_free_r+0x8c>
  40681e:	d902      	bls.n	406826 <_free_r+0x76>
  406820:	230c      	movs	r3, #12
  406822:	602b      	str	r3, [r5, #0]
  406824:	e00a      	b.n	40683c <_free_r+0x8c>
  406826:	6821      	ldr	r1, [r4, #0]
  406828:	1860      	adds	r0, r4, r1
  40682a:	4282      	cmp	r2, r0
  40682c:	bf04      	itt	eq
  40682e:	6810      	ldreq	r0, [r2, #0]
  406830:	6852      	ldreq	r2, [r2, #4]
  406832:	6062      	str	r2, [r4, #4]
  406834:	bf04      	itt	eq
  406836:	1809      	addeq	r1, r1, r0
  406838:	6021      	streq	r1, [r4, #0]
  40683a:	605c      	str	r4, [r3, #4]
  40683c:	4628      	mov	r0, r5
  40683e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406842:	f000 ba72 	b.w	406d2a <__malloc_unlock>
  406846:	bd38      	pop	{r3, r4, r5, pc}
  406848:	200004f4 	.word	0x200004f4

0040684c <_malloc_r>:
  40684c:	b570      	push	{r4, r5, r6, lr}
  40684e:	1ccd      	adds	r5, r1, #3
  406850:	f025 0503 	bic.w	r5, r5, #3
  406854:	3508      	adds	r5, #8
  406856:	2d0c      	cmp	r5, #12
  406858:	bf38      	it	cc
  40685a:	250c      	movcc	r5, #12
  40685c:	2d00      	cmp	r5, #0
  40685e:	4606      	mov	r6, r0
  406860:	db01      	blt.n	406866 <_malloc_r+0x1a>
  406862:	42a9      	cmp	r1, r5
  406864:	d902      	bls.n	40686c <_malloc_r+0x20>
  406866:	230c      	movs	r3, #12
  406868:	6033      	str	r3, [r6, #0]
  40686a:	e046      	b.n	4068fa <_malloc_r+0xae>
  40686c:	f000 fa5c 	bl	406d28 <__malloc_lock>
  406870:	4b23      	ldr	r3, [pc, #140]	; (406900 <_malloc_r+0xb4>)
  406872:	681c      	ldr	r4, [r3, #0]
  406874:	461a      	mov	r2, r3
  406876:	4621      	mov	r1, r4
  406878:	b1a1      	cbz	r1, 4068a4 <_malloc_r+0x58>
  40687a:	680b      	ldr	r3, [r1, #0]
  40687c:	1b5b      	subs	r3, r3, r5
  40687e:	d40e      	bmi.n	40689e <_malloc_r+0x52>
  406880:	2b0b      	cmp	r3, #11
  406882:	d903      	bls.n	40688c <_malloc_r+0x40>
  406884:	600b      	str	r3, [r1, #0]
  406886:	18cc      	adds	r4, r1, r3
  406888:	50cd      	str	r5, [r1, r3]
  40688a:	e01e      	b.n	4068ca <_malloc_r+0x7e>
  40688c:	428c      	cmp	r4, r1
  40688e:	bf0d      	iteet	eq
  406890:	6863      	ldreq	r3, [r4, #4]
  406892:	684b      	ldrne	r3, [r1, #4]
  406894:	6063      	strne	r3, [r4, #4]
  406896:	6013      	streq	r3, [r2, #0]
  406898:	bf18      	it	ne
  40689a:	460c      	movne	r4, r1
  40689c:	e015      	b.n	4068ca <_malloc_r+0x7e>
  40689e:	460c      	mov	r4, r1
  4068a0:	6849      	ldr	r1, [r1, #4]
  4068a2:	e7e9      	b.n	406878 <_malloc_r+0x2c>
  4068a4:	4c17      	ldr	r4, [pc, #92]	; (406904 <_malloc_r+0xb8>)
  4068a6:	6823      	ldr	r3, [r4, #0]
  4068a8:	b91b      	cbnz	r3, 4068b2 <_malloc_r+0x66>
  4068aa:	4630      	mov	r0, r6
  4068ac:	f000 f970 	bl	406b90 <_sbrk_r>
  4068b0:	6020      	str	r0, [r4, #0]
  4068b2:	4629      	mov	r1, r5
  4068b4:	4630      	mov	r0, r6
  4068b6:	f000 f96b 	bl	406b90 <_sbrk_r>
  4068ba:	1c43      	adds	r3, r0, #1
  4068bc:	d018      	beq.n	4068f0 <_malloc_r+0xa4>
  4068be:	1cc4      	adds	r4, r0, #3
  4068c0:	f024 0403 	bic.w	r4, r4, #3
  4068c4:	42a0      	cmp	r0, r4
  4068c6:	d10d      	bne.n	4068e4 <_malloc_r+0x98>
  4068c8:	6025      	str	r5, [r4, #0]
  4068ca:	4630      	mov	r0, r6
  4068cc:	f000 fa2d 	bl	406d2a <__malloc_unlock>
  4068d0:	f104 000b 	add.w	r0, r4, #11
  4068d4:	1d23      	adds	r3, r4, #4
  4068d6:	f020 0007 	bic.w	r0, r0, #7
  4068da:	1ac3      	subs	r3, r0, r3
  4068dc:	d00e      	beq.n	4068fc <_malloc_r+0xb0>
  4068de:	425a      	negs	r2, r3
  4068e0:	50e2      	str	r2, [r4, r3]
  4068e2:	bd70      	pop	{r4, r5, r6, pc}
  4068e4:	1a21      	subs	r1, r4, r0
  4068e6:	4630      	mov	r0, r6
  4068e8:	f000 f952 	bl	406b90 <_sbrk_r>
  4068ec:	3001      	adds	r0, #1
  4068ee:	d1eb      	bne.n	4068c8 <_malloc_r+0x7c>
  4068f0:	230c      	movs	r3, #12
  4068f2:	6033      	str	r3, [r6, #0]
  4068f4:	4630      	mov	r0, r6
  4068f6:	f000 fa18 	bl	406d2a <__malloc_unlock>
  4068fa:	2000      	movs	r0, #0
  4068fc:	bd70      	pop	{r4, r5, r6, pc}
  4068fe:	bf00      	nop
  406900:	200004f4 	.word	0x200004f4
  406904:	200004f0 	.word	0x200004f0

00406908 <__sfputc_r>:
  406908:	6893      	ldr	r3, [r2, #8]
  40690a:	3b01      	subs	r3, #1
  40690c:	2b00      	cmp	r3, #0
  40690e:	b410      	push	{r4}
  406910:	6093      	str	r3, [r2, #8]
  406912:	da08      	bge.n	406926 <__sfputc_r+0x1e>
  406914:	6994      	ldr	r4, [r2, #24]
  406916:	42a3      	cmp	r3, r4
  406918:	db02      	blt.n	406920 <__sfputc_r+0x18>
  40691a:	b2cb      	uxtb	r3, r1
  40691c:	2b0a      	cmp	r3, #10
  40691e:	d102      	bne.n	406926 <__sfputc_r+0x1e>
  406920:	bc10      	pop	{r4}
  406922:	f7fd bee3 	b.w	4046ec <__swbuf_r>
  406926:	6813      	ldr	r3, [r2, #0]
  406928:	1c58      	adds	r0, r3, #1
  40692a:	6010      	str	r0, [r2, #0]
  40692c:	7019      	strb	r1, [r3, #0]
  40692e:	b2c8      	uxtb	r0, r1
  406930:	bc10      	pop	{r4}
  406932:	4770      	bx	lr

00406934 <__sfputs_r>:
  406934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406936:	4606      	mov	r6, r0
  406938:	460f      	mov	r7, r1
  40693a:	4614      	mov	r4, r2
  40693c:	18d5      	adds	r5, r2, r3
  40693e:	42ac      	cmp	r4, r5
  406940:	d008      	beq.n	406954 <__sfputs_r+0x20>
  406942:	463a      	mov	r2, r7
  406944:	f814 1b01 	ldrb.w	r1, [r4], #1
  406948:	4630      	mov	r0, r6
  40694a:	f7ff ffdd 	bl	406908 <__sfputc_r>
  40694e:	1c43      	adds	r3, r0, #1
  406950:	d1f5      	bne.n	40693e <__sfputs_r+0xa>
  406952:	e000      	b.n	406956 <__sfputs_r+0x22>
  406954:	2000      	movs	r0, #0
  406956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00406958 <_vfiprintf_r>:
  406958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40695c:	b09d      	sub	sp, #116	; 0x74
  40695e:	460c      	mov	r4, r1
  406960:	4617      	mov	r7, r2
  406962:	9303      	str	r3, [sp, #12]
  406964:	4606      	mov	r6, r0
  406966:	b118      	cbz	r0, 406970 <_vfiprintf_r+0x18>
  406968:	6983      	ldr	r3, [r0, #24]
  40696a:	b90b      	cbnz	r3, 406970 <_vfiprintf_r+0x18>
  40696c:	f7fe fe9e 	bl	4056ac <__sinit>
  406970:	4b7f      	ldr	r3, [pc, #508]	; (406b70 <_vfiprintf_r+0x218>)
  406972:	429c      	cmp	r4, r3
  406974:	d101      	bne.n	40697a <_vfiprintf_r+0x22>
  406976:	6874      	ldr	r4, [r6, #4]
  406978:	e008      	b.n	40698c <_vfiprintf_r+0x34>
  40697a:	4b7e      	ldr	r3, [pc, #504]	; (406b74 <_vfiprintf_r+0x21c>)
  40697c:	429c      	cmp	r4, r3
  40697e:	d101      	bne.n	406984 <_vfiprintf_r+0x2c>
  406980:	68b4      	ldr	r4, [r6, #8]
  406982:	e003      	b.n	40698c <_vfiprintf_r+0x34>
  406984:	4b7c      	ldr	r3, [pc, #496]	; (406b78 <_vfiprintf_r+0x220>)
  406986:	429c      	cmp	r4, r3
  406988:	bf08      	it	eq
  40698a:	68f4      	ldreq	r4, [r6, #12]
  40698c:	89a3      	ldrh	r3, [r4, #12]
  40698e:	0718      	lsls	r0, r3, #28
  406990:	d50c      	bpl.n	4069ac <_vfiprintf_r+0x54>
  406992:	6923      	ldr	r3, [r4, #16]
  406994:	b153      	cbz	r3, 4069ac <_vfiprintf_r+0x54>
  406996:	2300      	movs	r3, #0
  406998:	9309      	str	r3, [sp, #36]	; 0x24
  40699a:	2320      	movs	r3, #32
  40699c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  4069a0:	2330      	movs	r3, #48	; 0x30
  4069a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4069a6:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 406b7c <_vfiprintf_r+0x224>
  4069aa:	e044      	b.n	406a36 <_vfiprintf_r+0xde>
  4069ac:	4621      	mov	r1, r4
  4069ae:	4630      	mov	r0, r6
  4069b0:	f7fd fef0 	bl	404794 <__swsetup_r>
  4069b4:	2800      	cmp	r0, #0
  4069b6:	d0ee      	beq.n	406996 <_vfiprintf_r+0x3e>
  4069b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4069bc:	e0d5      	b.n	406b6a <_vfiprintf_r+0x212>
  4069be:	9a03      	ldr	r2, [sp, #12]
  4069c0:	1d11      	adds	r1, r2, #4
  4069c2:	6812      	ldr	r2, [r2, #0]
  4069c4:	9103      	str	r1, [sp, #12]
  4069c6:	2a00      	cmp	r2, #0
  4069c8:	f280 808c 	bge.w	406ae4 <_vfiprintf_r+0x18c>
  4069cc:	4252      	negs	r2, r2
  4069ce:	f043 0002 	orr.w	r0, r3, #2
  4069d2:	9207      	str	r2, [sp, #28]
  4069d4:	9004      	str	r0, [sp, #16]
  4069d6:	f898 3000 	ldrb.w	r3, [r8]
  4069da:	2b2e      	cmp	r3, #46	; 0x2e
  4069dc:	f000 8084 	beq.w	406ae8 <_vfiprintf_r+0x190>
  4069e0:	2203      	movs	r2, #3
  4069e2:	f898 1000 	ldrb.w	r1, [r8]
  4069e6:	4865      	ldr	r0, [pc, #404]	; (406b7c <_vfiprintf_r+0x224>)
  4069e8:	f7ff fa9a 	bl	405f20 <memchr>
  4069ec:	b148      	cbz	r0, 406a02 <_vfiprintf_r+0xaa>
  4069ee:	2340      	movs	r3, #64	; 0x40
  4069f0:	ebcb 0000 	rsb	r0, fp, r0
  4069f4:	fa03 f000 	lsl.w	r0, r3, r0
  4069f8:	9b04      	ldr	r3, [sp, #16]
  4069fa:	4318      	orrs	r0, r3
  4069fc:	9004      	str	r0, [sp, #16]
  4069fe:	f108 0801 	add.w	r8, r8, #1
  406a02:	f898 1000 	ldrb.w	r1, [r8]
  406a06:	485e      	ldr	r0, [pc, #376]	; (406b80 <_vfiprintf_r+0x228>)
  406a08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  406a0c:	2206      	movs	r2, #6
  406a0e:	f108 0701 	add.w	r7, r8, #1
  406a12:	f7ff fa85 	bl	405f20 <memchr>
  406a16:	2800      	cmp	r0, #0
  406a18:	f000 8095 	beq.w	406b46 <_vfiprintf_r+0x1ee>
  406a1c:	4b59      	ldr	r3, [pc, #356]	; (406b84 <_vfiprintf_r+0x22c>)
  406a1e:	2b00      	cmp	r3, #0
  406a20:	f040 8088 	bne.w	406b34 <_vfiprintf_r+0x1dc>
  406a24:	9b03      	ldr	r3, [sp, #12]
  406a26:	3307      	adds	r3, #7
  406a28:	f023 0307 	bic.w	r3, r3, #7
  406a2c:	3308      	adds	r3, #8
  406a2e:	9303      	str	r3, [sp, #12]
  406a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a32:	4453      	add	r3, sl
  406a34:	9309      	str	r3, [sp, #36]	; 0x24
  406a36:	46b8      	mov	r8, r7
  406a38:	4645      	mov	r5, r8
  406a3a:	f815 3b01 	ldrb.w	r3, [r5], #1
  406a3e:	b91b      	cbnz	r3, 406a48 <_vfiprintf_r+0xf0>
  406a40:	ebb8 0907 	subs.w	r9, r8, r7
  406a44:	d00f      	beq.n	406a66 <_vfiprintf_r+0x10e>
  406a46:	e003      	b.n	406a50 <_vfiprintf_r+0xf8>
  406a48:	2b25      	cmp	r3, #37	; 0x25
  406a4a:	d0f9      	beq.n	406a40 <_vfiprintf_r+0xe8>
  406a4c:	46a8      	mov	r8, r5
  406a4e:	e7f3      	b.n	406a38 <_vfiprintf_r+0xe0>
  406a50:	464b      	mov	r3, r9
  406a52:	463a      	mov	r2, r7
  406a54:	4621      	mov	r1, r4
  406a56:	4630      	mov	r0, r6
  406a58:	f7ff ff6c 	bl	406934 <__sfputs_r>
  406a5c:	3001      	adds	r0, #1
  406a5e:	d07f      	beq.n	406b60 <_vfiprintf_r+0x208>
  406a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a62:	444b      	add	r3, r9
  406a64:	9309      	str	r3, [sp, #36]	; 0x24
  406a66:	f898 3000 	ldrb.w	r3, [r8]
  406a6a:	2b00      	cmp	r3, #0
  406a6c:	d078      	beq.n	406b60 <_vfiprintf_r+0x208>
  406a6e:	2300      	movs	r3, #0
  406a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  406a74:	9304      	str	r3, [sp, #16]
  406a76:	9307      	str	r3, [sp, #28]
  406a78:	9205      	str	r2, [sp, #20]
  406a7a:	9306      	str	r3, [sp, #24]
  406a7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  406a80:	931a      	str	r3, [sp, #104]	; 0x68
  406a82:	2701      	movs	r7, #1
  406a84:	2205      	movs	r2, #5
  406a86:	7829      	ldrb	r1, [r5, #0]
  406a88:	483f      	ldr	r0, [pc, #252]	; (406b88 <_vfiprintf_r+0x230>)
  406a8a:	f7ff fa49 	bl	405f20 <memchr>
  406a8e:	f105 0801 	add.w	r8, r5, #1
  406a92:	9b04      	ldr	r3, [sp, #16]
  406a94:	b138      	cbz	r0, 406aa6 <_vfiprintf_r+0x14e>
  406a96:	4a3c      	ldr	r2, [pc, #240]	; (406b88 <_vfiprintf_r+0x230>)
  406a98:	1a80      	subs	r0, r0, r2
  406a9a:	fa07 f000 	lsl.w	r0, r7, r0
  406a9e:	4318      	orrs	r0, r3
  406aa0:	9004      	str	r0, [sp, #16]
  406aa2:	4645      	mov	r5, r8
  406aa4:	e7ee      	b.n	406a84 <_vfiprintf_r+0x12c>
  406aa6:	06d9      	lsls	r1, r3, #27
  406aa8:	bf44      	itt	mi
  406aaa:	2220      	movmi	r2, #32
  406aac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  406ab0:	071a      	lsls	r2, r3, #28
  406ab2:	bf44      	itt	mi
  406ab4:	222b      	movmi	r2, #43	; 0x2b
  406ab6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  406aba:	782a      	ldrb	r2, [r5, #0]
  406abc:	2a2a      	cmp	r2, #42	; 0x2a
  406abe:	f43f af7e 	beq.w	4069be <_vfiprintf_r+0x66>
  406ac2:	9a07      	ldr	r2, [sp, #28]
  406ac4:	2100      	movs	r1, #0
  406ac6:	200a      	movs	r0, #10
  406ac8:	46a8      	mov	r8, r5
  406aca:	3501      	adds	r5, #1
  406acc:	f898 3000 	ldrb.w	r3, [r8]
  406ad0:	3b30      	subs	r3, #48	; 0x30
  406ad2:	2b09      	cmp	r3, #9
  406ad4:	d803      	bhi.n	406ade <_vfiprintf_r+0x186>
  406ad6:	fb00 3202 	mla	r2, r0, r2, r3
  406ada:	2101      	movs	r1, #1
  406adc:	e7f4      	b.n	406ac8 <_vfiprintf_r+0x170>
  406ade:	2900      	cmp	r1, #0
  406ae0:	f43f af79 	beq.w	4069d6 <_vfiprintf_r+0x7e>
  406ae4:	9207      	str	r2, [sp, #28]
  406ae6:	e776      	b.n	4069d6 <_vfiprintf_r+0x7e>
  406ae8:	f898 3001 	ldrb.w	r3, [r8, #1]
  406aec:	2b2a      	cmp	r3, #42	; 0x2a
  406aee:	d10b      	bne.n	406b08 <_vfiprintf_r+0x1b0>
  406af0:	9b03      	ldr	r3, [sp, #12]
  406af2:	1d1a      	adds	r2, r3, #4
  406af4:	681b      	ldr	r3, [r3, #0]
  406af6:	9203      	str	r2, [sp, #12]
  406af8:	2b00      	cmp	r3, #0
  406afa:	bfb8      	it	lt
  406afc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  406b00:	f108 0802 	add.w	r8, r8, #2
  406b04:	9305      	str	r3, [sp, #20]
  406b06:	e76b      	b.n	4069e0 <_vfiprintf_r+0x88>
  406b08:	2300      	movs	r3, #0
  406b0a:	9305      	str	r3, [sp, #20]
  406b0c:	f108 0001 	add.w	r0, r8, #1
  406b10:	4619      	mov	r1, r3
  406b12:	250a      	movs	r5, #10
  406b14:	4680      	mov	r8, r0
  406b16:	3001      	adds	r0, #1
  406b18:	f898 2000 	ldrb.w	r2, [r8]
  406b1c:	3a30      	subs	r2, #48	; 0x30
  406b1e:	2a09      	cmp	r2, #9
  406b20:	d803      	bhi.n	406b2a <_vfiprintf_r+0x1d2>
  406b22:	fb05 2101 	mla	r1, r5, r1, r2
  406b26:	2301      	movs	r3, #1
  406b28:	e7f4      	b.n	406b14 <_vfiprintf_r+0x1bc>
  406b2a:	2b00      	cmp	r3, #0
  406b2c:	f43f af58 	beq.w	4069e0 <_vfiprintf_r+0x88>
  406b30:	9105      	str	r1, [sp, #20]
  406b32:	e755      	b.n	4069e0 <_vfiprintf_r+0x88>
  406b34:	ab03      	add	r3, sp, #12
  406b36:	9300      	str	r3, [sp, #0]
  406b38:	4622      	mov	r2, r4
  406b3a:	4b14      	ldr	r3, [pc, #80]	; (406b8c <_vfiprintf_r+0x234>)
  406b3c:	a904      	add	r1, sp, #16
  406b3e:	4630      	mov	r0, r6
  406b40:	f7fc f9b8 	bl	402eb4 <_printf_float>
  406b44:	e007      	b.n	406b56 <_vfiprintf_r+0x1fe>
  406b46:	ab03      	add	r3, sp, #12
  406b48:	9300      	str	r3, [sp, #0]
  406b4a:	4622      	mov	r2, r4
  406b4c:	4b0f      	ldr	r3, [pc, #60]	; (406b8c <_vfiprintf_r+0x234>)
  406b4e:	a904      	add	r1, sp, #16
  406b50:	4630      	mov	r0, r6
  406b52:	f7fc fc69 	bl	403428 <_printf_i>
  406b56:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  406b5a:	4682      	mov	sl, r0
  406b5c:	f47f af68 	bne.w	406a30 <_vfiprintf_r+0xd8>
  406b60:	89a3      	ldrh	r3, [r4, #12]
  406b62:	065b      	lsls	r3, r3, #25
  406b64:	f53f af28 	bmi.w	4069b8 <_vfiprintf_r+0x60>
  406b68:	9809      	ldr	r0, [sp, #36]	; 0x24
  406b6a:	b01d      	add	sp, #116	; 0x74
  406b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b70:	00408280 	.word	0x00408280
  406b74:	004082a0 	.word	0x004082a0
  406b78:	004082c0 	.word	0x004082c0
  406b7c:	004083f2 	.word	0x004083f2
  406b80:	004083f6 	.word	0x004083f6
  406b84:	00402eb5 	.word	0x00402eb5
  406b88:	004083ec 	.word	0x004083ec
  406b8c:	00406935 	.word	0x00406935

00406b90 <_sbrk_r>:
  406b90:	b538      	push	{r3, r4, r5, lr}
  406b92:	4c06      	ldr	r4, [pc, #24]	; (406bac <_sbrk_r+0x1c>)
  406b94:	2300      	movs	r3, #0
  406b96:	4605      	mov	r5, r0
  406b98:	4608      	mov	r0, r1
  406b9a:	6023      	str	r3, [r4, #0]
  406b9c:	f7fb fcfc 	bl	402598 <_sbrk>
  406ba0:	1c43      	adds	r3, r0, #1
  406ba2:	d102      	bne.n	406baa <_sbrk_r+0x1a>
  406ba4:	6823      	ldr	r3, [r4, #0]
  406ba6:	b103      	cbz	r3, 406baa <_sbrk_r+0x1a>
  406ba8:	602b      	str	r3, [r5, #0]
  406baa:	bd38      	pop	{r3, r4, r5, pc}
  406bac:	20000870 	.word	0x20000870

00406bb0 <__sread>:
  406bb0:	b510      	push	{r4, lr}
  406bb2:	460c      	mov	r4, r1
  406bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406bb8:	f000 f8b8 	bl	406d2c <_read_r>
  406bbc:	2800      	cmp	r0, #0
  406bbe:	bfab      	itete	ge
  406bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  406bc2:	89a3      	ldrhlt	r3, [r4, #12]
  406bc4:	181b      	addge	r3, r3, r0
  406bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  406bca:	bfac      	ite	ge
  406bcc:	6563      	strge	r3, [r4, #84]	; 0x54
  406bce:	81a3      	strhlt	r3, [r4, #12]
  406bd0:	bd10      	pop	{r4, pc}

00406bd2 <__swrite>:
  406bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406bd6:	461f      	mov	r7, r3
  406bd8:	898b      	ldrh	r3, [r1, #12]
  406bda:	05db      	lsls	r3, r3, #23
  406bdc:	4605      	mov	r5, r0
  406bde:	460c      	mov	r4, r1
  406be0:	4616      	mov	r6, r2
  406be2:	d505      	bpl.n	406bf0 <__swrite+0x1e>
  406be4:	2302      	movs	r3, #2
  406be6:	2200      	movs	r2, #0
  406be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406bec:	f000 f88a 	bl	406d04 <_lseek_r>
  406bf0:	89a3      	ldrh	r3, [r4, #12]
  406bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406bfa:	81a3      	strh	r3, [r4, #12]
  406bfc:	4632      	mov	r2, r6
  406bfe:	463b      	mov	r3, r7
  406c00:	4628      	mov	r0, r5
  406c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406c06:	f000 b839 	b.w	406c7c <_write_r>

00406c0a <__sseek>:
  406c0a:	b510      	push	{r4, lr}
  406c0c:	460c      	mov	r4, r1
  406c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406c12:	f000 f877 	bl	406d04 <_lseek_r>
  406c16:	1c43      	adds	r3, r0, #1
  406c18:	89a3      	ldrh	r3, [r4, #12]
  406c1a:	bf15      	itete	ne
  406c1c:	6560      	strne	r0, [r4, #84]	; 0x54
  406c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406c26:	81a3      	strheq	r3, [r4, #12]
  406c28:	bf18      	it	ne
  406c2a:	81a3      	strhne	r3, [r4, #12]
  406c2c:	bd10      	pop	{r4, pc}

00406c2e <__sclose>:
  406c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406c32:	f000 b835 	b.w	406ca0 <_close_r>

00406c36 <strncmp>:
  406c36:	b530      	push	{r4, r5, lr}
  406c38:	b182      	cbz	r2, 406c5c <strncmp+0x26>
  406c3a:	1e45      	subs	r5, r0, #1
  406c3c:	3901      	subs	r1, #1
  406c3e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  406c42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  406c46:	42a3      	cmp	r3, r4
  406c48:	d106      	bne.n	406c58 <strncmp+0x22>
  406c4a:	43ec      	mvns	r4, r5
  406c4c:	4414      	add	r4, r2
  406c4e:	42e0      	cmn	r0, r4
  406c50:	d001      	beq.n	406c56 <strncmp+0x20>
  406c52:	2b00      	cmp	r3, #0
  406c54:	d1f3      	bne.n	406c3e <strncmp+0x8>
  406c56:	461c      	mov	r4, r3
  406c58:	1b18      	subs	r0, r3, r4
  406c5a:	bd30      	pop	{r4, r5, pc}
  406c5c:	4610      	mov	r0, r2
  406c5e:	bd30      	pop	{r4, r5, pc}

00406c60 <__ascii_wctomb>:
  406c60:	b149      	cbz	r1, 406c76 <__ascii_wctomb+0x16>
  406c62:	2aff      	cmp	r2, #255	; 0xff
  406c64:	bf85      	ittet	hi
  406c66:	238a      	movhi	r3, #138	; 0x8a
  406c68:	6003      	strhi	r3, [r0, #0]
  406c6a:	700a      	strbls	r2, [r1, #0]
  406c6c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  406c70:	bf98      	it	ls
  406c72:	2001      	movls	r0, #1
  406c74:	4770      	bx	lr
  406c76:	4608      	mov	r0, r1
  406c78:	4770      	bx	lr
	...

00406c7c <_write_r>:
  406c7c:	b538      	push	{r3, r4, r5, lr}
  406c7e:	4c07      	ldr	r4, [pc, #28]	; (406c9c <_write_r+0x20>)
  406c80:	4605      	mov	r5, r0
  406c82:	4608      	mov	r0, r1
  406c84:	4611      	mov	r1, r2
  406c86:	2200      	movs	r2, #0
  406c88:	6022      	str	r2, [r4, #0]
  406c8a:	461a      	mov	r2, r3
  406c8c:	f7f9 fa8e 	bl	4001ac <_write>
  406c90:	1c43      	adds	r3, r0, #1
  406c92:	d102      	bne.n	406c9a <_write_r+0x1e>
  406c94:	6823      	ldr	r3, [r4, #0]
  406c96:	b103      	cbz	r3, 406c9a <_write_r+0x1e>
  406c98:	602b      	str	r3, [r5, #0]
  406c9a:	bd38      	pop	{r3, r4, r5, pc}
  406c9c:	20000870 	.word	0x20000870

00406ca0 <_close_r>:
  406ca0:	b538      	push	{r3, r4, r5, lr}
  406ca2:	4c06      	ldr	r4, [pc, #24]	; (406cbc <_close_r+0x1c>)
  406ca4:	2300      	movs	r3, #0
  406ca6:	4605      	mov	r5, r0
  406ca8:	4608      	mov	r0, r1
  406caa:	6023      	str	r3, [r4, #0]
  406cac:	f7fb fc8e 	bl	4025cc <_close>
  406cb0:	1c43      	adds	r3, r0, #1
  406cb2:	d102      	bne.n	406cba <_close_r+0x1a>
  406cb4:	6823      	ldr	r3, [r4, #0]
  406cb6:	b103      	cbz	r3, 406cba <_close_r+0x1a>
  406cb8:	602b      	str	r3, [r5, #0]
  406cba:	bd38      	pop	{r3, r4, r5, pc}
  406cbc:	20000870 	.word	0x20000870

00406cc0 <_fstat_r>:
  406cc0:	b538      	push	{r3, r4, r5, lr}
  406cc2:	4c07      	ldr	r4, [pc, #28]	; (406ce0 <_fstat_r+0x20>)
  406cc4:	2300      	movs	r3, #0
  406cc6:	4605      	mov	r5, r0
  406cc8:	4608      	mov	r0, r1
  406cca:	4611      	mov	r1, r2
  406ccc:	6023      	str	r3, [r4, #0]
  406cce:	f7fb fc81 	bl	4025d4 <_fstat>
  406cd2:	1c43      	adds	r3, r0, #1
  406cd4:	d102      	bne.n	406cdc <_fstat_r+0x1c>
  406cd6:	6823      	ldr	r3, [r4, #0]
  406cd8:	b103      	cbz	r3, 406cdc <_fstat_r+0x1c>
  406cda:	602b      	str	r3, [r5, #0]
  406cdc:	bd38      	pop	{r3, r4, r5, pc}
  406cde:	bf00      	nop
  406ce0:	20000870 	.word	0x20000870

00406ce4 <_isatty_r>:
  406ce4:	b538      	push	{r3, r4, r5, lr}
  406ce6:	4c06      	ldr	r4, [pc, #24]	; (406d00 <_isatty_r+0x1c>)
  406ce8:	2300      	movs	r3, #0
  406cea:	4605      	mov	r5, r0
  406cec:	4608      	mov	r0, r1
  406cee:	6023      	str	r3, [r4, #0]
  406cf0:	f7fb fc76 	bl	4025e0 <_isatty>
  406cf4:	1c43      	adds	r3, r0, #1
  406cf6:	d102      	bne.n	406cfe <_isatty_r+0x1a>
  406cf8:	6823      	ldr	r3, [r4, #0]
  406cfa:	b103      	cbz	r3, 406cfe <_isatty_r+0x1a>
  406cfc:	602b      	str	r3, [r5, #0]
  406cfe:	bd38      	pop	{r3, r4, r5, pc}
  406d00:	20000870 	.word	0x20000870

00406d04 <_lseek_r>:
  406d04:	b538      	push	{r3, r4, r5, lr}
  406d06:	4c07      	ldr	r4, [pc, #28]	; (406d24 <_lseek_r+0x20>)
  406d08:	4605      	mov	r5, r0
  406d0a:	4608      	mov	r0, r1
  406d0c:	4611      	mov	r1, r2
  406d0e:	2200      	movs	r2, #0
  406d10:	6022      	str	r2, [r4, #0]
  406d12:	461a      	mov	r2, r3
  406d14:	f7fb fc66 	bl	4025e4 <_lseek>
  406d18:	1c43      	adds	r3, r0, #1
  406d1a:	d102      	bne.n	406d22 <_lseek_r+0x1e>
  406d1c:	6823      	ldr	r3, [r4, #0]
  406d1e:	b103      	cbz	r3, 406d22 <_lseek_r+0x1e>
  406d20:	602b      	str	r3, [r5, #0]
  406d22:	bd38      	pop	{r3, r4, r5, pc}
  406d24:	20000870 	.word	0x20000870

00406d28 <__malloc_lock>:
  406d28:	4770      	bx	lr

00406d2a <__malloc_unlock>:
  406d2a:	4770      	bx	lr

00406d2c <_read_r>:
  406d2c:	b538      	push	{r3, r4, r5, lr}
  406d2e:	4c07      	ldr	r4, [pc, #28]	; (406d4c <_read_r+0x20>)
  406d30:	4605      	mov	r5, r0
  406d32:	4608      	mov	r0, r1
  406d34:	4611      	mov	r1, r2
  406d36:	2200      	movs	r2, #0
  406d38:	6022      	str	r2, [r4, #0]
  406d3a:	461a      	mov	r2, r3
  406d3c:	f7f9 fa18 	bl	400170 <_read>
  406d40:	1c43      	adds	r3, r0, #1
  406d42:	d102      	bne.n	406d4a <_read_r+0x1e>
  406d44:	6823      	ldr	r3, [r4, #0]
  406d46:	b103      	cbz	r3, 406d4a <_read_r+0x1e>
  406d48:	602b      	str	r3, [r5, #0]
  406d4a:	bd38      	pop	{r3, r4, r5, pc}
  406d4c:	20000870 	.word	0x20000870

00406d50 <__aeabi_drsub>:
  406d50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406d54:	e002      	b.n	406d5c <__adddf3>
  406d56:	bf00      	nop

00406d58 <__aeabi_dsub>:
  406d58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406d5c <__adddf3>:
  406d5c:	b530      	push	{r4, r5, lr}
  406d5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  406d62:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406d66:	ea94 0f05 	teq	r4, r5
  406d6a:	bf08      	it	eq
  406d6c:	ea90 0f02 	teqeq	r0, r2
  406d70:	bf1f      	itttt	ne
  406d72:	ea54 0c00 	orrsne.w	ip, r4, r0
  406d76:	ea55 0c02 	orrsne.w	ip, r5, r2
  406d7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  406d7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406d82:	f000 80e2 	beq.w	406f4a <__adddf3+0x1ee>
  406d86:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406d8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406d8e:	bfb8      	it	lt
  406d90:	426d      	neglt	r5, r5
  406d92:	dd0c      	ble.n	406dae <__adddf3+0x52>
  406d94:	442c      	add	r4, r5
  406d96:	ea80 0202 	eor.w	r2, r0, r2
  406d9a:	ea81 0303 	eor.w	r3, r1, r3
  406d9e:	ea82 0000 	eor.w	r0, r2, r0
  406da2:	ea83 0101 	eor.w	r1, r3, r1
  406da6:	ea80 0202 	eor.w	r2, r0, r2
  406daa:	ea81 0303 	eor.w	r3, r1, r3
  406dae:	2d36      	cmp	r5, #54	; 0x36
  406db0:	bf88      	it	hi
  406db2:	bd30      	pophi	{r4, r5, pc}
  406db4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406db8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406dbc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406dc0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406dc4:	d002      	beq.n	406dcc <__adddf3+0x70>
  406dc6:	4240      	negs	r0, r0
  406dc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406dcc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406dd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406dd4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406dd8:	d002      	beq.n	406de0 <__adddf3+0x84>
  406dda:	4252      	negs	r2, r2
  406ddc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406de0:	ea94 0f05 	teq	r4, r5
  406de4:	f000 80a7 	beq.w	406f36 <__adddf3+0x1da>
  406de8:	f1a4 0401 	sub.w	r4, r4, #1
  406dec:	f1d5 0e20 	rsbs	lr, r5, #32
  406df0:	db0d      	blt.n	406e0e <__adddf3+0xb2>
  406df2:	fa02 fc0e 	lsl.w	ip, r2, lr
  406df6:	fa22 f205 	lsr.w	r2, r2, r5
  406dfa:	1880      	adds	r0, r0, r2
  406dfc:	f141 0100 	adc.w	r1, r1, #0
  406e00:	fa03 f20e 	lsl.w	r2, r3, lr
  406e04:	1880      	adds	r0, r0, r2
  406e06:	fa43 f305 	asr.w	r3, r3, r5
  406e0a:	4159      	adcs	r1, r3
  406e0c:	e00e      	b.n	406e2c <__adddf3+0xd0>
  406e0e:	f1a5 0520 	sub.w	r5, r5, #32
  406e12:	f10e 0e20 	add.w	lr, lr, #32
  406e16:	2a01      	cmp	r2, #1
  406e18:	fa03 fc0e 	lsl.w	ip, r3, lr
  406e1c:	bf28      	it	cs
  406e1e:	f04c 0c02 	orrcs.w	ip, ip, #2
  406e22:	fa43 f305 	asr.w	r3, r3, r5
  406e26:	18c0      	adds	r0, r0, r3
  406e28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406e2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406e30:	d507      	bpl.n	406e42 <__adddf3+0xe6>
  406e32:	f04f 0e00 	mov.w	lr, #0
  406e36:	f1dc 0c00 	rsbs	ip, ip, #0
  406e3a:	eb7e 0000 	sbcs.w	r0, lr, r0
  406e3e:	eb6e 0101 	sbc.w	r1, lr, r1
  406e42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406e46:	d31b      	bcc.n	406e80 <__adddf3+0x124>
  406e48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406e4c:	d30c      	bcc.n	406e68 <__adddf3+0x10c>
  406e4e:	0849      	lsrs	r1, r1, #1
  406e50:	ea5f 0030 	movs.w	r0, r0, rrx
  406e54:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406e58:	f104 0401 	add.w	r4, r4, #1
  406e5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406e60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406e64:	f080 809a 	bcs.w	406f9c <__adddf3+0x240>
  406e68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406e6c:	bf08      	it	eq
  406e6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406e72:	f150 0000 	adcs.w	r0, r0, #0
  406e76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406e7a:	ea41 0105 	orr.w	r1, r1, r5
  406e7e:	bd30      	pop	{r4, r5, pc}
  406e80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406e84:	4140      	adcs	r0, r0
  406e86:	eb41 0101 	adc.w	r1, r1, r1
  406e8a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406e8e:	f1a4 0401 	sub.w	r4, r4, #1
  406e92:	d1e9      	bne.n	406e68 <__adddf3+0x10c>
  406e94:	f091 0f00 	teq	r1, #0
  406e98:	bf04      	itt	eq
  406e9a:	4601      	moveq	r1, r0
  406e9c:	2000      	moveq	r0, #0
  406e9e:	fab1 f381 	clz	r3, r1
  406ea2:	bf08      	it	eq
  406ea4:	3320      	addeq	r3, #32
  406ea6:	f1a3 030b 	sub.w	r3, r3, #11
  406eaa:	f1b3 0220 	subs.w	r2, r3, #32
  406eae:	da0c      	bge.n	406eca <__adddf3+0x16e>
  406eb0:	320c      	adds	r2, #12
  406eb2:	dd08      	ble.n	406ec6 <__adddf3+0x16a>
  406eb4:	f102 0c14 	add.w	ip, r2, #20
  406eb8:	f1c2 020c 	rsb	r2, r2, #12
  406ebc:	fa01 f00c 	lsl.w	r0, r1, ip
  406ec0:	fa21 f102 	lsr.w	r1, r1, r2
  406ec4:	e00c      	b.n	406ee0 <__adddf3+0x184>
  406ec6:	f102 0214 	add.w	r2, r2, #20
  406eca:	bfd8      	it	le
  406ecc:	f1c2 0c20 	rsble	ip, r2, #32
  406ed0:	fa01 f102 	lsl.w	r1, r1, r2
  406ed4:	fa20 fc0c 	lsr.w	ip, r0, ip
  406ed8:	bfdc      	itt	le
  406eda:	ea41 010c 	orrle.w	r1, r1, ip
  406ede:	4090      	lslle	r0, r2
  406ee0:	1ae4      	subs	r4, r4, r3
  406ee2:	bfa2      	ittt	ge
  406ee4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406ee8:	4329      	orrge	r1, r5
  406eea:	bd30      	popge	{r4, r5, pc}
  406eec:	ea6f 0404 	mvn.w	r4, r4
  406ef0:	3c1f      	subs	r4, #31
  406ef2:	da1c      	bge.n	406f2e <__adddf3+0x1d2>
  406ef4:	340c      	adds	r4, #12
  406ef6:	dc0e      	bgt.n	406f16 <__adddf3+0x1ba>
  406ef8:	f104 0414 	add.w	r4, r4, #20
  406efc:	f1c4 0220 	rsb	r2, r4, #32
  406f00:	fa20 f004 	lsr.w	r0, r0, r4
  406f04:	fa01 f302 	lsl.w	r3, r1, r2
  406f08:	ea40 0003 	orr.w	r0, r0, r3
  406f0c:	fa21 f304 	lsr.w	r3, r1, r4
  406f10:	ea45 0103 	orr.w	r1, r5, r3
  406f14:	bd30      	pop	{r4, r5, pc}
  406f16:	f1c4 040c 	rsb	r4, r4, #12
  406f1a:	f1c4 0220 	rsb	r2, r4, #32
  406f1e:	fa20 f002 	lsr.w	r0, r0, r2
  406f22:	fa01 f304 	lsl.w	r3, r1, r4
  406f26:	ea40 0003 	orr.w	r0, r0, r3
  406f2a:	4629      	mov	r1, r5
  406f2c:	bd30      	pop	{r4, r5, pc}
  406f2e:	fa21 f004 	lsr.w	r0, r1, r4
  406f32:	4629      	mov	r1, r5
  406f34:	bd30      	pop	{r4, r5, pc}
  406f36:	f094 0f00 	teq	r4, #0
  406f3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  406f3e:	bf06      	itte	eq
  406f40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406f44:	3401      	addeq	r4, #1
  406f46:	3d01      	subne	r5, #1
  406f48:	e74e      	b.n	406de8 <__adddf3+0x8c>
  406f4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406f4e:	bf18      	it	ne
  406f50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406f54:	d029      	beq.n	406faa <__adddf3+0x24e>
  406f56:	ea94 0f05 	teq	r4, r5
  406f5a:	bf08      	it	eq
  406f5c:	ea90 0f02 	teqeq	r0, r2
  406f60:	d005      	beq.n	406f6e <__adddf3+0x212>
  406f62:	ea54 0c00 	orrs.w	ip, r4, r0
  406f66:	bf04      	itt	eq
  406f68:	4619      	moveq	r1, r3
  406f6a:	4610      	moveq	r0, r2
  406f6c:	bd30      	pop	{r4, r5, pc}
  406f6e:	ea91 0f03 	teq	r1, r3
  406f72:	bf1e      	ittt	ne
  406f74:	2100      	movne	r1, #0
  406f76:	2000      	movne	r0, #0
  406f78:	bd30      	popne	{r4, r5, pc}
  406f7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  406f7e:	d105      	bne.n	406f8c <__adddf3+0x230>
  406f80:	0040      	lsls	r0, r0, #1
  406f82:	4149      	adcs	r1, r1
  406f84:	bf28      	it	cs
  406f86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406f8a:	bd30      	pop	{r4, r5, pc}
  406f8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406f90:	bf3c      	itt	cc
  406f92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  406f96:	bd30      	popcc	{r4, r5, pc}
  406f98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406f9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406fa0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406fa4:	f04f 0000 	mov.w	r0, #0
  406fa8:	bd30      	pop	{r4, r5, pc}
  406faa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406fae:	bf1a      	itte	ne
  406fb0:	4619      	movne	r1, r3
  406fb2:	4610      	movne	r0, r2
  406fb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  406fb8:	bf1c      	itt	ne
  406fba:	460b      	movne	r3, r1
  406fbc:	4602      	movne	r2, r0
  406fbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406fc2:	bf06      	itte	eq
  406fc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  406fc8:	ea91 0f03 	teqeq	r1, r3
  406fcc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406fd0:	bd30      	pop	{r4, r5, pc}
  406fd2:	bf00      	nop

00406fd4 <__aeabi_ui2d>:
  406fd4:	f090 0f00 	teq	r0, #0
  406fd8:	bf04      	itt	eq
  406fda:	2100      	moveq	r1, #0
  406fdc:	4770      	bxeq	lr
  406fde:	b530      	push	{r4, r5, lr}
  406fe0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406fe4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406fe8:	f04f 0500 	mov.w	r5, #0
  406fec:	f04f 0100 	mov.w	r1, #0
  406ff0:	e750      	b.n	406e94 <__adddf3+0x138>
  406ff2:	bf00      	nop

00406ff4 <__aeabi_i2d>:
  406ff4:	f090 0f00 	teq	r0, #0
  406ff8:	bf04      	itt	eq
  406ffa:	2100      	moveq	r1, #0
  406ffc:	4770      	bxeq	lr
  406ffe:	b530      	push	{r4, r5, lr}
  407000:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407004:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407008:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40700c:	bf48      	it	mi
  40700e:	4240      	negmi	r0, r0
  407010:	f04f 0100 	mov.w	r1, #0
  407014:	e73e      	b.n	406e94 <__adddf3+0x138>
  407016:	bf00      	nop

00407018 <__aeabi_f2d>:
  407018:	0042      	lsls	r2, r0, #1
  40701a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40701e:	ea4f 0131 	mov.w	r1, r1, rrx
  407022:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407026:	bf1f      	itttt	ne
  407028:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40702c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407030:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407034:	4770      	bxne	lr
  407036:	f092 0f00 	teq	r2, #0
  40703a:	bf14      	ite	ne
  40703c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407040:	4770      	bxeq	lr
  407042:	b530      	push	{r4, r5, lr}
  407044:	f44f 7460 	mov.w	r4, #896	; 0x380
  407048:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40704c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407050:	e720      	b.n	406e94 <__adddf3+0x138>
  407052:	bf00      	nop

00407054 <__aeabi_ul2d>:
  407054:	ea50 0201 	orrs.w	r2, r0, r1
  407058:	bf08      	it	eq
  40705a:	4770      	bxeq	lr
  40705c:	b530      	push	{r4, r5, lr}
  40705e:	f04f 0500 	mov.w	r5, #0
  407062:	e00a      	b.n	40707a <__aeabi_l2d+0x16>

00407064 <__aeabi_l2d>:
  407064:	ea50 0201 	orrs.w	r2, r0, r1
  407068:	bf08      	it	eq
  40706a:	4770      	bxeq	lr
  40706c:	b530      	push	{r4, r5, lr}
  40706e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407072:	d502      	bpl.n	40707a <__aeabi_l2d+0x16>
  407074:	4240      	negs	r0, r0
  407076:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40707a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40707e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407082:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407086:	f43f aedc 	beq.w	406e42 <__adddf3+0xe6>
  40708a:	f04f 0203 	mov.w	r2, #3
  40708e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407092:	bf18      	it	ne
  407094:	3203      	addne	r2, #3
  407096:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40709a:	bf18      	it	ne
  40709c:	3203      	addne	r2, #3
  40709e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4070a2:	f1c2 0320 	rsb	r3, r2, #32
  4070a6:	fa00 fc03 	lsl.w	ip, r0, r3
  4070aa:	fa20 f002 	lsr.w	r0, r0, r2
  4070ae:	fa01 fe03 	lsl.w	lr, r1, r3
  4070b2:	ea40 000e 	orr.w	r0, r0, lr
  4070b6:	fa21 f102 	lsr.w	r1, r1, r2
  4070ba:	4414      	add	r4, r2
  4070bc:	e6c1      	b.n	406e42 <__adddf3+0xe6>
  4070be:	bf00      	nop

004070c0 <__aeabi_dmul>:
  4070c0:	b570      	push	{r4, r5, r6, lr}
  4070c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4070c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4070ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4070ce:	bf1d      	ittte	ne
  4070d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4070d4:	ea94 0f0c 	teqne	r4, ip
  4070d8:	ea95 0f0c 	teqne	r5, ip
  4070dc:	f000 f8de 	bleq	40729c <__aeabi_dmul+0x1dc>
  4070e0:	442c      	add	r4, r5
  4070e2:	ea81 0603 	eor.w	r6, r1, r3
  4070e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4070ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4070ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4070f2:	bf18      	it	ne
  4070f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4070f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4070fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407100:	d038      	beq.n	407174 <__aeabi_dmul+0xb4>
  407102:	fba0 ce02 	umull	ip, lr, r0, r2
  407106:	f04f 0500 	mov.w	r5, #0
  40710a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40710e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407112:	fbe0 e503 	umlal	lr, r5, r0, r3
  407116:	f04f 0600 	mov.w	r6, #0
  40711a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40711e:	f09c 0f00 	teq	ip, #0
  407122:	bf18      	it	ne
  407124:	f04e 0e01 	orrne.w	lr, lr, #1
  407128:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40712c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407130:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407134:	d204      	bcs.n	407140 <__aeabi_dmul+0x80>
  407136:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40713a:	416d      	adcs	r5, r5
  40713c:	eb46 0606 	adc.w	r6, r6, r6
  407140:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407144:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407148:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40714c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407150:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407154:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407158:	bf88      	it	hi
  40715a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40715e:	d81e      	bhi.n	40719e <__aeabi_dmul+0xde>
  407160:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407164:	bf08      	it	eq
  407166:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40716a:	f150 0000 	adcs.w	r0, r0, #0
  40716e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407172:	bd70      	pop	{r4, r5, r6, pc}
  407174:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407178:	ea46 0101 	orr.w	r1, r6, r1
  40717c:	ea40 0002 	orr.w	r0, r0, r2
  407180:	ea81 0103 	eor.w	r1, r1, r3
  407184:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407188:	bfc2      	ittt	gt
  40718a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40718e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407192:	bd70      	popgt	{r4, r5, r6, pc}
  407194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407198:	f04f 0e00 	mov.w	lr, #0
  40719c:	3c01      	subs	r4, #1
  40719e:	f300 80ab 	bgt.w	4072f8 <__aeabi_dmul+0x238>
  4071a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4071a6:	bfde      	ittt	le
  4071a8:	2000      	movle	r0, #0
  4071aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4071ae:	bd70      	pople	{r4, r5, r6, pc}
  4071b0:	f1c4 0400 	rsb	r4, r4, #0
  4071b4:	3c20      	subs	r4, #32
  4071b6:	da35      	bge.n	407224 <__aeabi_dmul+0x164>
  4071b8:	340c      	adds	r4, #12
  4071ba:	dc1b      	bgt.n	4071f4 <__aeabi_dmul+0x134>
  4071bc:	f104 0414 	add.w	r4, r4, #20
  4071c0:	f1c4 0520 	rsb	r5, r4, #32
  4071c4:	fa00 f305 	lsl.w	r3, r0, r5
  4071c8:	fa20 f004 	lsr.w	r0, r0, r4
  4071cc:	fa01 f205 	lsl.w	r2, r1, r5
  4071d0:	ea40 0002 	orr.w	r0, r0, r2
  4071d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4071d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4071dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4071e0:	fa21 f604 	lsr.w	r6, r1, r4
  4071e4:	eb42 0106 	adc.w	r1, r2, r6
  4071e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4071ec:	bf08      	it	eq
  4071ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4071f2:	bd70      	pop	{r4, r5, r6, pc}
  4071f4:	f1c4 040c 	rsb	r4, r4, #12
  4071f8:	f1c4 0520 	rsb	r5, r4, #32
  4071fc:	fa00 f304 	lsl.w	r3, r0, r4
  407200:	fa20 f005 	lsr.w	r0, r0, r5
  407204:	fa01 f204 	lsl.w	r2, r1, r4
  407208:	ea40 0002 	orr.w	r0, r0, r2
  40720c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407210:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407214:	f141 0100 	adc.w	r1, r1, #0
  407218:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40721c:	bf08      	it	eq
  40721e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407222:	bd70      	pop	{r4, r5, r6, pc}
  407224:	f1c4 0520 	rsb	r5, r4, #32
  407228:	fa00 f205 	lsl.w	r2, r0, r5
  40722c:	ea4e 0e02 	orr.w	lr, lr, r2
  407230:	fa20 f304 	lsr.w	r3, r0, r4
  407234:	fa01 f205 	lsl.w	r2, r1, r5
  407238:	ea43 0302 	orr.w	r3, r3, r2
  40723c:	fa21 f004 	lsr.w	r0, r1, r4
  407240:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407244:	fa21 f204 	lsr.w	r2, r1, r4
  407248:	ea20 0002 	bic.w	r0, r0, r2
  40724c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407250:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407254:	bf08      	it	eq
  407256:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40725a:	bd70      	pop	{r4, r5, r6, pc}
  40725c:	f094 0f00 	teq	r4, #0
  407260:	d10f      	bne.n	407282 <__aeabi_dmul+0x1c2>
  407262:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407266:	0040      	lsls	r0, r0, #1
  407268:	eb41 0101 	adc.w	r1, r1, r1
  40726c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407270:	bf08      	it	eq
  407272:	3c01      	subeq	r4, #1
  407274:	d0f7      	beq.n	407266 <__aeabi_dmul+0x1a6>
  407276:	ea41 0106 	orr.w	r1, r1, r6
  40727a:	f095 0f00 	teq	r5, #0
  40727e:	bf18      	it	ne
  407280:	4770      	bxne	lr
  407282:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407286:	0052      	lsls	r2, r2, #1
  407288:	eb43 0303 	adc.w	r3, r3, r3
  40728c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407290:	bf08      	it	eq
  407292:	3d01      	subeq	r5, #1
  407294:	d0f7      	beq.n	407286 <__aeabi_dmul+0x1c6>
  407296:	ea43 0306 	orr.w	r3, r3, r6
  40729a:	4770      	bx	lr
  40729c:	ea94 0f0c 	teq	r4, ip
  4072a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4072a4:	bf18      	it	ne
  4072a6:	ea95 0f0c 	teqne	r5, ip
  4072aa:	d00c      	beq.n	4072c6 <__aeabi_dmul+0x206>
  4072ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4072b0:	bf18      	it	ne
  4072b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4072b6:	d1d1      	bne.n	40725c <__aeabi_dmul+0x19c>
  4072b8:	ea81 0103 	eor.w	r1, r1, r3
  4072bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4072c0:	f04f 0000 	mov.w	r0, #0
  4072c4:	bd70      	pop	{r4, r5, r6, pc}
  4072c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4072ca:	bf06      	itte	eq
  4072cc:	4610      	moveq	r0, r2
  4072ce:	4619      	moveq	r1, r3
  4072d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4072d4:	d019      	beq.n	40730a <__aeabi_dmul+0x24a>
  4072d6:	ea94 0f0c 	teq	r4, ip
  4072da:	d102      	bne.n	4072e2 <__aeabi_dmul+0x222>
  4072dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4072e0:	d113      	bne.n	40730a <__aeabi_dmul+0x24a>
  4072e2:	ea95 0f0c 	teq	r5, ip
  4072e6:	d105      	bne.n	4072f4 <__aeabi_dmul+0x234>
  4072e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4072ec:	bf1c      	itt	ne
  4072ee:	4610      	movne	r0, r2
  4072f0:	4619      	movne	r1, r3
  4072f2:	d10a      	bne.n	40730a <__aeabi_dmul+0x24a>
  4072f4:	ea81 0103 	eor.w	r1, r1, r3
  4072f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4072fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407300:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407304:	f04f 0000 	mov.w	r0, #0
  407308:	bd70      	pop	{r4, r5, r6, pc}
  40730a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40730e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407312:	bd70      	pop	{r4, r5, r6, pc}

00407314 <__aeabi_ddiv>:
  407314:	b570      	push	{r4, r5, r6, lr}
  407316:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40731a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40731e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407322:	bf1d      	ittte	ne
  407324:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407328:	ea94 0f0c 	teqne	r4, ip
  40732c:	ea95 0f0c 	teqne	r5, ip
  407330:	f000 f8a7 	bleq	407482 <__aeabi_ddiv+0x16e>
  407334:	eba4 0405 	sub.w	r4, r4, r5
  407338:	ea81 0e03 	eor.w	lr, r1, r3
  40733c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407340:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407344:	f000 8088 	beq.w	407458 <__aeabi_ddiv+0x144>
  407348:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40734c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407350:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407354:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407358:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40735c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407360:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407364:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407368:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40736c:	429d      	cmp	r5, r3
  40736e:	bf08      	it	eq
  407370:	4296      	cmpeq	r6, r2
  407372:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407376:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40737a:	d202      	bcs.n	407382 <__aeabi_ddiv+0x6e>
  40737c:	085b      	lsrs	r3, r3, #1
  40737e:	ea4f 0232 	mov.w	r2, r2, rrx
  407382:	1ab6      	subs	r6, r6, r2
  407384:	eb65 0503 	sbc.w	r5, r5, r3
  407388:	085b      	lsrs	r3, r3, #1
  40738a:	ea4f 0232 	mov.w	r2, r2, rrx
  40738e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407392:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407396:	ebb6 0e02 	subs.w	lr, r6, r2
  40739a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40739e:	bf22      	ittt	cs
  4073a0:	1ab6      	subcs	r6, r6, r2
  4073a2:	4675      	movcs	r5, lr
  4073a4:	ea40 000c 	orrcs.w	r0, r0, ip
  4073a8:	085b      	lsrs	r3, r3, #1
  4073aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4073ae:	ebb6 0e02 	subs.w	lr, r6, r2
  4073b2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4073b6:	bf22      	ittt	cs
  4073b8:	1ab6      	subcs	r6, r6, r2
  4073ba:	4675      	movcs	r5, lr
  4073bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4073c0:	085b      	lsrs	r3, r3, #1
  4073c2:	ea4f 0232 	mov.w	r2, r2, rrx
  4073c6:	ebb6 0e02 	subs.w	lr, r6, r2
  4073ca:	eb75 0e03 	sbcs.w	lr, r5, r3
  4073ce:	bf22      	ittt	cs
  4073d0:	1ab6      	subcs	r6, r6, r2
  4073d2:	4675      	movcs	r5, lr
  4073d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4073d8:	085b      	lsrs	r3, r3, #1
  4073da:	ea4f 0232 	mov.w	r2, r2, rrx
  4073de:	ebb6 0e02 	subs.w	lr, r6, r2
  4073e2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4073e6:	bf22      	ittt	cs
  4073e8:	1ab6      	subcs	r6, r6, r2
  4073ea:	4675      	movcs	r5, lr
  4073ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4073f0:	ea55 0e06 	orrs.w	lr, r5, r6
  4073f4:	d018      	beq.n	407428 <__aeabi_ddiv+0x114>
  4073f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4073fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4073fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407402:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407406:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40740a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40740e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407412:	d1c0      	bne.n	407396 <__aeabi_ddiv+0x82>
  407414:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407418:	d10b      	bne.n	407432 <__aeabi_ddiv+0x11e>
  40741a:	ea41 0100 	orr.w	r1, r1, r0
  40741e:	f04f 0000 	mov.w	r0, #0
  407422:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407426:	e7b6      	b.n	407396 <__aeabi_ddiv+0x82>
  407428:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40742c:	bf04      	itt	eq
  40742e:	4301      	orreq	r1, r0
  407430:	2000      	moveq	r0, #0
  407432:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407436:	bf88      	it	hi
  407438:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40743c:	f63f aeaf 	bhi.w	40719e <__aeabi_dmul+0xde>
  407440:	ebb5 0c03 	subs.w	ip, r5, r3
  407444:	bf04      	itt	eq
  407446:	ebb6 0c02 	subseq.w	ip, r6, r2
  40744a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40744e:	f150 0000 	adcs.w	r0, r0, #0
  407452:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407456:	bd70      	pop	{r4, r5, r6, pc}
  407458:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40745c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407460:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407464:	bfc2      	ittt	gt
  407466:	ebd4 050c 	rsbsgt	r5, r4, ip
  40746a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40746e:	bd70      	popgt	{r4, r5, r6, pc}
  407470:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407474:	f04f 0e00 	mov.w	lr, #0
  407478:	3c01      	subs	r4, #1
  40747a:	e690      	b.n	40719e <__aeabi_dmul+0xde>
  40747c:	ea45 0e06 	orr.w	lr, r5, r6
  407480:	e68d      	b.n	40719e <__aeabi_dmul+0xde>
  407482:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407486:	ea94 0f0c 	teq	r4, ip
  40748a:	bf08      	it	eq
  40748c:	ea95 0f0c 	teqeq	r5, ip
  407490:	f43f af3b 	beq.w	40730a <__aeabi_dmul+0x24a>
  407494:	ea94 0f0c 	teq	r4, ip
  407498:	d10a      	bne.n	4074b0 <__aeabi_ddiv+0x19c>
  40749a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40749e:	f47f af34 	bne.w	40730a <__aeabi_dmul+0x24a>
  4074a2:	ea95 0f0c 	teq	r5, ip
  4074a6:	f47f af25 	bne.w	4072f4 <__aeabi_dmul+0x234>
  4074aa:	4610      	mov	r0, r2
  4074ac:	4619      	mov	r1, r3
  4074ae:	e72c      	b.n	40730a <__aeabi_dmul+0x24a>
  4074b0:	ea95 0f0c 	teq	r5, ip
  4074b4:	d106      	bne.n	4074c4 <__aeabi_ddiv+0x1b0>
  4074b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4074ba:	f43f aefd 	beq.w	4072b8 <__aeabi_dmul+0x1f8>
  4074be:	4610      	mov	r0, r2
  4074c0:	4619      	mov	r1, r3
  4074c2:	e722      	b.n	40730a <__aeabi_dmul+0x24a>
  4074c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4074c8:	bf18      	it	ne
  4074ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4074ce:	f47f aec5 	bne.w	40725c <__aeabi_dmul+0x19c>
  4074d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4074d6:	f47f af0d 	bne.w	4072f4 <__aeabi_dmul+0x234>
  4074da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4074de:	f47f aeeb 	bne.w	4072b8 <__aeabi_dmul+0x1f8>
  4074e2:	e712      	b.n	40730a <__aeabi_dmul+0x24a>

004074e4 <__gedf2>:
  4074e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  4074e8:	e006      	b.n	4074f8 <__cmpdf2+0x4>
  4074ea:	bf00      	nop

004074ec <__ledf2>:
  4074ec:	f04f 0c01 	mov.w	ip, #1
  4074f0:	e002      	b.n	4074f8 <__cmpdf2+0x4>
  4074f2:	bf00      	nop

004074f4 <__cmpdf2>:
  4074f4:	f04f 0c01 	mov.w	ip, #1
  4074f8:	f84d cd04 	str.w	ip, [sp, #-4]!
  4074fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407500:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407504:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407508:	bf18      	it	ne
  40750a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40750e:	d01b      	beq.n	407548 <__cmpdf2+0x54>
  407510:	b001      	add	sp, #4
  407512:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407516:	bf0c      	ite	eq
  407518:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40751c:	ea91 0f03 	teqne	r1, r3
  407520:	bf02      	ittt	eq
  407522:	ea90 0f02 	teqeq	r0, r2
  407526:	2000      	moveq	r0, #0
  407528:	4770      	bxeq	lr
  40752a:	f110 0f00 	cmn.w	r0, #0
  40752e:	ea91 0f03 	teq	r1, r3
  407532:	bf58      	it	pl
  407534:	4299      	cmppl	r1, r3
  407536:	bf08      	it	eq
  407538:	4290      	cmpeq	r0, r2
  40753a:	bf2c      	ite	cs
  40753c:	17d8      	asrcs	r0, r3, #31
  40753e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407542:	f040 0001 	orr.w	r0, r0, #1
  407546:	4770      	bx	lr
  407548:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40754c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407550:	d102      	bne.n	407558 <__cmpdf2+0x64>
  407552:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407556:	d107      	bne.n	407568 <__cmpdf2+0x74>
  407558:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40755c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407560:	d1d6      	bne.n	407510 <__cmpdf2+0x1c>
  407562:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407566:	d0d3      	beq.n	407510 <__cmpdf2+0x1c>
  407568:	f85d 0b04 	ldr.w	r0, [sp], #4
  40756c:	4770      	bx	lr
  40756e:	bf00      	nop

00407570 <__aeabi_cdrcmple>:
  407570:	4684      	mov	ip, r0
  407572:	4610      	mov	r0, r2
  407574:	4662      	mov	r2, ip
  407576:	468c      	mov	ip, r1
  407578:	4619      	mov	r1, r3
  40757a:	4663      	mov	r3, ip
  40757c:	e000      	b.n	407580 <__aeabi_cdcmpeq>
  40757e:	bf00      	nop

00407580 <__aeabi_cdcmpeq>:
  407580:	b501      	push	{r0, lr}
  407582:	f7ff ffb7 	bl	4074f4 <__cmpdf2>
  407586:	2800      	cmp	r0, #0
  407588:	bf48      	it	mi
  40758a:	f110 0f00 	cmnmi.w	r0, #0
  40758e:	bd01      	pop	{r0, pc}

00407590 <__aeabi_dcmpeq>:
  407590:	f84d ed08 	str.w	lr, [sp, #-8]!
  407594:	f7ff fff4 	bl	407580 <__aeabi_cdcmpeq>
  407598:	bf0c      	ite	eq
  40759a:	2001      	moveq	r0, #1
  40759c:	2000      	movne	r0, #0
  40759e:	f85d fb08 	ldr.w	pc, [sp], #8
  4075a2:	bf00      	nop

004075a4 <__aeabi_dcmplt>:
  4075a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075a8:	f7ff ffea 	bl	407580 <__aeabi_cdcmpeq>
  4075ac:	bf34      	ite	cc
  4075ae:	2001      	movcc	r0, #1
  4075b0:	2000      	movcs	r0, #0
  4075b2:	f85d fb08 	ldr.w	pc, [sp], #8
  4075b6:	bf00      	nop

004075b8 <__aeabi_dcmple>:
  4075b8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075bc:	f7ff ffe0 	bl	407580 <__aeabi_cdcmpeq>
  4075c0:	bf94      	ite	ls
  4075c2:	2001      	movls	r0, #1
  4075c4:	2000      	movhi	r0, #0
  4075c6:	f85d fb08 	ldr.w	pc, [sp], #8
  4075ca:	bf00      	nop

004075cc <__aeabi_dcmpge>:
  4075cc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075d0:	f7ff ffce 	bl	407570 <__aeabi_cdrcmple>
  4075d4:	bf94      	ite	ls
  4075d6:	2001      	movls	r0, #1
  4075d8:	2000      	movhi	r0, #0
  4075da:	f85d fb08 	ldr.w	pc, [sp], #8
  4075de:	bf00      	nop

004075e0 <__aeabi_dcmpgt>:
  4075e0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075e4:	f7ff ffc4 	bl	407570 <__aeabi_cdrcmple>
  4075e8:	bf34      	ite	cc
  4075ea:	2001      	movcc	r0, #1
  4075ec:	2000      	movcs	r0, #0
  4075ee:	f85d fb08 	ldr.w	pc, [sp], #8
  4075f2:	bf00      	nop

004075f4 <__aeabi_dcmpun>:
  4075f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4075f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4075fc:	d102      	bne.n	407604 <__aeabi_dcmpun+0x10>
  4075fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407602:	d10a      	bne.n	40761a <__aeabi_dcmpun+0x26>
  407604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40760c:	d102      	bne.n	407614 <__aeabi_dcmpun+0x20>
  40760e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407612:	d102      	bne.n	40761a <__aeabi_dcmpun+0x26>
  407614:	f04f 0000 	mov.w	r0, #0
  407618:	4770      	bx	lr
  40761a:	f04f 0001 	mov.w	r0, #1
  40761e:	4770      	bx	lr

00407620 <__aeabi_d2iz>:
  407620:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407624:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407628:	d215      	bcs.n	407656 <__aeabi_d2iz+0x36>
  40762a:	d511      	bpl.n	407650 <__aeabi_d2iz+0x30>
  40762c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407630:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407634:	d912      	bls.n	40765c <__aeabi_d2iz+0x3c>
  407636:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40763a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40763e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407642:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407646:	fa23 f002 	lsr.w	r0, r3, r2
  40764a:	bf18      	it	ne
  40764c:	4240      	negne	r0, r0
  40764e:	4770      	bx	lr
  407650:	f04f 0000 	mov.w	r0, #0
  407654:	4770      	bx	lr
  407656:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40765a:	d105      	bne.n	407668 <__aeabi_d2iz+0x48>
  40765c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407660:	bf08      	it	eq
  407662:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407666:	4770      	bx	lr
  407668:	f04f 0000 	mov.w	r0, #0
  40766c:	4770      	bx	lr
  40766e:	bf00      	nop

00407670 <__aeabi_d2uiz>:
  407670:	004a      	lsls	r2, r1, #1
  407672:	d211      	bcs.n	407698 <__aeabi_d2uiz+0x28>
  407674:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407678:	d211      	bcs.n	40769e <__aeabi_d2uiz+0x2e>
  40767a:	d50d      	bpl.n	407698 <__aeabi_d2uiz+0x28>
  40767c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407680:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407684:	d40e      	bmi.n	4076a4 <__aeabi_d2uiz+0x34>
  407686:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40768a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40768e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407692:	fa23 f002 	lsr.w	r0, r3, r2
  407696:	4770      	bx	lr
  407698:	f04f 0000 	mov.w	r0, #0
  40769c:	4770      	bx	lr
  40769e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4076a2:	d102      	bne.n	4076aa <__aeabi_d2uiz+0x3a>
  4076a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4076a8:	4770      	bx	lr
  4076aa:	f04f 0000 	mov.w	r0, #0
  4076ae:	4770      	bx	lr

004076b0 <__aeabi_d2f>:
  4076b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4076b4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4076b8:	bf24      	itt	cs
  4076ba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4076be:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4076c2:	d90d      	bls.n	4076e0 <__aeabi_d2f+0x30>
  4076c4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4076c8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4076cc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4076d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4076d4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4076d8:	bf08      	it	eq
  4076da:	f020 0001 	biceq.w	r0, r0, #1
  4076de:	4770      	bx	lr
  4076e0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4076e4:	d121      	bne.n	40772a <__aeabi_d2f+0x7a>
  4076e6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4076ea:	bfbc      	itt	lt
  4076ec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4076f0:	4770      	bxlt	lr
  4076f2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4076f6:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4076fa:	f1c2 0218 	rsb	r2, r2, #24
  4076fe:	f1c2 0c20 	rsb	ip, r2, #32
  407702:	fa10 f30c 	lsls.w	r3, r0, ip
  407706:	fa20 f002 	lsr.w	r0, r0, r2
  40770a:	bf18      	it	ne
  40770c:	f040 0001 	orrne.w	r0, r0, #1
  407710:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407714:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  407718:	fa03 fc0c 	lsl.w	ip, r3, ip
  40771c:	ea40 000c 	orr.w	r0, r0, ip
  407720:	fa23 f302 	lsr.w	r3, r3, r2
  407724:	ea4f 0343 	mov.w	r3, r3, lsl #1
  407728:	e7cc      	b.n	4076c4 <__aeabi_d2f+0x14>
  40772a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40772e:	d107      	bne.n	407740 <__aeabi_d2f+0x90>
  407730:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  407734:	bf1e      	ittt	ne
  407736:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40773a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40773e:	4770      	bxne	lr
  407740:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  407744:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407748:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40774c:	4770      	bx	lr
  40774e:	bf00      	nop

00407750 <__aeabi_frsub>:
  407750:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  407754:	e002      	b.n	40775c <__addsf3>
  407756:	bf00      	nop

00407758 <__aeabi_fsub>:
  407758:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040775c <__addsf3>:
  40775c:	0042      	lsls	r2, r0, #1
  40775e:	bf1f      	itttt	ne
  407760:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  407764:	ea92 0f03 	teqne	r2, r3
  407768:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40776c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407770:	d06a      	beq.n	407848 <__addsf3+0xec>
  407772:	ea4f 6212 	mov.w	r2, r2, lsr #24
  407776:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40777a:	bfc1      	itttt	gt
  40777c:	18d2      	addgt	r2, r2, r3
  40777e:	4041      	eorgt	r1, r0
  407780:	4048      	eorgt	r0, r1
  407782:	4041      	eorgt	r1, r0
  407784:	bfb8      	it	lt
  407786:	425b      	neglt	r3, r3
  407788:	2b19      	cmp	r3, #25
  40778a:	bf88      	it	hi
  40778c:	4770      	bxhi	lr
  40778e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  407792:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407796:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40779a:	bf18      	it	ne
  40779c:	4240      	negne	r0, r0
  40779e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4077a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4077a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  4077aa:	bf18      	it	ne
  4077ac:	4249      	negne	r1, r1
  4077ae:	ea92 0f03 	teq	r2, r3
  4077b2:	d03f      	beq.n	407834 <__addsf3+0xd8>
  4077b4:	f1a2 0201 	sub.w	r2, r2, #1
  4077b8:	fa41 fc03 	asr.w	ip, r1, r3
  4077bc:	eb10 000c 	adds.w	r0, r0, ip
  4077c0:	f1c3 0320 	rsb	r3, r3, #32
  4077c4:	fa01 f103 	lsl.w	r1, r1, r3
  4077c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4077cc:	d502      	bpl.n	4077d4 <__addsf3+0x78>
  4077ce:	4249      	negs	r1, r1
  4077d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  4077d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  4077d8:	d313      	bcc.n	407802 <__addsf3+0xa6>
  4077da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  4077de:	d306      	bcc.n	4077ee <__addsf3+0x92>
  4077e0:	0840      	lsrs	r0, r0, #1
  4077e2:	ea4f 0131 	mov.w	r1, r1, rrx
  4077e6:	f102 0201 	add.w	r2, r2, #1
  4077ea:	2afe      	cmp	r2, #254	; 0xfe
  4077ec:	d251      	bcs.n	407892 <__addsf3+0x136>
  4077ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  4077f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4077f6:	bf08      	it	eq
  4077f8:	f020 0001 	biceq.w	r0, r0, #1
  4077fc:	ea40 0003 	orr.w	r0, r0, r3
  407800:	4770      	bx	lr
  407802:	0049      	lsls	r1, r1, #1
  407804:	eb40 0000 	adc.w	r0, r0, r0
  407808:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40780c:	f1a2 0201 	sub.w	r2, r2, #1
  407810:	d1ed      	bne.n	4077ee <__addsf3+0x92>
  407812:	fab0 fc80 	clz	ip, r0
  407816:	f1ac 0c08 	sub.w	ip, ip, #8
  40781a:	ebb2 020c 	subs.w	r2, r2, ip
  40781e:	fa00 f00c 	lsl.w	r0, r0, ip
  407822:	bfaa      	itet	ge
  407824:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  407828:	4252      	neglt	r2, r2
  40782a:	4318      	orrge	r0, r3
  40782c:	bfbc      	itt	lt
  40782e:	40d0      	lsrlt	r0, r2
  407830:	4318      	orrlt	r0, r3
  407832:	4770      	bx	lr
  407834:	f092 0f00 	teq	r2, #0
  407838:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40783c:	bf06      	itte	eq
  40783e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  407842:	3201      	addeq	r2, #1
  407844:	3b01      	subne	r3, #1
  407846:	e7b5      	b.n	4077b4 <__addsf3+0x58>
  407848:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40784c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407850:	bf18      	it	ne
  407852:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407856:	d021      	beq.n	40789c <__addsf3+0x140>
  407858:	ea92 0f03 	teq	r2, r3
  40785c:	d004      	beq.n	407868 <__addsf3+0x10c>
  40785e:	f092 0f00 	teq	r2, #0
  407862:	bf08      	it	eq
  407864:	4608      	moveq	r0, r1
  407866:	4770      	bx	lr
  407868:	ea90 0f01 	teq	r0, r1
  40786c:	bf1c      	itt	ne
  40786e:	2000      	movne	r0, #0
  407870:	4770      	bxne	lr
  407872:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  407876:	d104      	bne.n	407882 <__addsf3+0x126>
  407878:	0040      	lsls	r0, r0, #1
  40787a:	bf28      	it	cs
  40787c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  407880:	4770      	bx	lr
  407882:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  407886:	bf3c      	itt	cc
  407888:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40788c:	4770      	bxcc	lr
  40788e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  407892:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  407896:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40789a:	4770      	bx	lr
  40789c:	ea7f 6222 	mvns.w	r2, r2, asr #24
  4078a0:	bf16      	itet	ne
  4078a2:	4608      	movne	r0, r1
  4078a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  4078a8:	4601      	movne	r1, r0
  4078aa:	0242      	lsls	r2, r0, #9
  4078ac:	bf06      	itte	eq
  4078ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  4078b2:	ea90 0f01 	teqeq	r0, r1
  4078b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  4078ba:	4770      	bx	lr

004078bc <__aeabi_ui2f>:
  4078bc:	f04f 0300 	mov.w	r3, #0
  4078c0:	e004      	b.n	4078cc <__aeabi_i2f+0x8>
  4078c2:	bf00      	nop

004078c4 <__aeabi_i2f>:
  4078c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4078c8:	bf48      	it	mi
  4078ca:	4240      	negmi	r0, r0
  4078cc:	ea5f 0c00 	movs.w	ip, r0
  4078d0:	bf08      	it	eq
  4078d2:	4770      	bxeq	lr
  4078d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  4078d8:	4601      	mov	r1, r0
  4078da:	f04f 0000 	mov.w	r0, #0
  4078de:	e01c      	b.n	40791a <__aeabi_l2f+0x2a>

004078e0 <__aeabi_ul2f>:
  4078e0:	ea50 0201 	orrs.w	r2, r0, r1
  4078e4:	bf08      	it	eq
  4078e6:	4770      	bxeq	lr
  4078e8:	f04f 0300 	mov.w	r3, #0
  4078ec:	e00a      	b.n	407904 <__aeabi_l2f+0x14>
  4078ee:	bf00      	nop

004078f0 <__aeabi_l2f>:
  4078f0:	ea50 0201 	orrs.w	r2, r0, r1
  4078f4:	bf08      	it	eq
  4078f6:	4770      	bxeq	lr
  4078f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  4078fc:	d502      	bpl.n	407904 <__aeabi_l2f+0x14>
  4078fe:	4240      	negs	r0, r0
  407900:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407904:	ea5f 0c01 	movs.w	ip, r1
  407908:	bf02      	ittt	eq
  40790a:	4684      	moveq	ip, r0
  40790c:	4601      	moveq	r1, r0
  40790e:	2000      	moveq	r0, #0
  407910:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  407914:	bf08      	it	eq
  407916:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40791a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40791e:	fabc f28c 	clz	r2, ip
  407922:	3a08      	subs	r2, #8
  407924:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  407928:	db10      	blt.n	40794c <__aeabi_l2f+0x5c>
  40792a:	fa01 fc02 	lsl.w	ip, r1, r2
  40792e:	4463      	add	r3, ip
  407930:	fa00 fc02 	lsl.w	ip, r0, r2
  407934:	f1c2 0220 	rsb	r2, r2, #32
  407938:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40793c:	fa20 f202 	lsr.w	r2, r0, r2
  407940:	eb43 0002 	adc.w	r0, r3, r2
  407944:	bf08      	it	eq
  407946:	f020 0001 	biceq.w	r0, r0, #1
  40794a:	4770      	bx	lr
  40794c:	f102 0220 	add.w	r2, r2, #32
  407950:	fa01 fc02 	lsl.w	ip, r1, r2
  407954:	f1c2 0220 	rsb	r2, r2, #32
  407958:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40795c:	fa21 f202 	lsr.w	r2, r1, r2
  407960:	eb43 0002 	adc.w	r0, r3, r2
  407964:	bf08      	it	eq
  407966:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40796a:	4770      	bx	lr

0040796c <__aeabi_fmul>:
  40796c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407970:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407974:	bf1e      	ittt	ne
  407976:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40797a:	ea92 0f0c 	teqne	r2, ip
  40797e:	ea93 0f0c 	teqne	r3, ip
  407982:	d06f      	beq.n	407a64 <__aeabi_fmul+0xf8>
  407984:	441a      	add	r2, r3
  407986:	ea80 0c01 	eor.w	ip, r0, r1
  40798a:	0240      	lsls	r0, r0, #9
  40798c:	bf18      	it	ne
  40798e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  407992:	d01e      	beq.n	4079d2 <__aeabi_fmul+0x66>
  407994:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  407998:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40799c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  4079a0:	fba0 3101 	umull	r3, r1, r0, r1
  4079a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4079a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  4079ac:	bf3e      	ittt	cc
  4079ae:	0049      	lslcc	r1, r1, #1
  4079b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  4079b4:	005b      	lslcc	r3, r3, #1
  4079b6:	ea40 0001 	orr.w	r0, r0, r1
  4079ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  4079be:	2afd      	cmp	r2, #253	; 0xfd
  4079c0:	d81d      	bhi.n	4079fe <__aeabi_fmul+0x92>
  4079c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  4079c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4079ca:	bf08      	it	eq
  4079cc:	f020 0001 	biceq.w	r0, r0, #1
  4079d0:	4770      	bx	lr
  4079d2:	f090 0f00 	teq	r0, #0
  4079d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4079da:	bf08      	it	eq
  4079dc:	0249      	lsleq	r1, r1, #9
  4079de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4079e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4079e6:	3a7f      	subs	r2, #127	; 0x7f
  4079e8:	bfc2      	ittt	gt
  4079ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4079ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4079f2:	4770      	bxgt	lr
  4079f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4079f8:	f04f 0300 	mov.w	r3, #0
  4079fc:	3a01      	subs	r2, #1
  4079fe:	dc5d      	bgt.n	407abc <__aeabi_fmul+0x150>
  407a00:	f112 0f19 	cmn.w	r2, #25
  407a04:	bfdc      	itt	le
  407a06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  407a0a:	4770      	bxle	lr
  407a0c:	f1c2 0200 	rsb	r2, r2, #0
  407a10:	0041      	lsls	r1, r0, #1
  407a12:	fa21 f102 	lsr.w	r1, r1, r2
  407a16:	f1c2 0220 	rsb	r2, r2, #32
  407a1a:	fa00 fc02 	lsl.w	ip, r0, r2
  407a1e:	ea5f 0031 	movs.w	r0, r1, rrx
  407a22:	f140 0000 	adc.w	r0, r0, #0
  407a26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  407a2a:	bf08      	it	eq
  407a2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  407a30:	4770      	bx	lr
  407a32:	f092 0f00 	teq	r2, #0
  407a36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  407a3a:	bf02      	ittt	eq
  407a3c:	0040      	lsleq	r0, r0, #1
  407a3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  407a42:	3a01      	subeq	r2, #1
  407a44:	d0f9      	beq.n	407a3a <__aeabi_fmul+0xce>
  407a46:	ea40 000c 	orr.w	r0, r0, ip
  407a4a:	f093 0f00 	teq	r3, #0
  407a4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407a52:	bf02      	ittt	eq
  407a54:	0049      	lsleq	r1, r1, #1
  407a56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407a5a:	3b01      	subeq	r3, #1
  407a5c:	d0f9      	beq.n	407a52 <__aeabi_fmul+0xe6>
  407a5e:	ea41 010c 	orr.w	r1, r1, ip
  407a62:	e78f      	b.n	407984 <__aeabi_fmul+0x18>
  407a64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407a68:	ea92 0f0c 	teq	r2, ip
  407a6c:	bf18      	it	ne
  407a6e:	ea93 0f0c 	teqne	r3, ip
  407a72:	d00a      	beq.n	407a8a <__aeabi_fmul+0x11e>
  407a74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  407a78:	bf18      	it	ne
  407a7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  407a7e:	d1d8      	bne.n	407a32 <__aeabi_fmul+0xc6>
  407a80:	ea80 0001 	eor.w	r0, r0, r1
  407a84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  407a88:	4770      	bx	lr
  407a8a:	f090 0f00 	teq	r0, #0
  407a8e:	bf17      	itett	ne
  407a90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  407a94:	4608      	moveq	r0, r1
  407a96:	f091 0f00 	teqne	r1, #0
  407a9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  407a9e:	d014      	beq.n	407aca <__aeabi_fmul+0x15e>
  407aa0:	ea92 0f0c 	teq	r2, ip
  407aa4:	d101      	bne.n	407aaa <__aeabi_fmul+0x13e>
  407aa6:	0242      	lsls	r2, r0, #9
  407aa8:	d10f      	bne.n	407aca <__aeabi_fmul+0x15e>
  407aaa:	ea93 0f0c 	teq	r3, ip
  407aae:	d103      	bne.n	407ab8 <__aeabi_fmul+0x14c>
  407ab0:	024b      	lsls	r3, r1, #9
  407ab2:	bf18      	it	ne
  407ab4:	4608      	movne	r0, r1
  407ab6:	d108      	bne.n	407aca <__aeabi_fmul+0x15e>
  407ab8:	ea80 0001 	eor.w	r0, r0, r1
  407abc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  407ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407ac8:	4770      	bx	lr
  407aca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407ace:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  407ad2:	4770      	bx	lr

00407ad4 <__aeabi_fdiv>:
  407ad4:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407ad8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407adc:	bf1e      	ittt	ne
  407ade:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  407ae2:	ea92 0f0c 	teqne	r2, ip
  407ae6:	ea93 0f0c 	teqne	r3, ip
  407aea:	d069      	beq.n	407bc0 <__aeabi_fdiv+0xec>
  407aec:	eba2 0203 	sub.w	r2, r2, r3
  407af0:	ea80 0c01 	eor.w	ip, r0, r1
  407af4:	0249      	lsls	r1, r1, #9
  407af6:	ea4f 2040 	mov.w	r0, r0, lsl #9
  407afa:	d037      	beq.n	407b6c <__aeabi_fdiv+0x98>
  407afc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  407b00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  407b04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  407b08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  407b0c:	428b      	cmp	r3, r1
  407b0e:	bf38      	it	cc
  407b10:	005b      	lslcc	r3, r3, #1
  407b12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  407b16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  407b1a:	428b      	cmp	r3, r1
  407b1c:	bf24      	itt	cs
  407b1e:	1a5b      	subcs	r3, r3, r1
  407b20:	ea40 000c 	orrcs.w	r0, r0, ip
  407b24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  407b28:	bf24      	itt	cs
  407b2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  407b2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407b32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  407b36:	bf24      	itt	cs
  407b38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  407b3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407b40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  407b44:	bf24      	itt	cs
  407b46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  407b4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407b4e:	011b      	lsls	r3, r3, #4
  407b50:	bf18      	it	ne
  407b52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  407b56:	d1e0      	bne.n	407b1a <__aeabi_fdiv+0x46>
  407b58:	2afd      	cmp	r2, #253	; 0xfd
  407b5a:	f63f af50 	bhi.w	4079fe <__aeabi_fmul+0x92>
  407b5e:	428b      	cmp	r3, r1
  407b60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  407b64:	bf08      	it	eq
  407b66:	f020 0001 	biceq.w	r0, r0, #1
  407b6a:	4770      	bx	lr
  407b6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  407b70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  407b74:	327f      	adds	r2, #127	; 0x7f
  407b76:	bfc2      	ittt	gt
  407b78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  407b7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  407b80:	4770      	bxgt	lr
  407b82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407b86:	f04f 0300 	mov.w	r3, #0
  407b8a:	3a01      	subs	r2, #1
  407b8c:	e737      	b.n	4079fe <__aeabi_fmul+0x92>
  407b8e:	f092 0f00 	teq	r2, #0
  407b92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  407b96:	bf02      	ittt	eq
  407b98:	0040      	lsleq	r0, r0, #1
  407b9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  407b9e:	3a01      	subeq	r2, #1
  407ba0:	d0f9      	beq.n	407b96 <__aeabi_fdiv+0xc2>
  407ba2:	ea40 000c 	orr.w	r0, r0, ip
  407ba6:	f093 0f00 	teq	r3, #0
  407baa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407bae:	bf02      	ittt	eq
  407bb0:	0049      	lsleq	r1, r1, #1
  407bb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407bb6:	3b01      	subeq	r3, #1
  407bb8:	d0f9      	beq.n	407bae <__aeabi_fdiv+0xda>
  407bba:	ea41 010c 	orr.w	r1, r1, ip
  407bbe:	e795      	b.n	407aec <__aeabi_fdiv+0x18>
  407bc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407bc4:	ea92 0f0c 	teq	r2, ip
  407bc8:	d108      	bne.n	407bdc <__aeabi_fdiv+0x108>
  407bca:	0242      	lsls	r2, r0, #9
  407bcc:	f47f af7d 	bne.w	407aca <__aeabi_fmul+0x15e>
  407bd0:	ea93 0f0c 	teq	r3, ip
  407bd4:	f47f af70 	bne.w	407ab8 <__aeabi_fmul+0x14c>
  407bd8:	4608      	mov	r0, r1
  407bda:	e776      	b.n	407aca <__aeabi_fmul+0x15e>
  407bdc:	ea93 0f0c 	teq	r3, ip
  407be0:	d104      	bne.n	407bec <__aeabi_fdiv+0x118>
  407be2:	024b      	lsls	r3, r1, #9
  407be4:	f43f af4c 	beq.w	407a80 <__aeabi_fmul+0x114>
  407be8:	4608      	mov	r0, r1
  407bea:	e76e      	b.n	407aca <__aeabi_fmul+0x15e>
  407bec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  407bf0:	bf18      	it	ne
  407bf2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  407bf6:	d1ca      	bne.n	407b8e <__aeabi_fdiv+0xba>
  407bf8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  407bfc:	f47f af5c 	bne.w	407ab8 <__aeabi_fmul+0x14c>
  407c00:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  407c04:	f47f af3c 	bne.w	407a80 <__aeabi_fmul+0x114>
  407c08:	e75f      	b.n	407aca <__aeabi_fmul+0x15e>
  407c0a:	bf00      	nop

00407c0c <__gesf2>:
  407c0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  407c10:	e006      	b.n	407c20 <__cmpsf2+0x4>
  407c12:	bf00      	nop

00407c14 <__lesf2>:
  407c14:	f04f 0c01 	mov.w	ip, #1
  407c18:	e002      	b.n	407c20 <__cmpsf2+0x4>
  407c1a:	bf00      	nop

00407c1c <__cmpsf2>:
  407c1c:	f04f 0c01 	mov.w	ip, #1
  407c20:	f84d cd04 	str.w	ip, [sp, #-4]!
  407c24:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407c28:	ea4f 0341 	mov.w	r3, r1, lsl #1
  407c2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407c30:	bf18      	it	ne
  407c32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407c36:	d011      	beq.n	407c5c <__cmpsf2+0x40>
  407c38:	b001      	add	sp, #4
  407c3a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  407c3e:	bf18      	it	ne
  407c40:	ea90 0f01 	teqne	r0, r1
  407c44:	bf58      	it	pl
  407c46:	ebb2 0003 	subspl.w	r0, r2, r3
  407c4a:	bf88      	it	hi
  407c4c:	17c8      	asrhi	r0, r1, #31
  407c4e:	bf38      	it	cc
  407c50:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  407c54:	bf18      	it	ne
  407c56:	f040 0001 	orrne.w	r0, r0, #1
  407c5a:	4770      	bx	lr
  407c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407c60:	d102      	bne.n	407c68 <__cmpsf2+0x4c>
  407c62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  407c66:	d105      	bne.n	407c74 <__cmpsf2+0x58>
  407c68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  407c6c:	d1e4      	bne.n	407c38 <__cmpsf2+0x1c>
  407c6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  407c72:	d0e1      	beq.n	407c38 <__cmpsf2+0x1c>
  407c74:	f85d 0b04 	ldr.w	r0, [sp], #4
  407c78:	4770      	bx	lr
  407c7a:	bf00      	nop

00407c7c <__aeabi_cfrcmple>:
  407c7c:	4684      	mov	ip, r0
  407c7e:	4608      	mov	r0, r1
  407c80:	4661      	mov	r1, ip
  407c82:	e7ff      	b.n	407c84 <__aeabi_cfcmpeq>

00407c84 <__aeabi_cfcmpeq>:
  407c84:	b50f      	push	{r0, r1, r2, r3, lr}
  407c86:	f7ff ffc9 	bl	407c1c <__cmpsf2>
  407c8a:	2800      	cmp	r0, #0
  407c8c:	bf48      	it	mi
  407c8e:	f110 0f00 	cmnmi.w	r0, #0
  407c92:	bd0f      	pop	{r0, r1, r2, r3, pc}

00407c94 <__aeabi_fcmpeq>:
  407c94:	f84d ed08 	str.w	lr, [sp, #-8]!
  407c98:	f7ff fff4 	bl	407c84 <__aeabi_cfcmpeq>
  407c9c:	bf0c      	ite	eq
  407c9e:	2001      	moveq	r0, #1
  407ca0:	2000      	movne	r0, #0
  407ca2:	f85d fb08 	ldr.w	pc, [sp], #8
  407ca6:	bf00      	nop

00407ca8 <__aeabi_fcmplt>:
  407ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cac:	f7ff ffea 	bl	407c84 <__aeabi_cfcmpeq>
  407cb0:	bf34      	ite	cc
  407cb2:	2001      	movcc	r0, #1
  407cb4:	2000      	movcs	r0, #0
  407cb6:	f85d fb08 	ldr.w	pc, [sp], #8
  407cba:	bf00      	nop

00407cbc <__aeabi_fcmple>:
  407cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cc0:	f7ff ffe0 	bl	407c84 <__aeabi_cfcmpeq>
  407cc4:	bf94      	ite	ls
  407cc6:	2001      	movls	r0, #1
  407cc8:	2000      	movhi	r0, #0
  407cca:	f85d fb08 	ldr.w	pc, [sp], #8
  407cce:	bf00      	nop

00407cd0 <__aeabi_fcmpge>:
  407cd0:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cd4:	f7ff ffd2 	bl	407c7c <__aeabi_cfrcmple>
  407cd8:	bf94      	ite	ls
  407cda:	2001      	movls	r0, #1
  407cdc:	2000      	movhi	r0, #0
  407cde:	f85d fb08 	ldr.w	pc, [sp], #8
  407ce2:	bf00      	nop

00407ce4 <__aeabi_fcmpgt>:
  407ce4:	f84d ed08 	str.w	lr, [sp, #-8]!
  407ce8:	f7ff ffc8 	bl	407c7c <__aeabi_cfrcmple>
  407cec:	bf34      	ite	cc
  407cee:	2001      	movcc	r0, #1
  407cf0:	2000      	movcs	r0, #0
  407cf2:	f85d fb08 	ldr.w	pc, [sp], #8
  407cf6:	bf00      	nop

00407cf8 <__aeabi_f2iz>:
  407cf8:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407cfc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  407d00:	d30f      	bcc.n	407d22 <__aeabi_f2iz+0x2a>
  407d02:	f04f 039e 	mov.w	r3, #158	; 0x9e
  407d06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  407d0a:	d90d      	bls.n	407d28 <__aeabi_f2iz+0x30>
  407d0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
  407d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407d14:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  407d18:	fa23 f002 	lsr.w	r0, r3, r2
  407d1c:	bf18      	it	ne
  407d1e:	4240      	negne	r0, r0
  407d20:	4770      	bx	lr
  407d22:	f04f 0000 	mov.w	r0, #0
  407d26:	4770      	bx	lr
  407d28:	f112 0f61 	cmn.w	r2, #97	; 0x61
  407d2c:	d101      	bne.n	407d32 <__aeabi_f2iz+0x3a>
  407d2e:	0242      	lsls	r2, r0, #9
  407d30:	d105      	bne.n	407d3e <__aeabi_f2iz+0x46>
  407d32:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  407d36:	bf08      	it	eq
  407d38:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407d3c:	4770      	bx	lr
  407d3e:	f04f 0000 	mov.w	r0, #0
  407d42:	4770      	bx	lr

00407d44 <__aeabi_f2uiz>:
  407d44:	0042      	lsls	r2, r0, #1
  407d46:	d20e      	bcs.n	407d66 <__aeabi_f2uiz+0x22>
  407d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  407d4c:	d30b      	bcc.n	407d66 <__aeabi_f2uiz+0x22>
  407d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  407d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  407d56:	d409      	bmi.n	407d6c <__aeabi_f2uiz+0x28>
  407d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
  407d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407d60:	fa23 f002 	lsr.w	r0, r3, r2
  407d64:	4770      	bx	lr
  407d66:	f04f 0000 	mov.w	r0, #0
  407d6a:	4770      	bx	lr
  407d6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
  407d70:	d101      	bne.n	407d76 <__aeabi_f2uiz+0x32>
  407d72:	0242      	lsls	r2, r0, #9
  407d74:	d102      	bne.n	407d7c <__aeabi_f2uiz+0x38>
  407d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  407d7a:	4770      	bx	lr
  407d7c:	f04f 0000 	mov.w	r0, #0
  407d80:	4770      	bx	lr
  407d82:	bf00      	nop
  407d84:	0a0d0a0d 	.word	0x0a0d0a0d
  407d88:	346d6173 	.word	0x346d6173
  407d8c:	63323364 	.word	0x63323364
  407d90:	756d6920 	.word	0x756d6920
  407d94:	6d656420 	.word	0x6d656420
  407d98:	2e2e2e6f 	.word	0x2e2e2e6f
  407d9c:	00000a0d 	.word	0x00000a0d
  407da0:	0000002e 	.word	0x0000002e
  407da4:	61656c70 	.word	0x61656c70
  407da8:	70206573 	.word	0x70206573
  407dac:	73736572 	.word	0x73736572
  407db0:	74756220 	.word	0x74756220
  407db4:	206e6f74 	.word	0x206e6f74
  407db8:	61206f74 	.word	0x61206f74
  407dbc:	6d206d72 	.word	0x6d206d72
  407dc0:	726f746f 	.word	0x726f746f
  407dc4:	000a0d73 	.word	0x000a0d73
  407dc8:	6f746f6d 	.word	0x6f746f6d
  407dcc:	72615f72 	.word	0x72615f72
  407dd0:	3a64656d 	.word	0x3a64656d
  407dd4:	0d642520 	.word	0x0d642520
  407dd8:	0000000a 	.word	0x0000000a
  407ddc:	6c6c6f72 	.word	0x6c6c6f72
  407de0:	7469702f 	.word	0x7469702f
  407de4:	792f6863 	.word	0x792f6863
  407de8:	6d2f7761 	.word	0x6d2f7761
  407dec:	65206761 	.word	0x65206761
  407df0:	726f7272 	.word	0x726f7272
  407df4:	6469702f 	.word	0x6469702f
  407df8:	6625203a 	.word	0x6625203a
  407dfc:	20662520 	.word	0x20662520
  407e00:	25206625 	.word	0x25206625
  407e04:	66252066 	.word	0x66252066
  407e08:	0d662520 	.word	0x0d662520
  407e0c:	0000000a 	.word	0x0000000a
  407e10:	00787061 	.word	0x00787061
  407e14:	642e5041 	.word	0x642e5041
  407e18:	72697365 	.word	0x72697365
  407e1c:	615f6465 	.word	0x615f6465
  407e20:	656c676e 	.word	0x656c676e
  407e24:	203a785f 	.word	0x203a785f
  407e28:	0a0d6625 	.word	0x0a0d6625
  407e2c:	00000000 	.word	0x00000000
  407e30:	00797061 	.word	0x00797061
  407e34:	642e5041 	.word	0x642e5041
  407e38:	72697365 	.word	0x72697365
  407e3c:	615f6465 	.word	0x615f6465
  407e40:	656c676e 	.word	0x656c676e
  407e44:	203a795f 	.word	0x203a795f
  407e48:	0a0d6625 	.word	0x0a0d6625
  407e4c:	00000000 	.word	0x00000000
  407e50:	0000706b 	.word	0x0000706b
  407e54:	666e6f63 	.word	0x666e6f63
  407e58:	702e6769 	.word	0x702e6769
  407e5c:	6b5f6469 	.word	0x6b5f6469
  407e60:	25203a70 	.word	0x25203a70
  407e64:	000a0d66 	.word	0x000a0d66
  407e68:	0000696b 	.word	0x0000696b
  407e6c:	666e6f63 	.word	0x666e6f63
  407e70:	702e6769 	.word	0x702e6769
  407e74:	6b5f6469 	.word	0x6b5f6469
  407e78:	25203a69 	.word	0x25203a69
  407e7c:	000a0d66 	.word	0x000a0d66
  407e80:	0000646b 	.word	0x0000646b
  407e84:	666e6f63 	.word	0x666e6f63
  407e88:	702e6769 	.word	0x702e6769
  407e8c:	6b5f6469 	.word	0x6b5f6469
  407e90:	25203a64 	.word	0x25203a64
  407e94:	000a0d66 	.word	0x000a0d66
  407e98:	5f756d69 	.word	0x5f756d69
  407e9c:	696c6163 	.word	0x696c6163
  407ea0:	74617262 	.word	0x74617262
  407ea4:	00000065 	.word	0x00000065
  407ea8:	5f756d69 	.word	0x5f756d69
  407eac:	696c6163 	.word	0x696c6163
  407eb0:	74617262 	.word	0x74617262
  407eb4:	25203a65 	.word	0x25203a65
  407eb8:	000a0d64 	.word	0x000a0d64
  407ebc:	6f746f6d 	.word	0x6f746f6d
  407ec0:	72615f72 	.word	0x72615f72
  407ec4:	0064656d 	.word	0x0064656d
  407ec8:	6f746f6d 	.word	0x6f746f6d
  407ecc:	666f5f72 	.word	0x666f5f72
  407ed0:	74657366 	.word	0x74657366
  407ed4:	00000000 	.word	0x00000000
  407ed8:	6f746f6d 	.word	0x6f746f6d
  407edc:	666f5f72 	.word	0x666f5f72
  407ee0:	74657366 	.word	0x74657366
  407ee4:	6425203a 	.word	0x6425203a
  407ee8:	00000a0d 	.word	0x00000a0d
  407eec:	6f746f6d 	.word	0x6f746f6d
  407ef0:	696d5f72 	.word	0x696d5f72
  407ef4:	0000006e 	.word	0x0000006e
  407ef8:	6f746f6d 	.word	0x6f746f6d
  407efc:	696d2072 	.word	0x696d2072
  407f00:	6f63206e 	.word	0x6f63206e
  407f04:	6e616d6d 	.word	0x6e616d6d
  407f08:	73692064 	.word	0x73692064
  407f0c:	64657573 	.word	0x64657573
  407f10:	00000a0d 	.word	0x00000a0d
  407f14:	6f746f6d 	.word	0x6f746f6d
  407f18:	696d5f72 	.word	0x696d5f72
  407f1c:	00000064 	.word	0x00000064
  407f20:	6f746f6d 	.word	0x6f746f6d
  407f24:	696d2072 	.word	0x696d2072
  407f28:	6f632064 	.word	0x6f632064
  407f2c:	6e616d6d 	.word	0x6e616d6d
  407f30:	73692064 	.word	0x73692064
  407f34:	64657573 	.word	0x64657573
  407f38:	00000a0d 	.word	0x00000a0d
  407f3c:	6f746f6d 	.word	0x6f746f6d
  407f40:	616d5f72 	.word	0x616d5f72
  407f44:	00000078 	.word	0x00000078
  407f48:	6f746f6d 	.word	0x6f746f6d
  407f4c:	616d2072 	.word	0x616d2072
  407f50:	6f632078 	.word	0x6f632078
  407f54:	6e616d6d 	.word	0x6e616d6d
  407f58:	73692064 	.word	0x73692064
  407f5c:	64657573 	.word	0x64657573
  407f60:	00000a0d 	.word	0x00000a0d
  407f64:	5f676f6c 	.word	0x5f676f6c
  407f68:	00756d69 	.word	0x00756d69
  407f6c:	5f676f6c 	.word	0x5f676f6c
  407f70:	3a756d69 	.word	0x3a756d69
  407f74:	0d642520 	.word	0x0d642520
  407f78:	0000000a 	.word	0x0000000a
  407f7c:	5f676f6c 	.word	0x5f676f6c
  407f80:	6f746f6d 	.word	0x6f746f6d
  407f84:	00000072 	.word	0x00000072
  407f88:	5f676f6c 	.word	0x5f676f6c
  407f8c:	6f746f6d 	.word	0x6f746f6d
  407f90:	25203a72 	.word	0x25203a72
  407f94:	000a0d64 	.word	0x000a0d64
  407f98:	00000020 	.word	0x00000020
  407f9c:	5f697774 	.word	0x5f697774
  407fa0:	7473616d 	.word	0x7473616d
  407fa4:	695f7265 	.word	0x695f7265
  407fa8:	3a74696e 	.word	0x3a74696e
  407fac:	69616620 	.word	0x69616620
  407fb0:	0d64656c 	.word	0x0d64656c
  407fb4:	0000000a 	.word	0x0000000a
  407fb8:	5f697774 	.word	0x5f697774
  407fbc:	7473616d 	.word	0x7473616d
  407fc0:	695f7265 	.word	0x695f7265
  407fc4:	3a74696e 	.word	0x3a74696e
  407fc8:	63757320 	.word	0x63757320
  407fcc:	73736563 	.word	0x73736563
  407fd0:	00000a0d 	.word	0x00000a0d
  407fd4:	5f697774 	.word	0x5f697774
  407fd8:	626f7270 	.word	0x626f7270
  407fdc:	66203a65 	.word	0x66203a65
  407fe0:	656c6961 	.word	0x656c6961
  407fe4:	000a0d64 	.word	0x000a0d64
  407fe8:	5f697774 	.word	0x5f697774
  407fec:	626f7270 	.word	0x626f7270
  407ff0:	73203a65 	.word	0x73203a65
  407ff4:	65636375 	.word	0x65636375
  407ff8:	0a0d7373 	.word	0x0a0d7373
  407ffc:	00000000 	.word	0x00000000
  408000:	62616e45 	.word	0x62616e45
  408004:	0064656c 	.word	0x0064656c
  408008:	61736944 	.word	0x61736944
  40800c:	64656c62 	.word	0x64656c62
  408010:	00000000 	.word	0x00000000
  408014:	69766544 	.word	0x69766544
  408018:	203a6563 	.word	0x203a6563
  40801c:	31257830 	.word	0x31257830
  408020:	000a0d78 	.word	0x000a0d78
  408024:	65656c53 	.word	0x65656c53
  408028:	6f4d2070 	.word	0x6f4d2070
  40802c:	203a6564 	.word	0x203a6564
  408030:	0a0d7325 	.word	0x0a0d7325
  408034:	00000000 	.word	0x00000000
  408038:	636f6c43 	.word	0x636f6c43
  40803c:	6f53206b 	.word	0x6f53206b
  408040:	65637275 	.word	0x65637275
  408044:	0000203a 	.word	0x0000203a
  408048:	65746e49 	.word	0x65746e49
  40804c:	6c616e72 	.word	0x6c616e72
  408050:	484d3820 	.word	0x484d3820
  408054:	736f207a 	.word	0x736f207a
  408058:	6c6c6963 	.word	0x6c6c6963
  40805c:	726f7461 	.word	0x726f7461
  408060:	00000a0d 	.word	0x00000a0d
  408064:	204c4c50 	.word	0x204c4c50
  408068:	68746977 	.word	0x68746977
  40806c:	61205820 	.word	0x61205820
  408070:	20736978 	.word	0x20736978
  408074:	6f727967 	.word	0x6f727967
  408078:	706f6373 	.word	0x706f6373
  40807c:	65722065 	.word	0x65722065
  408080:	65726566 	.word	0x65726566
  408084:	0d65636e 	.word	0x0d65636e
  408088:	0000000a 	.word	0x0000000a
  40808c:	6f727947 	.word	0x6f727947
  408090:	706f6373 	.word	0x706f6373
  408094:	00203a65 	.word	0x00203a65
  408098:	20303532 	.word	0x20303532
  40809c:	0d737064 	.word	0x0d737064
  4080a0:	0000000a 	.word	0x0000000a
  4080a4:	20303035 	.word	0x20303035
  4080a8:	0d737064 	.word	0x0d737064
  4080ac:	0000000a 	.word	0x0000000a
  4080b0:	30303031 	.word	0x30303031
  4080b4:	73706420 	.word	0x73706420
  4080b8:	00000a0d 	.word	0x00000a0d
  4080bc:	30303032 	.word	0x30303032
  4080c0:	73706420 	.word	0x73706420
  4080c4:	00000a0d 	.word	0x00000a0d
  4080c8:	5f657375 	.word	0x5f657375
  4080cc:	696c6163 	.word	0x696c6163
  4080d0:	74617262 	.word	0x74617262
  4080d4:	25203a65 	.word	0x25203a65
  4080d8:	000a0d64 	.word	0x000a0d64
  4080dc:	75746361 	.word	0x75746361
  4080e0:	745f6c61 	.word	0x745f6c61
  4080e4:	73657268 	.word	0x73657268
  4080e8:	646c6f68 	.word	0x646c6f68
  4080ec:	6625203a 	.word	0x6625203a
  4080f0:	00000a0d 	.word	0x00000a0d
  4080f4:	5f737064 	.word	0x5f737064
  4080f8:	5f726570 	.word	0x5f726570
  4080fc:	69676964 	.word	0x69676964
  408100:	25203a74 	.word	0x25203a74
  408104:	000a0d66 	.word	0x000a0d66
  408108:	676e6172 	.word	0x676e6172
  40810c:	65705f65 	.word	0x65705f65
  408110:	69645f72 	.word	0x69645f72
  408114:	3a746967 	.word	0x3a746967
  408118:	0d662520 	.word	0x0d662520
  40811c:	0000000a 	.word	0x0000000a
  408120:	696c6163 	.word	0x696c6163
  408124:	74617262 	.word	0x74617262
  408128:	20676e69 	.word	0x20676e69
  40812c:	2e756d69 	.word	0x2e756d69
  408130:	0a0d2e2e 	.word	0x0a0d2e2e
  408134:	00000000 	.word	0x00000000
  408138:	696c6163 	.word	0x696c6163
  40813c:	74617262 	.word	0x74617262
  408140:	206e6f69 	.word	0x206e6f69
  408144:	706d6f63 	.word	0x706d6f63
  408148:	6574656c 	.word	0x6574656c
  40814c:	000a0d2e 	.word	0x000a0d2e
  408150:	6f746f6d 	.word	0x6f746f6d
  408154:	6e695f72 	.word	0x6e695f72
  408158:	0a0d7469 	.word	0x0a0d7469
  40815c:	00000000 	.word	0x00000000
  408160:	6f746f6d 	.word	0x6f746f6d
  408164:	756f5f72 	.word	0x756f5f72
  408168:	74757074 	.word	0x74757074
  40816c:	6425203a 	.word	0x6425203a
  408170:	00000a0d 	.word	0x00000a0d
  408174:	00000001 	.word	0x00000001
  408178:	00000002 	.word	0x00000002
  40817c:	00000004 	.word	0x00000004
  408180:	00000008 	.word	0x00000008
  408184:	00000010 	.word	0x00000010
  408188:	00000020 	.word	0x00000020
  40818c:	00000040 	.word	0x00000040
  408190:	00000080 	.word	0x00000080
  408194:	00000100 	.word	0x00000100
  408198:	00000200 	.word	0x00000200
  40819c:	00000400 	.word	0x00000400
  4081a0:	74727173 	.word	0x74727173
  4081a4:	00000000 	.word	0x00000000

004081a8 <atanlo>:
  4081a8:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  4081b8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

004081c8 <atanhi>:
  4081c8:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  4081d8:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

004081e8 <_global_impure_ptr>:
  4081e8:	20000018 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  4081f8:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  408208:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  408218:	63626139 00666564                       9abcdef.

00408220 <tinytens>:
  408220:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  408230:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  408240:	64ac6f43 11680628                       Co.d(.h.

00408248 <fpi.6179>:
  408248:	00000035 fffffbce 000003cb 00000001     5...............
  408258:	00000000                                ....

0040825c <fpinan.6215>:
  40825c:	00000034 fffffbce 000003cb 00000001     4...............
  40826c:	00000000 69666e49 7974696e 4e614e00     ....Infinity.NaN
  40827c:	00000000                                ....

00408280 <__sf_fake_stdin>:
	...

004082a0 <__sf_fake_stdout>:
	...

004082c0 <__sf_fake_stderr>:
	...
  4082e0:	4f500043 00584953 0000002e 00000000     C.POSIX.........

004082f0 <__mprec_tens>:
  4082f0:	00000000 3ff00000 00000000 40240000     .......?......$@
  408300:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408310:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408320:	00000000 412e8480 00000000 416312d0     .......A......cA
  408330:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408340:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408350:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408360:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408370:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408380:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408390:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4083a0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4083b0:	79d99db4 44ea7843                       ...yCx.D

004083b8 <__mprec_bigtens>:
  4083b8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4083c8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4083d8:	7f73bf3c 75154fdd                       <.s..O.u

004083e0 <p05.6097>:
  4083e0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  4083f0:	6c680020 6665004c 47464567 20200000               .hlL.efgEFG.

004083fd <_ctype_>:
  4083fd:	20202000 20202020 28282020 20282828     .         ((((( 
  40840d:	20202020 20202020 20202020 20202020                     
  40841d:	10108820 10101010 10101010 10101010      ...............
  40842d:	04040410 04040404 10040404 10101010     ................
  40843d:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40844d:	01010101 01010101 01010101 10101010     ................
  40845d:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40846d:	02020202 02020202 02020202 10101010     ................
  40847d:	00000020 00000000 00000000 00000000      ...............
	...

00408500 <_init>:
  408500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408502:	bf00      	nop
  408504:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408506:	bc08      	pop	{r3}
  408508:	469e      	mov	lr, r3
  40850a:	4770      	bx	lr

0040850c <__init_array_start>:
  40850c:	004000f1 	.word	0x004000f1

00408510 <_fini>:
  408510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408512:	bf00      	nop
  408514:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408516:	bc08      	pop	{r3}
  408518:	469e      	mov	lr, r3
  40851a:	4770      	bx	lr
  40851c:	0000      	movs	r0, r0
	...

00408520 <__portable_delay_cycles_veneer>:
  408520:	f85f f000 	ldr.w	pc, [pc]	; 408524 <__portable_delay_cycles_veneer+0x4>
  408524:	20000001 	.word	0x20000001

00408528 <__fini_array_start>:
  408528:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <kp>:
2000000c:	0000 3f80                                   ...?

20000010 <SystemCoreClock>:
20000010:	0900 003d                                   ..=.

20000014 <__fdlib_version>:
20000014:	0001 0000                                   ....

20000018 <impure_data>:
20000018:	0000 0000 8280 0040 82a0 0040 82c0 0040     ......@...@...@.
	...

20000078 <_impure_ptr>:
20000078:	0018 2000                                   ... 

2000007c <__global_locale>:
2000007c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000009c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000011c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000013c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000015c:	6c61 0040 5ef5 0040 0000 0000 83fd 0040     al@..^@.......@.
2000016c:	82e8 0040 83f1 0040 83f1 0040 83f1 0040     ..@...@...@...@.
2000017c:	83f1 0040 83f1 0040 83f1 0040 83f1 0040     ..@...@...@...@.
2000018c:	83f1 0040 83f1 0040 ffff ffff ffff ffff     ..@...@.........
2000019c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001c4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
