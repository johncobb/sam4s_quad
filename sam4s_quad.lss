
sam4s_quad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000853c  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e4  20000000  0040853c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000690  200001e4  00408720  000201e4  2**2
                  ALLOC
  3 .stack        00003004  20000874  00408db0  000201e4  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016907  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003952  00000000  00000000  00036b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005dfa  00000000  00000000  0003a4d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ed8  00000000  00000000  000402cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d38  00000000  00000000  000411a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000189cd  00000000  00000000  00041edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014a7d  00000000  00000000  0005a8ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00055906  00000000  00000000  0006f329  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003370  00000000  00000000  000c4c30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003878 	.word	0x20003878
  400004:	00402365 	.word	0x00402365
  400008:	00402361 	.word	0x00402361
  40000c:	00402361 	.word	0x00402361
  400010:	00402361 	.word	0x00402361
  400014:	00402361 	.word	0x00402361
  400018:	00402361 	.word	0x00402361
	...
  40002c:	00402361 	.word	0x00402361
  400030:	00402361 	.word	0x00402361
  400034:	00000000 	.word	0x00000000
  400038:	00402361 	.word	0x00402361
  40003c:	00400569 	.word	0x00400569
  400040:	00402361 	.word	0x00402361
  400044:	00402361 	.word	0x00402361
  400048:	00402361 	.word	0x00402361
  40004c:	00402361 	.word	0x00402361
  400050:	00402361 	.word	0x00402361
  400054:	00402361 	.word	0x00402361
  400058:	00402361 	.word	0x00402361
  40005c:	00402361 	.word	0x00402361
  400060:	00402361 	.word	0x00402361
  400064:	00402361 	.word	0x00402361
  400068:	00000000 	.word	0x00000000
  40006c:	00401fa1 	.word	0x00401fa1
  400070:	00401fb1 	.word	0x00401fb1
  400074:	00401fc1 	.word	0x00401fc1
  400078:	00402361 	.word	0x00402361
  40007c:	00402361 	.word	0x00402361
	...
  400088:	00402361 	.word	0x00402361
  40008c:	00402361 	.word	0x00402361
  400090:	00402361 	.word	0x00402361
  400094:	00402361 	.word	0x00402361
  400098:	00402361 	.word	0x00402361
  40009c:	00402361 	.word	0x00402361
  4000a0:	00402361 	.word	0x00402361
  4000a4:	00402361 	.word	0x00402361
  4000a8:	00402361 	.word	0x00402361
  4000ac:	00402361 	.word	0x00402361
  4000b0:	00402361 	.word	0x00402361
  4000b4:	00402361 	.word	0x00402361
  4000b8:	00402361 	.word	0x00402361
  4000bc:	00402361 	.word	0x00402361
  4000c0:	00402361 	.word	0x00402361
  4000c4:	00402361 	.word	0x00402361
  4000c8:	00402361 	.word	0x00402361

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e4 	.word	0x200001e4
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040853c 	.word	0x0040853c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001e8 	.word	0x200001e8
  40011c:	0040853c 	.word	0x0040853c
  400120:	0040853c 	.word	0x0040853c
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f002 f9f8 	bl	402520 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 ff80 	bl	402038 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 ffa8 	bl	40208c <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 ffac 	bl	40209c <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 ffaf 	bl	4020ac <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f001 ff3c 	bl	401fd0 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f002 f958 	bl	40240c <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f002 f9df 	bl	402520 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	20000500 	.word	0x20000500
  4001a8:	200004f8 	.word	0x200004f8

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	200004fc 	.word	0x200004fc
  4001f8:	20000500 	.word	0x20000500

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 ffa8 	bl	402168 <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 ff9d 	bl	402168 <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 ffa6 	bl	402190 <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 ff99 	bl	402190 <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f001 ff64 	bl	402158 <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f001 ff58 	bl	402158 <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f001 ff5e 	bl	40217c <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f001 ff52 	bl	40217c <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <main>:
    sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main(void)
{
  4002f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002f8:	b099      	sub	sp, #100	; 0x64
    sysclk_init();
  4002fa:	f7ff ff15 	bl	400128 <sysclk_init>
    board_init();
  4002fe:	f001 fb01 	bl	401904 <board_init>
    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400302:	2013      	movs	r0, #19
  400304:	f001 feda 	bl	4020bc <pmc_enable_periph_clk>
    pmc_enable_periph_clk(ID_PWM);
  400308:	201f      	movs	r0, #31
  40030a:	f001 fed7 	bl	4020bc <pmc_enable_periph_clk>
    config_init();
  40030e:	f000 f911 	bl	400534 <config_init>
    cph_millis_init();
  400312:	f000 f931 	bl	400578 <cph_millis_init>
    cli_init();
  400316:	f000 f959 	bl	4005cc <cli_init>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40031a:	2009      	movs	r0, #9
  40031c:	f001 fece 	bl	4020bc <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400320:	4c6d      	ldr	r4, [pc, #436]	; (4004d8 <main+0x1e4>)
  400322:	4b6e      	ldr	r3, [pc, #440]	; (4004dc <main+0x1e8>)
  400324:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400326:	4a6e      	ldr	r2, [pc, #440]	; (4004e0 <main+0x1ec>)
  400328:	4b6e      	ldr	r3, [pc, #440]	; (4004e4 <main+0x1f0>)
  40032a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40032c:	4a6e      	ldr	r2, [pc, #440]	; (4004e8 <main+0x1f4>)
  40032e:	4b6f      	ldr	r3, [pc, #444]	; (4004ec <main+0x1f8>)
  400330:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400332:	4b6f      	ldr	r3, [pc, #444]	; (4004f0 <main+0x1fc>)
  400334:	9315      	str	r3, [sp, #84]	; 0x54
	uart_settings.ul_baudrate = opt->baudrate;
  400336:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40033a:	9316      	str	r3, [sp, #88]	; 0x58
	uart_settings.ul_mode = opt->paritytype;
  40033c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400340:	9317      	str	r3, [sp, #92]	; 0x5c
  400342:	2009      	movs	r0, #9
  400344:	f001 feba 	bl	4020bc <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400348:	a915      	add	r1, sp, #84	; 0x54
  40034a:	4620      	mov	r0, r4
  40034c:	f001 fee4 	bl	402118 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400350:	4c68      	ldr	r4, [pc, #416]	; (4004f4 <main+0x200>)
  400352:	6823      	ldr	r3, [r4, #0]
  400354:	2100      	movs	r1, #0
  400356:	6898      	ldr	r0, [r3, #8]
  400358:	f003 fa12 	bl	403780 <setbuf>
	setbuf(stdin, NULL);
  40035c:	6823      	ldr	r3, [r4, #0]
  40035e:	2100      	movs	r1, #0
  400360:	6858      	ldr	r0, [r3, #4]
  400362:	f003 fa0d 	bl	403780 <setbuf>
    configure_console();
    ap_init();
  400366:	f001 fac3 	bl	4018f0 <ap_init>

    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  40036a:	4863      	ldr	r0, [pc, #396]	; (4004f8 <main+0x204>)
  40036c:	f003 fa00 	bl	403770 <puts>
  400370:	240a      	movs	r4, #10

    for (int i=0; i<10; i++) {
        printf(".");
  400372:	4e62      	ldr	r6, [pc, #392]	; (4004fc <main+0x208>)
        delay_ms(100);
  400374:	4d62      	ldr	r5, [pc, #392]	; (400500 <main+0x20c>)
    ap_init();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<10; i++) {
        printf(".");
  400376:	4630      	mov	r0, r6
  400378:	f003 f988 	bl	40368c <iprintf>
        delay_ms(100);
  40037c:	4628      	mov	r0, r5
  40037e:	f008 f8d7 	bl	408530 <__portable_delay_cycles_veneer>
    configure_console();
    ap_init();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<10; i++) {
  400382:	3c01      	subs	r4, #1
  400384:	d1f7      	bne.n	400376 <main+0x82>
        printf(".");
        delay_ms(100);
    }
    printf("\r\n");
  400386:	485f      	ldr	r0, [pc, #380]	; (400504 <main+0x210>)
  400388:	f003 f980 	bl	40368c <iprintf>

    
    if (imu_init()) {
  40038c:	f000 ff56 	bl	40123c <imu_init>
  400390:	2800      	cmp	r0, #0
  400392:	f000 809c 	beq.w	4004ce <main+0x1da>

        motor_init();
  400396:	f001 f8cd 	bl	401534 <motor_init>
        //     cli_tick();
        //     delay_ms(100);
        // }

        // Calibrate the imu
        imu_calibrate();
  40039a:	f000 ff6b 	bl	401274 <imu_calibrate>
        config.imu_calibrate = false;
  40039e:	2200      	movs	r2, #0
  4003a0:	4b59      	ldr	r3, [pc, #356]	; (400508 <main+0x214>)
  4003a2:	75da      	strb	r2, [r3, #23]
 
        

        printf("please press button to arm motors\r\n");
  4003a4:	4859      	ldr	r0, [pc, #356]	; (40050c <main+0x218>)
  4003a6:	f003 f971 	bl	40368c <iprintf>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4003aa:	4b59      	ldr	r3, [pc, #356]	; (400510 <main+0x21c>)
  4003ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        while(true) {
            if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  4003ae:	f012 0f04 	tst.w	r2, #4
  4003b2:	d1fb      	bne.n	4003ac <main+0xb8>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4003b4:	4b57      	ldr	r3, [pc, #348]	; (400514 <main+0x220>)
  4003b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4003b8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  4003bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4003c0:	4b54      	ldr	r3, [pc, #336]	; (400514 <main+0x220>)
  4003c2:	bf14      	ite	ne
  4003c4:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  4003c6:	631a      	streq	r2, [r3, #48]	; 0x30
                ioport_toggle_pin_level(LED0_GPIO);
                config.motor_armed = true;
  4003c8:	2101      	movs	r1, #1
  4003ca:	4b4f      	ldr	r3, [pc, #316]	; (400508 <main+0x214>)
  4003cc:	7519      	strb	r1, [r3, #20]
                printf("motor_armed: %d\r\n", config.motor_armed);
  4003ce:	4852      	ldr	r0, [pc, #328]	; (400518 <main+0x224>)
  4003d0:	f003 f95c 	bl	40368c <iprintf>
        }

        while(true) {


            if (config.imu_calibrate) {
  4003d4:	4c4c      	ldr	r4, [pc, #304]	; (400508 <main+0x214>)
                imu_calibrate();
                pid_init();
                config.imu_calibrate = false;
  4003d6:	2600      	movs	r6, #0

            // long y = (long) ap.imu.x_axis;

            long x = (long) pid_tick();

            long power_left = map(x, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);
  4003d8:	f240 477e 	movw	r7, #1150	; 0x47e
            long power_right = map(x, ANGLE_MID, ANGLE_MIN, PWM_MIN, PWM_MAX);

            if (config.motor_armed) {
                motor_set_power(motors[1], power_left + config.motor_offset);
  4003dc:	f8df a14c 	ldr.w	sl, [pc, #332]	; 40052c <main+0x238>
  4003e0:	f10a 0364 	add.w	r3, sl, #100	; 0x64
  4003e4:	9313      	str	r3, [sp, #76]	; 0x4c
                motor_set_power(motors[0], power_right + config.motor_offset);
            }


            if (config.log_imu) {
                if (cph_get_millis() >= f_log_timeout) {
  4003e6:	f8df b148 	ldr.w	fp, [pc, #328]	; 400530 <main+0x23c>
        }

        while(true) {


            if (config.imu_calibrate) {
  4003ea:	7de3      	ldrb	r3, [r4, #23]
  4003ec:	b123      	cbz	r3, 4003f8 <main+0x104>
                imu_calibrate();
  4003ee:	f000 ff41 	bl	401274 <imu_calibrate>
                pid_init();
  4003f2:	f001 f9d5 	bl	4017a0 <pid_init>
                config.imu_calibrate = false;
  4003f6:	75e6      	strb	r6, [r4, #23]
            }
            cli_tick();
  4003f8:	f000 faa4 	bl	400944 <cli_tick>
            imu_tick();
  4003fc:	f000 ff50 	bl	4012a0 <imu_tick>
            motor_tick();
  400400:	f001 f95c 	bl	4016bc <motor_tick>

            // long y = (long) ap.imu.x_axis;

            long x = (long) pid_tick();
  400404:	f001 f9f8 	bl	4017f8 <pid_tick>
  400408:	f007 fc7e 	bl	407d08 <__aeabi_f2iz>
  40040c:	4680      	mov	r8, r0

            long power_left = map(x, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);
  40040e:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  400412:	9500      	str	r5, [sp, #0]
  400414:	463b      	mov	r3, r7
  400416:	225a      	movs	r2, #90	; 0x5a
  400418:	4631      	mov	r1, r6
  40041a:	f000 f899 	bl	400550 <map>
  40041e:	4681      	mov	r9, r0
            long power_right = map(x, ANGLE_MID, ANGLE_MIN, PWM_MIN, PWM_MAX);
  400420:	9500      	str	r5, [sp, #0]
  400422:	463b      	mov	r3, r7
  400424:	f06f 0259 	mvn.w	r2, #89	; 0x59
  400428:	4631      	mov	r1, r6
  40042a:	4640      	mov	r0, r8
  40042c:	f000 f890 	bl	400550 <map>
  400430:	4605      	mov	r5, r0

            if (config.motor_armed) {
  400432:	7d23      	ldrb	r3, [r4, #20]
  400434:	b1db      	cbz	r3, 40046e <main+0x17a>
                motor_set_power(motors[1], power_left + config.motor_offset);
  400436:	6923      	ldr	r3, [r4, #16]
  400438:	444b      	add	r3, r9
  40043a:	9311      	str	r3, [sp, #68]	; 0x44
  40043c:	f04f 0844 	mov.w	r8, #68	; 0x44
  400440:	4642      	mov	r2, r8
  400442:	9913      	ldr	r1, [sp, #76]	; 0x4c
  400444:	4668      	mov	r0, sp
  400446:	f002 fc9f 	bl	402d88 <memcpy>
  40044a:	f10a 0354 	add.w	r3, sl, #84	; 0x54
  40044e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400450:	f001 f936 	bl	4016c0 <motor_set_power>
                motor_set_power(motors[0], power_right + config.motor_offset);
  400454:	6923      	ldr	r3, [r4, #16]
  400456:	441d      	add	r5, r3
  400458:	9511      	str	r5, [sp, #68]	; 0x44
  40045a:	4642      	mov	r2, r8
  40045c:	f10a 0110 	add.w	r1, sl, #16
  400460:	4668      	mov	r0, sp
  400462:	f002 fc91 	bl	402d88 <memcpy>
  400466:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  40046a:	f001 f929 	bl	4016c0 <motor_set_power>
            }


            if (config.log_imu) {
  40046e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  400472:	2b00      	cmp	r3, #0
  400474:	d0b9      	beq.n	4003ea <main+0xf6>
                if (cph_get_millis() >= f_log_timeout) {
  400476:	f8db 2000 	ldr.w	r2, [fp]
  40047a:	4b28      	ldr	r3, [pc, #160]	; (40051c <main+0x228>)
  40047c:	681b      	ldr	r3, [r3, #0]
  40047e:	429a      	cmp	r2, r3
  400480:	d3b3      	bcc.n	4003ea <main+0xf6>
                    f_log_timeout = cph_get_millis() + 50;
  400482:	f8db 3000 	ldr.w	r3, [fp]
  400486:	3332      	adds	r3, #50	; 0x32
  400488:	4a24      	ldr	r2, [pc, #144]	; (40051c <main+0x228>)
  40048a:	6013      	str	r3, [r2, #0]
                    printf("roll/pitch/yaw/mag error/pid: %f %f %f %f %f %f\r\n", ap.imu.x_axis, ap.imu.y_axis, ap.imu.z_axis, ap.mag.z_axis, pid);
  40048c:	4d24      	ldr	r5, [pc, #144]	; (400520 <main+0x22c>)
  40048e:	6828      	ldr	r0, [r5, #0]
  400490:	f006 fdca 	bl	407028 <__aeabi_f2d>
  400494:	4680      	mov	r8, r0
  400496:	4689      	mov	r9, r1
  400498:	4b22      	ldr	r3, [pc, #136]	; (400524 <main+0x230>)
  40049a:	6818      	ldr	r0, [r3, #0]
  40049c:	f006 fdc4 	bl	407028 <__aeabi_f2d>
  4004a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4004a4:	6968      	ldr	r0, [r5, #20]
  4004a6:	f006 fdbf 	bl	407028 <__aeabi_f2d>
  4004aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4004ae:	68a8      	ldr	r0, [r5, #8]
  4004b0:	f006 fdba 	bl	407028 <__aeabi_f2d>
  4004b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4004b8:	6868      	ldr	r0, [r5, #4]
  4004ba:	f006 fdb5 	bl	407028 <__aeabi_f2d>
  4004be:	e9cd 0100 	strd	r0, r1, [sp]
  4004c2:	4642      	mov	r2, r8
  4004c4:	464b      	mov	r3, r9
  4004c6:	4818      	ldr	r0, [pc, #96]	; (400528 <main+0x234>)
  4004c8:	f003 f8e0 	bl	40368c <iprintf>
  4004cc:	e78d      	b.n	4003ea <main+0xf6>
    //         delay_ms(500); 
    //     }


    // }
}
  4004ce:	2000      	movs	r0, #0
  4004d0:	b019      	add	sp, #100	; 0x64
  4004d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4004d6:	bf00      	nop
  4004d8:	400e0800 	.word	0x400e0800
  4004dc:	20000500 	.word	0x20000500
  4004e0:	0040027d 	.word	0x0040027d
  4004e4:	200004fc 	.word	0x200004fc
  4004e8:	004001fd 	.word	0x004001fd
  4004ec:	200004f8 	.word	0x200004f8
  4004f0:	07270e00 	.word	0x07270e00
  4004f4:	20000074 	.word	0x20000074
  4004f8:	00407d94 	.word	0x00407d94
  4004fc:	00407db0 	.word	0x00407db0
  400500:	000d1437 	.word	0x000d1437
  400504:	00407dac 	.word	0x00407dac
  400508:	200006f0 	.word	0x200006f0
  40050c:	00407db4 	.word	0x00407db4
  400510:	400e0e00 	.word	0x400e0e00
  400514:	400e1200 	.word	0x400e1200
  400518:	00407dd8 	.word	0x00407dd8
  40051c:	20000200 	.word	0x20000200
  400520:	20000820 	.word	0x20000820
  400524:	2000044c 	.word	0x2000044c
  400528:	00407dec 	.word	0x00407dec
  40052c:	20000534 	.word	0x20000534
  400530:	20000204 	.word	0x20000204

00400534 <config_init>:
	// config.axis_swap_xy = false;
	// config.fpv_freeze_pitch = false;
	// config.fpv_freeze_roll = false;
	// config.max_pwm_fpv_pitch = 80;
	// config.max_pwm_fpv_roll = 80;
    config.gyro_calibrate = true;
  400534:	4b05      	ldr	r3, [pc, #20]	; (40054c <config_init+0x18>)
  400536:	2101      	movs	r1, #1
  400538:	7559      	strb	r1, [r3, #21]
	config.accel_calibrate = false;
  40053a:	2200      	movs	r2, #0
  40053c:	759a      	strb	r2, [r3, #22]
	config.imu_calibrate = true;
  40053e:	75d9      	strb	r1, [r3, #23]
	config.log_motor = false;
  400540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	config.log_imu = false;
  400544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  400548:	4770      	bx	lr
  40054a:	bf00      	nop
  40054c:	200006f0 	.word	0x200006f0

00400550 <map>:
#include "cph_util.h"

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  400550:	b410      	push	{r4}
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  400552:	1a40      	subs	r0, r0, r1
  400554:	9c01      	ldr	r4, [sp, #4]
  400556:	1ae4      	subs	r4, r4, r3
  400558:	fb04 f000 	mul.w	r0, r4, r0
  40055c:	1a52      	subs	r2, r2, r1
  40055e:	fb90 f0f2 	sdiv	r0, r0, r2
  400562:	4418      	add	r0, r3
  400564:	bc10      	pop	{r4}
  400566:	4770      	bx	lr

00400568 <SysTick_Handler>:


volatile uint32_t g_cph_millis = 0;

void SysTick_Handler(void) {
	g_cph_millis++;
  400568:	4a02      	ldr	r2, [pc, #8]	; (400574 <SysTick_Handler+0xc>)
  40056a:	6813      	ldr	r3, [r2, #0]
  40056c:	3301      	adds	r3, #1
  40056e:	6013      	str	r3, [r2, #0]
  400570:	4770      	bx	lr
  400572:	bf00      	nop
  400574:	20000204 	.word	0x20000204

00400578 <cph_millis_init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400578:	4b05      	ldr	r3, [pc, #20]	; (400590 <cph_millis_init+0x18>)
  40057a:	4a06      	ldr	r2, [pc, #24]	; (400594 <cph_millis_init+0x1c>)
  40057c:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40057e:	21f0      	movs	r1, #240	; 0xf0
  400580:	4a05      	ldr	r2, [pc, #20]	; (400598 <cph_millis_init+0x20>)
  400582:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400586:	2200      	movs	r2, #0
  400588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40058a:	2207      	movs	r2, #7
  40058c:	601a      	str	r2, [r3, #0]
  40058e:	4770      	bx	lr
  400590:	e000e010 	.word	0xe000e010
  400594:	0001d4bf 	.word	0x0001d4bf
  400598:	e000ed00 	.word	0xe000ed00

0040059c <init_buffer>:
	init_buffer();
	init_lines();
}

void init_buffer()
{
  40059c:	b508      	push	{r3, lr}
	cli_line_index = 0;
  40059e:	2100      	movs	r1, #0
  4005a0:	4b03      	ldr	r3, [pc, #12]	; (4005b0 <init_buffer+0x14>)
  4005a2:	6019      	str	r1, [r3, #0]
	memset(cli_line_buffer, '\0', sizeof(cli_line_buffer));
  4005a4:	2281      	movs	r2, #129	; 0x81
  4005a6:	4803      	ldr	r0, [pc, #12]	; (4005b4 <init_buffer+0x18>)
  4005a8:	f002 fbf9 	bl	402d9e <memset>
  4005ac:	bd08      	pop	{r3, pc}
  4005ae:	bf00      	nop
  4005b0:	20000410 	.word	0x20000410
  4005b4:	20000718 	.word	0x20000718

004005b8 <init_lines>:
}

void init_lines()
{
  4005b8:	b508      	push	{r3, lr}
	memset(cli_lines, '\0', sizeof(cli_lines));
  4005ba:	2281      	movs	r2, #129	; 0x81
  4005bc:	2100      	movs	r1, #0
  4005be:	4802      	ldr	r0, [pc, #8]	; (4005c8 <init_lines+0x10>)
  4005c0:	f002 fbed 	bl	402d9e <memset>
  4005c4:	bd08      	pop	{r3, pc}
  4005c6:	bf00      	nop
  4005c8:	2000079c 	.word	0x2000079c

004005cc <cli_init>:
char cli_line_buffer[CLI_MAX_CHARS+1];
int cli_line_index = 0;


void cli_init()
{
  4005cc:	b508      	push	{r3, lr}
	init_buffer();
  4005ce:	f7ff ffe5 	bl	40059c <init_buffer>
	init_lines();
  4005d2:	f7ff fff1 	bl	4005b8 <init_lines>
  4005d6:	bd08      	pop	{r3, pc}

004005d8 <cli_handle_command>:

}

//printf("motor0: %d\r\n", atoi(parm));
void cli_handle_command(char *cmd, char *parm)
{
  4005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005da:	b093      	sub	sp, #76	; 0x4c
  4005dc:	4604      	mov	r4, r0
  4005de:	460d      	mov	r5, r1

	/*
	 * 	Autopilot settings
	 */
	if (strcmp(cmd, "apx") == 0) {
  4005e0:	4986      	ldr	r1, [pc, #536]	; (4007fc <cli_handle_command+0x224>)
  4005e2:	f003 f97f 	bl	4038e4 <strcmp>
  4005e6:	b968      	cbnz	r0, 400604 <cli_handle_command+0x2c>
		AP.desired_angle_x = atof(parm);
  4005e8:	4628      	mov	r0, r5
  4005ea:	f002 fb99 	bl	402d20 <atof>
  4005ee:	f007 f867 	bl	4076c0 <__aeabi_d2f>
  4005f2:	4b83      	ldr	r3, [pc, #524]	; (400800 <cli_handle_command+0x228>)
  4005f4:	6058      	str	r0, [r3, #4]
		printf("AP.desired_angle_x: %f\r\n", AP.desired_angle_x);
  4005f6:	f006 fd17 	bl	407028 <__aeabi_f2d>
  4005fa:	4602      	mov	r2, r0
  4005fc:	460b      	mov	r3, r1
  4005fe:	4881      	ldr	r0, [pc, #516]	; (400804 <cli_handle_command+0x22c>)
  400600:	f003 f844 	bl	40368c <iprintf>
	}
	if (strcmp(cmd, "apy") == 0) {
  400604:	4980      	ldr	r1, [pc, #512]	; (400808 <cli_handle_command+0x230>)
  400606:	4620      	mov	r0, r4
  400608:	f003 f96c 	bl	4038e4 <strcmp>
  40060c:	b968      	cbnz	r0, 40062a <cli_handle_command+0x52>
		AP.desired_angle_y = atof(parm);
  40060e:	4628      	mov	r0, r5
  400610:	f002 fb86 	bl	402d20 <atof>
  400614:	f007 f854 	bl	4076c0 <__aeabi_d2f>
  400618:	4b79      	ldr	r3, [pc, #484]	; (400800 <cli_handle_command+0x228>)
  40061a:	6098      	str	r0, [r3, #8]
		printf("AP.desired_angle_y: %f\r\n", AP.desired_angle_y);
  40061c:	f006 fd04 	bl	407028 <__aeabi_f2d>
  400620:	4602      	mov	r2, r0
  400622:	460b      	mov	r3, r1
  400624:	4879      	ldr	r0, [pc, #484]	; (40080c <cli_handle_command+0x234>)
  400626:	f003 f831 	bl	40368c <iprintf>
	}	

	/*
	 * 	Pid loop configuration
	 */
	if (strcmp(cmd, "kp") == 0) {
  40062a:	4979      	ldr	r1, [pc, #484]	; (400810 <cli_handle_command+0x238>)
  40062c:	4620      	mov	r0, r4
  40062e:	f003 f959 	bl	4038e4 <strcmp>
  400632:	b968      	cbnz	r0, 400650 <cli_handle_command+0x78>
		config.pid_kp = atof(parm);
  400634:	4628      	mov	r0, r5
  400636:	f002 fb73 	bl	402d20 <atof>
  40063a:	f007 f841 	bl	4076c0 <__aeabi_d2f>
  40063e:	4b75      	ldr	r3, [pc, #468]	; (400814 <cli_handle_command+0x23c>)
  400640:	6018      	str	r0, [r3, #0]
		printf("config.pid_kp: %f\r\n", config.pid_kp);
  400642:	f006 fcf1 	bl	407028 <__aeabi_f2d>
  400646:	4602      	mov	r2, r0
  400648:	460b      	mov	r3, r1
  40064a:	4873      	ldr	r0, [pc, #460]	; (400818 <cli_handle_command+0x240>)
  40064c:	f003 f81e 	bl	40368c <iprintf>
	}

	if (strcmp(cmd, "ki") == 0) {
  400650:	4972      	ldr	r1, [pc, #456]	; (40081c <cli_handle_command+0x244>)
  400652:	4620      	mov	r0, r4
  400654:	f003 f946 	bl	4038e4 <strcmp>
  400658:	b968      	cbnz	r0, 400676 <cli_handle_command+0x9e>
		config.pid_ki = atof(parm);
  40065a:	4628      	mov	r0, r5
  40065c:	f002 fb60 	bl	402d20 <atof>
  400660:	f007 f82e 	bl	4076c0 <__aeabi_d2f>
  400664:	4b6b      	ldr	r3, [pc, #428]	; (400814 <cli_handle_command+0x23c>)
  400666:	6058      	str	r0, [r3, #4]
		printf("config.pid_ki: %f\r\n", config.pid_ki);
  400668:	f006 fcde 	bl	407028 <__aeabi_f2d>
  40066c:	4602      	mov	r2, r0
  40066e:	460b      	mov	r3, r1
  400670:	486b      	ldr	r0, [pc, #428]	; (400820 <cli_handle_command+0x248>)
  400672:	f003 f80b 	bl	40368c <iprintf>
	}

	if (strcmp(cmd, "kd") == 0) {
  400676:	496b      	ldr	r1, [pc, #428]	; (400824 <cli_handle_command+0x24c>)
  400678:	4620      	mov	r0, r4
  40067a:	f003 f933 	bl	4038e4 <strcmp>
  40067e:	b968      	cbnz	r0, 40069c <cli_handle_command+0xc4>
		config.pid_kd = atof(parm);
  400680:	4628      	mov	r0, r5
  400682:	f002 fb4d 	bl	402d20 <atof>
  400686:	f007 f81b 	bl	4076c0 <__aeabi_d2f>
  40068a:	4b62      	ldr	r3, [pc, #392]	; (400814 <cli_handle_command+0x23c>)
  40068c:	6098      	str	r0, [r3, #8]
		printf("config.pid_kd: %f\r\n", config.pid_kd);
  40068e:	f006 fccb 	bl	407028 <__aeabi_f2d>
  400692:	4602      	mov	r2, r0
  400694:	460b      	mov	r3, r1
  400696:	4864      	ldr	r0, [pc, #400]	; (400828 <cli_handle_command+0x250>)
  400698:	f002 fff8 	bl	40368c <iprintf>

	/*
	 * 	IMU settings
	 */	

	if (strcmp(cmd, "imu_calibrate") == 0) {
  40069c:	4963      	ldr	r1, [pc, #396]	; (40082c <cli_handle_command+0x254>)
  40069e:	4620      	mov	r0, r4
  4006a0:	f003 f920 	bl	4038e4 <strcmp>
  4006a4:	b950      	cbnz	r0, 4006bc <cli_handle_command+0xe4>
		config.imu_calibrate = atoi(parm);
  4006a6:	4628      	mov	r0, r5
  4006a8:	f002 fb3d 	bl	402d26 <atoi>
  4006ac:	1c01      	adds	r1, r0, #0
  4006ae:	bf18      	it	ne
  4006b0:	2101      	movne	r1, #1
  4006b2:	4b58      	ldr	r3, [pc, #352]	; (400814 <cli_handle_command+0x23c>)
  4006b4:	75d9      	strb	r1, [r3, #23]
		printf("imu_calibrate: %d\r\n", config.imu_calibrate);
  4006b6:	485e      	ldr	r0, [pc, #376]	; (400830 <cli_handle_command+0x258>)
  4006b8:	f002 ffe8 	bl	40368c <iprintf>
	}

	/*
	 * 	Motor settings
	 */	
	if (strcmp(cmd, "motor_armed") == 0) {
  4006bc:	495d      	ldr	r1, [pc, #372]	; (400834 <cli_handle_command+0x25c>)
  4006be:	4620      	mov	r0, r4
  4006c0:	f003 f910 	bl	4038e4 <strcmp>
  4006c4:	b950      	cbnz	r0, 4006dc <cli_handle_command+0x104>
		config.motor_armed = atoi(parm);
  4006c6:	4628      	mov	r0, r5
  4006c8:	f002 fb2d 	bl	402d26 <atoi>
  4006cc:	1c01      	adds	r1, r0, #0
  4006ce:	bf18      	it	ne
  4006d0:	2101      	movne	r1, #1
  4006d2:	4b50      	ldr	r3, [pc, #320]	; (400814 <cli_handle_command+0x23c>)
  4006d4:	7519      	strb	r1, [r3, #20]
		printf("motor_armed: %d\r\n", config.motor_armed);
  4006d6:	4858      	ldr	r0, [pc, #352]	; (400838 <cli_handle_command+0x260>)
  4006d8:	f002 ffd8 	bl	40368c <iprintf>
	}

	if (strcmp(cmd, "motor_offset") == 0) {
  4006dc:	4957      	ldr	r1, [pc, #348]	; (40083c <cli_handle_command+0x264>)
  4006de:	4620      	mov	r0, r4
  4006e0:	f003 f900 	bl	4038e4 <strcmp>
  4006e4:	b940      	cbnz	r0, 4006f8 <cli_handle_command+0x120>
		config.motor_offset = atoi(parm);
  4006e6:	4628      	mov	r0, r5
  4006e8:	f002 fb1d 	bl	402d26 <atoi>
  4006ec:	4601      	mov	r1, r0
  4006ee:	4b49      	ldr	r3, [pc, #292]	; (400814 <cli_handle_command+0x23c>)
  4006f0:	6118      	str	r0, [r3, #16]
		printf("motor_offset: %d\r\n", config.motor_offset);
  4006f2:	4853      	ldr	r0, [pc, #332]	; (400840 <cli_handle_command+0x268>)
  4006f4:	f002 ffca 	bl	40368c <iprintf>
	}

	if (strcmp(cmd, "motor_min") == 0) {
  4006f8:	4952      	ldr	r1, [pc, #328]	; (400844 <cli_handle_command+0x26c>)
  4006fa:	4620      	mov	r0, r4
  4006fc:	f003 f8f2 	bl	4038e4 <strcmp>
  400700:	b9c8      	cbnz	r0, 400736 <cli_handle_command+0x15e>
		printf("motor min command issued\r\n");
  400702:	4851      	ldr	r0, [pc, #324]	; (400848 <cli_handle_command+0x270>)
  400704:	f002 ffc2 	bl	40368c <iprintf>
		motor_min(motors[0]);
  400708:	4e50      	ldr	r6, [pc, #320]	; (40084c <cli_handle_command+0x274>)
  40070a:	2744      	movs	r7, #68	; 0x44
  40070c:	463a      	mov	r2, r7
  40070e:	f106 0110 	add.w	r1, r6, #16
  400712:	4668      	mov	r0, sp
  400714:	f002 fb38 	bl	402d88 <memcpy>
  400718:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  40071c:	f000 ffec 	bl	4016f8 <motor_min>
		motor_min(motors[1]);
  400720:	463a      	mov	r2, r7
  400722:	f106 0164 	add.w	r1, r6, #100	; 0x64
  400726:	4668      	mov	r0, sp
  400728:	f002 fb2e 	bl	402d88 <memcpy>
  40072c:	3654      	adds	r6, #84	; 0x54
  40072e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400732:	f000 ffe1 	bl	4016f8 <motor_min>
	}

	if (strcmp(cmd, "motor_mid") == 0) {
  400736:	4946      	ldr	r1, [pc, #280]	; (400850 <cli_handle_command+0x278>)
  400738:	4620      	mov	r0, r4
  40073a:	f003 f8d3 	bl	4038e4 <strcmp>
  40073e:	b9c8      	cbnz	r0, 400774 <cli_handle_command+0x19c>
		printf("motor mid command issued\r\n");
  400740:	4844      	ldr	r0, [pc, #272]	; (400854 <cli_handle_command+0x27c>)
  400742:	f002 ffa3 	bl	40368c <iprintf>
		motor_mid(motors[0]);
  400746:	4e41      	ldr	r6, [pc, #260]	; (40084c <cli_handle_command+0x274>)
  400748:	2744      	movs	r7, #68	; 0x44
  40074a:	463a      	mov	r2, r7
  40074c:	f106 0110 	add.w	r1, r6, #16
  400750:	4668      	mov	r0, sp
  400752:	f002 fb19 	bl	402d88 <memcpy>
  400756:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  40075a:	f000 ffe9 	bl	401730 <motor_mid>
		motor_mid(motors[1]);
  40075e:	463a      	mov	r2, r7
  400760:	f106 0164 	add.w	r1, r6, #100	; 0x64
  400764:	4668      	mov	r0, sp
  400766:	f002 fb0f 	bl	402d88 <memcpy>
  40076a:	3654      	adds	r6, #84	; 0x54
  40076c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400770:	f000 ffde 	bl	401730 <motor_mid>
	}

	if (strcmp(cmd, "motor_max") == 0) {
  400774:	4938      	ldr	r1, [pc, #224]	; (400858 <cli_handle_command+0x280>)
  400776:	4620      	mov	r0, r4
  400778:	f003 f8b4 	bl	4038e4 <strcmp>
  40077c:	b9c8      	cbnz	r0, 4007b2 <cli_handle_command+0x1da>
		printf("motor max command issued\r\n");
  40077e:	4837      	ldr	r0, [pc, #220]	; (40085c <cli_handle_command+0x284>)
  400780:	f002 ff84 	bl	40368c <iprintf>
		motor_max(motors[0]);
  400784:	4e31      	ldr	r6, [pc, #196]	; (40084c <cli_handle_command+0x274>)
  400786:	2744      	movs	r7, #68	; 0x44
  400788:	463a      	mov	r2, r7
  40078a:	f106 0110 	add.w	r1, r6, #16
  40078e:	4668      	mov	r0, sp
  400790:	f002 fafa 	bl	402d88 <memcpy>
  400794:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400798:	f000 ffe6 	bl	401768 <motor_max>
		motor_max(motors[1]);
  40079c:	463a      	mov	r2, r7
  40079e:	f106 0164 	add.w	r1, r6, #100	; 0x64
  4007a2:	4668      	mov	r0, sp
  4007a4:	f002 faf0 	bl	402d88 <memcpy>
  4007a8:	3654      	adds	r6, #84	; 0x54
  4007aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  4007ae:	f000 ffdb 	bl	401768 <motor_max>
	} 

	/*
	 * 	Log settings
	 */	
	if (strcmp(cmd, "log_imu") == 0) {
  4007b2:	492b      	ldr	r1, [pc, #172]	; (400860 <cli_handle_command+0x288>)
  4007b4:	4620      	mov	r0, r4
  4007b6:	f003 f895 	bl	4038e4 <strcmp>
  4007ba:	b958      	cbnz	r0, 4007d4 <cli_handle_command+0x1fc>
		config.log_imu = atoi(parm);
  4007bc:	4628      	mov	r0, r5
  4007be:	f002 fab2 	bl	402d26 <atoi>
  4007c2:	1c01      	adds	r1, r0, #0
  4007c4:	bf18      	it	ne
  4007c6:	2101      	movne	r1, #1
  4007c8:	4b12      	ldr	r3, [pc, #72]	; (400814 <cli_handle_command+0x23c>)
  4007ca:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
		printf("log_imu: %d\r\n", config.log_imu);
  4007ce:	4825      	ldr	r0, [pc, #148]	; (400864 <cli_handle_command+0x28c>)
  4007d0:	f002 ff5c 	bl	40368c <iprintf>
	}

	if (strcmp(cmd, "log_motor") == 0) {
  4007d4:	4924      	ldr	r1, [pc, #144]	; (400868 <cli_handle_command+0x290>)
  4007d6:	4620      	mov	r0, r4
  4007d8:	f003 f884 	bl	4038e4 <strcmp>
  4007dc:	b958      	cbnz	r0, 4007f6 <cli_handle_command+0x21e>
		config.log_motor = atoi(parm);
  4007de:	4628      	mov	r0, r5
  4007e0:	f002 faa1 	bl	402d26 <atoi>
  4007e4:	1c01      	adds	r1, r0, #0
  4007e6:	bf18      	it	ne
  4007e8:	2101      	movne	r1, #1
  4007ea:	4b0a      	ldr	r3, [pc, #40]	; (400814 <cli_handle_command+0x23c>)
  4007ec:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
		printf("log_motor: %d\r\n", config.log_motor);
  4007f0:	481e      	ldr	r0, [pc, #120]	; (40086c <cli_handle_command+0x294>)
  4007f2:	f002 ff4b 	bl	40368c <iprintf>
	}	
}
  4007f6:	b013      	add	sp, #76	; 0x4c
  4007f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4007fa:	bf00      	nop
  4007fc:	00407e20 	.word	0x00407e20
  400800:	2000085c 	.word	0x2000085c
  400804:	00407e24 	.word	0x00407e24
  400808:	00407e40 	.word	0x00407e40
  40080c:	00407e44 	.word	0x00407e44
  400810:	00407e60 	.word	0x00407e60
  400814:	200006f0 	.word	0x200006f0
  400818:	00407e64 	.word	0x00407e64
  40081c:	00407e78 	.word	0x00407e78
  400820:	00407e7c 	.word	0x00407e7c
  400824:	00407e90 	.word	0x00407e90
  400828:	00407e94 	.word	0x00407e94
  40082c:	00407ea8 	.word	0x00407ea8
  400830:	00407eb8 	.word	0x00407eb8
  400834:	00407ecc 	.word	0x00407ecc
  400838:	00407dd8 	.word	0x00407dd8
  40083c:	00407ed8 	.word	0x00407ed8
  400840:	00407ee8 	.word	0x00407ee8
  400844:	00407efc 	.word	0x00407efc
  400848:	00407f08 	.word	0x00407f08
  40084c:	20000534 	.word	0x20000534
  400850:	00407f24 	.word	0x00407f24
  400854:	00407f30 	.word	0x00407f30
  400858:	00407f4c 	.word	0x00407f4c
  40085c:	00407f58 	.word	0x00407f58
  400860:	00407f74 	.word	0x00407f74
  400864:	00407f7c 	.word	0x00407f7c
  400868:	00407f8c 	.word	0x00407f8c
  40086c:	00407f98 	.word	0x00407f98

00400870 <cli_put_char>:
	return false;
}

void cli_put_char(unsigned char c)
{
	int i = (unsigned int)(cli_buffer.head + 1) % CLI_RX_BUFFER_SIZE;
  400870:	4a07      	ldr	r2, [pc, #28]	; (400890 <cli_put_char+0x20>)
  400872:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  400876:	1c4b      	adds	r3, r1, #1
  400878:	f3c3 0308 	ubfx	r3, r3, #0, #9

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != cli_buffer.tail) {
  40087c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  400880:	4293      	cmp	r3, r2
  400882:	d003      	beq.n	40088c <cli_put_char+0x1c>
		cli_buffer.buffer[cli_buffer.head] = c;
  400884:	4a02      	ldr	r2, [pc, #8]	; (400890 <cli_put_char+0x20>)
  400886:	5450      	strb	r0, [r2, r1]
		cli_buffer.head = i;
  400888:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  40088c:	4770      	bx	lr
  40088e:	bf00      	nop
  400890:	20000208 	.word	0x20000208

00400894 <cli_read_device>:
{
	memset(cli_lines, '\0', sizeof(cli_lines));
}

void cli_read_device(void)
{
  400894:	b500      	push	{lr}
  400896:	b083      	sub	sp, #12
    uint8_t uc_char;
	uint8_t uc_flag;

	if (uart_is_rx_ready(CONSOLE_UART)) {
  400898:	4808      	ldr	r0, [pc, #32]	; (4008bc <cli_read_device+0x28>)
  40089a:	f001 fc59 	bl	402150 <uart_is_rx_ready>
  40089e:	b150      	cbz	r0, 4008b6 <cli_read_device+0x22>
		uc_flag = uart_read(CONSOLE_UART, &uc_char);
  4008a0:	f10d 0107 	add.w	r1, sp, #7
  4008a4:	4805      	ldr	r0, [pc, #20]	; (4008bc <cli_read_device+0x28>)
  4008a6:	f001 fc5f 	bl	402168 <uart_read>
		if (!uc_flag) {
  4008aa:	b2c0      	uxtb	r0, r0
  4008ac:	b918      	cbnz	r0, 4008b6 <cli_read_device+0x22>
			cli_put_char(uc_char);
  4008ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4008b2:	f7ff ffdd 	bl	400870 <cli_put_char>
		}
	}
}
  4008b6:	b003      	add	sp, #12
  4008b8:	f85d fb04 	ldr.w	pc, [sp], #4
  4008bc:	400e0800 	.word	0x400e0800

004008c0 <cli_data_available>:
}

uint8_t cli_data_available()
{

	return (uint8_t)(CLI_RX_BUFFER_SIZE + cli_buffer.head - cli_buffer.tail) % CLI_RX_BUFFER_SIZE;
  4008c0:	4a03      	ldr	r2, [pc, #12]	; (4008d0 <cli_data_available+0x10>)
  4008c2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
  4008c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
  4008ca:	1a18      	subs	r0, r3, r0
}
  4008cc:	b2c0      	uxtb	r0, r0
  4008ce:	4770      	bx	lr
  4008d0:	20000208 	.word	0x20000208

004008d4 <cli_data_read>:

uint8_t cli_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (cli_buffer.head == cli_buffer.tail) {
  4008d4:	4a08      	ldr	r2, [pc, #32]	; (4008f8 <cli_data_read+0x24>)
  4008d6:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
  4008da:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
  4008de:	429a      	cmp	r2, r3
  4008e0:	d007      	beq.n	4008f2 <cli_data_read+0x1e>
		return -1;
	} else {
		uint8_t c = cli_buffer.buffer[cli_buffer.tail];
  4008e2:	4a05      	ldr	r2, [pc, #20]	; (4008f8 <cli_data_read+0x24>)
  4008e4:	5cd0      	ldrb	r0, [r2, r3]
		cli_buffer.tail = (unsigned int)(cli_buffer.tail + 1) % CLI_RX_BUFFER_SIZE;
  4008e6:	3301      	adds	r3, #1
  4008e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4008ec:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		return c;
  4008f0:	4770      	bx	lr

uint8_t cli_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (cli_buffer.head == cli_buffer.tail) {
		return -1;
  4008f2:	20ff      	movs	r0, #255	; 0xff
	} else {
		uint8_t c = cli_buffer.buffer[cli_buffer.tail];
		cli_buffer.tail = (unsigned int)(cli_buffer.tail + 1) % CLI_RX_BUFFER_SIZE;
		return c;
	}
  4008f4:	4770      	bx	lr
  4008f6:	bf00      	nop
  4008f8:	20000208 	.word	0x20000208

004008fc <handle_data>:
	}	
}

// check to see if we have a new line
bool handle_data()
{
  4008fc:	b508      	push	{r3, lr}

	char c = cli_data_read();
  4008fe:	f7ff ffe9 	bl	4008d4 <cli_data_read>

	// ignore null terminated strings
	if(c == '\0') return false;
  400902:	b190      	cbz	r0, 40092a <handle_data+0x2e>
	// prevent buffer overrun
	if(cli_line_index >= CLI_MAX_CHARS) return false;
  400904:	4b0c      	ldr	r3, [pc, #48]	; (400938 <handle_data+0x3c>)
  400906:	681b      	ldr	r3, [r3, #0]
  400908:	2b7f      	cmp	r3, #127	; 0x7f
  40090a:	dc10      	bgt.n	40092e <handle_data+0x32>

	// store character in cli_line_buffer
	cli_line_buffer[cli_line_index] = c;
  40090c:	490b      	ldr	r1, [pc, #44]	; (40093c <handle_data+0x40>)
  40090e:	54c8      	strb	r0, [r1, r3]
	cli_line_index++;
  400910:	3301      	adds	r3, #1
  400912:	4909      	ldr	r1, [pc, #36]	; (400938 <handle_data+0x3c>)
  400914:	600b      	str	r3, [r1, #0]

	// check for end of line
	if(c == CLI_TKEND) {
  400916:	280d      	cmp	r0, #13
  400918:	d10b      	bne.n	400932 <handle_data+0x36>
		// copy new message into buffer
		strcpy(cli_lines, cli_line_buffer);
  40091a:	4908      	ldr	r1, [pc, #32]	; (40093c <handle_data+0x40>)
  40091c:	4808      	ldr	r0, [pc, #32]	; (400940 <handle_data+0x44>)
  40091e:	f002 ffeb 	bl	4038f8 <strcpy>
		init_buffer();
  400922:	f7ff fe3b 	bl	40059c <init_buffer>
		return true;
  400926:	2001      	movs	r0, #1
  400928:	bd08      	pop	{r3, pc}
{

	char c = cli_data_read();

	// ignore null terminated strings
	if(c == '\0') return false;
  40092a:	2000      	movs	r0, #0
  40092c:	bd08      	pop	{r3, pc}
	// prevent buffer overrun
	if(cli_line_index >= CLI_MAX_CHARS) return false;
  40092e:	2000      	movs	r0, #0
  400930:	bd08      	pop	{r3, pc}
		strcpy(cli_lines, cli_line_buffer);
		init_buffer();
		return true;
	}

	return false;
  400932:	2000      	movs	r0, #0
}
  400934:	bd08      	pop	{r3, pc}
  400936:	bf00      	nop
  400938:	20000410 	.word	0x20000410
  40093c:	20000718 	.word	0x20000718
  400940:	2000079c 	.word	0x2000079c

00400944 <cli_tick>:
		}
	}
}

void cli_tick()
{
  400944:	b530      	push	{r4, r5, lr}
  400946:	b083      	sub	sp, #12
	// read the serial port
	cli_read_device();
  400948:	f7ff ffa4 	bl	400894 <cli_read_device>

	if (cli_data_available()) {
  40094c:	f7ff ffb8 	bl	4008c0 <cli_data_available>
  400950:	b1a8      	cbz	r0, 40097e <cli_tick+0x3a>
		if (handle_data()) {
  400952:	f7ff ffd3 	bl	4008fc <handle_data>
  400956:	b190      	cbz	r0, 40097e <cli_tick+0x3a>
			//config_test();

			char *saveptr;
			char *cmd, *parm;

			cmd = strtok_r(cli_lines, CLI_DELIM, &saveptr);
  400958:	4c0a      	ldr	r4, [pc, #40]	; (400984 <cli_tick+0x40>)
  40095a:	aa01      	add	r2, sp, #4
  40095c:	4621      	mov	r1, r4
  40095e:	480a      	ldr	r0, [pc, #40]	; (400988 <cli_tick+0x44>)
  400960:	f003 fe2f 	bl	4045c2 <strtok_r>
  400964:	4605      	mov	r5, r0
			parm = strtok_r(NULL, CLI_DELIM, &saveptr);
  400966:	aa01      	add	r2, sp, #4
  400968:	4621      	mov	r1, r4
  40096a:	2000      	movs	r0, #0
  40096c:	f003 fe29 	bl	4045c2 <strtok_r>

			// printf("cmd=%s\r\n", cmd);
			// printf("parm=%s\r\n", parm);

			if (parm != NULL)
  400970:	4601      	mov	r1, r0
  400972:	b110      	cbz	r0, 40097a <cli_tick+0x36>
				cli_handle_command(cmd, parm);
  400974:	4628      	mov	r0, r5
  400976:	f7ff fe2f 	bl	4005d8 <cli_handle_command>


			// reset cli_lines
			init_lines();
  40097a:	f7ff fe1d 	bl	4005b8 <init_lines>

		}
	}

}
  40097e:	b003      	add	sp, #12
  400980:	bd30      	pop	{r4, r5, pc}
  400982:	bf00      	nop
  400984:	00407fa8 	.word	0x00407fa8
  400988:	2000079c 	.word	0x2000079c

0040098c <write_register8>:
int16_t read_register16(uint8_t address, uint8_t reg);
uint8_t read_bytes(uint8_t address, uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t address, uint8_t reg, uint8_t value)
{
  40098c:	b500      	push	{lr}
  40098e:	b089      	sub	sp, #36	; 0x24
  400990:	f88d 2007 	strb.w	r2, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = address;
  400994:	f88d 001c 	strb.w	r0, [sp, #28]
    packet_tx.addr[0] = reg;
  400998:	f88d 100c 	strb.w	r1, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  40099c:	2301      	movs	r3, #1
  40099e:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  4009a0:	f10d 0207 	add.w	r2, sp, #7
  4009a4:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  4009a6:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  4009a8:	a903      	add	r1, sp, #12
  4009aa:	4804      	ldr	r0, [pc, #16]	; (4009bc <write_register8+0x30>)
  4009ac:	f001 f904 	bl	401bb8 <twi_master_write>
    
    // if (status == TWI_SUCCESS) {
    //     puts("write_register: success\r\n");
    // }

    delay_ms(TWI_WAIT_TIME);
  4009b0:	4803      	ldr	r0, [pc, #12]	; (4009c0 <write_register8+0x34>)
  4009b2:	f007 fdbd 	bl	408530 <__portable_delay_cycles_veneer>
}
  4009b6:	b009      	add	sp, #36	; 0x24
  4009b8:	f85d fb04 	ldr.w	pc, [sp], #4
  4009bc:	40018000 	.word	0x40018000
  4009c0:	00014ed3 	.word	0x00014ed3

004009c4 <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t address, uint8_t reg)
{
  4009c4:	b510      	push	{r4, lr}
  4009c6:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  4009c8:	4b0e      	ldr	r3, [pc, #56]	; (400a04 <read_register8+0x40>)
  4009ca:	2200      	movs	r2, #0
  4009cc:	601a      	str	r2, [r3, #0]
  4009ce:	605a      	str	r2, [r3, #4]
  4009d0:	609a      	str	r2, [r3, #8]
  4009d2:	60da      	str	r2, [r3, #12]

    packet_rx.chip = address;
  4009d4:	f88d 0014 	strb.w	r0, [sp, #20]
    packet_rx.addr[0] = reg;
  4009d8:	f88d 1004 	strb.w	r1, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  4009dc:	2201      	movs	r2, #1
  4009de:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &mpu_buffer;
  4009e0:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  4009e2:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  4009e4:	a901      	add	r1, sp, #4
  4009e6:	4808      	ldr	r0, [pc, #32]	; (400a08 <read_register8+0x44>)
  4009e8:	f001 f87e 	bl	401ae8 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4009ec:	b910      	cbnz	r0, 4009f4 <read_register8+0x30>
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
  4009ee:	4b05      	ldr	r3, [pc, #20]	; (400a04 <read_register8+0x40>)
  4009f0:	781c      	ldrb	r4, [r3, #0]
  4009f2:	e000      	b.n	4009f6 <read_register8+0x32>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t address, uint8_t reg)
{
    uint8_t value = 0;
  4009f4:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  4009f6:	4805      	ldr	r0, [pc, #20]	; (400a0c <read_register8+0x48>)
  4009f8:	f007 fd9a 	bl	408530 <__portable_delay_cycles_veneer>

    return value;
}
  4009fc:	4620      	mov	r0, r4
  4009fe:	b006      	add	sp, #24
  400a00:	bd10      	pop	{r4, pc}
  400a02:	bf00      	nop
  400a04:	20000414 	.word	0x20000414
  400a08:	40018000 	.word	0x40018000
  400a0c:	00014ed3 	.word	0x00014ed3

00400a10 <read_bytes>:

    return value;
}

uint8_t read_bytes(uint8_t address, uint8_t reg, int8_t length, uint8_t *data)
{
  400a10:	b530      	push	{r4, r5, lr}
  400a12:	b087      	sub	sp, #28
  400a14:	4615      	mov	r5, r2
    // uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  400a16:	4a0c      	ldr	r2, [pc, #48]	; (400a48 <read_bytes+0x38>)
  400a18:	2400      	movs	r4, #0
  400a1a:	6014      	str	r4, [r2, #0]
  400a1c:	6054      	str	r4, [r2, #4]
  400a1e:	6094      	str	r4, [r2, #8]
  400a20:	60d4      	str	r4, [r2, #12]

    packet_rx.chip = address;
  400a22:	f88d 0014 	strb.w	r0, [sp, #20]
    packet_rx.addr[0] = reg;
  400a26:	f88d 1004 	strb.w	r1, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  400a2a:	2201      	movs	r2, #1
  400a2c:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = data;
  400a2e:	9303      	str	r3, [sp, #12]
    packet_rx.length = length;
  400a30:	9504      	str	r5, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400a32:	a901      	add	r1, sp, #4
  400a34:	4805      	ldr	r0, [pc, #20]	; (400a4c <read_bytes+0x3c>)
  400a36:	f001 f857 	bl	401ae8 <twi_master_read>
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        // value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400a3a:	4805      	ldr	r0, [pc, #20]	; (400a50 <read_bytes+0x40>)
  400a3c:	f007 fd78 	bl	408530 <__portable_delay_cycles_veneer>

    return length;
}
  400a40:	b2e8      	uxtb	r0, r5
  400a42:	b007      	add	sp, #28
  400a44:	bd30      	pop	{r4, r5, pc}
  400a46:	bf00      	nop
  400a48:	20000414 	.word	0x20000414
  400a4c:	40018000 	.word	0x40018000
  400a50:	00014ed3 	.word	0x00014ed3

00400a54 <write_register_bit>:


void write_register_bit(uint8_t address, uint8_t reg, uint8_t pos, bool state)
{
  400a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400a56:	4604      	mov	r4, r0
  400a58:	460d      	mov	r5, r1
  400a5a:	4616      	mov	r6, r2
  400a5c:	461f      	mov	r7, r3
    uint8_t value;
    value = read_register8(address, reg);
  400a5e:	f7ff ffb1 	bl	4009c4 <read_register8>

    if (state) {
  400a62:	b127      	cbz	r7, 400a6e <write_register_bit+0x1a>
        value |= (1 << pos);
  400a64:	2201      	movs	r2, #1
  400a66:	40b2      	lsls	r2, r6
  400a68:	4302      	orrs	r2, r0
  400a6a:	b2d2      	uxtb	r2, r2
  400a6c:	e004      	b.n	400a78 <write_register_bit+0x24>
    } else {
        value &= ~(1 << pos);
  400a6e:	2201      	movs	r2, #1
  400a70:	40b2      	lsls	r2, r6
  400a72:	ea20 0202 	bic.w	r2, r0, r2
  400a76:	b2d2      	uxtb	r2, r2
    }

    write_register8(address, reg, value);
  400a78:	4629      	mov	r1, r5
  400a7a:	4620      	mov	r0, r4
  400a7c:	f7ff ff86 	bl	40098c <write_register8>
  400a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a82:	bf00      	nop

00400a84 <read_register_bit>:
}

bool read_register_bit(uint8_t address, uint8_t reg, uint8_t pos)
{
  400a84:	b510      	push	{r4, lr}
  400a86:	4614      	mov	r4, r2
    uint8_t value;
    value = read_register8(address, reg);
  400a88:	f7ff ff9c 	bl	4009c4 <read_register8>
    return ((value >> pos) & 1);
  400a8c:	4120      	asrs	r0, r4
}
  400a8e:	f000 0001 	and.w	r0, r0, #1
  400a92:	bd10      	pop	{r4, pc}

00400a94 <mpu_init>:

bool mpu_init(void)
{
  400a94:	b500      	push	{lr}
  400a96:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  400a98:	4b0d      	ldr	r3, [pc, #52]	; (400ad0 <mpu_init+0x3c>)
  400a9a:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  400a9c:	4b0d      	ldr	r3, [pc, #52]	; (400ad4 <mpu_init+0x40>)
  400a9e:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  400aa0:	a901      	add	r1, sp, #4
  400aa2:	480d      	ldr	r0, [pc, #52]	; (400ad8 <mpu_init+0x44>)
  400aa4:	f000 fff0 	bl	401a88 <twi_master_init>
  400aa8:	b138      	cbz	r0, 400aba <mpu_init+0x26>
        
        puts("twi_master_init: failed\r\n");
  400aaa:	480c      	ldr	r0, [pc, #48]	; (400adc <mpu_init+0x48>)
  400aac:	f002 fe60 	bl	403770 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400ab0:	480b      	ldr	r0, [pc, #44]	; (400ae0 <mpu_init+0x4c>)
  400ab2:	f007 fd3d 	bl	408530 <__portable_delay_cycles_veneer>
        return false;
  400ab6:	2000      	movs	r0, #0
  400ab8:	e006      	b.n	400ac8 <mpu_init+0x34>
        
    } else {
        puts("twi_master_init: success\r\n");
  400aba:	480a      	ldr	r0, [pc, #40]	; (400ae4 <mpu_init+0x50>)
  400abc:	f002 fe58 	bl	403770 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400ac0:	4807      	ldr	r0, [pc, #28]	; (400ae0 <mpu_init+0x4c>)
  400ac2:	f007 fd35 	bl	408530 <__portable_delay_cycles_veneer>
        return true;
  400ac6:	2001      	movs	r0, #1
    }
    
}
  400ac8:	b005      	add	sp, #20
  400aca:	f85d fb04 	ldr.w	pc, [sp], #4
  400ace:	bf00      	nop
  400ad0:	07270e00 	.word	0x07270e00
  400ad4:	00061a80 	.word	0x00061a80
  400ad8:	40018000 	.word	0x40018000
  400adc:	00407fac 	.word	0x00407fac
  400ae0:	00014ed3 	.word	0x00014ed3
  400ae4:	00407fc8 	.word	0x00407fc8

00400ae8 <mpu_probe>:

bool mpu_probe(void)
{
  400ae8:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  400aea:	2168      	movs	r1, #104	; 0x68
  400aec:	4809      	ldr	r0, [pc, #36]	; (400b14 <mpu_probe+0x2c>)
  400aee:	f001 f8a5 	bl	401c3c <twi_probe>
  400af2:	b138      	cbz	r0, 400b04 <mpu_probe+0x1c>
        puts("twi_probe: failed\r\n");
  400af4:	4808      	ldr	r0, [pc, #32]	; (400b18 <mpu_probe+0x30>)
  400af6:	f002 fe3b 	bl	403770 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400afa:	4808      	ldr	r0, [pc, #32]	; (400b1c <mpu_probe+0x34>)
  400afc:	f007 fd18 	bl	408530 <__portable_delay_cycles_veneer>
        return false;
  400b00:	2000      	movs	r0, #0
  400b02:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  400b04:	4806      	ldr	r0, [pc, #24]	; (400b20 <mpu_probe+0x38>)
  400b06:	f002 fe33 	bl	403770 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400b0a:	4804      	ldr	r0, [pc, #16]	; (400b1c <mpu_probe+0x34>)
  400b0c:	f007 fd10 	bl	408530 <__portable_delay_cycles_veneer>
        return true;
  400b10:	2001      	movs	r0, #1
    }
}
  400b12:	bd08      	pop	{r3, pc}
  400b14:	40018000 	.word	0x40018000
  400b18:	00407fe4 	.word	0x00407fe4
  400b1c:	00014ed3 	.word	0x00014ed3
  400b20:	00407ff8 	.word	0x00407ff8

00400b24 <mpu_who_am_i>:

    return true;
}

uint8_t mpu_who_am_i(void)
{
  400b24:	b508      	push	{r3, lr}
    uint8_t value = read_register8(IMU_ADDRESS, MPU6050_RA_WHO_AM_I);
  400b26:	2175      	movs	r1, #117	; 0x75
  400b28:	2068      	movs	r0, #104	; 0x68
  400b2a:	f7ff ff4b 	bl	4009c4 <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  400b2e:	bd08      	pop	{r3, pc}

00400b30 <mpu_set_clock_source>:
    T = read_register16(IMU_ADDRESS, MPU6050_RA_TEMP_OUT_H);
    return T;
}

void mpu_set_clock_source(uint8_t source)
{
  400b30:	b510      	push	{r4, lr}
  400b32:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1);
  400b34:	216b      	movs	r1, #107	; 0x6b
  400b36:	2068      	movs	r0, #104	; 0x68
  400b38:	f7ff ff44 	bl	4009c4 <read_register8>
    value &= 0b11111000; // mask
  400b3c:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
    value |= source;

    write_register8(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1, value);
  400b40:	4322      	orrs	r2, r4
  400b42:	216b      	movs	r1, #107	; 0x6b
  400b44:	2068      	movs	r0, #104	; 0x68
  400b46:	f7ff ff21 	bl	40098c <write_register8>
  400b4a:	bd10      	pop	{r4, pc}

00400b4c <mpu_get_clock_source>:
}

uint8_t mpu_get_clock_source(void)
{
  400b4c:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1);
  400b4e:	216b      	movs	r1, #107	; 0x6b
  400b50:	2068      	movs	r0, #104	; 0x68
  400b52:	f7ff ff37 	bl	4009c4 <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  400b56:	f000 0007 	and.w	r0, r0, #7
  400b5a:	bd08      	pop	{r3, pc}

00400b5c <mpu_set_gyro_scale>:

void mpu_set_gyro_scale(uint8_t scale)
{
  400b5c:	b510      	push	{r4, lr}
  400b5e:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  400b60:	2803      	cmp	r0, #3
  400b62:	d812      	bhi.n	400b8a <mpu_set_gyro_scale+0x2e>
  400b64:	e8df f000 	tbb	[pc, r0]
  400b68:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  400b6c:	4a0e      	ldr	r2, [pc, #56]	; (400ba8 <mpu_set_gyro_scale+0x4c>)
  400b6e:	4b0f      	ldr	r3, [pc, #60]	; (400bac <mpu_set_gyro_scale+0x50>)
  400b70:	601a      	str	r2, [r3, #0]
            break;
  400b72:	e00a      	b.n	400b8a <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  400b74:	4a0e      	ldr	r2, [pc, #56]	; (400bb0 <mpu_set_gyro_scale+0x54>)
  400b76:	4b0d      	ldr	r3, [pc, #52]	; (400bac <mpu_set_gyro_scale+0x50>)
  400b78:	601a      	str	r2, [r3, #0]
            break;
  400b7a:	e006      	b.n	400b8a <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  400b7c:	4a0d      	ldr	r2, [pc, #52]	; (400bb4 <mpu_set_gyro_scale+0x58>)
  400b7e:	4b0b      	ldr	r3, [pc, #44]	; (400bac <mpu_set_gyro_scale+0x50>)
  400b80:	601a      	str	r2, [r3, #0]
            break;
  400b82:	e002      	b.n	400b8a <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  400b84:	4a0c      	ldr	r2, [pc, #48]	; (400bb8 <mpu_set_gyro_scale+0x5c>)
  400b86:	4b09      	ldr	r3, [pc, #36]	; (400bac <mpu_set_gyro_scale+0x50>)
  400b88:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(IMU_ADDRESS, MPU6050_RA_GYRO_CONFIG);
  400b8a:	211b      	movs	r1, #27
  400b8c:	2068      	movs	r0, #104	; 0x68
  400b8e:	f7ff ff19 	bl	4009c4 <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  400b92:	f020 0018 	bic.w	r0, r0, #24
  400b96:	ea40 02c4 	orr.w	r2, r0, r4, lsl #3

    write_register8(IMU_ADDRESS, MPU6050_RA_GYRO_CONFIG, value);
  400b9a:	b2d2      	uxtb	r2, r2
  400b9c:	211b      	movs	r1, #27
  400b9e:	2068      	movs	r0, #104	; 0x68
  400ba0:	f7ff fef4 	bl	40098c <write_register8>
  400ba4:	bd10      	pop	{r4, pc}
  400ba6:	bf00      	nop
  400ba8:	3bfa1e3f 	.word	0x3bfa1e3f
  400bac:	20000434 	.word	0x20000434
  400bb0:	3c7a2270 	.word	0x3c7a2270
  400bb4:	3cf9bfdf 	.word	0x3cf9bfdf
  400bb8:	3d79c0ec 	.word	0x3d79c0ec

00400bbc <mpu_get_gyro_scale>:
}

uint8_t mpu_get_gyro_scale(void)
{
  400bbc:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(IMU_ADDRESS, MPU6050_RA_GYRO_CONFIG);
  400bbe:	211b      	movs	r1, #27
  400bc0:	2068      	movs	r0, #104	; 0x68
  400bc2:	f7ff feff 	bl	4009c4 <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  400bc6:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  400bca:	bd08      	pop	{r3, pc}

00400bcc <mpu_set_accel_range>:

void mpu_set_accel_range(uint8_t range)
{
  400bcc:	b510      	push	{r4, lr}
  400bce:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  400bd0:	2803      	cmp	r0, #3
  400bd2:	d812      	bhi.n	400bfa <mpu_set_accel_range+0x2e>
  400bd4:	e8df f000 	tbb	[pc, r0]
  400bd8:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  400bdc:	4a0e      	ldr	r2, [pc, #56]	; (400c18 <mpu_set_accel_range+0x4c>)
  400bde:	4b0f      	ldr	r3, [pc, #60]	; (400c1c <mpu_set_accel_range+0x50>)
  400be0:	601a      	str	r2, [r3, #0]
            break;
  400be2:	e00a      	b.n	400bfa <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  400be4:	4a0e      	ldr	r2, [pc, #56]	; (400c20 <mpu_set_accel_range+0x54>)
  400be6:	4b0d      	ldr	r3, [pc, #52]	; (400c1c <mpu_set_accel_range+0x50>)
  400be8:	601a      	str	r2, [r3, #0]
            break;   
  400bea:	e006      	b.n	400bfa <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  400bec:	4a0d      	ldr	r2, [pc, #52]	; (400c24 <mpu_set_accel_range+0x58>)
  400bee:	4b0b      	ldr	r3, [pc, #44]	; (400c1c <mpu_set_accel_range+0x50>)
  400bf0:	601a      	str	r2, [r3, #0]
            break;   
  400bf2:	e002      	b.n	400bfa <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  400bf4:	4a0c      	ldr	r2, [pc, #48]	; (400c28 <mpu_set_accel_range+0x5c>)
  400bf6:	4b09      	ldr	r3, [pc, #36]	; (400c1c <mpu_set_accel_range+0x50>)
  400bf8:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(IMU_ADDRESS, MPU6050_RA_ACCEL_CONFIG);
  400bfa:	211c      	movs	r1, #28
  400bfc:	2068      	movs	r0, #104	; 0x68
  400bfe:	f7ff fee1 	bl	4009c4 <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  400c02:	f020 0018 	bic.w	r0, r0, #24
  400c06:	ea40 02c4 	orr.w	r2, r0, r4, lsl #3

    write_register8(IMU_ADDRESS, MPU6050_RA_ACCEL_CONFIG, value);
  400c0a:	b2d2      	uxtb	r2, r2
  400c0c:	211c      	movs	r1, #28
  400c0e:	2068      	movs	r0, #104	; 0x68
  400c10:	f7ff febc 	bl	40098c <write_register8>
  400c14:	bd10      	pop	{r4, pc}
  400c16:	bf00      	nop
  400c18:	387fda40 	.word	0x387fda40
  400c1c:	20000424 	.word	0x20000424
  400c20:	38ffda40 	.word	0x38ffda40
  400c24:	397fda40 	.word	0x397fda40
  400c28:	39fff518 	.word	0x39fff518

00400c2c <mpu_set_sleep_enabled>:

    return (uint8_t)value;
}

void mpu_set_sleep_enabled(bool state)
{
  400c2c:	b508      	push	{r3, lr}
    write_register_bit(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1, 6, state);
  400c2e:	4603      	mov	r3, r0
  400c30:	2206      	movs	r2, #6
  400c32:	216b      	movs	r1, #107	; 0x6b
  400c34:	2068      	movs	r0, #104	; 0x68
  400c36:	f7ff ff0d 	bl	400a54 <write_register_bit>
  400c3a:	bd08      	pop	{r3, pc}

00400c3c <mpu_begin>:
        return true;
    }
}

bool mpu_begin(uint8_t scale, uint8_t range)
{
  400c3c:	b538      	push	{r3, r4, r5, lr}
  400c3e:	4605      	mov	r5, r0
  400c40:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  400c42:	4a11      	ldr	r2, [pc, #68]	; (400c88 <mpu_begin+0x4c>)
  400c44:	2300      	movs	r3, #0
  400c46:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  400c48:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  400c4a:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  400c4c:	2100      	movs	r1, #0
  400c4e:	4a0f      	ldr	r2, [pc, #60]	; (400c8c <mpu_begin+0x50>)
  400c50:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  400c52:	4a0f      	ldr	r2, [pc, #60]	; (400c90 <mpu_begin+0x54>)
  400c54:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  400c56:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  400c58:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  400c5a:	4a0e      	ldr	r2, [pc, #56]	; (400c94 <mpu_begin+0x58>)
  400c5c:	6013      	str	r3, [r2, #0]

    if (mpu_who_am_i() != 0x68) {
  400c5e:	f7ff ff61 	bl	400b24 <mpu_who_am_i>
  400c62:	2868      	cmp	r0, #104	; 0x68
  400c64:	d10d      	bne.n	400c82 <mpu_begin+0x46>
        return false;
    }

    // Set clock source
    mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  400c66:	2001      	movs	r0, #1
  400c68:	f7ff ff62 	bl	400b30 <mpu_set_clock_source>

    // Set scale and range
    mpu_set_gyro_scale(scale);
  400c6c:	4628      	mov	r0, r5
  400c6e:	f7ff ff75 	bl	400b5c <mpu_set_gyro_scale>
    mpu_set_accel_range(range);
  400c72:	4620      	mov	r0, r4
  400c74:	f7ff ffaa 	bl	400bcc <mpu_set_accel_range>

    // Disable sleep mode
    mpu_set_sleep_enabled(false);
  400c78:	2000      	movs	r0, #0
  400c7a:	f7ff ffd7 	bl	400c2c <mpu_set_sleep_enabled>

    return true;
  400c7e:	2001      	movs	r0, #1
  400c80:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (mpu_who_am_i() != 0x68) {
        return false;
  400c82:	2000      	movs	r0, #0

    // Disable sleep mode
    mpu_set_sleep_enabled(false);

    return true;
}
  400c84:	bd38      	pop	{r3, r4, r5, pc}
  400c86:	bf00      	nop
  400c88:	200006d0 	.word	0x200006d0
  400c8c:	20000438 	.word	0x20000438
  400c90:	20000684 	.word	0x20000684
  400c94:	20000440 	.word	0x20000440

00400c98 <mpu_get_sleep_enabled>:
{
    write_register_bit(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1, 6, state);
}

bool mpu_get_sleep_enabled(void)
{
  400c98:	b508      	push	{r3, lr}
    return read_register_bit(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1, 6);
  400c9a:	2206      	movs	r2, #6
  400c9c:	216b      	movs	r1, #107	; 0x6b
  400c9e:	2068      	movs	r0, #104	; 0x68
  400ca0:	f7ff fef0 	bl	400a84 <read_register_bit>
}
  400ca4:	bd08      	pop	{r3, pc}
  400ca6:	bf00      	nop

00400ca8 <mpu_read_gyro>:
    a->is_pos_activity_on_z = ((data >> 2) & 1);

}

void mpu_read_gyro(int16_t *x, int16_t *y, int16_t *z)
{
  400ca8:	b570      	push	{r4, r5, r6, lr}
  400caa:	b082      	sub	sp, #8
  400cac:	4606      	mov	r6, r0
  400cae:	460d      	mov	r5, r1
  400cb0:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400cb2:	2300      	movs	r3, #0
  400cb4:	9300      	str	r3, [sp, #0]
  400cb6:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(IMU_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 6, i2c_buffer);
  400cba:	466b      	mov	r3, sp
  400cbc:	2206      	movs	r2, #6
  400cbe:	2143      	movs	r1, #67	; 0x43
  400cc0:	2068      	movs	r0, #104	; 0x68
  400cc2:	f7ff fea5 	bl	400a10 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400cc6:	f89d 2000 	ldrb.w	r2, [sp]
  400cca:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400cce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400cd2:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400cd4:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400cd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400ce0:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400ce2:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400ce6:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400cea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400cee:	8023      	strh	r3, [r4, #0]

}
  400cf0:	b002      	add	sp, #8
  400cf2:	bd70      	pop	{r4, r5, r6, pc}

00400cf4 <mpu_read_raw_gyro>:

void mpu_read_raw_gyro(void)
{
  400cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_gyro(&gx, &gy, &gz);
  400cf6:	4d0c      	ldr	r5, [pc, #48]	; (400d28 <mpu_read_raw_gyro+0x34>)
  400cf8:	4e0c      	ldr	r6, [pc, #48]	; (400d2c <mpu_read_raw_gyro+0x38>)
  400cfa:	4f0d      	ldr	r7, [pc, #52]	; (400d30 <mpu_read_raw_gyro+0x3c>)
  400cfc:	462a      	mov	r2, r5
  400cfe:	4631      	mov	r1, r6
  400d00:	4638      	mov	r0, r7
  400d02:	f7ff ffd1 	bl	400ca8 <mpu_read_gyro>
    raw_gyro.x_axis = (float)gx;
  400d06:	4c0b      	ldr	r4, [pc, #44]	; (400d34 <mpu_read_raw_gyro+0x40>)
  400d08:	f9b7 0000 	ldrsh.w	r0, [r7]
  400d0c:	f006 fde2 	bl	4078d4 <__aeabi_i2f>
  400d10:	6020      	str	r0, [r4, #0]
    raw_gyro.y_axis = (float)gy;
  400d12:	f9b6 0000 	ldrsh.w	r0, [r6]
  400d16:	f006 fddd 	bl	4078d4 <__aeabi_i2f>
  400d1a:	6060      	str	r0, [r4, #4]
    raw_gyro.z_axis = (float)gz;
  400d1c:	f9b5 0000 	ldrsh.w	r0, [r5]
  400d20:	f006 fdd8 	bl	4078d4 <__aeabi_i2f>
  400d24:	60a0      	str	r0, [r4, #8]
  400d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d28:	200006c0 	.word	0x200006c0
  400d2c:	2000051c 	.word	0x2000051c
  400d30:	200006dc 	.word	0x200006dc
  400d34:	20000510 	.word	0x20000510

00400d38 <mpu_read_normalized_gyro>:

}

t_fp_vector mpu_read_normalized_gyro(void)
{
  400d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d3c:	4604      	mov	r4, r0
    mpu_read_raw_gyro();
  400d3e:	f7ff ffd9 	bl	400cf4 <mpu_read_raw_gyro>

    if (use_calibrate) {
  400d42:	4b3d      	ldr	r3, [pc, #244]	; (400e38 <mpu_read_normalized_gyro+0x100>)
  400d44:	781b      	ldrb	r3, [r3, #0]
  400d46:	b30b      	cbz	r3, 400d8c <mpu_read_normalized_gyro+0x54>
        norm_gyro.x_axis = (raw_gyro.x_axis - delta_gyro.x_axis) * dps_per_digit;
  400d48:	4b3c      	ldr	r3, [pc, #240]	; (400e3c <mpu_read_normalized_gyro+0x104>)
  400d4a:	681e      	ldr	r6, [r3, #0]
  400d4c:	4d3c      	ldr	r5, [pc, #240]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400d4e:	4f3d      	ldr	r7, [pc, #244]	; (400e44 <mpu_read_normalized_gyro+0x10c>)
  400d50:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 400e50 <mpu_read_normalized_gyro+0x118>
  400d54:	f8d8 1000 	ldr.w	r1, [r8]
  400d58:	6838      	ldr	r0, [r7, #0]
  400d5a:	f006 fd05 	bl	407768 <__aeabi_fsub>
  400d5e:	4631      	mov	r1, r6
  400d60:	f006 fe0c 	bl	40797c <__aeabi_fmul>
  400d64:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = (raw_gyro.y_axis - delta_gyro.y_axis) * dps_per_digit;
  400d66:	f8d8 1004 	ldr.w	r1, [r8, #4]
  400d6a:	6878      	ldr	r0, [r7, #4]
  400d6c:	f006 fcfc 	bl	407768 <__aeabi_fsub>
  400d70:	4631      	mov	r1, r6
  400d72:	f006 fe03 	bl	40797c <__aeabi_fmul>
  400d76:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = (raw_gyro.z_axis - delta_gyro.z_axis) * dps_per_digit;
  400d78:	f8d8 1008 	ldr.w	r1, [r8, #8]
  400d7c:	68b8      	ldr	r0, [r7, #8]
  400d7e:	f006 fcf3 	bl	407768 <__aeabi_fsub>
  400d82:	4631      	mov	r1, r6
  400d84:	f006 fdfa 	bl	40797c <__aeabi_fmul>
  400d88:	60a8      	str	r0, [r5, #8]
  400d8a:	e012      	b.n	400db2 <mpu_read_normalized_gyro+0x7a>
    } else {
        norm_gyro.x_axis = raw_gyro.x_axis  * dps_per_digit;
  400d8c:	4b2b      	ldr	r3, [pc, #172]	; (400e3c <mpu_read_normalized_gyro+0x104>)
  400d8e:	681f      	ldr	r7, [r3, #0]
  400d90:	4d2b      	ldr	r5, [pc, #172]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400d92:	4e2c      	ldr	r6, [pc, #176]	; (400e44 <mpu_read_normalized_gyro+0x10c>)
  400d94:	4639      	mov	r1, r7
  400d96:	6830      	ldr	r0, [r6, #0]
  400d98:	f006 fdf0 	bl	40797c <__aeabi_fmul>
  400d9c:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = raw_gyro.y_axis  * dps_per_digit;
  400d9e:	4639      	mov	r1, r7
  400da0:	6870      	ldr	r0, [r6, #4]
  400da2:	f006 fdeb 	bl	40797c <__aeabi_fmul>
  400da6:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = raw_gyro.z_axis  * dps_per_digit;
  400da8:	4639      	mov	r1, r7
  400daa:	68b0      	ldr	r0, [r6, #8]
  400dac:	f006 fde6 	bl	40797c <__aeabi_fmul>
  400db0:	60a8      	str	r0, [r5, #8]
    }

    if (actual_threshold) {
  400db2:	2100      	movs	r1, #0
  400db4:	4b24      	ldr	r3, [pc, #144]	; (400e48 <mpu_read_normalized_gyro+0x110>)
  400db6:	6818      	ldr	r0, [r3, #0]
  400db8:	f006 ff74 	bl	407ca4 <__aeabi_fcmpeq>
  400dbc:	2800      	cmp	r0, #0
  400dbe:	d132      	bne.n	400e26 <mpu_read_normalized_gyro+0xee>
        if (abs(norm_gyro.x_axis) < threshold_gyro.x_axis) norm_gyro.x_axis = 0;
  400dc0:	4b1f      	ldr	r3, [pc, #124]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400dc2:	6818      	ldr	r0, [r3, #0]
  400dc4:	f006 ffa0 	bl	407d08 <__aeabi_f2iz>
  400dc8:	2800      	cmp	r0, #0
  400dca:	bfb8      	it	lt
  400dcc:	4240      	neglt	r0, r0
  400dce:	f006 fd81 	bl	4078d4 <__aeabi_i2f>
  400dd2:	4b1e      	ldr	r3, [pc, #120]	; (400e4c <mpu_read_normalized_gyro+0x114>)
  400dd4:	6819      	ldr	r1, [r3, #0]
  400dd6:	f006 ff6f 	bl	407cb8 <__aeabi_fcmplt>
  400dda:	b110      	cbz	r0, 400de2 <mpu_read_normalized_gyro+0xaa>
  400ddc:	2200      	movs	r2, #0
  400dde:	4b18      	ldr	r3, [pc, #96]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400de0:	601a      	str	r2, [r3, #0]
        if (abs(norm_gyro.y_axis) < threshold_gyro.y_axis) norm_gyro.y_axis = 0;
  400de2:	4b17      	ldr	r3, [pc, #92]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400de4:	6858      	ldr	r0, [r3, #4]
  400de6:	f006 ff8f 	bl	407d08 <__aeabi_f2iz>
  400dea:	2800      	cmp	r0, #0
  400dec:	bfb8      	it	lt
  400dee:	4240      	neglt	r0, r0
  400df0:	f006 fd70 	bl	4078d4 <__aeabi_i2f>
  400df4:	4b15      	ldr	r3, [pc, #84]	; (400e4c <mpu_read_normalized_gyro+0x114>)
  400df6:	6859      	ldr	r1, [r3, #4]
  400df8:	f006 ff5e 	bl	407cb8 <__aeabi_fcmplt>
  400dfc:	b110      	cbz	r0, 400e04 <mpu_read_normalized_gyro+0xcc>
  400dfe:	2200      	movs	r2, #0
  400e00:	4b0f      	ldr	r3, [pc, #60]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400e02:	605a      	str	r2, [r3, #4]
        if (abs(norm_gyro.z_axis) < threshold_gyro.z_axis) norm_gyro.z_axis = 0;
  400e04:	4b0e      	ldr	r3, [pc, #56]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400e06:	6898      	ldr	r0, [r3, #8]
  400e08:	f006 ff7e 	bl	407d08 <__aeabi_f2iz>
  400e0c:	2800      	cmp	r0, #0
  400e0e:	bfb8      	it	lt
  400e10:	4240      	neglt	r0, r0
  400e12:	f006 fd5f 	bl	4078d4 <__aeabi_i2f>
  400e16:	4b0d      	ldr	r3, [pc, #52]	; (400e4c <mpu_read_normalized_gyro+0x114>)
  400e18:	6899      	ldr	r1, [r3, #8]
  400e1a:	f006 ff4d 	bl	407cb8 <__aeabi_fcmplt>
  400e1e:	b110      	cbz	r0, 400e26 <mpu_read_normalized_gyro+0xee>
  400e20:	2200      	movs	r2, #0
  400e22:	4b07      	ldr	r3, [pc, #28]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400e24:	609a      	str	r2, [r3, #8]
    }

    return norm_gyro;
  400e26:	4b06      	ldr	r3, [pc, #24]	; (400e40 <mpu_read_normalized_gyro+0x108>)
  400e28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400e2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
  400e30:	4620      	mov	r0, r4
  400e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e36:	bf00      	nop
  400e38:	20000438 	.word	0x20000438
  400e3c:	20000434 	.word	0x20000434
  400e40:	200006e4 	.word	0x200006e4
  400e44:	20000510 	.word	0x20000510
  400e48:	20000440 	.word	0x20000440
  400e4c:	20000684 	.word	0x20000684
  400e50:	200006d0 	.word	0x200006d0

00400e54 <mpu_read_acceleration>:



void mpu_read_acceleration(int16_t *x, int16_t *y, int16_t *z)
{
  400e54:	b570      	push	{r4, r5, r6, lr}
  400e56:	b082      	sub	sp, #8
  400e58:	4606      	mov	r6, r0
  400e5a:	460d      	mov	r5, r1
  400e5c:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400e5e:	2300      	movs	r3, #0
  400e60:	9300      	str	r3, [sp, #0]
  400e62:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(IMU_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 6, i2c_buffer);
  400e66:	466b      	mov	r3, sp
  400e68:	2206      	movs	r2, #6
  400e6a:	213b      	movs	r1, #59	; 0x3b
  400e6c:	2068      	movs	r0, #104	; 0x68
  400e6e:	f7ff fdcf 	bl	400a10 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400e72:	f89d 2000 	ldrb.w	r2, [sp]
  400e76:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400e7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e7e:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400e80:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400e84:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400e88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e8c:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400e8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400e92:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400e96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e9a:	8023      	strh	r3, [r4, #0]
}
  400e9c:	b002      	add	sp, #8
  400e9e:	bd70      	pop	{r4, r5, r6, pc}

00400ea0 <mpu_read_raw_acceleration>:

void mpu_read_raw_acceleration(void)
{
  400ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_acceleration(&ax, &ay, &az);
  400ea2:	4d0c      	ldr	r5, [pc, #48]	; (400ed4 <mpu_read_raw_acceleration+0x34>)
  400ea4:	4e0c      	ldr	r6, [pc, #48]	; (400ed8 <mpu_read_raw_acceleration+0x38>)
  400ea6:	4f0d      	ldr	r7, [pc, #52]	; (400edc <mpu_read_raw_acceleration+0x3c>)
  400ea8:	462a      	mov	r2, r5
  400eaa:	4631      	mov	r1, r6
  400eac:	4638      	mov	r0, r7
  400eae:	f7ff ffd1 	bl	400e54 <mpu_read_acceleration>
    raw_accel.x_axis = (float)ax;
  400eb2:	4c0b      	ldr	r4, [pc, #44]	; (400ee0 <mpu_read_raw_acceleration+0x40>)
  400eb4:	f9b7 0000 	ldrsh.w	r0, [r7]
  400eb8:	f006 fd0c 	bl	4078d4 <__aeabi_i2f>
  400ebc:	6020      	str	r0, [r4, #0]
    raw_accel.y_axis = (float)ay;
  400ebe:	f9b6 0000 	ldrsh.w	r0, [r6]
  400ec2:	f006 fd07 	bl	4078d4 <__aeabi_i2f>
  400ec6:	6060      	str	r0, [r4, #4]
    raw_accel.z_axis = (float)az;
  400ec8:	f9b5 0000 	ldrsh.w	r0, [r5]
  400ecc:	f006 fd02 	bl	4078d4 <__aeabi_i2f>
  400ed0:	60a0      	str	r0, [r4, #8]
  400ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ed4:	2000051e 	.word	0x2000051e
  400ed8:	200006de 	.word	0x200006de
  400edc:	20000530 	.word	0x20000530
  400ee0:	200006c4 	.word	0x200006c4

00400ee4 <mpu_read_normalized_acceleration>:
}

void mpu_read_normalized_acceleration(void)
{
  400ee4:	b570      	push	{r4, r5, r6, lr}
    mpu_read_raw_acceleration();
  400ee6:	f7ff ffdb 	bl	400ea0 <mpu_read_raw_acceleration>

    norm_accel.x_axis = raw_accel.x_axis * range_per_digit * 9.80665f;
  400eea:	4b0e      	ldr	r3, [pc, #56]	; (400f24 <mpu_read_normalized_acceleration+0x40>)
  400eec:	681d      	ldr	r5, [r3, #0]
  400eee:	4c0e      	ldr	r4, [pc, #56]	; (400f28 <mpu_read_normalized_acceleration+0x44>)
  400ef0:	4e0e      	ldr	r6, [pc, #56]	; (400f2c <mpu_read_normalized_acceleration+0x48>)
  400ef2:	6831      	ldr	r1, [r6, #0]
  400ef4:	4628      	mov	r0, r5
  400ef6:	f006 fd41 	bl	40797c <__aeabi_fmul>
  400efa:	490d      	ldr	r1, [pc, #52]	; (400f30 <mpu_read_normalized_acceleration+0x4c>)
  400efc:	f006 fd3e 	bl	40797c <__aeabi_fmul>
  400f00:	6020      	str	r0, [r4, #0]
    norm_accel.y_axis = raw_accel.y_axis * range_per_digit * 9.80665f;
  400f02:	6871      	ldr	r1, [r6, #4]
  400f04:	4628      	mov	r0, r5
  400f06:	f006 fd39 	bl	40797c <__aeabi_fmul>
  400f0a:	4909      	ldr	r1, [pc, #36]	; (400f30 <mpu_read_normalized_acceleration+0x4c>)
  400f0c:	f006 fd36 	bl	40797c <__aeabi_fmul>
  400f10:	6060      	str	r0, [r4, #4]
    norm_accel.z_axis = raw_accel.z_axis * range_per_digit * 9.80665f;
  400f12:	68b1      	ldr	r1, [r6, #8]
  400f14:	4628      	mov	r0, r5
  400f16:	f006 fd31 	bl	40797c <__aeabi_fmul>
  400f1a:	4905      	ldr	r1, [pc, #20]	; (400f30 <mpu_read_normalized_acceleration+0x4c>)
  400f1c:	f006 fd2e 	bl	40797c <__aeabi_fmul>
  400f20:	60a0      	str	r0, [r4, #8]
  400f22:	bd70      	pop	{r4, r5, r6, pc}
  400f24:	20000424 	.word	0x20000424
  400f28:	200006a8 	.word	0x200006a8
  400f2c:	200006c4 	.word	0x200006c4
  400f30:	411ce80a 	.word	0x411ce80a

00400f34 <mpu_log_settings>:
    norm_mag.z_axis = raw_mag.z_axis * 10/1229/4096 +270;    

}

void mpu_log_settings(void)
{
  400f34:	b508      	push	{r3, lr}
    printf("Device: 0x%1x\r\n", mpu_who_am_i());
  400f36:	f7ff fdf5 	bl	400b24 <mpu_who_am_i>
  400f3a:	4601      	mov	r1, r0
  400f3c:	482b      	ldr	r0, [pc, #172]	; (400fec <mpu_log_settings+0xb8>)
  400f3e:	f002 fba5 	bl	40368c <iprintf>
    printf("Sleep Mode: %s\r\n", mpu_get_sleep_enabled() ? "Enabled" : "Disabled");
  400f42:	f7ff fea9 	bl	400c98 <mpu_get_sleep_enabled>
  400f46:	492a      	ldr	r1, [pc, #168]	; (400ff0 <mpu_log_settings+0xbc>)
  400f48:	4a2a      	ldr	r2, [pc, #168]	; (400ff4 <mpu_log_settings+0xc0>)
  400f4a:	2800      	cmp	r0, #0
  400f4c:	bf18      	it	ne
  400f4e:	4611      	movne	r1, r2
  400f50:	4829      	ldr	r0, [pc, #164]	; (400ff8 <mpu_log_settings+0xc4>)
  400f52:	f002 fb9b 	bl	40368c <iprintf>
    printf("Clock Source: ");
  400f56:	4829      	ldr	r0, [pc, #164]	; (400ffc <mpu_log_settings+0xc8>)
  400f58:	f002 fb98 	bl	40368c <iprintf>
    switch (mpu_get_clock_source()) {
  400f5c:	f7ff fdf6 	bl	400b4c <mpu_get_clock_source>
  400f60:	b110      	cbz	r0, 400f68 <mpu_log_settings+0x34>
  400f62:	2801      	cmp	r0, #1
  400f64:	d004      	beq.n	400f70 <mpu_log_settings+0x3c>
  400f66:	e006      	b.n	400f76 <mpu_log_settings+0x42>
        case MPU6050_CLOCK_INTERNAL:
        printf("Internal 8MHz oscillator\r\n");
  400f68:	4825      	ldr	r0, [pc, #148]	; (401000 <mpu_log_settings+0xcc>)
  400f6a:	f002 fb8f 	bl	40368c <iprintf>
        break;
  400f6e:	e002      	b.n	400f76 <mpu_log_settings+0x42>
        case MPU6050_CLOCK_PLL_XGYRO:
        printf("PLL with X axis gyroscope reference\r\n");
  400f70:	4824      	ldr	r0, [pc, #144]	; (401004 <mpu_log_settings+0xd0>)
  400f72:	f002 fb8b 	bl	40368c <iprintf>
        break;
    }
    printf("Gyroscope: ");
  400f76:	4824      	ldr	r0, [pc, #144]	; (401008 <mpu_log_settings+0xd4>)
  400f78:	f002 fb88 	bl	40368c <iprintf>
        switch (mpu_get_gyro_scale()) {
  400f7c:	f7ff fe1e 	bl	400bbc <mpu_get_gyro_scale>
  400f80:	2803      	cmp	r0, #3
  400f82:	d812      	bhi.n	400faa <mpu_log_settings+0x76>
  400f84:	e8df f000 	tbb	[pc, r0]
  400f88:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
        printf("250 dps\r\n");
  400f8c:	481f      	ldr	r0, [pc, #124]	; (40100c <mpu_log_settings+0xd8>)
  400f8e:	f002 fb7d 	bl	40368c <iprintf>
        break;
  400f92:	e00a      	b.n	400faa <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_500:
        printf("500 dps\r\n");
  400f94:	481e      	ldr	r0, [pc, #120]	; (401010 <mpu_log_settings+0xdc>)
  400f96:	f002 fb79 	bl	40368c <iprintf>
        break;
  400f9a:	e006      	b.n	400faa <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_1000:
        printf("1000 dps\r\n");
  400f9c:	481d      	ldr	r0, [pc, #116]	; (401014 <mpu_log_settings+0xe0>)
  400f9e:	f002 fb75 	bl	40368c <iprintf>
        break;
  400fa2:	e002      	b.n	400faa <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_2000:
        printf("2000 dps\r\n");
  400fa4:	481c      	ldr	r0, [pc, #112]	; (401018 <mpu_log_settings+0xe4>)
  400fa6:	f002 fb71 	bl	40368c <iprintf>
        break;
    }
    printf("use_calibrate: %d\r\n", use_calibrate);
  400faa:	4b1c      	ldr	r3, [pc, #112]	; (40101c <mpu_log_settings+0xe8>)
  400fac:	7819      	ldrb	r1, [r3, #0]
  400fae:	481c      	ldr	r0, [pc, #112]	; (401020 <mpu_log_settings+0xec>)
  400fb0:	f002 fb6c 	bl	40368c <iprintf>
    printf("actual_threshold: %f\r\n", actual_threshold);
  400fb4:	4b1b      	ldr	r3, [pc, #108]	; (401024 <mpu_log_settings+0xf0>)
  400fb6:	6818      	ldr	r0, [r3, #0]
  400fb8:	f006 f836 	bl	407028 <__aeabi_f2d>
  400fbc:	4602      	mov	r2, r0
  400fbe:	460b      	mov	r3, r1
  400fc0:	4819      	ldr	r0, [pc, #100]	; (401028 <mpu_log_settings+0xf4>)
  400fc2:	f002 fb63 	bl	40368c <iprintf>
    printf("dps_per_digit: %f\r\n", dps_per_digit);
  400fc6:	4b19      	ldr	r3, [pc, #100]	; (40102c <mpu_log_settings+0xf8>)
  400fc8:	6818      	ldr	r0, [r3, #0]
  400fca:	f006 f82d 	bl	407028 <__aeabi_f2d>
  400fce:	4602      	mov	r2, r0
  400fd0:	460b      	mov	r3, r1
  400fd2:	4817      	ldr	r0, [pc, #92]	; (401030 <mpu_log_settings+0xfc>)
  400fd4:	f002 fb5a 	bl	40368c <iprintf>
    printf("range_per_digit: %f\r\n", range_per_digit);
  400fd8:	4b16      	ldr	r3, [pc, #88]	; (401034 <mpu_log_settings+0x100>)
  400fda:	6818      	ldr	r0, [r3, #0]
  400fdc:	f006 f824 	bl	407028 <__aeabi_f2d>
  400fe0:	4602      	mov	r2, r0
  400fe2:	460b      	mov	r3, r1
  400fe4:	4814      	ldr	r0, [pc, #80]	; (401038 <mpu_log_settings+0x104>)
  400fe6:	f002 fb51 	bl	40368c <iprintf>
  400fea:	bd08      	pop	{r3, pc}
  400fec:	00408024 	.word	0x00408024
  400ff0:	00408018 	.word	0x00408018
  400ff4:	00408010 	.word	0x00408010
  400ff8:	00408034 	.word	0x00408034
  400ffc:	00408048 	.word	0x00408048
  401000:	00408058 	.word	0x00408058
  401004:	00408074 	.word	0x00408074
  401008:	0040809c 	.word	0x0040809c
  40100c:	004080a8 	.word	0x004080a8
  401010:	004080b4 	.word	0x004080b4
  401014:	004080c0 	.word	0x004080c0
  401018:	004080cc 	.word	0x004080cc
  40101c:	20000438 	.word	0x20000438
  401020:	004080d8 	.word	0x004080d8
  401024:	20000440 	.word	0x20000440
  401028:	004080ec 	.word	0x004080ec
  40102c:	20000434 	.word	0x20000434
  401030:	00408104 	.word	0x00408104
  401034:	20000424 	.word	0x20000424
  401038:	00408118 	.word	0x00408118

0040103c <mpu_set_threshold>:
{
	return actual_threshold;
}

void mpu_set_threshold(uint8_t multiple)
{
  40103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (multiple > 0) {
  40103e:	4604      	mov	r4, r0
  401040:	b1d8      	cbz	r0, 40107a <mpu_set_threshold+0x3e>
		if (!use_calibrate) {
  401042:	4b13      	ldr	r3, [pc, #76]	; (401090 <mpu_set_threshold+0x54>)
  401044:	781b      	ldrb	r3, [r3, #0]
  401046:	b913      	cbnz	r3, 40104e <mpu_set_threshold+0x12>
			mpu_calibrate_gyro(GYRO_SAMPLES);
  401048:	2032      	movs	r0, #50	; 0x32
  40104a:	f000 f829 	bl	4010a0 <mpu_calibrate_gyro>
		}

		threshold_gyro.x_axis = threshold.x_axis * multiple;
  40104e:	4620      	mov	r0, r4
  401050:	f006 fc40 	bl	4078d4 <__aeabi_i2f>
  401054:	4607      	mov	r7, r0
  401056:	4d0f      	ldr	r5, [pc, #60]	; (401094 <mpu_set_threshold+0x58>)
  401058:	4e0f      	ldr	r6, [pc, #60]	; (401098 <mpu_set_threshold+0x5c>)
  40105a:	4601      	mov	r1, r0
  40105c:	6830      	ldr	r0, [r6, #0]
  40105e:	f006 fc8d 	bl	40797c <__aeabi_fmul>
  401062:	6028      	str	r0, [r5, #0]
		threshold_gyro.y_axis = threshold.y_axis * multiple;
  401064:	4639      	mov	r1, r7
  401066:	6870      	ldr	r0, [r6, #4]
  401068:	f006 fc88 	bl	40797c <__aeabi_fmul>
  40106c:	6068      	str	r0, [r5, #4]
		threshold_gyro.z_axis = threshold.z_axis * multiple;
  40106e:	4639      	mov	r1, r7
  401070:	68b0      	ldr	r0, [r6, #8]
  401072:	f006 fc83 	bl	40797c <__aeabi_fmul>
  401076:	60a8      	str	r0, [r5, #8]
  401078:	e004      	b.n	401084 <mpu_set_threshold+0x48>
	} else {
		threshold_gyro.x_axis = 0;
  40107a:	4b06      	ldr	r3, [pc, #24]	; (401094 <mpu_set_threshold+0x58>)
  40107c:	2200      	movs	r2, #0
  40107e:	601a      	str	r2, [r3, #0]
		threshold_gyro.y_axis = 0;
  401080:	605a      	str	r2, [r3, #4]
		threshold_gyro.z_axis = 0;
  401082:	609a      	str	r2, [r3, #8]
	}

	actual_threshold = multiple;
  401084:	4620      	mov	r0, r4
  401086:	f006 fc21 	bl	4078cc <__aeabi_ui2f>
  40108a:	4b04      	ldr	r3, [pc, #16]	; (40109c <mpu_set_threshold+0x60>)
  40108c:	6018      	str	r0, [r3, #0]
  40108e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401090:	20000438 	.word	0x20000438
  401094:	20000684 	.word	0x20000684
  401098:	20000504 	.word	0x20000504
  40109c:	20000440 	.word	0x20000440

004010a0 <mpu_calibrate_gyro>:

}


void mpu_calibrate_gyro(uint8_t samples)
{
  4010a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010a4:	b085      	sub	sp, #20
	use_calibrate = true;
  4010a6:	2201      	movs	r2, #1
  4010a8:	4b5e      	ldr	r3, [pc, #376]	; (401224 <mpu_calibrate_gyro+0x184>)
  4010aa:	701a      	strb	r2, [r3, #0]
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  4010ac:	4681      	mov	r9, r0
  4010ae:	2800      	cmp	r0, #0
  4010b0:	d048      	beq.n	401144 <mpu_calibrate_gyro+0xa4>
  4010b2:	2400      	movs	r4, #0
  4010b4:	f04f 0a00 	mov.w	sl, #0
  4010b8:	46d3      	mov	fp, sl
  4010ba:	f8cd a00c 	str.w	sl, [sp, #12]
  4010be:	f8cd a008 	str.w	sl, [sp, #8]
  4010c2:	f8cd a004 	str.w	sl, [sp, #4]
  4010c6:	f8cd a000 	str.w	sl, [sp]

        mpu_read_raw_gyro();

		sum_x += raw_gyro.x_axis;
  4010ca:	f8df 816c 	ldr.w	r8, [pc, #364]	; 401238 <mpu_calibrate_gyro+0x198>
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {

        mpu_read_raw_gyro();
  4010ce:	f7ff fe11 	bl	400cf4 <mpu_read_raw_gyro>

		sum_x += raw_gyro.x_axis;
  4010d2:	f8d8 7000 	ldr.w	r7, [r8]
  4010d6:	4639      	mov	r1, r7
  4010d8:	9800      	ldr	r0, [sp, #0]
  4010da:	f006 fb47 	bl	40776c <__addsf3>
  4010de:	9000      	str	r0, [sp, #0]
		sum_y += raw_gyro.y_axis;
  4010e0:	f8d8 6004 	ldr.w	r6, [r8, #4]
  4010e4:	4631      	mov	r1, r6
  4010e6:	9801      	ldr	r0, [sp, #4]
  4010e8:	f006 fb40 	bl	40776c <__addsf3>
  4010ec:	9001      	str	r0, [sp, #4]
		sum_z += raw_gyro.z_axis;
  4010ee:	f8d8 5008 	ldr.w	r5, [r8, #8]
  4010f2:	4629      	mov	r1, r5
  4010f4:	9802      	ldr	r0, [sp, #8]
  4010f6:	f006 fb39 	bl	40776c <__addsf3>
  4010fa:	9002      	str	r0, [sp, #8]

        // Sum
		sigma_x += raw_gyro.x_axis * raw_gyro.x_axis;
  4010fc:	4639      	mov	r1, r7
  4010fe:	4638      	mov	r0, r7
  401100:	f006 fc3c 	bl	40797c <__aeabi_fmul>
  401104:	4601      	mov	r1, r0
  401106:	9803      	ldr	r0, [sp, #12]
  401108:	f006 fb30 	bl	40776c <__addsf3>
  40110c:	9003      	str	r0, [sp, #12]
		sigma_y += raw_gyro.y_axis * raw_gyro.y_axis;
  40110e:	4631      	mov	r1, r6
  401110:	4630      	mov	r0, r6
  401112:	f006 fc33 	bl	40797c <__aeabi_fmul>
  401116:	4601      	mov	r1, r0
  401118:	4658      	mov	r0, fp
  40111a:	f006 fb27 	bl	40776c <__addsf3>
  40111e:	4683      	mov	fp, r0
		sigma_z += raw_gyro.z_axis * raw_gyro.z_axis;
  401120:	4629      	mov	r1, r5
  401122:	4628      	mov	r0, r5
  401124:	f006 fc2a 	bl	40797c <__aeabi_fmul>
  401128:	4601      	mov	r1, r0
  40112a:	4650      	mov	r0, sl
  40112c:	f006 fb1e 	bl	40776c <__addsf3>
  401130:	4682      	mov	sl, r0

		delay_ms(5);
  401132:	f24a 706a 	movw	r0, #42858	; 0xa76a
  401136:	f007 f9fb 	bl	408530 <__portable_delay_cycles_veneer>
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  40113a:	3401      	adds	r4, #1
  40113c:	b2e4      	uxtb	r4, r4
  40113e:	45a1      	cmp	r9, r4
  401140:	d1c5      	bne.n	4010ce <mpu_calibrate_gyro+0x2e>
  401142:	e00a      	b.n	40115a <mpu_calibrate_gyro+0xba>
	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;
  401144:	f04f 0a00 	mov.w	sl, #0

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
  401148:	46d3      	mov	fp, sl
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
  40114a:	f8cd a00c 	str.w	sl, [sp, #12]
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
  40114e:	f8cd a008 	str.w	sl, [sp, #8]
void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
  401152:	f8cd a004 	str.w	sl, [sp, #4]

void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
  401156:	f8cd a000 	str.w	sl, [sp]

		delay_ms(5);
	}

	// Calculate delta vectors
	delta_gyro.x_axis = sum_x/samples;
  40115a:	4648      	mov	r0, r9
  40115c:	f006 fbba 	bl	4078d4 <__aeabi_i2f>
  401160:	4605      	mov	r5, r0
  401162:	4601      	mov	r1, r0
  401164:	9800      	ldr	r0, [sp, #0]
  401166:	f006 fcbd 	bl	407ae4 <__aeabi_fdiv>
  40116a:	4606      	mov	r6, r0
  40116c:	4c2e      	ldr	r4, [pc, #184]	; (401228 <mpu_calibrate_gyro+0x188>)
  40116e:	6020      	str	r0, [r4, #0]
	delta_gyro.y_axis = sum_y/samples;
  401170:	4629      	mov	r1, r5
  401172:	9801      	ldr	r0, [sp, #4]
  401174:	f006 fcb6 	bl	407ae4 <__aeabi_fdiv>
  401178:	6060      	str	r0, [r4, #4]
	delta_gyro.z_axis = sum_z/samples;
  40117a:	4629      	mov	r1, r5
  40117c:	9802      	ldr	r0, [sp, #8]
  40117e:	f006 fcb1 	bl	407ae4 <__aeabi_fdiv>
  401182:	60a0      	str	r0, [r4, #8]

	// Calculate threshold vectors
	threshold.x_axis = sqrt((sigma_x/50) - (delta_gyro.x_axis * delta_gyro.x_axis));
  401184:	9f03      	ldr	r7, [sp, #12]
  401186:	4929      	ldr	r1, [pc, #164]	; (40122c <mpu_calibrate_gyro+0x18c>)
  401188:	4638      	mov	r0, r7
  40118a:	f006 fcab 	bl	407ae4 <__aeabi_fdiv>
  40118e:	4605      	mov	r5, r0
  401190:	4631      	mov	r1, r6
  401192:	4630      	mov	r0, r6
  401194:	f006 fbf2 	bl	40797c <__aeabi_fmul>
  401198:	4601      	mov	r1, r0
  40119a:	4628      	mov	r0, r5
  40119c:	f006 fae4 	bl	407768 <__aeabi_fsub>
  4011a0:	f005 ff42 	bl	407028 <__aeabi_f2d>
  4011a4:	f001 fa30 	bl	402608 <sqrt>
  4011a8:	4e21      	ldr	r6, [pc, #132]	; (401230 <mpu_calibrate_gyro+0x190>)
  4011aa:	f006 fa89 	bl	4076c0 <__aeabi_d2f>
  4011ae:	6030      	str	r0, [r6, #0]
	threshold.y_axis = sqrt((sigma_y/50) - (delta_gyro.y_axis * delta_gyro.y_axis));
  4011b0:	6865      	ldr	r5, [r4, #4]
  4011b2:	491e      	ldr	r1, [pc, #120]	; (40122c <mpu_calibrate_gyro+0x18c>)
  4011b4:	4658      	mov	r0, fp
  4011b6:	f006 fc95 	bl	407ae4 <__aeabi_fdiv>
  4011ba:	4607      	mov	r7, r0
  4011bc:	4629      	mov	r1, r5
  4011be:	4628      	mov	r0, r5
  4011c0:	f006 fbdc 	bl	40797c <__aeabi_fmul>
  4011c4:	4601      	mov	r1, r0
  4011c6:	4638      	mov	r0, r7
  4011c8:	f006 face 	bl	407768 <__aeabi_fsub>
  4011cc:	f005 ff2c 	bl	407028 <__aeabi_f2d>
  4011d0:	f001 fa1a 	bl	402608 <sqrt>
  4011d4:	f006 fa74 	bl	4076c0 <__aeabi_d2f>
  4011d8:	6070      	str	r0, [r6, #4]
	threshold.z_axis = sqrt((sigma_z/50) - (delta_gyro.z_axis * delta_gyro.z_axis));
  4011da:	68a4      	ldr	r4, [r4, #8]
  4011dc:	4913      	ldr	r1, [pc, #76]	; (40122c <mpu_calibrate_gyro+0x18c>)
  4011de:	4650      	mov	r0, sl
  4011e0:	f006 fc80 	bl	407ae4 <__aeabi_fdiv>
  4011e4:	4605      	mov	r5, r0
  4011e6:	4621      	mov	r1, r4
  4011e8:	4620      	mov	r0, r4
  4011ea:	f006 fbc7 	bl	40797c <__aeabi_fmul>
  4011ee:	4601      	mov	r1, r0
  4011f0:	4628      	mov	r0, r5
  4011f2:	f006 fab9 	bl	407768 <__aeabi_fsub>
  4011f6:	f005 ff17 	bl	407028 <__aeabi_f2d>
  4011fa:	f001 fa05 	bl	402608 <sqrt>
  4011fe:	f006 fa5f 	bl	4076c0 <__aeabi_d2f>
  401202:	60b0      	str	r0, [r6, #8]

	if (actual_threshold > 0) {
  401204:	4b0b      	ldr	r3, [pc, #44]	; (401234 <mpu_calibrate_gyro+0x194>)
  401206:	681c      	ldr	r4, [r3, #0]
  401208:	2100      	movs	r1, #0
  40120a:	4620      	mov	r0, r4
  40120c:	f006 fd72 	bl	407cf4 <__aeabi_fcmpgt>
  401210:	b128      	cbz	r0, 40121e <mpu_calibrate_gyro+0x17e>
		mpu_set_threshold(actual_threshold);
  401212:	4620      	mov	r0, r4
  401214:	f006 fd9e 	bl	407d54 <__aeabi_f2uiz>
  401218:	b2c0      	uxtb	r0, r0
  40121a:	f7ff ff0f 	bl	40103c <mpu_set_threshold>
	}

}
  40121e:	b005      	add	sp, #20
  401220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401224:	20000438 	.word	0x20000438
  401228:	200006d0 	.word	0x200006d0
  40122c:	42480000 	.word	0x42480000
  401230:	20000504 	.word	0x20000504
  401234:	20000440 	.word	0x20000440
  401238:	20000510 	.word	0x20000510

0040123c <imu_init>:
float last_gyro_angle_x = 0.0f;
float last_gyro_angle_y = 0.0f;
float last_gyro_angle_z = 0.0f;

bool imu_init(void)
{
  40123c:	b510      	push	{r4, lr}
    ap.imu.x_axis = 0.0f;
  40123e:	4b0c      	ldr	r3, [pc, #48]	; (401270 <imu_init+0x34>)
  401240:	2200      	movs	r2, #0
  401242:	601a      	str	r2, [r3, #0]
    ap.imu.y_axis = 0.0f;
  401244:	605a      	str	r2, [r3, #4]
    ap.imu.z_axis = 0.0f;
  401246:	609a      	str	r2, [r3, #8]

    ap.setpoint.x_axis = 0.0f;
  401248:	619a      	str	r2, [r3, #24]
    ap.setpoint.y_axis = 0.0f;
  40124a:	61da      	str	r2, [r3, #28]
    ap.setpoint.z_axis = 0.0f;
  40124c:	621a      	str	r2, [r3, #32]

    ap.command.x_axis = 0.0f;
  40124e:	625a      	str	r2, [r3, #36]	; 0x24
    ap.command.y_axis = 0.0f;
  401250:	629a      	str	r2, [r3, #40]	; 0x28
    ap.command.z_axis = 0.0f;
  401252:	62da      	str	r2, [r3, #44]	; 0x2c

    return (mpu_init() & mpu_probe() & mpu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2));
  401254:	f7ff fc1e 	bl	400a94 <mpu_init>
  401258:	4604      	mov	r4, r0
  40125a:	f7ff fc45 	bl	400ae8 <mpu_probe>
  40125e:	4020      	ands	r0, r4
  401260:	b2c4      	uxtb	r4, r0
  401262:	2100      	movs	r1, #0
  401264:	4608      	mov	r0, r1
  401266:	f7ff fce9 	bl	400c3c <mpu_begin>
}
  40126a:	4020      	ands	r0, r4
  40126c:	bd10      	pop	{r4, pc}
  40126e:	bf00      	nop
  401270:	20000820 	.word	0x20000820

00401274 <imu_calibrate>:

void imu_calibrate(void)
{
  401274:	b508      	push	{r3, lr}
    printf("calibrating imu...\r\n");
  401276:	4807      	ldr	r0, [pc, #28]	; (401294 <imu_calibrate+0x20>)
  401278:	f002 fa08 	bl	40368c <iprintf>
    mpu_calibrate_gyro(GYRO_SAMPLES);
  40127c:	2032      	movs	r0, #50	; 0x32
  40127e:	f7ff ff0f 	bl	4010a0 <mpu_calibrate_gyro>
    mpu_set_threshold(0);
  401282:	2000      	movs	r0, #0
  401284:	f7ff feda 	bl	40103c <mpu_set_threshold>
    mpu_log_settings();
  401288:	f7ff fe54 	bl	400f34 <mpu_log_settings>
    printf("calibration complete.\r\n");
  40128c:	4802      	ldr	r0, [pc, #8]	; (401298 <imu_calibrate+0x24>)
  40128e:	f002 f9fd 	bl	40368c <iprintf>
  401292:	bd08      	pop	{r3, pc}
  401294:	00408130 	.word	0x00408130
  401298:	00408148 	.word	0x00408148
  40129c:	00000000 	.word	0x00000000

004012a0 <imu_tick>:
}

void imu_tick(void)
{
  4012a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012a4:	b08d      	sub	sp, #52	; 0x34
    clock_time_t t_now = cph_get_millis();
  4012a6:	4b84      	ldr	r3, [pc, #528]	; (4014b8 <imu_tick+0x218>)
  4012a8:	681d      	ldr	r5, [r3, #0]

    mpu_read_normalized_gyro();
  4012aa:	a808      	add	r0, sp, #32
  4012ac:	f7ff fd44 	bl	400d38 <mpu_read_normalized_gyro>
    mpu_read_normalized_acceleration();
  4012b0:	f7ff fe18 	bl	400ee4 <mpu_read_normalized_acceleration>

    float gyro_x = (norm_gyro.x_axis*M_PI)/180.0f;
  4012b4:	4c81      	ldr	r4, [pc, #516]	; (4014bc <imu_tick+0x21c>)
  4012b6:	6820      	ldr	r0, [r4, #0]
  4012b8:	f005 feb6 	bl	407028 <__aeabi_f2d>
  4012bc:	a37c      	add	r3, pc, #496	; (adr r3, 4014b0 <imu_tick+0x210>)
  4012be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012c2:	f005 ff05 	bl	4070d0 <__aeabi_dmul>
  4012c6:	2200      	movs	r2, #0
  4012c8:	4b7d      	ldr	r3, [pc, #500]	; (4014c0 <imu_tick+0x220>)
  4012ca:	f006 f82b 	bl	407324 <__aeabi_ddiv>
  4012ce:	f006 f9f7 	bl	4076c0 <__aeabi_d2f>
  4012d2:	9005      	str	r0, [sp, #20]
    float gyro_y = (norm_gyro.y_axis*M_PI)/180.0f;
  4012d4:	6860      	ldr	r0, [r4, #4]
  4012d6:	f005 fea7 	bl	407028 <__aeabi_f2d>
  4012da:	a375      	add	r3, pc, #468	; (adr r3, 4014b0 <imu_tick+0x210>)
  4012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012e0:	f005 fef6 	bl	4070d0 <__aeabi_dmul>
  4012e4:	2200      	movs	r2, #0
  4012e6:	4b76      	ldr	r3, [pc, #472]	; (4014c0 <imu_tick+0x220>)
  4012e8:	f006 f81c 	bl	407324 <__aeabi_ddiv>
  4012ec:	f006 f9e8 	bl	4076c0 <__aeabi_d2f>
  4012f0:	9006      	str	r0, [sp, #24]
    float gyro_z = (norm_gyro.z_axis*M_PI)/180.0f;
  4012f2:	68a0      	ldr	r0, [r4, #8]
  4012f4:	f005 fe98 	bl	407028 <__aeabi_f2d>
  4012f8:	a36d      	add	r3, pc, #436	; (adr r3, 4014b0 <imu_tick+0x210>)
  4012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012fe:	f005 fee7 	bl	4070d0 <__aeabi_dmul>
  401302:	2200      	movs	r2, #0
  401304:	4b6e      	ldr	r3, [pc, #440]	; (4014c0 <imu_tick+0x220>)
  401306:	f006 f80d 	bl	407324 <__aeabi_ddiv>
  40130a:	f006 f9d9 	bl	4076c0 <__aeabi_d2f>
  40130e:	9007      	str	r0, [sp, #28]
    //     mag_z = ((float) norm_mag.z_axis)*M_PI/180.0f;
    // }



    float accel_angle_y = atan2(norm_accel.x_axis, sqrt( pow(norm_accel.y_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  401310:	4c6c      	ldr	r4, [pc, #432]	; (4014c4 <imu_tick+0x224>)
  401312:	6820      	ldr	r0, [r4, #0]
  401314:	f005 fe88 	bl	407028 <__aeabi_f2d>
  401318:	e9cd 0100 	strd	r0, r1, [sp]
  40131c:	6860      	ldr	r0, [r4, #4]
  40131e:	f005 fe83 	bl	407028 <__aeabi_f2d>
  401322:	4682      	mov	sl, r0
  401324:	468b      	mov	fp, r1
  401326:	68a0      	ldr	r0, [r4, #8]
  401328:	f005 fe7e 	bl	407028 <__aeabi_f2d>
  40132c:	4606      	mov	r6, r0
  40132e:	460f      	mov	r7, r1
  401330:	4632      	mov	r2, r6
  401332:	463b      	mov	r3, r7
  401334:	4630      	mov	r0, r6
  401336:	4639      	mov	r1, r7
  401338:	f005 feca 	bl	4070d0 <__aeabi_dmul>
  40133c:	4680      	mov	r8, r0
  40133e:	4689      	mov	r9, r1
  401340:	4652      	mov	r2, sl
  401342:	465b      	mov	r3, fp
  401344:	4650      	mov	r0, sl
  401346:	4659      	mov	r1, fp
  401348:	f005 fec2 	bl	4070d0 <__aeabi_dmul>
  40134c:	4602      	mov	r2, r0
  40134e:	460b      	mov	r3, r1
  401350:	4640      	mov	r0, r8
  401352:	4649      	mov	r1, r9
  401354:	f005 fd0a 	bl	406d6c <__adddf3>
  401358:	f001 f956 	bl	402608 <sqrt>
  40135c:	4602      	mov	r2, r0
  40135e:	460b      	mov	r3, r1
  401360:	e9dd 0100 	ldrd	r0, r1, [sp]
  401364:	f001 f94e 	bl	402604 <atan2>
  401368:	e9cd 0100 	strd	r0, r1, [sp]
    float accel_angle_x = atan2(norm_accel.y_axis, sqrt( pow(norm_accel.x_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  40136c:	6860      	ldr	r0, [r4, #4]
  40136e:	f005 fe5b 	bl	407028 <__aeabi_f2d>
  401372:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401376:	6820      	ldr	r0, [r4, #0]
  401378:	f005 fe56 	bl	407028 <__aeabi_f2d>
  40137c:	4682      	mov	sl, r0
  40137e:	468b      	mov	fp, r1
  401380:	68a0      	ldr	r0, [r4, #8]
  401382:	f005 fe51 	bl	407028 <__aeabi_f2d>
  401386:	4606      	mov	r6, r0
  401388:	460f      	mov	r7, r1
  40138a:	4652      	mov	r2, sl
  40138c:	465b      	mov	r3, fp
  40138e:	4650      	mov	r0, sl
  401390:	4659      	mov	r1, fp
  401392:	f005 fe9d 	bl	4070d0 <__aeabi_dmul>
  401396:	4680      	mov	r8, r0
  401398:	4689      	mov	r9, r1
  40139a:	4632      	mov	r2, r6
  40139c:	463b      	mov	r3, r7
  40139e:	4630      	mov	r0, r6
  4013a0:	4639      	mov	r1, r7
  4013a2:	f005 fe95 	bl	4070d0 <__aeabi_dmul>
  4013a6:	4602      	mov	r2, r0
  4013a8:	460b      	mov	r3, r1
  4013aa:	4640      	mov	r0, r8
  4013ac:	4649      	mov	r1, r9
  4013ae:	f005 fcdd 	bl	406d6c <__adddf3>
  4013b2:	f001 f929 	bl	402608 <sqrt>
  4013b6:	4602      	mov	r2, r0
  4013b8:	460b      	mov	r3, r1
  4013ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4013be:	f001 f921 	bl	402604 <atan2>
  4013c2:	4680      	mov	r8, r0
  4013c4:	4689      	mov	r9, r1
    float accel_angle_z = 0;

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
  4013c6:	f8df a120 	ldr.w	sl, [pc, #288]	; 4014e8 <imu_tick+0x248>
    float dt = ((float)delta_t/1000.0f);
  4013ca:	f8da 0000 	ldr.w	r0, [sl]
  4013ce:	1a28      	subs	r0, r5, r0
  4013d0:	f006 fa7c 	bl	4078cc <__aeabi_ui2f>
  4013d4:	493c      	ldr	r1, [pc, #240]	; (4014c8 <imu_tick+0x228>)
  4013d6:	f006 fb85 	bl	407ae4 <__aeabi_fdiv>
  4013da:	4604      	mov	r4, r0
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  4013dc:	4601      	mov	r1, r0
  4013de:	9805      	ldr	r0, [sp, #20]
  4013e0:	f006 facc 	bl	40797c <__aeabi_fmul>

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
  4013e4:	4f39      	ldr	r7, [pc, #228]	; (4014cc <imu_tick+0x22c>)
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  4013e6:	6839      	ldr	r1, [r7, #0]
  4013e8:	f006 f9c0 	bl	40776c <__addsf3>
  4013ec:	4938      	ldr	r1, [pc, #224]	; (4014d0 <imu_tick+0x230>)
  4013ee:	f006 fac5 	bl	40797c <__aeabi_fmul>
  4013f2:	4683      	mov	fp, r0
  4013f4:	2200      	movs	r2, #0
  4013f6:	4b32      	ldr	r3, [pc, #200]	; (4014c0 <imu_tick+0x220>)
  4013f8:	4640      	mov	r0, r8
  4013fa:	4649      	mov	r1, r9
  4013fc:	f005 fe68 	bl	4070d0 <__aeabi_dmul>
  401400:	a32b      	add	r3, pc, #172	; (adr r3, 4014b0 <imu_tick+0x210>)
  401402:	e9d3 2300 	ldrd	r2, r3, [r3]
  401406:	f005 ff8d 	bl	407324 <__aeabi_ddiv>
  40140a:	f006 f959 	bl	4076c0 <__aeabi_d2f>
  40140e:	4931      	ldr	r1, [pc, #196]	; (4014d4 <imu_tick+0x234>)
  401410:	f006 fab4 	bl	40797c <__aeabi_fmul>
  401414:	4601      	mov	r1, r0
  401416:	4658      	mov	r0, fp
  401418:	f006 f9a8 	bl	40776c <__addsf3>
  40141c:	4680      	mov	r8, r0
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  40141e:	4621      	mov	r1, r4
  401420:	9806      	ldr	r0, [sp, #24]
  401422:	f006 faab 	bl	40797c <__aeabi_fmul>
    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
  401426:	4e2c      	ldr	r6, [pc, #176]	; (4014d8 <imu_tick+0x238>)
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  401428:	6831      	ldr	r1, [r6, #0]
  40142a:	f006 f99f 	bl	40776c <__addsf3>
  40142e:	4928      	ldr	r1, [pc, #160]	; (4014d0 <imu_tick+0x230>)
  401430:	f006 faa4 	bl	40797c <__aeabi_fmul>
  401434:	4681      	mov	r9, r0
  401436:	2200      	movs	r2, #0
  401438:	4b21      	ldr	r3, [pc, #132]	; (4014c0 <imu_tick+0x220>)
  40143a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40143e:	f005 fe47 	bl	4070d0 <__aeabi_dmul>
  401442:	a31b      	add	r3, pc, #108	; (adr r3, 4014b0 <imu_tick+0x210>)
  401444:	e9d3 2300 	ldrd	r2, r3, [r3]
  401448:	f005 ff6c 	bl	407324 <__aeabi_ddiv>
  40144c:	f006 f938 	bl	4076c0 <__aeabi_d2f>
  401450:	4920      	ldr	r1, [pc, #128]	; (4014d4 <imu_tick+0x234>)
  401452:	f006 fa93 	bl	40797c <__aeabi_fmul>
  401456:	4601      	mov	r1, r0
  401458:	4648      	mov	r0, r9
  40145a:	f006 f987 	bl	40776c <__addsf3>
  40145e:	4681      	mov	r9, r0
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  401460:	4621      	mov	r1, r4
  401462:	9807      	ldr	r0, [sp, #28]
  401464:	f006 fa8a 	bl	40797c <__aeabi_fmul>
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
    float gyro_angle_z = gyro_z * dt + last_angle_z;
  401468:	4c1c      	ldr	r4, [pc, #112]	; (4014dc <imu_tick+0x23c>)
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  40146a:	6821      	ldr	r1, [r4, #0]
  40146c:	f006 f97e 	bl	40776c <__addsf3>
  401470:	4917      	ldr	r1, [pc, #92]	; (4014d0 <imu_tick+0x230>)
  401472:	f006 fa83 	bl	40797c <__aeabi_fmul>
  401476:	2100      	movs	r1, #0
  401478:	f006 f978 	bl	40776c <__addsf3>


    last_time_read = t_now;
  40147c:	f8ca 5000 	str.w	r5, [sl]
    last_angle_x = angle_x;
  401480:	f8c7 8000 	str.w	r8, [r7]
    last_angle_y = angle_y;
  401484:	f8c6 9000 	str.w	r9, [r6]
    last_angle_z = angle_z;
  401488:	6020      	str	r0, [r4, #0]

    imu_complementary.x_axis = angle_x;
  40148a:	4b15      	ldr	r3, [pc, #84]	; (4014e0 <imu_tick+0x240>)
  40148c:	f8c3 8000 	str.w	r8, [r3]
    imu_complementary.y_axis = angle_y;
  401490:	f8c3 9004 	str.w	r9, [r3, #4]
    imu_complementary.z_axis = angle_z;
  401494:	6098      	str	r0, [r3, #8]

    ap.imu.x_axis = angle_x;
  401496:	4b13      	ldr	r3, [pc, #76]	; (4014e4 <imu_tick+0x244>)
  401498:	f8c3 8000 	str.w	r8, [r3]
    ap.imu.y_axis = angle_y;
  40149c:	f8c3 9004 	str.w	r9, [r3, #4]
    ap.imu.z_axis = angle_z;
  4014a0:	6098      	str	r0, [r3, #8]
    ap.mag.x_axis = mag_x;
  4014a2:	2200      	movs	r2, #0
  4014a4:	60da      	str	r2, [r3, #12]
    ap.mag.y_axis = mag_y;
  4014a6:	611a      	str	r2, [r3, #16]
    ap.mag.z_axis = mag_z;
  4014a8:	615a      	str	r2, [r3, #20]


  4014aa:	b00d      	add	sp, #52	; 0x34
  4014ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014b0:	54442d18 	.word	0x54442d18
  4014b4:	400921fb 	.word	0x400921fb
  4014b8:	20000204 	.word	0x20000204
  4014bc:	200006e4 	.word	0x200006e4
  4014c0:	40668000 	.word	0x40668000
  4014c4:	200006a8 	.word	0x200006a8
  4014c8:	447a0000 	.word	0x447a0000
  4014cc:	2000042c 	.word	0x2000042c
  4014d0:	3f75c28f 	.word	0x3f75c28f
  4014d4:	3d23d710 	.word	0x3d23d710
  4014d8:	20000430 	.word	0x20000430
  4014dc:	2000043c 	.word	0x2000043c
  4014e0:	20000850 	.word	0x20000850
  4014e4:	20000820 	.word	0x20000820
  4014e8:	20000428 	.word	0x20000428

004014ec <motor_config_pins>:
	motors[1].angle_max = AP_ANGLE_MAX;
	motors[1].timeout = 1000;
}

void motor_config_pins(motor_config_t motor_cfg)
{
  4014ec:	b084      	sub	sp, #16
  4014ee:	b538      	push	{r3, r4, r5, lr}
  4014f0:	ac04      	add	r4, sp, #16
  4014f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pio_configure_pin(motor_cfg.ul_pin, motor_cfg.ul_flag);
  4014f6:	9906      	ldr	r1, [sp, #24]
  4014f8:	9805      	ldr	r0, [sp, #20]
  4014fa:	f000 fc2d 	bl	401d58 <pio_configure_pin>

	pmc_enable_periph_clk(motor_cfg.ul_periph_clkid);
  4014fe:	9807      	ldr	r0, [sp, #28]
  401500:	f000 fddc 	bl	4020bc <pmc_enable_periph_clk>

	pwm_channel_disable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  401504:	ad04      	add	r5, sp, #16
  401506:	9908      	ldr	r1, [sp, #32]
  401508:	f855 0b14 	ldr.w	r0, [r5], #20
  40150c:	f000 ff22 	bl	402354 <pwm_channel_disable>
	pwm_init(motor_cfg.p_pwm, &motor_cfg.clock_setting);
  401510:	ac04      	add	r4, sp, #16
  401512:	4629      	mov	r1, r5
  401514:	f854 0b20 	ldr.w	r0, [r4], #32
  401518:	f000 fe70 	bl	4021fc <pwm_init>

	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
  40151c:	4621      	mov	r1, r4
  40151e:	9804      	ldr	r0, [sp, #16]
  401520:	f000 fe90 	bl	402244 <pwm_channel_init>
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  401524:	9908      	ldr	r1, [sp, #32]
  401526:	9804      	ldr	r0, [sp, #16]
  401528:	f000 ff0e 	bl	402348 <pwm_channel_enable>
}
  40152c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401530:	b004      	add	sp, #16
  401532:	4770      	bx	lr

00401534 <motor_init>:
uint32_t motor_current_duty = 0;
void motor_config_pins(motor_config_t motor_cfg);


void motor_init(void)
{
  401534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401538:	b0b3      	sub	sp, #204	; 0xcc
	printf("motor_init\r\n");
  40153a:	485b      	ldr	r0, [pc, #364]	; (4016a8 <motor_init+0x174>)
  40153c:	f002 f8a6 	bl	40368c <iprintf>
        .ul_clka = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_clkb = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_mck = sysclk_get_cpu_hz()
	};

	motor_config_t motor_cfg0 = {
  401540:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  401544:	2248      	movs	r2, #72	; 0x48
  401546:	2100      	movs	r1, #0
  401548:	4648      	mov	r0, r9
  40154a:	f001 fc28 	bl	402d9e <memset>
		.pwm_channel.ul_period = MOTOR_PWM_PERIOD_TICKS,
		.pwm_channel.ul_duty = MOTOR_PWM_MIN,
		.pwm_channel.channel = EXT1_PWM_CHANNEL
	};

	motor_config_t motor_cfg1 = {
  40154e:	2248      	movs	r2, #72	; 0x48
  401550:	2100      	movs	r1, #0
  401552:	a80e      	add	r0, sp, #56	; 0x38
  401554:	f001 fc23 	bl	402d9e <memset>
	};

	


	motor_config_pins(motor_cfg0);
  401558:	4b54      	ldr	r3, [pc, #336]	; (4016ac <motor_init+0x178>)
  40155a:	9320      	str	r3, [sp, #128]	; 0x80
  40155c:	2417      	movs	r4, #23
  40155e:	9421      	str	r4, [sp, #132]	; 0x84
  401560:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  401564:	9722      	str	r7, [sp, #136]	; 0x88
  401566:	231f      	movs	r3, #31
  401568:	9323      	str	r3, [sp, #140]	; 0x8c
  40156a:	4e51      	ldr	r6, [pc, #324]	; (4016b0 <motor_init+0x17c>)
  40156c:	9625      	str	r6, [sp, #148]	; 0x94
  40156e:	9626      	str	r6, [sp, #152]	; 0x98
  401570:	4b50      	ldr	r3, [pc, #320]	; (4016b4 <motor_init+0x180>)
  401572:	9327      	str	r3, [sp, #156]	; 0x9c
  401574:	f04f 080b 	mov.w	r8, #11
  401578:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  40157c:	2501      	movs	r5, #1
  40157e:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  401582:	f240 4a7e 	movw	sl, #1150	; 0x47e
  401586:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  40158a:	f644 6b20 	movw	fp, #20000	; 0x4e20
  40158e:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  401592:	46ee      	mov	lr, sp
  401594:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
  401598:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  40159c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015b0:	e89c 0003 	ldmia.w	ip, {r0, r1}
  4015b4:	e88e 0003 	stmia.w	lr, {r0, r1}
  4015b8:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  4015bc:	f7ff ff96 	bl	4014ec <motor_config_pins>
	motor_config_pins(motor_cfg1);
  4015c0:	4b3a      	ldr	r3, [pc, #232]	; (4016ac <motor_init+0x178>)
  4015c2:	930e      	str	r3, [sp, #56]	; 0x38
  4015c4:	2353      	movs	r3, #83	; 0x53
  4015c6:	930f      	str	r3, [sp, #60]	; 0x3c
  4015c8:	9710      	str	r7, [sp, #64]	; 0x40
  4015ca:	231f      	movs	r3, #31
  4015cc:	9311      	str	r3, [sp, #68]	; 0x44
  4015ce:	9512      	str	r5, [sp, #72]	; 0x48
  4015d0:	9613      	str	r6, [sp, #76]	; 0x4c
  4015d2:	9614      	str	r6, [sp, #80]	; 0x50
  4015d4:	4b37      	ldr	r3, [pc, #220]	; (4016b4 <motor_init+0x180>)
  4015d6:	9315      	str	r3, [sp, #84]	; 0x54
  4015d8:	9516      	str	r5, [sp, #88]	; 0x58
  4015da:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  4015de:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  4015e2:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  4015e6:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  4015ea:	46ee      	mov	lr, sp
  4015ec:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
  4015f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401600:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  401604:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401608:	e89c 0003 	ldmia.w	ip, {r0, r1}
  40160c:	e88e 0003 	stmia.w	lr, {r0, r1}
  401610:	ab0e      	add	r3, sp, #56	; 0x38
  401612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401614:	f7ff ff6a 	bl	4014ec <motor_config_pins>

	motors[0].config = motor_cfg0;
  401618:	4b24      	ldr	r3, [pc, #144]	; (4016ac <motor_init+0x178>)
  40161a:	9320      	str	r3, [sp, #128]	; 0x80
  40161c:	9421      	str	r4, [sp, #132]	; 0x84
  40161e:	9722      	str	r7, [sp, #136]	; 0x88
  401620:	231f      	movs	r3, #31
  401622:	9323      	str	r3, [sp, #140]	; 0x8c
  401624:	9625      	str	r6, [sp, #148]	; 0x94
  401626:	9626      	str	r6, [sp, #152]	; 0x98
  401628:	4b22      	ldr	r3, [pc, #136]	; (4016b4 <motor_init+0x180>)
  40162a:	9327      	str	r3, [sp, #156]	; 0x9c
  40162c:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  401630:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  401634:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  401638:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  40163c:	4c1e      	ldr	r4, [pc, #120]	; (4016b8 <motor_init+0x184>)
  40163e:	2248      	movs	r2, #72	; 0x48
  401640:	4649      	mov	r1, r9
  401642:	4620      	mov	r0, r4
  401644:	f001 fba0 	bl	402d88 <memcpy>
	motors[0].angle_min = AP_ANGLE_MIN;
  401648:	f06f 0359 	mvn.w	r3, #89	; 0x59
  40164c:	64a3      	str	r3, [r4, #72]	; 0x48
	motors[0].angle_max = AP_ANGLE_MAX;
  40164e:	235a      	movs	r3, #90	; 0x5a
  401650:	64e3      	str	r3, [r4, #76]	; 0x4c
	motors[0].timeout = 1000;
  401652:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
  401656:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50

	motors[1].config = motor_cfg1;
  40165a:	4b14      	ldr	r3, [pc, #80]	; (4016ac <motor_init+0x178>)
  40165c:	930e      	str	r3, [sp, #56]	; 0x38
  40165e:	2353      	movs	r3, #83	; 0x53
  401660:	930f      	str	r3, [sp, #60]	; 0x3c
  401662:	9710      	str	r7, [sp, #64]	; 0x40
  401664:	231f      	movs	r3, #31
  401666:	9311      	str	r3, [sp, #68]	; 0x44
  401668:	9512      	str	r5, [sp, #72]	; 0x48
  40166a:	9613      	str	r6, [sp, #76]	; 0x4c
  40166c:	9614      	str	r6, [sp, #80]	; 0x50
  40166e:	4b11      	ldr	r3, [pc, #68]	; (4016b4 <motor_init+0x180>)
  401670:	9315      	str	r3, [sp, #84]	; 0x54
  401672:	9516      	str	r5, [sp, #88]	; 0x58
  401674:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  401678:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  40167c:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  401680:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  401684:	2248      	movs	r2, #72	; 0x48
  401686:	a90e      	add	r1, sp, #56	; 0x38
  401688:	f104 0054 	add.w	r0, r4, #84	; 0x54
  40168c:	f001 fb7c 	bl	402d88 <memcpy>
	motors[1].angle_min = AP_ANGLE_MIN;
  401690:	f06f 0359 	mvn.w	r3, #89	; 0x59
  401694:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	motors[1].angle_max = AP_ANGLE_MAX;
  401698:	235a      	movs	r3, #90	; 0x5a
  40169a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	motors[1].timeout = 1000;
  40169e:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
}
  4016a2:	b033      	add	sp, #204	; 0xcc
  4016a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016a8:	00408160 	.word	0x00408160
  4016ac:	40020000 	.word	0x40020000
  4016b0:	000f4240 	.word	0x000f4240
  4016b4:	07270e00 	.word	0x07270e00
  4016b8:	20000534 	.word	0x20000534

004016bc <motor_tick>:
	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
}

void motor_tick(void)
{
  4016bc:	4770      	bx	lr
  4016be:	bf00      	nop

004016c0 <motor_set_power>:

}

void motor_set_power(motor_t motor, uint32_t power)
{
  4016c0:	b084      	sub	sp, #16
  4016c2:	b508      	push	{r3, lr}
  4016c4:	f10d 0e08 	add.w	lr, sp, #8
  4016c8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  4016cc:	9917      	ldr	r1, [sp, #92]	; 0x5c
	motor.config.pwm_channel.ul_duty = power;
  4016ce:	910d      	str	r1, [sp, #52]	; 0x34
	// printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
	if (config.log_motor) {
  4016d0:	4b07      	ldr	r3, [pc, #28]	; (4016f0 <motor_set_power+0x30>)
  4016d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4016d6:	b113      	cbz	r3, 4016de <motor_set_power+0x1e>
		printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
  4016d8:	4806      	ldr	r0, [pc, #24]	; (4016f4 <motor_set_power+0x34>)
  4016da:	f001 ffd7 	bl	40368c <iprintf>
	}
	pwm_channel_update_duty(motor.config.p_pwm, &motor.config.pwm_channel, motor.config.pwm_channel.ul_duty);
  4016de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4016e0:	a90a      	add	r1, sp, #40	; 0x28
  4016e2:	9802      	ldr	r0, [sp, #8]
  4016e4:	f000 fe22 	bl	40232c <pwm_channel_update_duty>
}
  4016e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4016ec:	b004      	add	sp, #16
  4016ee:	4770      	bx	lr
  4016f0:	200006f0 	.word	0x200006f0
  4016f4:	00408170 	.word	0x00408170

004016f8 <motor_min>:

void motor_min(motor_t motor)
{
  4016f8:	b084      	sub	sp, #16
  4016fa:	b500      	push	{lr}
  4016fc:	b093      	sub	sp, #76	; 0x4c
  4016fe:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  401702:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MIN;
  401706:	f240 437e 	movw	r3, #1150	; 0x47e
  40170a:	4a08      	ldr	r2, [pc, #32]	; (40172c <motor_min+0x34>)
  40170c:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, MOTOR_PWM_MIN);
  40170e:	9311      	str	r3, [sp, #68]	; 0x44
  401710:	2244      	movs	r2, #68	; 0x44
  401712:	a918      	add	r1, sp, #96	; 0x60
  401714:	4668      	mov	r0, sp
  401716:	f001 fb37 	bl	402d88 <memcpy>
  40171a:	ab14      	add	r3, sp, #80	; 0x50
  40171c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40171e:	f7ff ffcf 	bl	4016c0 <motor_set_power>
}
  401722:	b013      	add	sp, #76	; 0x4c
  401724:	f85d eb04 	ldr.w	lr, [sp], #4
  401728:	b004      	add	sp, #16
  40172a:	4770      	bx	lr
  40172c:	20000444 	.word	0x20000444

00401730 <motor_mid>:

void motor_mid(motor_t motor)
{
  401730:	b084      	sub	sp, #16
  401732:	b500      	push	{lr}
  401734:	b093      	sub	sp, #76	; 0x4c
  401736:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  40173a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MID;
  40173e:	f240 5346 	movw	r3, #1350	; 0x546
  401742:	4a08      	ldr	r2, [pc, #32]	; (401764 <motor_mid+0x34>)
  401744:	6013      	str	r3, [r2, #0]
	motor_set_power(motor, motor_current_duty);
  401746:	9311      	str	r3, [sp, #68]	; 0x44
  401748:	2244      	movs	r2, #68	; 0x44
  40174a:	a918      	add	r1, sp, #96	; 0x60
  40174c:	4668      	mov	r0, sp
  40174e:	f001 fb1b 	bl	402d88 <memcpy>
  401752:	ab14      	add	r3, sp, #80	; 0x50
  401754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401756:	f7ff ffb3 	bl	4016c0 <motor_set_power>
}
  40175a:	b013      	add	sp, #76	; 0x4c
  40175c:	f85d eb04 	ldr.w	lr, [sp], #4
  401760:	b004      	add	sp, #16
  401762:	4770      	bx	lr
  401764:	20000444 	.word	0x20000444

00401768 <motor_max>:

void motor_max(motor_t motor)
{
  401768:	b084      	sub	sp, #16
  40176a:	b500      	push	{lr}
  40176c:	b093      	sub	sp, #76	; 0x4c
  40176e:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  401772:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MAX;
  401776:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  40177a:	4a08      	ldr	r2, [pc, #32]	; (40179c <motor_max+0x34>)
  40177c:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, motor_current_duty);
  40177e:	9311      	str	r3, [sp, #68]	; 0x44
  401780:	2244      	movs	r2, #68	; 0x44
  401782:	a918      	add	r1, sp, #96	; 0x60
  401784:	4668      	mov	r0, sp
  401786:	f001 faff 	bl	402d88 <memcpy>
  40178a:	ab14      	add	r3, sp, #80	; 0x50
  40178c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40178e:	f7ff ff97 	bl	4016c0 <motor_set_power>
}
  401792:	b013      	add	sp, #76	; 0x4c
  401794:	f85d eb04 	ldr.w	lr, [sp], #4
  401798:	b004      	add	sp, #16
  40179a:	4770      	bx	lr
  40179c:	20000444 	.word	0x20000444

004017a0 <pid_init>:
float desired_angle = 0.0f;


void pid_init(void)
{
    time = 0;
  4017a0:	2300      	movs	r3, #0
  4017a2:	4a0b      	ldr	r2, [pc, #44]	; (4017d0 <pid_init+0x30>)
  4017a4:	6013      	str	r3, [r2, #0]
    previous_time = 0;
  4017a6:	4a0b      	ldr	r2, [pc, #44]	; (4017d4 <pid_init+0x34>)
  4017a8:	6013      	str	r3, [r2, #0]
    elapsed_time = 0;
  4017aa:	4a0b      	ldr	r2, [pc, #44]	; (4017d8 <pid_init+0x38>)
  4017ac:	6013      	str	r3, [r2, #0]
    pid = 0.0f;
  4017ae:	2300      	movs	r3, #0
  4017b0:	4a0a      	ldr	r2, [pc, #40]	; (4017dc <pid_init+0x3c>)
  4017b2:	6013      	str	r3, [r2, #0]
    error = 0.0f;
  4017b4:	4a0a      	ldr	r2, [pc, #40]	; (4017e0 <pid_init+0x40>)
  4017b6:	6013      	str	r3, [r2, #0]
    previous_error = 0.0f;
  4017b8:	4a0a      	ldr	r2, [pc, #40]	; (4017e4 <pid_init+0x44>)
  4017ba:	6013      	str	r3, [r2, #0]
    pid_p = 0.0f;
  4017bc:	4a0a      	ldr	r2, [pc, #40]	; (4017e8 <pid_init+0x48>)
  4017be:	6013      	str	r3, [r2, #0]
    pid_i = 0.0f;
  4017c0:	4a0a      	ldr	r2, [pc, #40]	; (4017ec <pid_init+0x4c>)
  4017c2:	6013      	str	r3, [r2, #0]
    pid_d = 0.0f;
  4017c4:	4a0a      	ldr	r2, [pc, #40]	; (4017f0 <pid_init+0x50>)
  4017c6:	6013      	str	r3, [r2, #0]
    integral = 0.0f;
  4017c8:	4a0a      	ldr	r2, [pc, #40]	; (4017f4 <pid_init+0x54>)
  4017ca:	6013      	str	r3, [r2, #0]
  4017cc:	4770      	bx	lr
  4017ce:	bf00      	nop
  4017d0:	20000468 	.word	0x20000468
  4017d4:	2000046c 	.word	0x2000046c
  4017d8:	20000470 	.word	0x20000470
  4017dc:	2000044c 	.word	0x2000044c
  4017e0:	2000045c 	.word	0x2000045c
  4017e4:	20000450 	.word	0x20000450
  4017e8:	20000474 	.word	0x20000474
  4017ec:	20000454 	.word	0x20000454
  4017f0:	20000460 	.word	0x20000460
  4017f4:	20000448 	.word	0x20000448

004017f8 <pid_tick>:
}


float pid_tick(void)
{
  4017f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    time = cph_get_millis();
  4017fc:	4b2d      	ldr	r3, [pc, #180]	; (4018b4 <pid_tick+0xbc>)
  4017fe:	681b      	ldr	r3, [r3, #0]
  401800:	4d2d      	ldr	r5, [pc, #180]	; (4018b8 <pid_tick+0xc0>)
  401802:	602b      	str	r3, [r5, #0]
    elapsed_time = (time - previous_time);
  401804:	682b      	ldr	r3, [r5, #0]
  401806:	4f2d      	ldr	r7, [pc, #180]	; (4018bc <pid_tick+0xc4>)
  401808:	683a      	ldr	r2, [r7, #0]
  40180a:	1a9b      	subs	r3, r3, r2
  40180c:	4e2c      	ldr	r6, [pc, #176]	; (4018c0 <pid_tick+0xc8>)
  40180e:	6033      	str	r3, [r6, #0]

    error = desired_angle - ap.imu.x_axis;
  401810:	4b2c      	ldr	r3, [pc, #176]	; (4018c4 <pid_tick+0xcc>)
  401812:	6819      	ldr	r1, [r3, #0]
  401814:	4b2c      	ldr	r3, [pc, #176]	; (4018c8 <pid_tick+0xd0>)
  401816:	6818      	ldr	r0, [r3, #0]
  401818:	f005 ffa6 	bl	407768 <__aeabi_fsub>
  40181c:	4604      	mov	r4, r0
  40181e:	4b2b      	ldr	r3, [pc, #172]	; (4018cc <pid_tick+0xd4>)
  401820:	6018      	str	r0, [r3, #0]

    integral = integral + (error * elapsed_time);
  401822:	6830      	ldr	r0, [r6, #0]
  401824:	f006 f852 	bl	4078cc <__aeabi_ui2f>
  401828:	4621      	mov	r1, r4
  40182a:	f006 f8a7 	bl	40797c <__aeabi_fmul>
  40182e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4018e8 <pid_tick+0xf0>
  401832:	f8d8 1000 	ldr.w	r1, [r8]
  401836:	f005 ff99 	bl	40776c <__addsf3>
  40183a:	4682      	mov	sl, r0
  40183c:	f8c8 0000 	str.w	r0, [r8]

    derivative = ((error-previous_error)/elapsed_time);
  401840:	f8d6 9000 	ldr.w	r9, [r6]
  401844:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 4018ec <pid_tick+0xf4>
  401848:	f8d8 1000 	ldr.w	r1, [r8]
  40184c:	4620      	mov	r0, r4
  40184e:	f005 ff8b 	bl	407768 <__aeabi_fsub>
  401852:	4606      	mov	r6, r0
  401854:	4648      	mov	r0, r9
  401856:	f006 f839 	bl	4078cc <__aeabi_ui2f>
  40185a:	4601      	mov	r1, r0
  40185c:	4630      	mov	r0, r6
  40185e:	f006 f941 	bl	407ae4 <__aeabi_fdiv>
  401862:	4683      	mov	fp, r0
  401864:	4b1a      	ldr	r3, [pc, #104]	; (4018d0 <pid_tick+0xd8>)
  401866:	6018      	str	r0, [r3, #0]

    pid_p = (config.pid_kp * error);
  401868:	4e1a      	ldr	r6, [pc, #104]	; (4018d4 <pid_tick+0xdc>)
  40186a:	6831      	ldr	r1, [r6, #0]
  40186c:	4620      	mov	r0, r4
  40186e:	f006 f885 	bl	40797c <__aeabi_fmul>
  401872:	4681      	mov	r9, r0
  401874:	4b18      	ldr	r3, [pc, #96]	; (4018d8 <pid_tick+0xe0>)
  401876:	6018      	str	r0, [r3, #0]
    pid_i = (config.pid_ki * integral);
  401878:	6871      	ldr	r1, [r6, #4]
  40187a:	4650      	mov	r0, sl
  40187c:	f006 f87e 	bl	40797c <__aeabi_fmul>
  401880:	4682      	mov	sl, r0
  401882:	4b16      	ldr	r3, [pc, #88]	; (4018dc <pid_tick+0xe4>)
  401884:	6018      	str	r0, [r3, #0]
    pid_d = (config.pid_kd * derivative);
  401886:	68b1      	ldr	r1, [r6, #8]
  401888:	4658      	mov	r0, fp
  40188a:	f006 f877 	bl	40797c <__aeabi_fmul>
  40188e:	4606      	mov	r6, r0
  401890:	4b13      	ldr	r3, [pc, #76]	; (4018e0 <pid_tick+0xe8>)
  401892:	6018      	str	r0, [r3, #0]

    pid = pid_p + pid_i + pid_d;
  401894:	4651      	mov	r1, sl
  401896:	4648      	mov	r0, r9
  401898:	f005 ff68 	bl	40776c <__addsf3>
  40189c:	4631      	mov	r1, r6
  40189e:	f005 ff65 	bl	40776c <__addsf3>
  4018a2:	4b10      	ldr	r3, [pc, #64]	; (4018e4 <pid_tick+0xec>)
  4018a4:	6018      	str	r0, [r3, #0]

    previous_error = error;
  4018a6:	f8c8 4000 	str.w	r4, [r8]
    previous_time = time;    
  4018aa:	682b      	ldr	r3, [r5, #0]
  4018ac:	603b      	str	r3, [r7, #0]

    return pid;
  4018ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018b2:	bf00      	nop
  4018b4:	20000204 	.word	0x20000204
  4018b8:	20000468 	.word	0x20000468
  4018bc:	2000046c 	.word	0x2000046c
  4018c0:	20000470 	.word	0x20000470
  4018c4:	20000820 	.word	0x20000820
  4018c8:	20000458 	.word	0x20000458
  4018cc:	2000045c 	.word	0x2000045c
  4018d0:	20000464 	.word	0x20000464
  4018d4:	200006f0 	.word	0x200006f0
  4018d8:	20000474 	.word	0x20000474
  4018dc:	20000454 	.word	0x20000454
  4018e0:	20000460 	.word	0x20000460
  4018e4:	2000044c 	.word	0x2000044c
  4018e8:	20000448 	.word	0x20000448
  4018ec:	20000450 	.word	0x20000450

004018f0 <ap_init>:
ap_manager_t AP;


void ap_init(void)
{
    AP.state = AP_INITIALIZING;
  4018f0:	4b03      	ldr	r3, [pc, #12]	; (401900 <ap_init+0x10>)
  4018f2:	2200      	movs	r2, #0
  4018f4:	701a      	strb	r2, [r3, #0]
    AP.desired_angle_x = 0.0f;
  4018f6:	2100      	movs	r1, #0
  4018f8:	6059      	str	r1, [r3, #4]
    AP.desired_angle_y = 0.0f;
  4018fa:	6099      	str	r1, [r3, #8]
    AP.motor_power = 0;
  4018fc:	60da      	str	r2, [r3, #12]
  4018fe:	4770      	bx	lr
  401900:	2000085c 	.word	0x2000085c

00401904 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  401904:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  401906:	482c      	ldr	r0, [pc, #176]	; (4019b8 <board_init+0xb4>)
  401908:	f000 fc02 	bl	402110 <wdt_disable>
  40190c:	200b      	movs	r0, #11
  40190e:	f000 fbd5 	bl	4020bc <pmc_enable_periph_clk>
  401912:	200c      	movs	r0, #12
  401914:	f000 fbd2 	bl	4020bc <pmc_enable_periph_clk>
  401918:	200d      	movs	r0, #13
  40191a:	f000 fbcf 	bl	4020bc <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40191e:	4b27      	ldr	r3, [pc, #156]	; (4019bc <board_init+0xb8>)
  401920:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401924:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401926:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401928:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40192c:	4c24      	ldr	r4, [pc, #144]	; (4019c0 <board_init+0xbc>)
  40192e:	2504      	movs	r5, #4
  401930:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401932:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401936:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401938:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40193c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40193e:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401940:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401944:	6f22      	ldr	r2, [r4, #112]	; 0x70
  401946:	f022 0204 	bic.w	r2, r2, #4
  40194a:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40194c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40194e:	f022 0204 	bic.w	r2, r2, #4
  401952:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401954:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  401958:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40195a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40195c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401960:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401964:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401966:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401968:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40196c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401970:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401972:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401974:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  401978:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40197c:	210c      	movs	r1, #12
  40197e:	4811      	ldr	r0, [pc, #68]	; (4019c4 <board_init+0xc0>)
  401980:	f000 fa76 	bl	401e70 <pio_configure_pin_group>
#endif


#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401984:	4e10      	ldr	r6, [pc, #64]	; (4019c8 <board_init+0xc4>)
  401986:	4631      	mov	r1, r6
  401988:	2003      	movs	r0, #3
  40198a:	f000 f9e5 	bl	401d58 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40198e:	4631      	mov	r1, r6
  401990:	4628      	mov	r0, r5
  401992:	f000 f9e1 	bl	401d58 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401996:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401998:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40199c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40199e:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4019a0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4019a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4019a6:	f023 0304 	bic.w	r3, r3, #4
  4019aa:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4019ac:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4019ae:	f023 0304 	bic.w	r3, r3, #4
  4019b2:	6763      	str	r3, [r4, #116]	; 0x74
  4019b4:	bd70      	pop	{r4, r5, r6, pc}
  4019b6:	bf00      	nop
  4019b8:	400e1450 	.word	0x400e1450
  4019bc:	400e1200 	.word	0x400e1200
  4019c0:	400e0e00 	.word	0x400e0e00
  4019c4:	400e1000 	.word	0x400e1000
  4019c8:	08000001 	.word	0x08000001

004019cc <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4019cc:	4b2b      	ldr	r3, [pc, #172]	; (401a7c <twi_set_speed+0xb0>)
  4019ce:	4299      	cmp	r1, r3
  4019d0:	d849      	bhi.n	401a66 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4019d2:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4019d6:	4299      	cmp	r1, r3
  4019d8:	d92b      	bls.n	401a32 <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4019da:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4019dc:	4c28      	ldr	r4, [pc, #160]	; (401a80 <twi_set_speed+0xb4>)
  4019de:	fba4 3402 	umull	r3, r4, r4, r2
  4019e2:	0ba4      	lsrs	r4, r4, #14
  4019e4:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4019e6:	4b27      	ldr	r3, [pc, #156]	; (401a84 <twi_set_speed+0xb8>)
  4019e8:	440b      	add	r3, r1
  4019ea:	009b      	lsls	r3, r3, #2
  4019ec:	fbb2 f2f3 	udiv	r2, r2, r3
  4019f0:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019f2:	2cff      	cmp	r4, #255	; 0xff
  4019f4:	d939      	bls.n	401a6a <twi_set_speed+0x9e>
  4019f6:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4019f8:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4019fa:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019fc:	2cff      	cmp	r4, #255	; 0xff
  4019fe:	d902      	bls.n	401a06 <twi_set_speed+0x3a>
  401a00:	2b07      	cmp	r3, #7
  401a02:	d1f9      	bne.n	4019f8 <twi_set_speed+0x2c>
  401a04:	e00a      	b.n	401a1c <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a06:	2aff      	cmp	r2, #255	; 0xff
  401a08:	d908      	bls.n	401a1c <twi_set_speed+0x50>
  401a0a:	2b06      	cmp	r3, #6
  401a0c:	d900      	bls.n	401a10 <twi_set_speed+0x44>
  401a0e:	e005      	b.n	401a1c <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  401a10:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  401a12:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a14:	2aff      	cmp	r2, #255	; 0xff
  401a16:	d901      	bls.n	401a1c <twi_set_speed+0x50>
  401a18:	2b06      	cmp	r3, #6
  401a1a:	d9f9      	bls.n	401a10 <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401a1c:	0212      	lsls	r2, r2, #8
  401a1e:	b292      	uxth	r2, r2
  401a20:	041b      	lsls	r3, r3, #16
  401a22:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401a26:	431a      	orrs	r2, r3
  401a28:	b2e4      	uxtb	r4, r4
  401a2a:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  401a2c:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401a2e:	2000      	movs	r0, #0
  401a30:	e021      	b.n	401a76 <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401a32:	0049      	lsls	r1, r1, #1
  401a34:	fbb2 f2f1 	udiv	r2, r2, r1
  401a38:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a3a:	2aff      	cmp	r2, #255	; 0xff
  401a3c:	d907      	bls.n	401a4e <twi_set_speed+0x82>
  401a3e:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  401a40:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  401a42:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a44:	2aff      	cmp	r2, #255	; 0xff
  401a46:	d903      	bls.n	401a50 <twi_set_speed+0x84>
  401a48:	2b07      	cmp	r3, #7
  401a4a:	d1f9      	bne.n	401a40 <twi_set_speed+0x74>
  401a4c:	e000      	b.n	401a50 <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401a4e:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401a50:	0211      	lsls	r1, r2, #8
  401a52:	b289      	uxth	r1, r1
  401a54:	041b      	lsls	r3, r3, #16
  401a56:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401a5a:	430b      	orrs	r3, r1
  401a5c:	b2d2      	uxtb	r2, r2
  401a5e:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  401a60:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401a62:	2000      	movs	r0, #0
}
  401a64:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  401a66:	2001      	movs	r0, #1
  401a68:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a6a:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401a6c:	bf88      	it	hi
  401a6e:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a70:	d8ce      	bhi.n	401a10 <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401a72:	2300      	movs	r3, #0
  401a74:	e7d2      	b.n	401a1c <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  401a76:	bc10      	pop	{r4}
  401a78:	4770      	bx	lr
  401a7a:	bf00      	nop
  401a7c:	00061a80 	.word	0x00061a80
  401a80:	057619f1 	.word	0x057619f1
  401a84:	3ffd1200 	.word	0x3ffd1200

00401a88 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  401a88:	b538      	push	{r3, r4, r5, lr}
  401a8a:	4604      	mov	r4, r0
  401a8c:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  401a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  401a92:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  401a94:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  401a96:	2380      	movs	r3, #128	; 0x80
  401a98:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  401a9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  401a9c:	2308      	movs	r3, #8
  401a9e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401aa0:	2320      	movs	r3, #32
  401aa2:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401aa4:	2304      	movs	r3, #4
  401aa6:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  401aa8:	680a      	ldr	r2, [r1, #0]
  401aaa:	6849      	ldr	r1, [r1, #4]
  401aac:	f7ff ff8e 	bl	4019cc <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  401ab0:	2801      	cmp	r0, #1
  401ab2:	bf14      	ite	ne
  401ab4:	2000      	movne	r0, #0
  401ab6:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  401ab8:	7a6b      	ldrb	r3, [r5, #9]
  401aba:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  401abc:	bf04      	itt	eq
  401abe:	2340      	moveq	r3, #64	; 0x40
  401ac0:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  401ac2:	bd38      	pop	{r3, r4, r5, pc}

00401ac4 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401ac4:	460a      	mov	r2, r1
  401ac6:	b159      	cbz	r1, 401ae0 <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  401ac8:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  401aca:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  401acc:	bfc4      	itt	gt
  401ace:	7841      	ldrbgt	r1, [r0, #1]
  401ad0:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  401ad4:	2a02      	cmp	r2, #2
  401ad6:	dd05      	ble.n	401ae4 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  401ad8:	7880      	ldrb	r0, [r0, #2]
  401ada:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401ade:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401ae0:	2000      	movs	r0, #0
  401ae2:	4770      	bx	lr
  401ae4:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  401ae6:	4770      	bx	lr

00401ae8 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  401ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401aec:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  401aee:	2c00      	cmp	r4, #0
  401af0:	d045      	beq.n	401b7e <twi_master_read+0x96>
  401af2:	460b      	mov	r3, r1
  401af4:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401af6:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401af8:	2000      	movs	r0, #0
  401afa:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401afc:	684a      	ldr	r2, [r1, #4]
  401afe:	0212      	lsls	r2, r2, #8
  401b00:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401b04:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  401b08:	7c1a      	ldrb	r2, [r3, #16]
  401b0a:	0412      	lsls	r2, r2, #16
  401b0c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  401b10:	430a      	orrs	r2, r1
  401b12:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401b14:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401b16:	6859      	ldr	r1, [r3, #4]
  401b18:	4618      	mov	r0, r3
  401b1a:	f7ff ffd3 	bl	401ac4 <twi_mk_addr>
  401b1e:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401b20:	2c01      	cmp	r4, #1
  401b22:	d104      	bne.n	401b2e <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401b24:	2303      	movs	r3, #3
  401b26:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  401b28:	f04f 0e01 	mov.w	lr, #1
  401b2c:	e033      	b.n	401b96 <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  401b2e:	2301      	movs	r3, #1
  401b30:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  401b32:	f04f 0e00 	mov.w	lr, #0
  401b36:	e02e      	b.n	401b96 <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b38:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401b3a:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401b3c:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b40:	d120      	bne.n	401b84 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  401b42:	1e51      	subs	r1, r2, #1
  401b44:	b30a      	cbz	r2, 401b8a <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401b46:	2c01      	cmp	r4, #1
  401b48:	d106      	bne.n	401b58 <twi_master_read+0x70>
  401b4a:	f1be 0f00 	cmp.w	lr, #0
  401b4e:	d12f      	bne.n	401bb0 <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  401b50:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  401b54:	46e6      	mov	lr, ip
  401b56:	e02b      	b.n	401bb0 <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b58:	f013 0f02 	tst.w	r3, #2
  401b5c:	d005      	beq.n	401b6a <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401b5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401b60:	7033      	strb	r3, [r6, #0]

		cnt--;
  401b62:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401b64:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  401b66:	463a      	mov	r2, r7
  401b68:	e000      	b.n	401b6c <twi_master_read+0x84>
  401b6a:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  401b6c:	2c00      	cmp	r4, #0
  401b6e:	d1e4      	bne.n	401b3a <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401b70:	6a2b      	ldr	r3, [r5, #32]
  401b72:	f013 0f01 	tst.w	r3, #1
  401b76:	d0fb      	beq.n	401b70 <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  401b78:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  401b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401b7e:	2001      	movs	r0, #1
  401b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401b84:	2005      	movs	r0, #5
  401b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  401b8a:	2009      	movs	r0, #9
  401b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401b90:	2005      	movs	r0, #5
  401b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401b96:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401b98:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401b9c:	d1f8      	bne.n	401b90 <twi_master_read+0xa8>
  401b9e:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  401ba2:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  401ba6:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  401baa:	f04f 0c01 	mov.w	ip, #1
  401bae:	e7ca      	b.n	401b46 <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401bb0:	f013 0f02 	tst.w	r3, #2
  401bb4:	d0c0      	beq.n	401b38 <twi_master_read+0x50>
  401bb6:	e7d2      	b.n	401b5e <twi_master_read+0x76>

00401bb8 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401bb8:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401bba:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  401bbc:	2d00      	cmp	r5, #0
  401bbe:	d034      	beq.n	401c2a <twi_master_write+0x72>
  401bc0:	460b      	mov	r3, r1
  401bc2:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401bc4:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401bc6:	2000      	movs	r0, #0
  401bc8:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401bca:	7c0a      	ldrb	r2, [r1, #16]
  401bcc:	0412      	lsls	r2, r2, #16
  401bce:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  401bd2:	685a      	ldr	r2, [r3, #4]
  401bd4:	0212      	lsls	r2, r2, #8
  401bd6:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401bda:	430a      	orrs	r2, r1
  401bdc:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401bde:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401be0:	6859      	ldr	r1, [r3, #4]
  401be2:	4618      	mov	r0, r3
  401be4:	f7ff ff6e 	bl	401ac4 <twi_mk_addr>
  401be8:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401bea:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bec:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bf0:	d004      	beq.n	401bfc <twi_master_write+0x44>
  401bf2:	e01c      	b.n	401c2e <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401bf4:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bf6:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bfa:	d11a      	bne.n	401c32 <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401bfc:	f013 0f04 	tst.w	r3, #4
  401c00:	d003      	beq.n	401c0a <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401c02:	7833      	ldrb	r3, [r6, #0]
  401c04:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  401c06:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401c08:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401c0a:	2d00      	cmp	r5, #0
  401c0c:	d1f2      	bne.n	401bf4 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  401c0e:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401c10:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401c14:	d10f      	bne.n	401c36 <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  401c16:	f013 0f04 	tst.w	r3, #4
  401c1a:	d0f8      	beq.n	401c0e <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401c1c:	2302      	movs	r3, #2
  401c1e:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401c20:	6a23      	ldr	r3, [r4, #32]
  401c22:	f013 0f01 	tst.w	r3, #1
  401c26:	d0fb      	beq.n	401c20 <twi_master_write+0x68>
  401c28:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401c2a:	2001      	movs	r0, #1
  401c2c:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401c2e:	2005      	movs	r0, #5
  401c30:	bd70      	pop	{r4, r5, r6, pc}
  401c32:	2005      	movs	r0, #5
  401c34:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401c36:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  401c38:	bd70      	pop	{r4, r5, r6, pc}
  401c3a:	bf00      	nop

00401c3c <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  401c3c:	b500      	push	{lr}
  401c3e:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  401c40:	2300      	movs	r3, #0
  401c42:	aa06      	add	r2, sp, #24
  401c44:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  401c48:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  401c4a:	2201      	movs	r2, #1
  401c4c:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  401c4e:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  401c52:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  401c56:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  401c58:	a901      	add	r1, sp, #4
  401c5a:	f7ff ffad 	bl	401bb8 <twi_master_write>
}
  401c5e:	b007      	add	sp, #28
  401c60:	f85d fb04 	ldr.w	pc, [sp], #4

00401c64 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401c64:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401c66:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401c6a:	d02f      	beq.n	401ccc <pio_set_peripheral+0x68>
  401c6c:	d807      	bhi.n	401c7e <pio_set_peripheral+0x1a>
  401c6e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401c72:	d014      	beq.n	401c9e <pio_set_peripheral+0x3a>
  401c74:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401c78:	d01e      	beq.n	401cb8 <pio_set_peripheral+0x54>
  401c7a:	b939      	cbnz	r1, 401c8c <pio_set_peripheral+0x28>
  401c7c:	4770      	bx	lr
  401c7e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401c82:	d036      	beq.n	401cf2 <pio_set_peripheral+0x8e>
  401c84:	d804      	bhi.n	401c90 <pio_set_peripheral+0x2c>
  401c86:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401c8a:	d029      	beq.n	401ce0 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401c8c:	6042      	str	r2, [r0, #4]
  401c8e:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401c90:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401c94:	d02d      	beq.n	401cf2 <pio_set_peripheral+0x8e>
  401c96:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401c9a:	d02a      	beq.n	401cf2 <pio_set_peripheral+0x8e>
  401c9c:	e7f6      	b.n	401c8c <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401c9e:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401ca0:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401ca2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401ca4:	43d3      	mvns	r3, r2
  401ca6:	4021      	ands	r1, r4
  401ca8:	4019      	ands	r1, r3
  401caa:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401cac:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401cae:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401cb0:	4021      	ands	r1, r4
  401cb2:	400b      	ands	r3, r1
  401cb4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401cb6:	e01a      	b.n	401cee <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cb8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401cba:	4313      	orrs	r3, r2
  401cbc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401cbe:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401cc0:	6f43      	ldr	r3, [r0, #116]	; 0x74
  401cc2:	400b      	ands	r3, r1
  401cc4:	ea23 0302 	bic.w	r3, r3, r2
  401cc8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401cca:	e7df      	b.n	401c8c <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401ccc:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401cce:	6f03      	ldr	r3, [r0, #112]	; 0x70
  401cd0:	400b      	ands	r3, r1
  401cd2:	ea23 0302 	bic.w	r3, r3, r2
  401cd6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401cd8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401cda:	4313      	orrs	r3, r2
  401cdc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401cde:	e7d5      	b.n	401c8c <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401ce0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401ce2:	4313      	orrs	r3, r2
  401ce4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401ce6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401ce8:	4313      	orrs	r3, r2
  401cea:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401cec:	e7ce      	b.n	401c8c <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401cee:	6042      	str	r2, [r0, #4]
}
  401cf0:	bc10      	pop	{r4}
  401cf2:	4770      	bx	lr

00401cf4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401cf4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401cf6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401cfa:	bf14      	ite	ne
  401cfc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401cfe:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401d00:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401d04:	bf14      	ite	ne
  401d06:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401d08:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401d0a:	f012 0f02 	tst.w	r2, #2
  401d0e:	d002      	beq.n	401d16 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  401d10:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401d14:	e004      	b.n	401d20 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401d16:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401d1a:	bf18      	it	ne
  401d1c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401d20:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401d22:	6001      	str	r1, [r0, #0]
  401d24:	4770      	bx	lr
  401d26:	bf00      	nop

00401d28 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401d28:	b410      	push	{r4}
  401d2a:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401d2c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d2e:	b10c      	cbz	r4, 401d34 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401d30:	6641      	str	r1, [r0, #100]	; 0x64
  401d32:	e000      	b.n	401d36 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d34:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401d36:	b10b      	cbz	r3, 401d3c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401d38:	6501      	str	r1, [r0, #80]	; 0x50
  401d3a:	e000      	b.n	401d3e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401d3c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401d3e:	b10a      	cbz	r2, 401d44 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  401d40:	6301      	str	r1, [r0, #48]	; 0x30
  401d42:	e000      	b.n	401d46 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401d44:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401d46:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401d48:	6001      	str	r1, [r0, #0]
}
  401d4a:	bc10      	pop	{r4}
  401d4c:	4770      	bx	lr
  401d4e:	bf00      	nop

00401d50 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401d50:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401d52:	4770      	bx	lr

00401d54 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401d54:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401d56:	4770      	bx	lr

00401d58 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401d58:	b570      	push	{r4, r5, r6, lr}
  401d5a:	b082      	sub	sp, #8
  401d5c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d5e:	0943      	lsrs	r3, r0, #5
  401d60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401d64:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401d68:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401d6a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d72:	d047      	beq.n	401e04 <pio_configure_pin+0xac>
  401d74:	d809      	bhi.n	401d8a <pio_configure_pin+0x32>
  401d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401d7a:	d021      	beq.n	401dc0 <pio_configure_pin+0x68>
  401d7c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d80:	d02f      	beq.n	401de2 <pio_configure_pin+0x8a>
  401d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401d86:	d16f      	bne.n	401e68 <pio_configure_pin+0x110>
  401d88:	e009      	b.n	401d9e <pio_configure_pin+0x46>
  401d8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401d8e:	d055      	beq.n	401e3c <pio_configure_pin+0xe4>
  401d90:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401d94:	d052      	beq.n	401e3c <pio_configure_pin+0xe4>
  401d96:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d9a:	d044      	beq.n	401e26 <pio_configure_pin+0xce>
  401d9c:	e064      	b.n	401e68 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401d9e:	f000 001f 	and.w	r0, r0, #31
  401da2:	2601      	movs	r6, #1
  401da4:	4086      	lsls	r6, r0
  401da6:	4632      	mov	r2, r6
  401da8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401dac:	4620      	mov	r0, r4
  401dae:	f7ff ff59 	bl	401c64 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401db2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401db6:	bf14      	ite	ne
  401db8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401dba:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401dbc:	2001      	movs	r0, #1
  401dbe:	e054      	b.n	401e6a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401dc0:	f000 001f 	and.w	r0, r0, #31
  401dc4:	2601      	movs	r6, #1
  401dc6:	4086      	lsls	r6, r0
  401dc8:	4632      	mov	r2, r6
  401dca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401dce:	4620      	mov	r0, r4
  401dd0:	f7ff ff48 	bl	401c64 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401dd4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401dd8:	bf14      	ite	ne
  401dda:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ddc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401dde:	2001      	movs	r0, #1
  401de0:	e043      	b.n	401e6a <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401de2:	f000 001f 	and.w	r0, r0, #31
  401de6:	2601      	movs	r6, #1
  401de8:	4086      	lsls	r6, r0
  401dea:	4632      	mov	r2, r6
  401dec:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401df0:	4620      	mov	r0, r4
  401df2:	f7ff ff37 	bl	401c64 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401df6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401dfa:	bf14      	ite	ne
  401dfc:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401dfe:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401e00:	2001      	movs	r0, #1
  401e02:	e032      	b.n	401e6a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401e04:	f000 001f 	and.w	r0, r0, #31
  401e08:	2601      	movs	r6, #1
  401e0a:	4086      	lsls	r6, r0
  401e0c:	4632      	mov	r2, r6
  401e0e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401e12:	4620      	mov	r0, r4
  401e14:	f7ff ff26 	bl	401c64 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401e18:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401e1c:	bf14      	ite	ne
  401e1e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401e20:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401e22:	2001      	movs	r0, #1
  401e24:	e021      	b.n	401e6a <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401e26:	f000 011f 	and.w	r1, r0, #31
  401e2a:	2601      	movs	r6, #1
  401e2c:	462a      	mov	r2, r5
  401e2e:	fa06 f101 	lsl.w	r1, r6, r1
  401e32:	4620      	mov	r0, r4
  401e34:	f7ff ff5e 	bl	401cf4 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401e38:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  401e3a:	e016      	b.n	401e6a <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e3c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  401e40:	f000 011f 	and.w	r1, r0, #31
  401e44:	2601      	movs	r6, #1
  401e46:	ea05 0306 	and.w	r3, r5, r6
  401e4a:	9300      	str	r3, [sp, #0]
  401e4c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401e50:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401e54:	bf14      	ite	ne
  401e56:	2200      	movne	r2, #0
  401e58:	2201      	moveq	r2, #1
  401e5a:	fa06 f101 	lsl.w	r1, r6, r1
  401e5e:	4620      	mov	r0, r4
  401e60:	f7ff ff62 	bl	401d28 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401e64:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401e66:	e000      	b.n	401e6a <pio_configure_pin+0x112>

	default:
		return 0;
  401e68:	2000      	movs	r0, #0
	}

	return 1;
}
  401e6a:	b002      	add	sp, #8
  401e6c:	bd70      	pop	{r4, r5, r6, pc}
  401e6e:	bf00      	nop

00401e70 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401e70:	b570      	push	{r4, r5, r6, lr}
  401e72:	b082      	sub	sp, #8
  401e74:	4605      	mov	r5, r0
  401e76:	460e      	mov	r6, r1
  401e78:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401e7a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  401e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401e82:	d038      	beq.n	401ef6 <pio_configure_pin_group+0x86>
  401e84:	d809      	bhi.n	401e9a <pio_configure_pin_group+0x2a>
  401e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401e8a:	d01c      	beq.n	401ec6 <pio_configure_pin_group+0x56>
  401e8c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401e90:	d025      	beq.n	401ede <pio_configure_pin_group+0x6e>
  401e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401e96:	d150      	bne.n	401f3a <pio_configure_pin_group+0xca>
  401e98:	e009      	b.n	401eae <pio_configure_pin_group+0x3e>
  401e9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401e9e:	d03a      	beq.n	401f16 <pio_configure_pin_group+0xa6>
  401ea0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401ea4:	d037      	beq.n	401f16 <pio_configure_pin_group+0xa6>
  401ea6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401eaa:	d030      	beq.n	401f0e <pio_configure_pin_group+0x9e>
  401eac:	e045      	b.n	401f3a <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401eae:	460a      	mov	r2, r1
  401eb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401eb4:	f7ff fed6 	bl	401c64 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401eb8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401ebc:	bf14      	ite	ne
  401ebe:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ec0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ec2:	2001      	movs	r0, #1
  401ec4:	e03a      	b.n	401f3c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401ec6:	460a      	mov	r2, r1
  401ec8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401ecc:	f7ff feca 	bl	401c64 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401ed0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401ed4:	bf14      	ite	ne
  401ed6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ed8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401eda:	2001      	movs	r0, #1
  401edc:	e02e      	b.n	401f3c <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401ede:	460a      	mov	r2, r1
  401ee0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401ee4:	f7ff febe 	bl	401c64 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401ee8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401eec:	bf14      	ite	ne
  401eee:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ef0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ef2:	2001      	movs	r0, #1
  401ef4:	e022      	b.n	401f3c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401ef6:	460a      	mov	r2, r1
  401ef8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401efc:	f7ff feb2 	bl	401c64 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401f00:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401f04:	bf14      	ite	ne
  401f06:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401f08:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401f0a:	2001      	movs	r0, #1
  401f0c:	e016      	b.n	401f3c <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401f0e:	f7ff fef1 	bl	401cf4 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401f12:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401f14:	e012      	b.n	401f3c <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401f16:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  401f1a:	f004 0301 	and.w	r3, r4, #1
  401f1e:	9300      	str	r3, [sp, #0]
  401f20:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401f24:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401f28:	bf14      	ite	ne
  401f2a:	2200      	movne	r2, #0
  401f2c:	2201      	moveq	r2, #1
  401f2e:	4631      	mov	r1, r6
  401f30:	4628      	mov	r0, r5
  401f32:	f7ff fef9 	bl	401d28 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401f36:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401f38:	e000      	b.n	401f3c <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401f3a:	2000      	movs	r0, #0
	}

	return 1;
}
  401f3c:	b002      	add	sp, #8
  401f3e:	bd70      	pop	{r4, r5, r6, pc}

00401f40 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401f44:	4681      	mov	r9, r0
  401f46:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401f48:	f7ff ff02 	bl	401d50 <pio_get_interrupt_status>
  401f4c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401f4e:	4648      	mov	r0, r9
  401f50:	f7ff ff00 	bl	401d54 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  401f54:	4005      	ands	r5, r0
  401f56:	d013      	beq.n	401f80 <pio_handler_process+0x40>
  401f58:	4c0e      	ldr	r4, [pc, #56]	; (401f94 <pio_handler_process+0x54>)
  401f5a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401f5e:	6823      	ldr	r3, [r4, #0]
  401f60:	4543      	cmp	r3, r8
  401f62:	d108      	bne.n	401f76 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f64:	6861      	ldr	r1, [r4, #4]
  401f66:	4229      	tst	r1, r5
  401f68:	d005      	beq.n	401f76 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f6a:	68e3      	ldr	r3, [r4, #12]
  401f6c:	4640      	mov	r0, r8
  401f6e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401f70:	6863      	ldr	r3, [r4, #4]
  401f72:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401f76:	42b4      	cmp	r4, r6
  401f78:	d002      	beq.n	401f80 <pio_handler_process+0x40>
  401f7a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401f7c:	2d00      	cmp	r5, #0
  401f7e:	d1ee      	bne.n	401f5e <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401f80:	4b05      	ldr	r3, [pc, #20]	; (401f98 <pio_handler_process+0x58>)
  401f82:	681b      	ldr	r3, [r3, #0]
  401f84:	b123      	cbz	r3, 401f90 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  401f86:	4b05      	ldr	r3, [pc, #20]	; (401f9c <pio_handler_process+0x5c>)
  401f88:	681b      	ldr	r3, [r3, #0]
  401f8a:	b10b      	cbz	r3, 401f90 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401f8c:	4648      	mov	r0, r9
  401f8e:	4798      	blx	r3
  401f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401f94:	2000047c 	.word	0x2000047c
  401f98:	2000086c 	.word	0x2000086c
  401f9c:	20000478 	.word	0x20000478

00401fa0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401fa0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401fa2:	210b      	movs	r1, #11
  401fa4:	4801      	ldr	r0, [pc, #4]	; (401fac <PIOA_Handler+0xc>)
  401fa6:	f7ff ffcb 	bl	401f40 <pio_handler_process>
  401faa:	bd08      	pop	{r3, pc}
  401fac:	400e0e00 	.word	0x400e0e00

00401fb0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401fb0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401fb2:	210c      	movs	r1, #12
  401fb4:	4801      	ldr	r0, [pc, #4]	; (401fbc <PIOB_Handler+0xc>)
  401fb6:	f7ff ffc3 	bl	401f40 <pio_handler_process>
  401fba:	bd08      	pop	{r3, pc}
  401fbc:	400e1000 	.word	0x400e1000

00401fc0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401fc0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401fc2:	210d      	movs	r1, #13
  401fc4:	4801      	ldr	r0, [pc, #4]	; (401fcc <PIOC_Handler+0xc>)
  401fc6:	f7ff ffbb 	bl	401f40 <pio_handler_process>
  401fca:	bd08      	pop	{r3, pc}
  401fcc:	400e1200 	.word	0x400e1200

00401fd0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401fd0:	4a18      	ldr	r2, [pc, #96]	; (402034 <pmc_switch_mck_to_pllack+0x64>)
  401fd2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401fd8:	4318      	orrs	r0, r3
  401fda:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fdc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401fde:	f013 0f08 	tst.w	r3, #8
  401fe2:	d003      	beq.n	401fec <pmc_switch_mck_to_pllack+0x1c>
  401fe4:	e009      	b.n	401ffa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401fe6:	3b01      	subs	r3, #1
  401fe8:	d103      	bne.n	401ff2 <pmc_switch_mck_to_pllack+0x22>
  401fea:	e01e      	b.n	40202a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401ff0:	4910      	ldr	r1, [pc, #64]	; (402034 <pmc_switch_mck_to_pllack+0x64>)
  401ff2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401ff4:	f012 0f08 	tst.w	r2, #8
  401ff8:	d0f5      	beq.n	401fe6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401ffa:	4a0e      	ldr	r2, [pc, #56]	; (402034 <pmc_switch_mck_to_pllack+0x64>)
  401ffc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ffe:	f023 0303 	bic.w	r3, r3, #3
  402002:	f043 0302 	orr.w	r3, r3, #2
  402006:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402008:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40200a:	f010 0008 	ands.w	r0, r0, #8
  40200e:	d004      	beq.n	40201a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402010:	2000      	movs	r0, #0
  402012:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402014:	3b01      	subs	r3, #1
  402016:	d103      	bne.n	402020 <pmc_switch_mck_to_pllack+0x50>
  402018:	e009      	b.n	40202e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40201a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40201e:	4905      	ldr	r1, [pc, #20]	; (402034 <pmc_switch_mck_to_pllack+0x64>)
  402020:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402022:	f012 0f08 	tst.w	r2, #8
  402026:	d0f5      	beq.n	402014 <pmc_switch_mck_to_pllack+0x44>
  402028:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40202a:	2001      	movs	r0, #1
  40202c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40202e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402030:	4770      	bx	lr
  402032:	bf00      	nop
  402034:	400e0400 	.word	0x400e0400

00402038 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402038:	b138      	cbz	r0, 40204a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40203a:	4911      	ldr	r1, [pc, #68]	; (402080 <pmc_switch_mainck_to_xtal+0x48>)
  40203c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40203e:	4a11      	ldr	r2, [pc, #68]	; (402084 <pmc_switch_mainck_to_xtal+0x4c>)
  402040:	401a      	ands	r2, r3
  402042:	4b11      	ldr	r3, [pc, #68]	; (402088 <pmc_switch_mainck_to_xtal+0x50>)
  402044:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402046:	620b      	str	r3, [r1, #32]
  402048:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40204a:	480d      	ldr	r0, [pc, #52]	; (402080 <pmc_switch_mainck_to_xtal+0x48>)
  40204c:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40204e:	0209      	lsls	r1, r1, #8
  402050:	b289      	uxth	r1, r1
  402052:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  402056:	f023 0303 	bic.w	r3, r3, #3
  40205a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40205e:	f043 0301 	orr.w	r3, r3, #1
  402062:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402064:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402066:	4602      	mov	r2, r0
  402068:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40206a:	f013 0f01 	tst.w	r3, #1
  40206e:	d0fb      	beq.n	402068 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402070:	4a03      	ldr	r2, [pc, #12]	; (402080 <pmc_switch_mainck_to_xtal+0x48>)
  402072:	6a13      	ldr	r3, [r2, #32]
  402074:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40207c:	6213      	str	r3, [r2, #32]
  40207e:	4770      	bx	lr
  402080:	400e0400 	.word	0x400e0400
  402084:	fec8fffc 	.word	0xfec8fffc
  402088:	01370002 	.word	0x01370002

0040208c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40208c:	4b02      	ldr	r3, [pc, #8]	; (402098 <pmc_osc_is_ready_mainck+0xc>)
  40208e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402090:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402094:	4770      	bx	lr
  402096:	bf00      	nop
  402098:	400e0400 	.word	0x400e0400

0040209c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40209c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4020a0:	4b01      	ldr	r3, [pc, #4]	; (4020a8 <pmc_disable_pllack+0xc>)
  4020a2:	629a      	str	r2, [r3, #40]	; 0x28
  4020a4:	4770      	bx	lr
  4020a6:	bf00      	nop
  4020a8:	400e0400 	.word	0x400e0400

004020ac <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4020ac:	4b02      	ldr	r3, [pc, #8]	; (4020b8 <pmc_is_locked_pllack+0xc>)
  4020ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4020b0:	f000 0002 	and.w	r0, r0, #2
  4020b4:	4770      	bx	lr
  4020b6:	bf00      	nop
  4020b8:	400e0400 	.word	0x400e0400

004020bc <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4020bc:	2822      	cmp	r0, #34	; 0x22
  4020be:	d81e      	bhi.n	4020fe <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4020c0:	281f      	cmp	r0, #31
  4020c2:	d80c      	bhi.n	4020de <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4020c4:	4b11      	ldr	r3, [pc, #68]	; (40210c <pmc_enable_periph_clk+0x50>)
  4020c6:	699a      	ldr	r2, [r3, #24]
  4020c8:	2301      	movs	r3, #1
  4020ca:	4083      	lsls	r3, r0
  4020cc:	4393      	bics	r3, r2
  4020ce:	d018      	beq.n	402102 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4020d0:	2301      	movs	r3, #1
  4020d2:	fa03 f000 	lsl.w	r0, r3, r0
  4020d6:	4b0d      	ldr	r3, [pc, #52]	; (40210c <pmc_enable_periph_clk+0x50>)
  4020d8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4020da:	2000      	movs	r0, #0
  4020dc:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4020de:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4020e0:	4b0a      	ldr	r3, [pc, #40]	; (40210c <pmc_enable_periph_clk+0x50>)
  4020e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4020e6:	2301      	movs	r3, #1
  4020e8:	4083      	lsls	r3, r0
  4020ea:	4393      	bics	r3, r2
  4020ec:	d00b      	beq.n	402106 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4020ee:	2301      	movs	r3, #1
  4020f0:	fa03 f000 	lsl.w	r0, r3, r0
  4020f4:	4b05      	ldr	r3, [pc, #20]	; (40210c <pmc_enable_periph_clk+0x50>)
  4020f6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4020fa:	2000      	movs	r0, #0
  4020fc:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4020fe:	2001      	movs	r0, #1
  402100:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402102:	2000      	movs	r0, #0
  402104:	4770      	bx	lr
  402106:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402108:	4770      	bx	lr
  40210a:	bf00      	nop
  40210c:	400e0400 	.word	0x400e0400

00402110 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  402110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402114:	6043      	str	r3, [r0, #4]
  402116:	4770      	bx	lr

00402118 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402118:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40211a:	23ac      	movs	r3, #172	; 0xac
  40211c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40211e:	680b      	ldr	r3, [r1, #0]
  402120:	684a      	ldr	r2, [r1, #4]
  402122:	fbb3 f3f2 	udiv	r3, r3, r2
  402126:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402128:	1e5c      	subs	r4, r3, #1
  40212a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40212e:	4294      	cmp	r4, r2
  402130:	d80a      	bhi.n	402148 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  402132:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402134:	688b      	ldr	r3, [r1, #8]
  402136:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  402138:	f240 2302 	movw	r3, #514	; 0x202
  40213c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402140:	2350      	movs	r3, #80	; 0x50
  402142:	6003      	str	r3, [r0, #0]

	return 0;
  402144:	2000      	movs	r0, #0
  402146:	e000      	b.n	40214a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402148:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  40214a:	bc10      	pop	{r4}
  40214c:	4770      	bx	lr
  40214e:	bf00      	nop

00402150 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  402150:	6940      	ldr	r0, [r0, #20]
}
  402152:	f000 0001 	and.w	r0, r0, #1
  402156:	4770      	bx	lr

00402158 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402158:	6943      	ldr	r3, [r0, #20]
  40215a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40215e:	bf1a      	itte	ne
  402160:	61c1      	strne	r1, [r0, #28]
	return 0;
  402162:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402164:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402166:	4770      	bx	lr

00402168 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402168:	6943      	ldr	r3, [r0, #20]
  40216a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40216e:	bf1d      	ittte	ne
  402170:	6983      	ldrne	r3, [r0, #24]
  402172:	700b      	strbne	r3, [r1, #0]
	return 0;
  402174:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402176:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402178:	4770      	bx	lr
  40217a:	bf00      	nop

0040217c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40217c:	6943      	ldr	r3, [r0, #20]
  40217e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  402182:	bf1d      	ittte	ne
  402184:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  402188:	61c1      	strne	r1, [r0, #28]
	return 0;
  40218a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  40218c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40218e:	4770      	bx	lr

00402190 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402190:	6943      	ldr	r3, [r0, #20]
  402192:	f013 0f01 	tst.w	r3, #1
  402196:	d005      	beq.n	4021a4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402198:	6983      	ldr	r3, [r0, #24]
  40219a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40219e:	600b      	str	r3, [r1, #0]

	return 0;
  4021a0:	2000      	movs	r0, #0
  4021a2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4021a4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4021a6:	4770      	bx	lr

004021a8 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4021a8:	b4f0      	push	{r4, r5, r6, r7}
  4021aa:	b08c      	sub	sp, #48	; 0x30
  4021ac:	4607      	mov	r7, r0
  4021ae:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4021b0:	ac01      	add	r4, sp, #4
  4021b2:	4d11      	ldr	r5, [pc, #68]	; (4021f8 <pwm_clocks_generate+0x50>)
  4021b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4021b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4021b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4021ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4021bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4021c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4021c4:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4021c6:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4021c8:	f852 3b04 	ldr.w	r3, [r2], #4
  4021cc:	fbb6 f3f3 	udiv	r3, r6, r3
  4021d0:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4021d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4021d8:	d905      	bls.n	4021e6 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  4021da:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4021dc:	280b      	cmp	r0, #11
  4021de:	d1f3      	bne.n	4021c8 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  4021e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4021e4:	e005      	b.n	4021f2 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4021e6:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  4021e8:	bf94      	ite	ls
  4021ea:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  4021ee:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  4021f2:	b00c      	add	sp, #48	; 0x30
  4021f4:	bcf0      	pop	{r4, r5, r6, r7}
  4021f6:	4770      	bx	lr
  4021f8:	00408184 	.word	0x00408184

004021fc <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4021fc:	b570      	push	{r4, r5, r6, lr}
  4021fe:	4606      	mov	r6, r0
  402200:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  402202:	6808      	ldr	r0, [r1, #0]
  402204:	b140      	cbz	r0, 402218 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  402206:	6889      	ldr	r1, [r1, #8]
  402208:	f7ff ffce 	bl	4021a8 <pwm_clocks_generate>
  40220c:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  40220e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402212:	4298      	cmp	r0, r3
  402214:	d101      	bne.n	40221a <pwm_init+0x1e>
  402216:	e00e      	b.n	402236 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  402218:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  40221a:	6860      	ldr	r0, [r4, #4]
  40221c:	b140      	cbz	r0, 402230 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  40221e:	68a1      	ldr	r1, [r4, #8]
  402220:	f7ff ffc2 	bl	4021a8 <pwm_clocks_generate>

		if (result == PWM_INVALID_ARGUMENT) {
  402224:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402228:	4298      	cmp	r0, r3
  40222a:	d007      	beq.n	40223c <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  40222c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  402230:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  402232:	2000      	movs	r0, #0
  402234:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  402236:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40223a:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  40223c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  402240:	bd70      	pop	{r4, r5, r6, pc}
  402242:	bf00      	nop

00402244 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  402244:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  402246:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  402248:	684a      	ldr	r2, [r1, #4]
  40224a:	f002 020f 	and.w	r2, r2, #15
  40224e:	8a8c      	ldrh	r4, [r1, #20]
  402250:	4322      	orrs	r2, r4
  402252:	890c      	ldrh	r4, [r1, #8]
  402254:	4322      	orrs	r2, r4
  402256:	7a8c      	ldrb	r4, [r1, #10]
  402258:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  40225c:	7d8c      	ldrb	r4, [r1, #22]
  40225e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  402262:	7dcc      	ldrb	r4, [r1, #23]
  402264:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  402268:	7e0c      	ldrb	r4, [r1, #24]
  40226a:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  40226e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  402272:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  402276:	68ca      	ldr	r2, [r1, #12]
  402278:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  40227c:	690a      	ldr	r2, [r1, #16]
  40227e:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  402282:	7d8a      	ldrb	r2, [r1, #22]
  402284:	b13a      	cbz	r2, 402296 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  402286:	8b8c      	ldrh	r4, [r1, #28]
  402288:	8b4a      	ldrh	r2, [r1, #26]
  40228a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  40228e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  402292:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  402296:	6c84      	ldr	r4, [r0, #72]	; 0x48
  402298:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  40229c:	409a      	lsls	r2, r3
  40229e:	43d2      	mvns	r2, r2
  4022a0:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4022a4:	7fcc      	ldrb	r4, [r1, #31]
  4022a6:	fa04 f603 	lsl.w	r6, r4, r3
  4022aa:	7f8c      	ldrb	r4, [r1, #30]
  4022ac:	409c      	lsls	r4, r3
  4022ae:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4022b2:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  4022b4:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  4022b6:	6c44      	ldr	r4, [r0, #68]	; 0x44
  4022b8:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4022ba:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  4022be:	fa04 f503 	lsl.w	r5, r4, r3
  4022c2:	f891 4020 	ldrb.w	r4, [r1, #32]
  4022c6:	409c      	lsls	r4, r3
  4022c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4022cc:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  4022ce:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4022d0:	2201      	movs	r2, #1
  4022d2:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  4022d4:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4022d8:	b11c      	cbz	r4, 4022e2 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  4022da:	6a04      	ldr	r4, [r0, #32]
  4022dc:	4314      	orrs	r4, r2
  4022de:	6204      	str	r4, [r0, #32]
  4022e0:	e003      	b.n	4022ea <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  4022e2:	6a04      	ldr	r4, [r0, #32]
  4022e4:	ea24 0402 	bic.w	r4, r4, r2
  4022e8:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4022ea:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  4022ee:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  4022f0:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4022f2:	bf0c      	ite	eq
  4022f4:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  4022f6:	4394      	bicne	r4, r2
  4022f8:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4022fa:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  4022fe:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  402300:	6e84      	ldr	r4, [r0, #104]	; 0x68
  402302:	bf0c      	ite	eq
  402304:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  402308:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  40230c:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  40230e:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  402310:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  402312:	22ff      	movs	r2, #255	; 0xff
  402314:	409a      	lsls	r2, r3
  402316:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  40231a:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  40231e:	fa01 f303 	lsl.w	r3, r1, r3
  402322:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  402324:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  402326:	2000      	movs	r0, #0
  402328:	bc70      	pop	{r4, r5, r6}
  40232a:	4770      	bx	lr

0040232c <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  40232c:	690b      	ldr	r3, [r1, #16]
  40232e:	4293      	cmp	r3, r2
  402330:	d307      	bcc.n	402342 <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  402332:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  402334:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  402336:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  40233a:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  40233e:	2000      	movs	r0, #0
  402340:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  402342:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  402346:	4770      	bx	lr

00402348 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  402348:	2301      	movs	r3, #1
  40234a:	fa03 f101 	lsl.w	r1, r3, r1
  40234e:	6041      	str	r1, [r0, #4]
  402350:	4770      	bx	lr
  402352:	bf00      	nop

00402354 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  402354:	2301      	movs	r3, #1
  402356:	fa03 f101 	lsl.w	r1, r3, r1
  40235a:	6081      	str	r1, [r0, #8]
  40235c:	4770      	bx	lr
  40235e:	bf00      	nop

00402360 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402360:	e7fe      	b.n	402360 <Dummy_Handler>
  402362:	bf00      	nop

00402364 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402364:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  402366:	4b20      	ldr	r3, [pc, #128]	; (4023e8 <Reset_Handler+0x84>)
  402368:	4a20      	ldr	r2, [pc, #128]	; (4023ec <Reset_Handler+0x88>)
  40236a:	429a      	cmp	r2, r3
  40236c:	d912      	bls.n	402394 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  40236e:	4b20      	ldr	r3, [pc, #128]	; (4023f0 <Reset_Handler+0x8c>)
  402370:	4a1d      	ldr	r2, [pc, #116]	; (4023e8 <Reset_Handler+0x84>)
  402372:	429a      	cmp	r2, r3
  402374:	d21e      	bcs.n	4023b4 <Reset_Handler+0x50>
  402376:	4611      	mov	r1, r2
  402378:	3b01      	subs	r3, #1
  40237a:	1a9b      	subs	r3, r3, r2
  40237c:	f023 0303 	bic.w	r3, r3, #3
  402380:	3304      	adds	r3, #4
  402382:	4a1a      	ldr	r2, [pc, #104]	; (4023ec <Reset_Handler+0x88>)
  402384:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  402386:	f852 0b04 	ldr.w	r0, [r2], #4
  40238a:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40238e:	429a      	cmp	r2, r3
  402390:	d1f9      	bne.n	402386 <Reset_Handler+0x22>
  402392:	e00f      	b.n	4023b4 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  402394:	4b14      	ldr	r3, [pc, #80]	; (4023e8 <Reset_Handler+0x84>)
  402396:	4a15      	ldr	r2, [pc, #84]	; (4023ec <Reset_Handler+0x88>)
  402398:	429a      	cmp	r2, r3
  40239a:	d20b      	bcs.n	4023b4 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40239c:	4b14      	ldr	r3, [pc, #80]	; (4023f0 <Reset_Handler+0x8c>)
  40239e:	4a12      	ldr	r2, [pc, #72]	; (4023e8 <Reset_Handler+0x84>)
  4023a0:	1a9a      	subs	r2, r3, r2
  4023a2:	4814      	ldr	r0, [pc, #80]	; (4023f4 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4023a4:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4023a6:	b12a      	cbz	r2, 4023b4 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  4023a8:	f851 2904 	ldr.w	r2, [r1], #-4
  4023ac:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4023b0:	4281      	cmp	r1, r0
  4023b2:	d1f9      	bne.n	4023a8 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4023b4:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4023b6:	4b10      	ldr	r3, [pc, #64]	; (4023f8 <Reset_Handler+0x94>)
  4023b8:	4a10      	ldr	r2, [pc, #64]	; (4023fc <Reset_Handler+0x98>)
  4023ba:	429a      	cmp	r2, r3
  4023bc:	d20b      	bcs.n	4023d6 <Reset_Handler+0x72>
  4023be:	1d13      	adds	r3, r2, #4
  4023c0:	4a0f      	ldr	r2, [pc, #60]	; (402400 <Reset_Handler+0x9c>)
  4023c2:	1ad2      	subs	r2, r2, r3
  4023c4:	f022 0203 	bic.w	r2, r2, #3
  4023c8:	441a      	add	r2, r3
  4023ca:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4023cc:	2100      	movs	r1, #0
  4023ce:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4023d2:	429a      	cmp	r2, r3
  4023d4:	d1fb      	bne.n	4023ce <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4023d6:	4b0b      	ldr	r3, [pc, #44]	; (402404 <Reset_Handler+0xa0>)
  4023d8:	4a0b      	ldr	r2, [pc, #44]	; (402408 <Reset_Handler+0xa4>)
  4023da:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4023dc:	f000 fcae 	bl	402d3c <__libc_init_array>

	/* Branch to main function */
	main();
  4023e0:	f7fd ff88 	bl	4002f4 <main>
  4023e4:	e7fe      	b.n	4023e4 <Reset_Handler+0x80>
  4023e6:	bf00      	nop
  4023e8:	20000000 	.word	0x20000000
  4023ec:	0040853c 	.word	0x0040853c
  4023f0:	200001e4 	.word	0x200001e4
  4023f4:	00408538 	.word	0x00408538
  4023f8:	20000874 	.word	0x20000874
  4023fc:	200001e4 	.word	0x200001e4
  402400:	20000877 	.word	0x20000877
  402404:	e000ed00 	.word	0xe000ed00
  402408:	00400000 	.word	0x00400000

0040240c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40240c:	4b3d      	ldr	r3, [pc, #244]	; (402504 <SystemCoreClockUpdate+0xf8>)
  40240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402410:	f003 0303 	and.w	r3, r3, #3
  402414:	2b03      	cmp	r3, #3
  402416:	d85d      	bhi.n	4024d4 <SystemCoreClockUpdate+0xc8>
  402418:	e8df f003 	tbb	[pc, r3]
  40241c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402420:	4b39      	ldr	r3, [pc, #228]	; (402508 <SystemCoreClockUpdate+0xfc>)
  402422:	695b      	ldr	r3, [r3, #20]
  402424:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402428:	bf14      	ite	ne
  40242a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40242e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402432:	4b36      	ldr	r3, [pc, #216]	; (40250c <SystemCoreClockUpdate+0x100>)
  402434:	601a      	str	r2, [r3, #0]
  402436:	e04d      	b.n	4024d4 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402438:	4b32      	ldr	r3, [pc, #200]	; (402504 <SystemCoreClockUpdate+0xf8>)
  40243a:	6a1b      	ldr	r3, [r3, #32]
  40243c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402440:	d003      	beq.n	40244a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402442:	4a33      	ldr	r2, [pc, #204]	; (402510 <SystemCoreClockUpdate+0x104>)
  402444:	4b31      	ldr	r3, [pc, #196]	; (40250c <SystemCoreClockUpdate+0x100>)
  402446:	601a      	str	r2, [r3, #0]
  402448:	e044      	b.n	4024d4 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40244a:	4a32      	ldr	r2, [pc, #200]	; (402514 <SystemCoreClockUpdate+0x108>)
  40244c:	4b2f      	ldr	r3, [pc, #188]	; (40250c <SystemCoreClockUpdate+0x100>)
  40244e:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402450:	4b2c      	ldr	r3, [pc, #176]	; (402504 <SystemCoreClockUpdate+0xf8>)
  402452:	6a1b      	ldr	r3, [r3, #32]
  402454:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402458:	2b10      	cmp	r3, #16
  40245a:	d002      	beq.n	402462 <SystemCoreClockUpdate+0x56>
  40245c:	2b20      	cmp	r3, #32
  40245e:	d004      	beq.n	40246a <SystemCoreClockUpdate+0x5e>
  402460:	e038      	b.n	4024d4 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402462:	4a2d      	ldr	r2, [pc, #180]	; (402518 <SystemCoreClockUpdate+0x10c>)
  402464:	4b29      	ldr	r3, [pc, #164]	; (40250c <SystemCoreClockUpdate+0x100>)
  402466:	601a      	str	r2, [r3, #0]
			break;
  402468:	e034      	b.n	4024d4 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40246a:	4a29      	ldr	r2, [pc, #164]	; (402510 <SystemCoreClockUpdate+0x104>)
  40246c:	4b27      	ldr	r3, [pc, #156]	; (40250c <SystemCoreClockUpdate+0x100>)
  40246e:	601a      	str	r2, [r3, #0]
			break;
  402470:	e030      	b.n	4024d4 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402472:	4b24      	ldr	r3, [pc, #144]	; (402504 <SystemCoreClockUpdate+0xf8>)
  402474:	6a1b      	ldr	r3, [r3, #32]
  402476:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40247a:	d003      	beq.n	402484 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40247c:	4a24      	ldr	r2, [pc, #144]	; (402510 <SystemCoreClockUpdate+0x104>)
  40247e:	4b23      	ldr	r3, [pc, #140]	; (40250c <SystemCoreClockUpdate+0x100>)
  402480:	601a      	str	r2, [r3, #0]
  402482:	e012      	b.n	4024aa <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402484:	4a23      	ldr	r2, [pc, #140]	; (402514 <SystemCoreClockUpdate+0x108>)
  402486:	4b21      	ldr	r3, [pc, #132]	; (40250c <SystemCoreClockUpdate+0x100>)
  402488:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40248a:	4b1e      	ldr	r3, [pc, #120]	; (402504 <SystemCoreClockUpdate+0xf8>)
  40248c:	6a1b      	ldr	r3, [r3, #32]
  40248e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402492:	2b10      	cmp	r3, #16
  402494:	d002      	beq.n	40249c <SystemCoreClockUpdate+0x90>
  402496:	2b20      	cmp	r3, #32
  402498:	d004      	beq.n	4024a4 <SystemCoreClockUpdate+0x98>
  40249a:	e006      	b.n	4024aa <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40249c:	4a1e      	ldr	r2, [pc, #120]	; (402518 <SystemCoreClockUpdate+0x10c>)
  40249e:	4b1b      	ldr	r3, [pc, #108]	; (40250c <SystemCoreClockUpdate+0x100>)
  4024a0:	601a      	str	r2, [r3, #0]
					break;
  4024a2:	e002      	b.n	4024aa <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4024a4:	4a1a      	ldr	r2, [pc, #104]	; (402510 <SystemCoreClockUpdate+0x104>)
  4024a6:	4b19      	ldr	r3, [pc, #100]	; (40250c <SystemCoreClockUpdate+0x100>)
  4024a8:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4024aa:	4b16      	ldr	r3, [pc, #88]	; (402504 <SystemCoreClockUpdate+0xf8>)
  4024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024ae:	f003 0303 	and.w	r3, r3, #3
  4024b2:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4024b4:	4a13      	ldr	r2, [pc, #76]	; (402504 <SystemCoreClockUpdate+0xf8>)
  4024b6:	bf07      	ittee	eq
  4024b8:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4024ba:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4024bc:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4024be:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4024c0:	4812      	ldr	r0, [pc, #72]	; (40250c <SystemCoreClockUpdate+0x100>)
  4024c2:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4024c6:	6803      	ldr	r3, [r0, #0]
  4024c8:	fb01 3303 	mla	r3, r1, r3, r3
  4024cc:	b2d2      	uxtb	r2, r2
  4024ce:	fbb3 f3f2 	udiv	r3, r3, r2
  4024d2:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4024d4:	4b0b      	ldr	r3, [pc, #44]	; (402504 <SystemCoreClockUpdate+0xf8>)
  4024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024dc:	2b70      	cmp	r3, #112	; 0x70
  4024de:	d107      	bne.n	4024f0 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4024e0:	4a0a      	ldr	r2, [pc, #40]	; (40250c <SystemCoreClockUpdate+0x100>)
  4024e2:	6813      	ldr	r3, [r2, #0]
  4024e4:	490d      	ldr	r1, [pc, #52]	; (40251c <SystemCoreClockUpdate+0x110>)
  4024e6:	fba1 1303 	umull	r1, r3, r1, r3
  4024ea:	085b      	lsrs	r3, r3, #1
  4024ec:	6013      	str	r3, [r2, #0]
  4024ee:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4024f0:	4b04      	ldr	r3, [pc, #16]	; (402504 <SystemCoreClockUpdate+0xf8>)
  4024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4024f4:	4905      	ldr	r1, [pc, #20]	; (40250c <SystemCoreClockUpdate+0x100>)
  4024f6:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4024fa:	680b      	ldr	r3, [r1, #0]
  4024fc:	40d3      	lsrs	r3, r2
  4024fe:	600b      	str	r3, [r1, #0]
  402500:	4770      	bx	lr
  402502:	bf00      	nop
  402504:	400e0400 	.word	0x400e0400
  402508:	400e1410 	.word	0x400e1410
  40250c:	2000000c 	.word	0x2000000c
  402510:	00b71b00 	.word	0x00b71b00
  402514:	003d0900 	.word	0x003d0900
  402518:	007a1200 	.word	0x007a1200
  40251c:	aaaaaaab 	.word	0xaaaaaaab

00402520 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402520:	4b1a      	ldr	r3, [pc, #104]	; (40258c <system_init_flash+0x6c>)
  402522:	4298      	cmp	r0, r3
  402524:	d807      	bhi.n	402536 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402526:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  40252a:	4a19      	ldr	r2, [pc, #100]	; (402590 <system_init_flash+0x70>)
  40252c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40252e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402532:	6013      	str	r3, [r2, #0]
  402534:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402536:	4b17      	ldr	r3, [pc, #92]	; (402594 <system_init_flash+0x74>)
  402538:	4298      	cmp	r0, r3
  40253a:	d806      	bhi.n	40254a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40253c:	4b16      	ldr	r3, [pc, #88]	; (402598 <system_init_flash+0x78>)
  40253e:	4a14      	ldr	r2, [pc, #80]	; (402590 <system_init_flash+0x70>)
  402540:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402542:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402546:	6013      	str	r3, [r2, #0]
  402548:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40254a:	4b14      	ldr	r3, [pc, #80]	; (40259c <system_init_flash+0x7c>)
  40254c:	4298      	cmp	r0, r3
  40254e:	d806      	bhi.n	40255e <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402550:	4b13      	ldr	r3, [pc, #76]	; (4025a0 <system_init_flash+0x80>)
  402552:	4a0f      	ldr	r2, [pc, #60]	; (402590 <system_init_flash+0x70>)
  402554:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402556:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40255a:	6013      	str	r3, [r2, #0]
  40255c:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40255e:	4b11      	ldr	r3, [pc, #68]	; (4025a4 <system_init_flash+0x84>)
  402560:	4298      	cmp	r0, r3
  402562:	d806      	bhi.n	402572 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402564:	4b10      	ldr	r3, [pc, #64]	; (4025a8 <system_init_flash+0x88>)
  402566:	4a0a      	ldr	r2, [pc, #40]	; (402590 <system_init_flash+0x70>)
  402568:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40256a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40256e:	6013      	str	r3, [r2, #0]
  402570:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402572:	4b0e      	ldr	r3, [pc, #56]	; (4025ac <system_init_flash+0x8c>)
  402574:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402576:	bf94      	ite	ls
  402578:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40257c:	4b0c      	ldrhi	r3, [pc, #48]	; (4025b0 <system_init_flash+0x90>)
  40257e:	4a04      	ldr	r2, [pc, #16]	; (402590 <system_init_flash+0x70>)
  402580:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402582:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402586:	6013      	str	r3, [r2, #0]
  402588:	4770      	bx	lr
  40258a:	bf00      	nop
  40258c:	01312cff 	.word	0x01312cff
  402590:	400e0a00 	.word	0x400e0a00
  402594:	026259ff 	.word	0x026259ff
  402598:	04000100 	.word	0x04000100
  40259c:	039386ff 	.word	0x039386ff
  4025a0:	04000200 	.word	0x04000200
  4025a4:	04c4b3ff 	.word	0x04c4b3ff
  4025a8:	04000300 	.word	0x04000300
  4025ac:	05f5e0ff 	.word	0x05f5e0ff
  4025b0:	04000500 	.word	0x04000500

004025b4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4025b4:	4b09      	ldr	r3, [pc, #36]	; (4025dc <_sbrk+0x28>)
  4025b6:	681b      	ldr	r3, [r3, #0]
  4025b8:	b913      	cbnz	r3, 4025c0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4025ba:	4a09      	ldr	r2, [pc, #36]	; (4025e0 <_sbrk+0x2c>)
  4025bc:	4b07      	ldr	r3, [pc, #28]	; (4025dc <_sbrk+0x28>)
  4025be:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4025c0:	4b06      	ldr	r3, [pc, #24]	; (4025dc <_sbrk+0x28>)
  4025c2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4025c4:	181a      	adds	r2, r3, r0
  4025c6:	4907      	ldr	r1, [pc, #28]	; (4025e4 <_sbrk+0x30>)
  4025c8:	4291      	cmp	r1, r2
  4025ca:	db04      	blt.n	4025d6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4025cc:	4610      	mov	r0, r2
  4025ce:	4a03      	ldr	r2, [pc, #12]	; (4025dc <_sbrk+0x28>)
  4025d0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4025d2:	4618      	mov	r0, r3
  4025d4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4025d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4025da:	4770      	bx	lr
  4025dc:	200004ec 	.word	0x200004ec
  4025e0:	20003878 	.word	0x20003878
  4025e4:	20027ffc 	.word	0x20027ffc

004025e8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4025e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4025ec:	4770      	bx	lr
  4025ee:	bf00      	nop

004025f0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4025f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4025f4:	604b      	str	r3, [r1, #4]

	return 0;
}
  4025f6:	2000      	movs	r0, #0
  4025f8:	4770      	bx	lr
  4025fa:	bf00      	nop

004025fc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4025fc:	2001      	movs	r0, #1
  4025fe:	4770      	bx	lr

00402600 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402600:	2000      	movs	r0, #0
  402602:	4770      	bx	lr

00402604 <atan2>:
  402604:	f000 b85c 	b.w	4026c0 <__ieee754_atan2>

00402608 <sqrt>:
  402608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40260c:	b08b      	sub	sp, #44	; 0x2c
  40260e:	4604      	mov	r4, r0
  402610:	460d      	mov	r5, r1
  402612:	f000 f91f 	bl	402854 <__ieee754_sqrt>
  402616:	4b28      	ldr	r3, [pc, #160]	; (4026b8 <sqrt+0xb0>)
  402618:	f993 a000 	ldrsb.w	sl, [r3]
  40261c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
  402620:	4606      	mov	r6, r0
  402622:	460f      	mov	r7, r1
  402624:	d012      	beq.n	40264c <sqrt+0x44>
  402626:	4622      	mov	r2, r4
  402628:	462b      	mov	r3, r5
  40262a:	4620      	mov	r0, r4
  40262c:	4629      	mov	r1, r5
  40262e:	f004 ffe9 	bl	407604 <__aeabi_dcmpun>
  402632:	4683      	mov	fp, r0
  402634:	b950      	cbnz	r0, 40264c <sqrt+0x44>
  402636:	f04f 0800 	mov.w	r8, #0
  40263a:	f04f 0900 	mov.w	r9, #0
  40263e:	4642      	mov	r2, r8
  402640:	464b      	mov	r3, r9
  402642:	4620      	mov	r0, r4
  402644:	4629      	mov	r1, r5
  402646:	f004 ffb5 	bl	4075b4 <__aeabi_dcmplt>
  40264a:	b920      	cbnz	r0, 402656 <sqrt+0x4e>
  40264c:	4630      	mov	r0, r6
  40264e:	4639      	mov	r1, r7
  402650:	b00b      	add	sp, #44	; 0x2c
  402652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402656:	4b19      	ldr	r3, [pc, #100]	; (4026bc <sqrt+0xb4>)
  402658:	f8cd b020 	str.w	fp, [sp, #32]
  40265c:	2201      	movs	r2, #1
  40265e:	e9cd 4504 	strd	r4, r5, [sp, #16]
  402662:	e9cd 4502 	strd	r4, r5, [sp, #8]
  402666:	e88d 000c 	stmia.w	sp, {r2, r3}
  40266a:	f1ba 0f00 	cmp.w	sl, #0
  40266e:	d015      	beq.n	40269c <sqrt+0x94>
  402670:	4642      	mov	r2, r8
  402672:	464b      	mov	r3, r9
  402674:	4640      	mov	r0, r8
  402676:	4649      	mov	r1, r9
  402678:	f004 fe54 	bl	407324 <__aeabi_ddiv>
  40267c:	f1ba 0f02 	cmp.w	sl, #2
  402680:	e9cd 0106 	strd	r0, r1, [sp, #24]
  402684:	d10c      	bne.n	4026a0 <sqrt+0x98>
  402686:	f000 fb53 	bl	402d30 <__errno>
  40268a:	2321      	movs	r3, #33	; 0x21
  40268c:	6003      	str	r3, [r0, #0]
  40268e:	9b08      	ldr	r3, [sp, #32]
  402690:	b963      	cbnz	r3, 4026ac <sqrt+0xa4>
  402692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402696:	b00b      	add	sp, #44	; 0x2c
  402698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40269c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4026a0:	4668      	mov	r0, sp
  4026a2:	f000 fb3b 	bl	402d1c <matherr>
  4026a6:	2800      	cmp	r0, #0
  4026a8:	d1f1      	bne.n	40268e <sqrt+0x86>
  4026aa:	e7ec      	b.n	402686 <sqrt+0x7e>
  4026ac:	f000 fb40 	bl	402d30 <__errno>
  4026b0:	9b08      	ldr	r3, [sp, #32]
  4026b2:	6003      	str	r3, [r0, #0]
  4026b4:	e7ed      	b.n	402692 <sqrt+0x8a>
  4026b6:	bf00      	nop
  4026b8:	20000010 	.word	0x20000010
  4026bc:	004081b0 	.word	0x004081b0

004026c0 <__ieee754_atan2>:
  4026c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026c4:	4254      	negs	r4, r2
  4026c6:	4314      	orrs	r4, r2
  4026c8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  4026cc:	f8df e180 	ldr.w	lr, [pc, #384]	; 402850 <__ieee754_atan2+0x190>
  4026d0:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  4026d4:	4574      	cmp	r4, lr
  4026d6:	4606      	mov	r6, r0
  4026d8:	460d      	mov	r5, r1
  4026da:	d83e      	bhi.n	40275a <__ieee754_atan2+0x9a>
  4026dc:	4244      	negs	r4, r0
  4026de:	4304      	orrs	r4, r0
  4026e0:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  4026e4:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  4026e8:	4574      	cmp	r4, lr
  4026ea:	468a      	mov	sl, r1
  4026ec:	d835      	bhi.n	40275a <__ieee754_atan2+0x9a>
  4026ee:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  4026f2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  4026f6:	4314      	orrs	r4, r2
  4026f8:	d044      	beq.n	402784 <__ieee754_atan2+0xc4>
  4026fa:	179c      	asrs	r4, r3, #30
  4026fc:	f004 0402 	and.w	r4, r4, #2
  402700:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  402704:	ea50 010b 	orrs.w	r1, r0, fp
  402708:	d02f      	beq.n	40276a <__ieee754_atan2+0xaa>
  40270a:	ea52 0109 	orrs.w	r1, r2, r9
  40270e:	d033      	beq.n	402778 <__ieee754_atan2+0xb8>
  402710:	45f1      	cmp	r9, lr
  402712:	d046      	beq.n	4027a2 <__ieee754_atan2+0xe2>
  402714:	45f3      	cmp	fp, lr
  402716:	d02f      	beq.n	402778 <__ieee754_atan2+0xb8>
  402718:	ebc9 090b 	rsb	r9, r9, fp
  40271c:	ea4f 5929 	mov.w	r9, r9, asr #20
  402720:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  402724:	dc34      	bgt.n	402790 <__ieee754_atan2+0xd0>
  402726:	2b00      	cmp	r3, #0
  402728:	db57      	blt.n	4027da <__ieee754_atan2+0x11a>
  40272a:	4630      	mov	r0, r6
  40272c:	4629      	mov	r1, r5
  40272e:	f004 fdf9 	bl	407324 <__aeabi_ddiv>
  402732:	f000 faef 	bl	402d14 <fabs>
  402736:	f000 f94f 	bl	4029d8 <atan>
  40273a:	2c01      	cmp	r4, #1
  40273c:	d04a      	beq.n	4027d4 <__ieee754_atan2+0x114>
  40273e:	2c02      	cmp	r4, #2
  402740:	d03b      	beq.n	4027ba <__ieee754_atan2+0xfa>
  402742:	b184      	cbz	r4, 402766 <__ieee754_atan2+0xa6>
  402744:	a332      	add	r3, pc, #200	; (adr r3, 402810 <__ieee754_atan2+0x150>)
  402746:	e9d3 2300 	ldrd	r2, r3, [r3]
  40274a:	f004 fb0d 	bl	406d68 <__aeabi_dsub>
  40274e:	a332      	add	r3, pc, #200	; (adr r3, 402818 <__ieee754_atan2+0x158>)
  402750:	e9d3 2300 	ldrd	r2, r3, [r3]
  402754:	f004 fb08 	bl	406d68 <__aeabi_dsub>
  402758:	e005      	b.n	402766 <__ieee754_atan2+0xa6>
  40275a:	4610      	mov	r0, r2
  40275c:	4619      	mov	r1, r3
  40275e:	4632      	mov	r2, r6
  402760:	462b      	mov	r3, r5
  402762:	f004 fb03 	bl	406d6c <__adddf3>
  402766:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40276a:	2c02      	cmp	r4, #2
  40276c:	d014      	beq.n	402798 <__ieee754_atan2+0xd8>
  40276e:	2c03      	cmp	r4, #3
  402770:	d10c      	bne.n	40278c <__ieee754_atan2+0xcc>
  402772:	482d      	ldr	r0, [pc, #180]	; (402828 <__ieee754_atan2+0x168>)
  402774:	492d      	ldr	r1, [pc, #180]	; (40282c <__ieee754_atan2+0x16c>)
  402776:	e7f6      	b.n	402766 <__ieee754_atan2+0xa6>
  402778:	f1ba 0f00 	cmp.w	sl, #0
  40277c:	482a      	ldr	r0, [pc, #168]	; (402828 <__ieee754_atan2+0x168>)
  40277e:	db0e      	blt.n	40279e <__ieee754_atan2+0xde>
  402780:	492b      	ldr	r1, [pc, #172]	; (402830 <__ieee754_atan2+0x170>)
  402782:	e7f0      	b.n	402766 <__ieee754_atan2+0xa6>
  402784:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402788:	f000 b926 	b.w	4029d8 <atan>
  40278c:	4629      	mov	r1, r5
  40278e:	e7ea      	b.n	402766 <__ieee754_atan2+0xa6>
  402790:	a123      	add	r1, pc, #140	; (adr r1, 402820 <__ieee754_atan2+0x160>)
  402792:	e9d1 0100 	ldrd	r0, r1, [r1]
  402796:	e7d0      	b.n	40273a <__ieee754_atan2+0x7a>
  402798:	4823      	ldr	r0, [pc, #140]	; (402828 <__ieee754_atan2+0x168>)
  40279a:	4926      	ldr	r1, [pc, #152]	; (402834 <__ieee754_atan2+0x174>)
  40279c:	e7e3      	b.n	402766 <__ieee754_atan2+0xa6>
  40279e:	4926      	ldr	r1, [pc, #152]	; (402838 <__ieee754_atan2+0x178>)
  4027a0:	e7e1      	b.n	402766 <__ieee754_atan2+0xa6>
  4027a2:	45cb      	cmp	fp, r9
  4027a4:	d01f      	beq.n	4027e6 <__ieee754_atan2+0x126>
  4027a6:	2c02      	cmp	r4, #2
  4027a8:	d0f6      	beq.n	402798 <__ieee754_atan2+0xd8>
  4027aa:	2c03      	cmp	r4, #3
  4027ac:	d0e1      	beq.n	402772 <__ieee754_atan2+0xb2>
  4027ae:	2c01      	cmp	r4, #1
  4027b0:	f04f 0000 	mov.w	r0, #0
  4027b4:	d020      	beq.n	4027f8 <__ieee754_atan2+0x138>
  4027b6:	4601      	mov	r1, r0
  4027b8:	e7d5      	b.n	402766 <__ieee754_atan2+0xa6>
  4027ba:	a315      	add	r3, pc, #84	; (adr r3, 402810 <__ieee754_atan2+0x150>)
  4027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4027c0:	f004 fad2 	bl	406d68 <__aeabi_dsub>
  4027c4:	4602      	mov	r2, r0
  4027c6:	460b      	mov	r3, r1
  4027c8:	a113      	add	r1, pc, #76	; (adr r1, 402818 <__ieee754_atan2+0x158>)
  4027ca:	e9d1 0100 	ldrd	r0, r1, [r1]
  4027ce:	f004 facb 	bl	406d68 <__aeabi_dsub>
  4027d2:	e7c8      	b.n	402766 <__ieee754_atan2+0xa6>
  4027d4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4027d8:	e7c5      	b.n	402766 <__ieee754_atan2+0xa6>
  4027da:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  4027de:	daa4      	bge.n	40272a <__ieee754_atan2+0x6a>
  4027e0:	2000      	movs	r0, #0
  4027e2:	2100      	movs	r1, #0
  4027e4:	e7a9      	b.n	40273a <__ieee754_atan2+0x7a>
  4027e6:	2c02      	cmp	r4, #2
  4027e8:	d00e      	beq.n	402808 <__ieee754_atan2+0x148>
  4027ea:	2c03      	cmp	r4, #3
  4027ec:	d009      	beq.n	402802 <__ieee754_atan2+0x142>
  4027ee:	2c01      	cmp	r4, #1
  4027f0:	480d      	ldr	r0, [pc, #52]	; (402828 <__ieee754_atan2+0x168>)
  4027f2:	d004      	beq.n	4027fe <__ieee754_atan2+0x13e>
  4027f4:	4911      	ldr	r1, [pc, #68]	; (40283c <__ieee754_atan2+0x17c>)
  4027f6:	e7b6      	b.n	402766 <__ieee754_atan2+0xa6>
  4027f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4027fc:	e7b3      	b.n	402766 <__ieee754_atan2+0xa6>
  4027fe:	4910      	ldr	r1, [pc, #64]	; (402840 <__ieee754_atan2+0x180>)
  402800:	e7b1      	b.n	402766 <__ieee754_atan2+0xa6>
  402802:	4810      	ldr	r0, [pc, #64]	; (402844 <__ieee754_atan2+0x184>)
  402804:	4910      	ldr	r1, [pc, #64]	; (402848 <__ieee754_atan2+0x188>)
  402806:	e7ae      	b.n	402766 <__ieee754_atan2+0xa6>
  402808:	480e      	ldr	r0, [pc, #56]	; (402844 <__ieee754_atan2+0x184>)
  40280a:	4910      	ldr	r1, [pc, #64]	; (40284c <__ieee754_atan2+0x18c>)
  40280c:	e7ab      	b.n	402766 <__ieee754_atan2+0xa6>
  40280e:	bf00      	nop
  402810:	33145c07 	.word	0x33145c07
  402814:	3ca1a626 	.word	0x3ca1a626
  402818:	54442d18 	.word	0x54442d18
  40281c:	400921fb 	.word	0x400921fb
  402820:	54442d18 	.word	0x54442d18
  402824:	3ff921fb 	.word	0x3ff921fb
  402828:	54442d18 	.word	0x54442d18
  40282c:	c00921fb 	.word	0xc00921fb
  402830:	3ff921fb 	.word	0x3ff921fb
  402834:	400921fb 	.word	0x400921fb
  402838:	bff921fb 	.word	0xbff921fb
  40283c:	3fe921fb 	.word	0x3fe921fb
  402840:	bfe921fb 	.word	0xbfe921fb
  402844:	7f3321d2 	.word	0x7f3321d2
  402848:	c002d97c 	.word	0xc002d97c
  40284c:	4002d97c 	.word	0x4002d97c
  402850:	7ff00000 	.word	0x7ff00000

00402854 <__ieee754_sqrt>:
  402854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402858:	4e5d      	ldr	r6, [pc, #372]	; (4029d0 <__ieee754_sqrt+0x17c>)
  40285a:	46b6      	mov	lr, r6
  40285c:	400e      	ands	r6, r1
  40285e:	4576      	cmp	r6, lr
  402860:	460c      	mov	r4, r1
  402862:	4605      	mov	r5, r0
  402864:	f000 8095 	beq.w	402992 <__ieee754_sqrt+0x13e>
  402868:	2900      	cmp	r1, #0
  40286a:	460b      	mov	r3, r1
  40286c:	4602      	mov	r2, r0
  40286e:	dd73      	ble.n	402958 <__ieee754_sqrt+0x104>
  402870:	150f      	asrs	r7, r1, #20
  402872:	d07e      	beq.n	402972 <__ieee754_sqrt+0x11e>
  402874:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  402878:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40287c:	07f8      	lsls	r0, r7, #31
  40287e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402882:	d464      	bmi.n	40294e <__ieee754_sqrt+0xfa>
  402884:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  402888:	2600      	movs	r6, #0
  40288a:	440b      	add	r3, r1
  40288c:	107f      	asrs	r7, r7, #1
  40288e:	0052      	lsls	r2, r2, #1
  402890:	46b6      	mov	lr, r6
  402892:	2016      	movs	r0, #22
  402894:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402898:	eb0e 0401 	add.w	r4, lr, r1
  40289c:	429c      	cmp	r4, r3
  40289e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  4028a2:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4028a6:	dc03      	bgt.n	4028b0 <__ieee754_sqrt+0x5c>
  4028a8:	1b1b      	subs	r3, r3, r4
  4028aa:	eb04 0e01 	add.w	lr, r4, r1
  4028ae:	440e      	add	r6, r1
  4028b0:	3801      	subs	r0, #1
  4028b2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  4028b6:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4028ba:	d1ed      	bne.n	402898 <__ieee754_sqrt+0x44>
  4028bc:	4684      	mov	ip, r0
  4028be:	2420      	movs	r4, #32
  4028c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4028c4:	e009      	b.n	4028da <__ieee754_sqrt+0x86>
  4028c6:	d020      	beq.n	40290a <__ieee754_sqrt+0xb6>
  4028c8:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  4028cc:	3c01      	subs	r4, #1
  4028ce:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4028d2:	442b      	add	r3, r5
  4028d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4028d8:	d020      	beq.n	40291c <__ieee754_sqrt+0xc8>
  4028da:	459e      	cmp	lr, r3
  4028dc:	eb01 050c 	add.w	r5, r1, ip
  4028e0:	daf1      	bge.n	4028c6 <__ieee754_sqrt+0x72>
  4028e2:	2d00      	cmp	r5, #0
  4028e4:	eb05 0c01 	add.w	ip, r5, r1
  4028e8:	db09      	blt.n	4028fe <__ieee754_sqrt+0xaa>
  4028ea:	46f0      	mov	r8, lr
  4028ec:	4295      	cmp	r5, r2
  4028ee:	ebce 0303 	rsb	r3, lr, r3
  4028f2:	d900      	bls.n	4028f6 <__ieee754_sqrt+0xa2>
  4028f4:	3b01      	subs	r3, #1
  4028f6:	1b52      	subs	r2, r2, r5
  4028f8:	4408      	add	r0, r1
  4028fa:	46c6      	mov	lr, r8
  4028fc:	e7e4      	b.n	4028c8 <__ieee754_sqrt+0x74>
  4028fe:	f1bc 0f00 	cmp.w	ip, #0
  402902:	dbf2      	blt.n	4028ea <__ieee754_sqrt+0x96>
  402904:	f10e 0801 	add.w	r8, lr, #1
  402908:	e7f0      	b.n	4028ec <__ieee754_sqrt+0x98>
  40290a:	4295      	cmp	r5, r2
  40290c:	d817      	bhi.n	40293e <__ieee754_sqrt+0xea>
  40290e:	2d00      	cmp	r5, #0
  402910:	eb05 0c01 	add.w	ip, r5, r1
  402914:	db47      	blt.n	4029a6 <__ieee754_sqrt+0x152>
  402916:	4698      	mov	r8, r3
  402918:	2300      	movs	r3, #0
  40291a:	e7ec      	b.n	4028f6 <__ieee754_sqrt+0xa2>
  40291c:	4313      	orrs	r3, r2
  40291e:	d110      	bne.n	402942 <__ieee754_sqrt+0xee>
  402920:	0840      	lsrs	r0, r0, #1
  402922:	1073      	asrs	r3, r6, #1
  402924:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402928:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40292c:	07f2      	lsls	r2, r6, #31
  40292e:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  402932:	bf48      	it	mi
  402934:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402938:	4649      	mov	r1, r9
  40293a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40293e:	4673      	mov	r3, lr
  402940:	e7c2      	b.n	4028c8 <__ieee754_sqrt+0x74>
  402942:	1c41      	adds	r1, r0, #1
  402944:	d033      	beq.n	4029ae <__ieee754_sqrt+0x15a>
  402946:	f000 0301 	and.w	r3, r0, #1
  40294a:	4418      	add	r0, r3
  40294c:	e7e8      	b.n	402920 <__ieee754_sqrt+0xcc>
  40294e:	005b      	lsls	r3, r3, #1
  402950:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  402954:	0052      	lsls	r2, r2, #1
  402956:	e795      	b.n	402884 <__ieee754_sqrt+0x30>
  402958:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40295c:	4306      	orrs	r6, r0
  40295e:	d0ec      	beq.n	40293a <__ieee754_sqrt+0xe6>
  402960:	bb69      	cbnz	r1, 4029be <__ieee754_sqrt+0x16a>
  402962:	460f      	mov	r7, r1
  402964:	0ad3      	lsrs	r3, r2, #11
  402966:	3f15      	subs	r7, #21
  402968:	0552      	lsls	r2, r2, #21
  40296a:	2b00      	cmp	r3, #0
  40296c:	d0fa      	beq.n	402964 <__ieee754_sqrt+0x110>
  40296e:	02dd      	lsls	r5, r3, #11
  402970:	d420      	bmi.n	4029b4 <__ieee754_sqrt+0x160>
  402972:	2100      	movs	r1, #0
  402974:	e000      	b.n	402978 <__ieee754_sqrt+0x124>
  402976:	4601      	mov	r1, r0
  402978:	005b      	lsls	r3, r3, #1
  40297a:	02dc      	lsls	r4, r3, #11
  40297c:	f101 0001 	add.w	r0, r1, #1
  402980:	d5f9      	bpl.n	402976 <__ieee754_sqrt+0x122>
  402982:	f1c0 0420 	rsb	r4, r0, #32
  402986:	fa22 f404 	lsr.w	r4, r2, r4
  40298a:	4323      	orrs	r3, r4
  40298c:	1a7f      	subs	r7, r7, r1
  40298e:	4082      	lsls	r2, r0
  402990:	e770      	b.n	402874 <__ieee754_sqrt+0x20>
  402992:	4602      	mov	r2, r0
  402994:	460b      	mov	r3, r1
  402996:	f004 fb9b 	bl	4070d0 <__aeabi_dmul>
  40299a:	462a      	mov	r2, r5
  40299c:	4623      	mov	r3, r4
  40299e:	f004 f9e5 	bl	406d6c <__adddf3>
  4029a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4029a6:	f1bc 0f00 	cmp.w	ip, #0
  4029aa:	daab      	bge.n	402904 <__ieee754_sqrt+0xb0>
  4029ac:	e7b3      	b.n	402916 <__ieee754_sqrt+0xc2>
  4029ae:	3601      	adds	r6, #1
  4029b0:	4620      	mov	r0, r4
  4029b2:	e7b6      	b.n	402922 <__ieee754_sqrt+0xce>
  4029b4:	2420      	movs	r4, #32
  4029b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  4029ba:	2000      	movs	r0, #0
  4029bc:	e7e3      	b.n	402986 <__ieee754_sqrt+0x132>
  4029be:	4602      	mov	r2, r0
  4029c0:	460b      	mov	r3, r1
  4029c2:	f004 f9d1 	bl	406d68 <__aeabi_dsub>
  4029c6:	4602      	mov	r2, r0
  4029c8:	460b      	mov	r3, r1
  4029ca:	f004 fcab 	bl	407324 <__aeabi_ddiv>
  4029ce:	e7b4      	b.n	40293a <__ieee754_sqrt+0xe6>
  4029d0:	7ff00000 	.word	0x7ff00000
  4029d4:	00000000 	.word	0x00000000

004029d8 <atan>:
  4029d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029dc:	4bc0      	ldr	r3, [pc, #768]	; (402ce0 <atan+0x308>)
  4029de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4029e2:	429e      	cmp	r6, r3
  4029e4:	460d      	mov	r5, r1
  4029e6:	468a      	mov	sl, r1
  4029e8:	4604      	mov	r4, r0
  4029ea:	dd0f      	ble.n	402a0c <atan+0x34>
  4029ec:	4bbd      	ldr	r3, [pc, #756]	; (402ce4 <atan+0x30c>)
  4029ee:	429e      	cmp	r6, r3
  4029f0:	f300 80b2 	bgt.w	402b58 <atan+0x180>
  4029f4:	f000 80ad 	beq.w	402b52 <atan+0x17a>
  4029f8:	4bbb      	ldr	r3, [pc, #748]	; (402ce8 <atan+0x310>)
  4029fa:	49bc      	ldr	r1, [pc, #752]	; (402cec <atan+0x314>)
  4029fc:	4cbc      	ldr	r4, [pc, #752]	; (402cf0 <atan+0x318>)
  4029fe:	f1ba 0f00 	cmp.w	sl, #0
  402a02:	bfc8      	it	gt
  402a04:	4619      	movgt	r1, r3
  402a06:	4620      	mov	r0, r4
  402a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a0c:	4bb9      	ldr	r3, [pc, #740]	; (402cf4 <atan+0x31c>)
  402a0e:	429e      	cmp	r6, r3
  402a10:	f300 80bc 	bgt.w	402b8c <atan+0x1b4>
  402a14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  402a18:	429e      	cmp	r6, r3
  402a1a:	f340 80a7 	ble.w	402b6c <atan+0x194>
  402a1e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  402a22:	4622      	mov	r2, r4
  402a24:	462b      	mov	r3, r5
  402a26:	4620      	mov	r0, r4
  402a28:	4629      	mov	r1, r5
  402a2a:	f004 fb51 	bl	4070d0 <__aeabi_dmul>
  402a2e:	4602      	mov	r2, r0
  402a30:	460b      	mov	r3, r1
  402a32:	4680      	mov	r8, r0
  402a34:	4689      	mov	r9, r1
  402a36:	f004 fb4b 	bl	4070d0 <__aeabi_dmul>
  402a3a:	a391      	add	r3, pc, #580	; (adr r3, 402c80 <atan+0x2a8>)
  402a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a40:	4606      	mov	r6, r0
  402a42:	460f      	mov	r7, r1
  402a44:	f004 fb44 	bl	4070d0 <__aeabi_dmul>
  402a48:	a38f      	add	r3, pc, #572	; (adr r3, 402c88 <atan+0x2b0>)
  402a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a4e:	f004 f98d 	bl	406d6c <__adddf3>
  402a52:	4632      	mov	r2, r6
  402a54:	463b      	mov	r3, r7
  402a56:	f004 fb3b 	bl	4070d0 <__aeabi_dmul>
  402a5a:	a38d      	add	r3, pc, #564	; (adr r3, 402c90 <atan+0x2b8>)
  402a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a60:	f004 f984 	bl	406d6c <__adddf3>
  402a64:	4632      	mov	r2, r6
  402a66:	463b      	mov	r3, r7
  402a68:	f004 fb32 	bl	4070d0 <__aeabi_dmul>
  402a6c:	a38a      	add	r3, pc, #552	; (adr r3, 402c98 <atan+0x2c0>)
  402a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a72:	f004 f97b 	bl	406d6c <__adddf3>
  402a76:	4632      	mov	r2, r6
  402a78:	463b      	mov	r3, r7
  402a7a:	f004 fb29 	bl	4070d0 <__aeabi_dmul>
  402a7e:	a388      	add	r3, pc, #544	; (adr r3, 402ca0 <atan+0x2c8>)
  402a80:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a84:	f004 f972 	bl	406d6c <__adddf3>
  402a88:	4632      	mov	r2, r6
  402a8a:	463b      	mov	r3, r7
  402a8c:	f004 fb20 	bl	4070d0 <__aeabi_dmul>
  402a90:	a385      	add	r3, pc, #532	; (adr r3, 402ca8 <atan+0x2d0>)
  402a92:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a96:	f004 f969 	bl	406d6c <__adddf3>
  402a9a:	4642      	mov	r2, r8
  402a9c:	464b      	mov	r3, r9
  402a9e:	f004 fb17 	bl	4070d0 <__aeabi_dmul>
  402aa2:	a383      	add	r3, pc, #524	; (adr r3, 402cb0 <atan+0x2d8>)
  402aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
  402aa8:	4680      	mov	r8, r0
  402aaa:	4689      	mov	r9, r1
  402aac:	4630      	mov	r0, r6
  402aae:	4639      	mov	r1, r7
  402ab0:	f004 fb0e 	bl	4070d0 <__aeabi_dmul>
  402ab4:	a380      	add	r3, pc, #512	; (adr r3, 402cb8 <atan+0x2e0>)
  402ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
  402aba:	f004 f955 	bl	406d68 <__aeabi_dsub>
  402abe:	4632      	mov	r2, r6
  402ac0:	463b      	mov	r3, r7
  402ac2:	f004 fb05 	bl	4070d0 <__aeabi_dmul>
  402ac6:	a37e      	add	r3, pc, #504	; (adr r3, 402cc0 <atan+0x2e8>)
  402ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
  402acc:	f004 f94c 	bl	406d68 <__aeabi_dsub>
  402ad0:	4632      	mov	r2, r6
  402ad2:	463b      	mov	r3, r7
  402ad4:	f004 fafc 	bl	4070d0 <__aeabi_dmul>
  402ad8:	a37b      	add	r3, pc, #492	; (adr r3, 402cc8 <atan+0x2f0>)
  402ada:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ade:	f004 f943 	bl	406d68 <__aeabi_dsub>
  402ae2:	4632      	mov	r2, r6
  402ae4:	463b      	mov	r3, r7
  402ae6:	f004 faf3 	bl	4070d0 <__aeabi_dmul>
  402aea:	a379      	add	r3, pc, #484	; (adr r3, 402cd0 <atan+0x2f8>)
  402aec:	e9d3 2300 	ldrd	r2, r3, [r3]
  402af0:	f004 f93a 	bl	406d68 <__aeabi_dsub>
  402af4:	4632      	mov	r2, r6
  402af6:	463b      	mov	r3, r7
  402af8:	f004 faea 	bl	4070d0 <__aeabi_dmul>
  402afc:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
  402b00:	4602      	mov	r2, r0
  402b02:	460b      	mov	r3, r1
  402b04:	d069      	beq.n	402bda <atan+0x202>
  402b06:	4640      	mov	r0, r8
  402b08:	4649      	mov	r1, r9
  402b0a:	f004 f92f 	bl	406d6c <__adddf3>
  402b0e:	4622      	mov	r2, r4
  402b10:	462b      	mov	r3, r5
  402b12:	f004 fadd 	bl	4070d0 <__aeabi_dmul>
  402b16:	4e78      	ldr	r6, [pc, #480]	; (402cf8 <atan+0x320>)
  402b18:	4b78      	ldr	r3, [pc, #480]	; (402cfc <atan+0x324>)
  402b1a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  402b1e:	445e      	add	r6, fp
  402b20:	449b      	add	fp, r3
  402b22:	e9db 2300 	ldrd	r2, r3, [fp]
  402b26:	f004 f91f 	bl	406d68 <__aeabi_dsub>
  402b2a:	4622      	mov	r2, r4
  402b2c:	462b      	mov	r3, r5
  402b2e:	f004 f91b 	bl	406d68 <__aeabi_dsub>
  402b32:	4602      	mov	r2, r0
  402b34:	460b      	mov	r3, r1
  402b36:	e9d6 0100 	ldrd	r0, r1, [r6]
  402b3a:	f004 f915 	bl	406d68 <__aeabi_dsub>
  402b3e:	f1ba 0f00 	cmp.w	sl, #0
  402b42:	4604      	mov	r4, r0
  402b44:	f6bf af5f 	bge.w	402a06 <atan+0x2e>
  402b48:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402b4c:	4620      	mov	r0, r4
  402b4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b52:	2800      	cmp	r0, #0
  402b54:	f43f af50 	beq.w	4029f8 <atan+0x20>
  402b58:	4622      	mov	r2, r4
  402b5a:	4620      	mov	r0, r4
  402b5c:	462b      	mov	r3, r5
  402b5e:	4629      	mov	r1, r5
  402b60:	f004 f904 	bl	406d6c <__adddf3>
  402b64:	4604      	mov	r4, r0
  402b66:	4620      	mov	r0, r4
  402b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b6c:	a35a      	add	r3, pc, #360	; (adr r3, 402cd8 <atan+0x300>)
  402b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402b72:	f004 f8fb 	bl	406d6c <__adddf3>
  402b76:	2200      	movs	r2, #0
  402b78:	4b61      	ldr	r3, [pc, #388]	; (402d00 <atan+0x328>)
  402b7a:	f004 fd39 	bl	4075f0 <__aeabi_dcmpgt>
  402b7e:	2800      	cmp	r0, #0
  402b80:	f43f af4d 	beq.w	402a1e <atan+0x46>
  402b84:	4629      	mov	r1, r5
  402b86:	4620      	mov	r0, r4
  402b88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b8c:	f000 f8c2 	bl	402d14 <fabs>
  402b90:	4b5c      	ldr	r3, [pc, #368]	; (402d04 <atan+0x32c>)
  402b92:	429e      	cmp	r6, r3
  402b94:	4604      	mov	r4, r0
  402b96:	460d      	mov	r5, r1
  402b98:	dc2f      	bgt.n	402bfa <atan+0x222>
  402b9a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  402b9e:	429e      	cmp	r6, r3
  402ba0:	dc54      	bgt.n	402c4c <atan+0x274>
  402ba2:	4602      	mov	r2, r0
  402ba4:	460b      	mov	r3, r1
  402ba6:	f004 f8e1 	bl	406d6c <__adddf3>
  402baa:	2200      	movs	r2, #0
  402bac:	4b54      	ldr	r3, [pc, #336]	; (402d00 <atan+0x328>)
  402bae:	f004 f8db 	bl	406d68 <__aeabi_dsub>
  402bb2:	2200      	movs	r2, #0
  402bb4:	4606      	mov	r6, r0
  402bb6:	460f      	mov	r7, r1
  402bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402bbc:	4620      	mov	r0, r4
  402bbe:	4629      	mov	r1, r5
  402bc0:	f004 f8d4 	bl	406d6c <__adddf3>
  402bc4:	4602      	mov	r2, r0
  402bc6:	460b      	mov	r3, r1
  402bc8:	4630      	mov	r0, r6
  402bca:	4639      	mov	r1, r7
  402bcc:	f004 fbaa 	bl	407324 <__aeabi_ddiv>
  402bd0:	f04f 0b00 	mov.w	fp, #0
  402bd4:	4604      	mov	r4, r0
  402bd6:	460d      	mov	r5, r1
  402bd8:	e723      	b.n	402a22 <atan+0x4a>
  402bda:	4640      	mov	r0, r8
  402bdc:	4649      	mov	r1, r9
  402bde:	f004 f8c5 	bl	406d6c <__adddf3>
  402be2:	4622      	mov	r2, r4
  402be4:	462b      	mov	r3, r5
  402be6:	f004 fa73 	bl	4070d0 <__aeabi_dmul>
  402bea:	4602      	mov	r2, r0
  402bec:	460b      	mov	r3, r1
  402bee:	4620      	mov	r0, r4
  402bf0:	4629      	mov	r1, r5
  402bf2:	f004 f8b9 	bl	406d68 <__aeabi_dsub>
  402bf6:	4604      	mov	r4, r0
  402bf8:	e705      	b.n	402a06 <atan+0x2e>
  402bfa:	4b43      	ldr	r3, [pc, #268]	; (402d08 <atan+0x330>)
  402bfc:	429e      	cmp	r6, r3
  402bfe:	dc1a      	bgt.n	402c36 <atan+0x25e>
  402c00:	2200      	movs	r2, #0
  402c02:	4b42      	ldr	r3, [pc, #264]	; (402d0c <atan+0x334>)
  402c04:	f004 f8b0 	bl	406d68 <__aeabi_dsub>
  402c08:	2200      	movs	r2, #0
  402c0a:	4606      	mov	r6, r0
  402c0c:	460f      	mov	r7, r1
  402c0e:	4b3f      	ldr	r3, [pc, #252]	; (402d0c <atan+0x334>)
  402c10:	4620      	mov	r0, r4
  402c12:	4629      	mov	r1, r5
  402c14:	f004 fa5c 	bl	4070d0 <__aeabi_dmul>
  402c18:	2200      	movs	r2, #0
  402c1a:	4b39      	ldr	r3, [pc, #228]	; (402d00 <atan+0x328>)
  402c1c:	f004 f8a6 	bl	406d6c <__adddf3>
  402c20:	4602      	mov	r2, r0
  402c22:	460b      	mov	r3, r1
  402c24:	4630      	mov	r0, r6
  402c26:	4639      	mov	r1, r7
  402c28:	f004 fb7c 	bl	407324 <__aeabi_ddiv>
  402c2c:	f04f 0b02 	mov.w	fp, #2
  402c30:	4604      	mov	r4, r0
  402c32:	460d      	mov	r5, r1
  402c34:	e6f5      	b.n	402a22 <atan+0x4a>
  402c36:	4602      	mov	r2, r0
  402c38:	460b      	mov	r3, r1
  402c3a:	2000      	movs	r0, #0
  402c3c:	4934      	ldr	r1, [pc, #208]	; (402d10 <atan+0x338>)
  402c3e:	f004 fb71 	bl	407324 <__aeabi_ddiv>
  402c42:	f04f 0b03 	mov.w	fp, #3
  402c46:	4604      	mov	r4, r0
  402c48:	460d      	mov	r5, r1
  402c4a:	e6ea      	b.n	402a22 <atan+0x4a>
  402c4c:	2200      	movs	r2, #0
  402c4e:	4b2c      	ldr	r3, [pc, #176]	; (402d00 <atan+0x328>)
  402c50:	f004 f88a 	bl	406d68 <__aeabi_dsub>
  402c54:	2200      	movs	r2, #0
  402c56:	4606      	mov	r6, r0
  402c58:	460f      	mov	r7, r1
  402c5a:	4b29      	ldr	r3, [pc, #164]	; (402d00 <atan+0x328>)
  402c5c:	4620      	mov	r0, r4
  402c5e:	4629      	mov	r1, r5
  402c60:	f004 f884 	bl	406d6c <__adddf3>
  402c64:	4602      	mov	r2, r0
  402c66:	460b      	mov	r3, r1
  402c68:	4630      	mov	r0, r6
  402c6a:	4639      	mov	r1, r7
  402c6c:	f004 fb5a 	bl	407324 <__aeabi_ddiv>
  402c70:	f04f 0b01 	mov.w	fp, #1
  402c74:	4604      	mov	r4, r0
  402c76:	460d      	mov	r5, r1
  402c78:	e6d3      	b.n	402a22 <atan+0x4a>
  402c7a:	bf00      	nop
  402c7c:	f3af 8000 	nop.w
  402c80:	e322da11 	.word	0xe322da11
  402c84:	3f90ad3a 	.word	0x3f90ad3a
  402c88:	24760deb 	.word	0x24760deb
  402c8c:	3fa97b4b 	.word	0x3fa97b4b
  402c90:	a0d03d51 	.word	0xa0d03d51
  402c94:	3fb10d66 	.word	0x3fb10d66
  402c98:	c54c206e 	.word	0xc54c206e
  402c9c:	3fb745cd 	.word	0x3fb745cd
  402ca0:	920083ff 	.word	0x920083ff
  402ca4:	3fc24924 	.word	0x3fc24924
  402ca8:	5555550d 	.word	0x5555550d
  402cac:	3fd55555 	.word	0x3fd55555
  402cb0:	2c6a6c2f 	.word	0x2c6a6c2f
  402cb4:	bfa2b444 	.word	0xbfa2b444
  402cb8:	52defd9a 	.word	0x52defd9a
  402cbc:	3fadde2d 	.word	0x3fadde2d
  402cc0:	af749a6d 	.word	0xaf749a6d
  402cc4:	3fb3b0f2 	.word	0x3fb3b0f2
  402cc8:	fe231671 	.word	0xfe231671
  402ccc:	3fbc71c6 	.word	0x3fbc71c6
  402cd0:	9998ebc4 	.word	0x9998ebc4
  402cd4:	3fc99999 	.word	0x3fc99999
  402cd8:	8800759c 	.word	0x8800759c
  402cdc:	7e37e43c 	.word	0x7e37e43c
  402ce0:	440fffff 	.word	0x440fffff
  402ce4:	7ff00000 	.word	0x7ff00000
  402ce8:	3ff921fb 	.word	0x3ff921fb
  402cec:	bff921fb 	.word	0xbff921fb
  402cf0:	54442d18 	.word	0x54442d18
  402cf4:	3fdbffff 	.word	0x3fdbffff
  402cf8:	004081d8 	.word	0x004081d8
  402cfc:	004081b8 	.word	0x004081b8
  402d00:	3ff00000 	.word	0x3ff00000
  402d04:	3ff2ffff 	.word	0x3ff2ffff
  402d08:	40037fff 	.word	0x40037fff
  402d0c:	3ff80000 	.word	0x3ff80000
  402d10:	bff00000 	.word	0xbff00000

00402d14 <fabs>:
  402d14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402d18:	4770      	bx	lr
  402d1a:	bf00      	nop

00402d1c <matherr>:
  402d1c:	2000      	movs	r0, #0
  402d1e:	4770      	bx	lr

00402d20 <atof>:
  402d20:	2100      	movs	r1, #0
  402d22:	f001 bc11 	b.w	404548 <strtod>

00402d26 <atoi>:
  402d26:	220a      	movs	r2, #10
  402d28:	2100      	movs	r1, #0
  402d2a:	f001 bcd5 	b.w	4046d8 <strtol>
	...

00402d30 <__errno>:
  402d30:	4b01      	ldr	r3, [pc, #4]	; (402d38 <__errno+0x8>)
  402d32:	6818      	ldr	r0, [r3, #0]
  402d34:	4770      	bx	lr
  402d36:	bf00      	nop
  402d38:	20000074 	.word	0x20000074

00402d3c <__libc_init_array>:
  402d3c:	b570      	push	{r4, r5, r6, lr}
  402d3e:	4b0e      	ldr	r3, [pc, #56]	; (402d78 <__libc_init_array+0x3c>)
  402d40:	4c0e      	ldr	r4, [pc, #56]	; (402d7c <__libc_init_array+0x40>)
  402d42:	1ae4      	subs	r4, r4, r3
  402d44:	10a4      	asrs	r4, r4, #2
  402d46:	2500      	movs	r5, #0
  402d48:	461e      	mov	r6, r3
  402d4a:	42a5      	cmp	r5, r4
  402d4c:	d004      	beq.n	402d58 <__libc_init_array+0x1c>
  402d4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402d52:	4798      	blx	r3
  402d54:	3501      	adds	r5, #1
  402d56:	e7f8      	b.n	402d4a <__libc_init_array+0xe>
  402d58:	f005 fbda 	bl	408510 <_init>
  402d5c:	4c08      	ldr	r4, [pc, #32]	; (402d80 <__libc_init_array+0x44>)
  402d5e:	4b09      	ldr	r3, [pc, #36]	; (402d84 <__libc_init_array+0x48>)
  402d60:	1ae4      	subs	r4, r4, r3
  402d62:	10a4      	asrs	r4, r4, #2
  402d64:	2500      	movs	r5, #0
  402d66:	461e      	mov	r6, r3
  402d68:	42a5      	cmp	r5, r4
  402d6a:	d004      	beq.n	402d76 <__libc_init_array+0x3a>
  402d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402d70:	4798      	blx	r3
  402d72:	3501      	adds	r5, #1
  402d74:	e7f8      	b.n	402d68 <__libc_init_array+0x2c>
  402d76:	bd70      	pop	{r4, r5, r6, pc}
  402d78:	0040851c 	.word	0x0040851c
  402d7c:	0040851c 	.word	0x0040851c
  402d80:	00408520 	.word	0x00408520
  402d84:	0040851c 	.word	0x0040851c

00402d88 <memcpy>:
  402d88:	b510      	push	{r4, lr}
  402d8a:	1e43      	subs	r3, r0, #1
  402d8c:	440a      	add	r2, r1
  402d8e:	4291      	cmp	r1, r2
  402d90:	d004      	beq.n	402d9c <memcpy+0x14>
  402d92:	f811 4b01 	ldrb.w	r4, [r1], #1
  402d96:	f803 4f01 	strb.w	r4, [r3, #1]!
  402d9a:	e7f8      	b.n	402d8e <memcpy+0x6>
  402d9c:	bd10      	pop	{r4, pc}

00402d9e <memset>:
  402d9e:	4402      	add	r2, r0
  402da0:	4603      	mov	r3, r0
  402da2:	4293      	cmp	r3, r2
  402da4:	d002      	beq.n	402dac <memset+0xe>
  402da6:	f803 1b01 	strb.w	r1, [r3], #1
  402daa:	e7fa      	b.n	402da2 <memset+0x4>
  402dac:	4770      	bx	lr

00402dae <__cvt>:
  402dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402db2:	b088      	sub	sp, #32
  402db4:	2b00      	cmp	r3, #0
  402db6:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402db8:	9912      	ldr	r1, [sp, #72]	; 0x48
  402dba:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402dbc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402dc0:	461e      	mov	r6, r3
  402dc2:	f027 0720 	bic.w	r7, r7, #32
  402dc6:	bfbb      	ittet	lt
  402dc8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402dcc:	461e      	movlt	r6, r3
  402dce:	2300      	movge	r3, #0
  402dd0:	232d      	movlt	r3, #45	; 0x2d
  402dd2:	2f46      	cmp	r7, #70	; 0x46
  402dd4:	4614      	mov	r4, r2
  402dd6:	700b      	strb	r3, [r1, #0]
  402dd8:	d003      	beq.n	402de2 <__cvt+0x34>
  402dda:	2f45      	cmp	r7, #69	; 0x45
  402ddc:	d103      	bne.n	402de6 <__cvt+0x38>
  402dde:	3501      	adds	r5, #1
  402de0:	e001      	b.n	402de6 <__cvt+0x38>
  402de2:	2303      	movs	r3, #3
  402de4:	e000      	b.n	402de8 <__cvt+0x3a>
  402de6:	2302      	movs	r3, #2
  402de8:	aa07      	add	r2, sp, #28
  402dea:	9204      	str	r2, [sp, #16]
  402dec:	aa06      	add	r2, sp, #24
  402dee:	9203      	str	r2, [sp, #12]
  402df0:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402df4:	4622      	mov	r2, r4
  402df6:	4633      	mov	r3, r6
  402df8:	f001 fdd6 	bl	4049a8 <_dtoa_r>
  402dfc:	2f47      	cmp	r7, #71	; 0x47
  402dfe:	4680      	mov	r8, r0
  402e00:	d102      	bne.n	402e08 <__cvt+0x5a>
  402e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402e04:	07db      	lsls	r3, r3, #31
  402e06:	d528      	bpl.n	402e5a <__cvt+0xac>
  402e08:	2f46      	cmp	r7, #70	; 0x46
  402e0a:	eb08 0905 	add.w	r9, r8, r5
  402e0e:	d111      	bne.n	402e34 <__cvt+0x86>
  402e10:	f898 3000 	ldrb.w	r3, [r8]
  402e14:	2b30      	cmp	r3, #48	; 0x30
  402e16:	d10a      	bne.n	402e2e <__cvt+0x80>
  402e18:	2200      	movs	r2, #0
  402e1a:	2300      	movs	r3, #0
  402e1c:	4620      	mov	r0, r4
  402e1e:	4631      	mov	r1, r6
  402e20:	f004 fbbe 	bl	4075a0 <__aeabi_dcmpeq>
  402e24:	b918      	cbnz	r0, 402e2e <__cvt+0x80>
  402e26:	f1c5 0501 	rsb	r5, r5, #1
  402e2a:	f8ca 5000 	str.w	r5, [sl]
  402e2e:	f8da 3000 	ldr.w	r3, [sl]
  402e32:	4499      	add	r9, r3
  402e34:	2200      	movs	r2, #0
  402e36:	2300      	movs	r3, #0
  402e38:	4620      	mov	r0, r4
  402e3a:	4631      	mov	r1, r6
  402e3c:	f004 fbb0 	bl	4075a0 <__aeabi_dcmpeq>
  402e40:	b908      	cbnz	r0, 402e46 <__cvt+0x98>
  402e42:	2230      	movs	r2, #48	; 0x30
  402e44:	e002      	b.n	402e4c <__cvt+0x9e>
  402e46:	f8cd 901c 	str.w	r9, [sp, #28]
  402e4a:	e006      	b.n	402e5a <__cvt+0xac>
  402e4c:	9b07      	ldr	r3, [sp, #28]
  402e4e:	4599      	cmp	r9, r3
  402e50:	d903      	bls.n	402e5a <__cvt+0xac>
  402e52:	1c59      	adds	r1, r3, #1
  402e54:	9107      	str	r1, [sp, #28]
  402e56:	701a      	strb	r2, [r3, #0]
  402e58:	e7f8      	b.n	402e4c <__cvt+0x9e>
  402e5a:	9b07      	ldr	r3, [sp, #28]
  402e5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402e5e:	ebc8 0303 	rsb	r3, r8, r3
  402e62:	4640      	mov	r0, r8
  402e64:	6013      	str	r3, [r2, #0]
  402e66:	b008      	add	sp, #32
  402e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402e6c <__exponent>:
  402e6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  402e6e:	4603      	mov	r3, r0
  402e70:	2900      	cmp	r1, #0
  402e72:	bfb8      	it	lt
  402e74:	4249      	neglt	r1, r1
  402e76:	f803 2b02 	strb.w	r2, [r3], #2
  402e7a:	bfb4      	ite	lt
  402e7c:	222d      	movlt	r2, #45	; 0x2d
  402e7e:	222b      	movge	r2, #43	; 0x2b
  402e80:	2909      	cmp	r1, #9
  402e82:	7042      	strb	r2, [r0, #1]
  402e84:	dd19      	ble.n	402eba <__exponent+0x4e>
  402e86:	f10d 0207 	add.w	r2, sp, #7
  402e8a:	4616      	mov	r6, r2
  402e8c:	250a      	movs	r5, #10
  402e8e:	fb91 f4f5 	sdiv	r4, r1, r5
  402e92:	fb05 1114 	mls	r1, r5, r4, r1
  402e96:	3130      	adds	r1, #48	; 0x30
  402e98:	2c09      	cmp	r4, #9
  402e9a:	f802 1d01 	strb.w	r1, [r2, #-1]!
  402e9e:	4621      	mov	r1, r4
  402ea0:	dcf5      	bgt.n	402e8e <__exponent+0x22>
  402ea2:	3130      	adds	r1, #48	; 0x30
  402ea4:	1e54      	subs	r4, r2, #1
  402ea6:	f802 1c01 	strb.w	r1, [r2, #-1]
  402eaa:	42b4      	cmp	r4, r6
  402eac:	461a      	mov	r2, r3
  402eae:	d20a      	bcs.n	402ec6 <__exponent+0x5a>
  402eb0:	f814 2b01 	ldrb.w	r2, [r4], #1
  402eb4:	f803 2b01 	strb.w	r2, [r3], #1
  402eb8:	e7f7      	b.n	402eaa <__exponent+0x3e>
  402eba:	2430      	movs	r4, #48	; 0x30
  402ebc:	461a      	mov	r2, r3
  402ebe:	4421      	add	r1, r4
  402ec0:	f802 4b02 	strb.w	r4, [r2], #2
  402ec4:	7059      	strb	r1, [r3, #1]
  402ec6:	1a10      	subs	r0, r2, r0
  402ec8:	b002      	add	sp, #8
  402eca:	bd70      	pop	{r4, r5, r6, pc}

00402ecc <_printf_float>:
  402ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ed0:	b091      	sub	sp, #68	; 0x44
  402ed2:	460c      	mov	r4, r1
  402ed4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  402ed8:	4616      	mov	r6, r2
  402eda:	461f      	mov	r7, r3
  402edc:	4605      	mov	r5, r0
  402ede:	f002 ff9f 	bl	405e20 <_localeconv_r>
  402ee2:	6803      	ldr	r3, [r0, #0]
  402ee4:	9309      	str	r3, [sp, #36]	; 0x24
  402ee6:	4618      	mov	r0, r3
  402ee8:	f000 fd0e 	bl	403908 <strlen>
  402eec:	2300      	movs	r3, #0
  402eee:	930e      	str	r3, [sp, #56]	; 0x38
  402ef0:	f8d8 3000 	ldr.w	r3, [r8]
  402ef4:	900a      	str	r0, [sp, #40]	; 0x28
  402ef6:	3307      	adds	r3, #7
  402ef8:	f023 0307 	bic.w	r3, r3, #7
  402efc:	f103 0208 	add.w	r2, r3, #8
  402f00:	f894 9018 	ldrb.w	r9, [r4, #24]
  402f04:	f8d4 b000 	ldr.w	fp, [r4]
  402f08:	f8c8 2000 	str.w	r2, [r8]
  402f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402f14:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  402f18:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  402f1c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  402f20:	930b      	str	r3, [sp, #44]	; 0x2c
  402f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402f26:	4ba7      	ldr	r3, [pc, #668]	; (4031c4 <_printf_float+0x2f8>)
  402f28:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f2a:	4640      	mov	r0, r8
  402f2c:	f004 fb6a 	bl	407604 <__aeabi_dcmpun>
  402f30:	b9a0      	cbnz	r0, 402f5c <_printf_float+0x90>
  402f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402f36:	4ba3      	ldr	r3, [pc, #652]	; (4031c4 <_printf_float+0x2f8>)
  402f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f3a:	4640      	mov	r0, r8
  402f3c:	f004 fb44 	bl	4075c8 <__aeabi_dcmple>
  402f40:	b960      	cbnz	r0, 402f5c <_printf_float+0x90>
  402f42:	2200      	movs	r2, #0
  402f44:	2300      	movs	r3, #0
  402f46:	4640      	mov	r0, r8
  402f48:	4651      	mov	r1, sl
  402f4a:	f004 fb33 	bl	4075b4 <__aeabi_dcmplt>
  402f4e:	b110      	cbz	r0, 402f56 <_printf_float+0x8a>
  402f50:	232d      	movs	r3, #45	; 0x2d
  402f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402f56:	4b9c      	ldr	r3, [pc, #624]	; (4031c8 <_printf_float+0x2fc>)
  402f58:	4a9c      	ldr	r2, [pc, #624]	; (4031cc <_printf_float+0x300>)
  402f5a:	e00a      	b.n	402f72 <_printf_float+0xa6>
  402f5c:	4642      	mov	r2, r8
  402f5e:	4653      	mov	r3, sl
  402f60:	4640      	mov	r0, r8
  402f62:	4651      	mov	r1, sl
  402f64:	f004 fb4e 	bl	407604 <__aeabi_dcmpun>
  402f68:	2800      	cmp	r0, #0
  402f6a:	f000 8192 	beq.w	403292 <_printf_float+0x3c6>
  402f6e:	4b98      	ldr	r3, [pc, #608]	; (4031d0 <_printf_float+0x304>)
  402f70:	4a98      	ldr	r2, [pc, #608]	; (4031d4 <_printf_float+0x308>)
  402f72:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  402f76:	bf8c      	ite	hi
  402f78:	4690      	movhi	r8, r2
  402f7a:	4698      	movls	r8, r3
  402f7c:	2303      	movs	r3, #3
  402f7e:	6123      	str	r3, [r4, #16]
  402f80:	f02b 0304 	bic.w	r3, fp, #4
  402f84:	6023      	str	r3, [r4, #0]
  402f86:	f04f 0a00 	mov.w	sl, #0
  402f8a:	e03d      	b.n	403008 <_printf_float+0x13c>
  402f8c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  402f90:	f000 818a 	beq.w	4032a8 <_printf_float+0x3dc>
  402f94:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  402f98:	f000 8186 	beq.w	4032a8 <_printf_float+0x3dc>
  402f9c:	6023      	str	r3, [r4, #0]
  402f9e:	2100      	movs	r1, #0
  402fa0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402fa4:	9301      	str	r3, [sp, #4]
  402fa6:	6863      	ldr	r3, [r4, #4]
  402fa8:	9005      	str	r0, [sp, #20]
  402faa:	9202      	str	r2, [sp, #8]
  402fac:	9300      	str	r3, [sp, #0]
  402fae:	4642      	mov	r2, r8
  402fb0:	4653      	mov	r3, sl
  402fb2:	9106      	str	r1, [sp, #24]
  402fb4:	f8cd 9010 	str.w	r9, [sp, #16]
  402fb8:	f8cd e00c 	str.w	lr, [sp, #12]
  402fbc:	4628      	mov	r0, r5
  402fbe:	f7ff fef6 	bl	402dae <__cvt>
  402fc2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  402fc6:	2b47      	cmp	r3, #71	; 0x47
  402fc8:	4680      	mov	r8, r0
  402fca:	f000 8184 	beq.w	4032d6 <_printf_float+0x40a>
  402fce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402fd2:	990d      	ldr	r1, [sp, #52]	; 0x34
  402fd4:	f200 818d 	bhi.w	4032f2 <_printf_float+0x426>
  402fd8:	3901      	subs	r1, #1
  402fda:	464a      	mov	r2, r9
  402fdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
  402fe0:	910d      	str	r1, [sp, #52]	; 0x34
  402fe2:	f7ff ff43 	bl	402e6c <__exponent>
  402fe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402fe8:	1883      	adds	r3, r0, r2
  402fea:	2a01      	cmp	r2, #1
  402fec:	4682      	mov	sl, r0
  402fee:	6123      	str	r3, [r4, #16]
  402ff0:	f300 817c 	bgt.w	4032ec <_printf_float+0x420>
  402ff4:	6822      	ldr	r2, [r4, #0]
  402ff6:	07d1      	lsls	r1, r2, #31
  402ff8:	f100 8178 	bmi.w	4032ec <_printf_float+0x420>
  402ffc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  403000:	b113      	cbz	r3, 403008 <_printf_float+0x13c>
  403002:	232d      	movs	r3, #45	; 0x2d
  403004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403008:	9700      	str	r7, [sp, #0]
  40300a:	4633      	mov	r3, r6
  40300c:	aa0f      	add	r2, sp, #60	; 0x3c
  40300e:	4621      	mov	r1, r4
  403010:	4628      	mov	r0, r5
  403012:	f000 f99f 	bl	403354 <_printf_common>
  403016:	3001      	adds	r0, #1
  403018:	d102      	bne.n	403020 <_printf_float+0x154>
  40301a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40301e:	e196      	b.n	40334e <_printf_float+0x482>
  403020:	6823      	ldr	r3, [r4, #0]
  403022:	055a      	lsls	r2, r3, #21
  403024:	d401      	bmi.n	40302a <_printf_float+0x15e>
  403026:	6923      	ldr	r3, [r4, #16]
  403028:	e065      	b.n	4030f6 <_printf_float+0x22a>
  40302a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  40302e:	f240 80d5 	bls.w	4031dc <_printf_float+0x310>
  403032:	2200      	movs	r2, #0
  403034:	2300      	movs	r3, #0
  403036:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40303a:	f004 fab1 	bl	4075a0 <__aeabi_dcmpeq>
  40303e:	b378      	cbz	r0, 4030a0 <_printf_float+0x1d4>
  403040:	2301      	movs	r3, #1
  403042:	4a65      	ldr	r2, [pc, #404]	; (4031d8 <_printf_float+0x30c>)
  403044:	4631      	mov	r1, r6
  403046:	4628      	mov	r0, r5
  403048:	47b8      	blx	r7
  40304a:	3001      	adds	r0, #1
  40304c:	d0e5      	beq.n	40301a <_printf_float+0x14e>
  40304e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403052:	429a      	cmp	r2, r3
  403054:	db0b      	blt.n	40306e <_printf_float+0x1a2>
  403056:	6823      	ldr	r3, [r4, #0]
  403058:	07d8      	lsls	r0, r3, #31
  40305a:	d408      	bmi.n	40306e <_printf_float+0x1a2>
  40305c:	6823      	ldr	r3, [r4, #0]
  40305e:	079b      	lsls	r3, r3, #30
  403060:	f140 8111 	bpl.w	403286 <_printf_float+0x3ba>
  403064:	f04f 0800 	mov.w	r8, #0
  403068:	f104 0919 	add.w	r9, r4, #25
  40306c:	e106      	b.n	40327c <_printf_float+0x3b0>
  40306e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403070:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403072:	4631      	mov	r1, r6
  403074:	4628      	mov	r0, r5
  403076:	47b8      	blx	r7
  403078:	3001      	adds	r0, #1
  40307a:	d0ce      	beq.n	40301a <_printf_float+0x14e>
  40307c:	f04f 0800 	mov.w	r8, #0
  403080:	f104 091a 	add.w	r9, r4, #26
  403084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403086:	3b01      	subs	r3, #1
  403088:	4598      	cmp	r8, r3
  40308a:	dae7      	bge.n	40305c <_printf_float+0x190>
  40308c:	2301      	movs	r3, #1
  40308e:	464a      	mov	r2, r9
  403090:	4631      	mov	r1, r6
  403092:	4628      	mov	r0, r5
  403094:	47b8      	blx	r7
  403096:	3001      	adds	r0, #1
  403098:	d0bf      	beq.n	40301a <_printf_float+0x14e>
  40309a:	f108 0801 	add.w	r8, r8, #1
  40309e:	e7f1      	b.n	403084 <_printf_float+0x1b8>
  4030a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4030a2:	2b00      	cmp	r3, #0
  4030a4:	dc29      	bgt.n	4030fa <_printf_float+0x22e>
  4030a6:	2301      	movs	r3, #1
  4030a8:	4a4b      	ldr	r2, [pc, #300]	; (4031d8 <_printf_float+0x30c>)
  4030aa:	4631      	mov	r1, r6
  4030ac:	4628      	mov	r0, r5
  4030ae:	47b8      	blx	r7
  4030b0:	3001      	adds	r0, #1
  4030b2:	d0b2      	beq.n	40301a <_printf_float+0x14e>
  4030b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4030b6:	b923      	cbnz	r3, 4030c2 <_printf_float+0x1f6>
  4030b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4030ba:	b913      	cbnz	r3, 4030c2 <_printf_float+0x1f6>
  4030bc:	6823      	ldr	r3, [r4, #0]
  4030be:	07d9      	lsls	r1, r3, #31
  4030c0:	d5cc      	bpl.n	40305c <_printf_float+0x190>
  4030c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4030c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4030c6:	4631      	mov	r1, r6
  4030c8:	4628      	mov	r0, r5
  4030ca:	47b8      	blx	r7
  4030cc:	3001      	adds	r0, #1
  4030ce:	d0a4      	beq.n	40301a <_printf_float+0x14e>
  4030d0:	f04f 0900 	mov.w	r9, #0
  4030d4:	f104 0a1a 	add.w	sl, r4, #26
  4030d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4030da:	425b      	negs	r3, r3
  4030dc:	4599      	cmp	r9, r3
  4030de:	da09      	bge.n	4030f4 <_printf_float+0x228>
  4030e0:	2301      	movs	r3, #1
  4030e2:	4652      	mov	r2, sl
  4030e4:	4631      	mov	r1, r6
  4030e6:	4628      	mov	r0, r5
  4030e8:	47b8      	blx	r7
  4030ea:	3001      	adds	r0, #1
  4030ec:	d095      	beq.n	40301a <_printf_float+0x14e>
  4030ee:	f109 0901 	add.w	r9, r9, #1
  4030f2:	e7f1      	b.n	4030d8 <_printf_float+0x20c>
  4030f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4030f6:	4642      	mov	r2, r8
  4030f8:	e0a7      	b.n	40324a <_printf_float+0x37e>
  4030fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4030fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4030fe:	429a      	cmp	r2, r3
  403100:	bfa8      	it	ge
  403102:	461a      	movge	r2, r3
  403104:	2a00      	cmp	r2, #0
  403106:	4691      	mov	r9, r2
  403108:	dc06      	bgt.n	403118 <_printf_float+0x24c>
  40310a:	f04f 0a00 	mov.w	sl, #0
  40310e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  403112:	f104 0b1a 	add.w	fp, r4, #26
  403116:	e011      	b.n	40313c <_printf_float+0x270>
  403118:	4613      	mov	r3, r2
  40311a:	4631      	mov	r1, r6
  40311c:	4642      	mov	r2, r8
  40311e:	4628      	mov	r0, r5
  403120:	47b8      	blx	r7
  403122:	3001      	adds	r0, #1
  403124:	d1f1      	bne.n	40310a <_printf_float+0x23e>
  403126:	e778      	b.n	40301a <_printf_float+0x14e>
  403128:	2301      	movs	r3, #1
  40312a:	465a      	mov	r2, fp
  40312c:	4631      	mov	r1, r6
  40312e:	4628      	mov	r0, r5
  403130:	47b8      	blx	r7
  403132:	3001      	adds	r0, #1
  403134:	f43f af71 	beq.w	40301a <_printf_float+0x14e>
  403138:	f10a 0a01 	add.w	sl, sl, #1
  40313c:	6da3      	ldr	r3, [r4, #88]	; 0x58
  40313e:	ebc9 0203 	rsb	r2, r9, r3
  403142:	4592      	cmp	sl, r2
  403144:	dbf0      	blt.n	403128 <_printf_float+0x25c>
  403146:	eb08 0903 	add.w	r9, r8, r3
  40314a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40314c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40314e:	429a      	cmp	r2, r3
  403150:	db0f      	blt.n	403172 <_printf_float+0x2a6>
  403152:	6823      	ldr	r3, [r4, #0]
  403154:	07da      	lsls	r2, r3, #31
  403156:	d40c      	bmi.n	403172 <_printf_float+0x2a6>
  403158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40315a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40315c:	4498      	add	r8, r3
  40315e:	ebc9 0808 	rsb	r8, r9, r8
  403162:	1a9b      	subs	r3, r3, r2
  403164:	4598      	cmp	r8, r3
  403166:	bfa8      	it	ge
  403168:	4698      	movge	r8, r3
  40316a:	f1b8 0f00 	cmp.w	r8, #0
  40316e:	dc08      	bgt.n	403182 <_printf_float+0x2b6>
  403170:	e00f      	b.n	403192 <_printf_float+0x2c6>
  403172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403174:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403176:	4631      	mov	r1, r6
  403178:	4628      	mov	r0, r5
  40317a:	47b8      	blx	r7
  40317c:	3001      	adds	r0, #1
  40317e:	d1eb      	bne.n	403158 <_printf_float+0x28c>
  403180:	e74b      	b.n	40301a <_printf_float+0x14e>
  403182:	4643      	mov	r3, r8
  403184:	464a      	mov	r2, r9
  403186:	4631      	mov	r1, r6
  403188:	4628      	mov	r0, r5
  40318a:	47b8      	blx	r7
  40318c:	3001      	adds	r0, #1
  40318e:	f43f af44 	beq.w	40301a <_printf_float+0x14e>
  403192:	f04f 0900 	mov.w	r9, #0
  403196:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  40319a:	f104 0a1a 	add.w	sl, r4, #26
  40319e:	e009      	b.n	4031b4 <_printf_float+0x2e8>
  4031a0:	2301      	movs	r3, #1
  4031a2:	4652      	mov	r2, sl
  4031a4:	4631      	mov	r1, r6
  4031a6:	4628      	mov	r0, r5
  4031a8:	47b8      	blx	r7
  4031aa:	3001      	adds	r0, #1
  4031ac:	f43f af35 	beq.w	40301a <_printf_float+0x14e>
  4031b0:	f109 0901 	add.w	r9, r9, #1
  4031b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4031b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4031b8:	1a9b      	subs	r3, r3, r2
  4031ba:	ebc8 0303 	rsb	r3, r8, r3
  4031be:	4599      	cmp	r9, r3
  4031c0:	dbee      	blt.n	4031a0 <_printf_float+0x2d4>
  4031c2:	e74b      	b.n	40305c <_printf_float+0x190>
  4031c4:	7fefffff 	.word	0x7fefffff
  4031c8:	004081fc 	.word	0x004081fc
  4031cc:	00408200 	.word	0x00408200
  4031d0:	00408204 	.word	0x00408204
  4031d4:	00408208 	.word	0x00408208
  4031d8:	0040820c 	.word	0x0040820c
  4031dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4031de:	2a01      	cmp	r2, #1
  4031e0:	dc01      	bgt.n	4031e6 <_printf_float+0x31a>
  4031e2:	07db      	lsls	r3, r3, #31
  4031e4:	d538      	bpl.n	403258 <_printf_float+0x38c>
  4031e6:	2301      	movs	r3, #1
  4031e8:	4642      	mov	r2, r8
  4031ea:	4631      	mov	r1, r6
  4031ec:	4628      	mov	r0, r5
  4031ee:	47b8      	blx	r7
  4031f0:	3001      	adds	r0, #1
  4031f2:	f43f af12 	beq.w	40301a <_printf_float+0x14e>
  4031f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4031f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4031fa:	4631      	mov	r1, r6
  4031fc:	4628      	mov	r0, r5
  4031fe:	47b8      	blx	r7
  403200:	3001      	adds	r0, #1
  403202:	f43f af0a 	beq.w	40301a <_printf_float+0x14e>
  403206:	2200      	movs	r2, #0
  403208:	2300      	movs	r3, #0
  40320a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40320e:	f004 f9c7 	bl	4075a0 <__aeabi_dcmpeq>
  403212:	b120      	cbz	r0, 40321e <_printf_float+0x352>
  403214:	f04f 0800 	mov.w	r8, #0
  403218:	f104 091a 	add.w	r9, r4, #26
  40321c:	e00e      	b.n	40323c <_printf_float+0x370>
  40321e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403220:	f108 0201 	add.w	r2, r8, #1
  403224:	3b01      	subs	r3, #1
  403226:	e019      	b.n	40325c <_printf_float+0x390>
  403228:	2301      	movs	r3, #1
  40322a:	464a      	mov	r2, r9
  40322c:	4631      	mov	r1, r6
  40322e:	4628      	mov	r0, r5
  403230:	47b8      	blx	r7
  403232:	3001      	adds	r0, #1
  403234:	f43f aef1 	beq.w	40301a <_printf_float+0x14e>
  403238:	f108 0801 	add.w	r8, r8, #1
  40323c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40323e:	3b01      	subs	r3, #1
  403240:	4598      	cmp	r8, r3
  403242:	dbf1      	blt.n	403228 <_printf_float+0x35c>
  403244:	4653      	mov	r3, sl
  403246:	f104 0250 	add.w	r2, r4, #80	; 0x50
  40324a:	4631      	mov	r1, r6
  40324c:	4628      	mov	r0, r5
  40324e:	47b8      	blx	r7
  403250:	3001      	adds	r0, #1
  403252:	f47f af03 	bne.w	40305c <_printf_float+0x190>
  403256:	e6e0      	b.n	40301a <_printf_float+0x14e>
  403258:	2301      	movs	r3, #1
  40325a:	4642      	mov	r2, r8
  40325c:	4631      	mov	r1, r6
  40325e:	4628      	mov	r0, r5
  403260:	47b8      	blx	r7
  403262:	3001      	adds	r0, #1
  403264:	d1ee      	bne.n	403244 <_printf_float+0x378>
  403266:	e6d8      	b.n	40301a <_printf_float+0x14e>
  403268:	2301      	movs	r3, #1
  40326a:	464a      	mov	r2, r9
  40326c:	4631      	mov	r1, r6
  40326e:	4628      	mov	r0, r5
  403270:	47b8      	blx	r7
  403272:	3001      	adds	r0, #1
  403274:	f43f aed1 	beq.w	40301a <_printf_float+0x14e>
  403278:	f108 0801 	add.w	r8, r8, #1
  40327c:	68e3      	ldr	r3, [r4, #12]
  40327e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403280:	1a9b      	subs	r3, r3, r2
  403282:	4598      	cmp	r8, r3
  403284:	dbf0      	blt.n	403268 <_printf_float+0x39c>
  403286:	68e0      	ldr	r0, [r4, #12]
  403288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40328a:	4298      	cmp	r0, r3
  40328c:	bfb8      	it	lt
  40328e:	4618      	movlt	r0, r3
  403290:	e05d      	b.n	40334e <_printf_float+0x482>
  403292:	6862      	ldr	r2, [r4, #4]
  403294:	1c53      	adds	r3, r2, #1
  403296:	a80e      	add	r0, sp, #56	; 0x38
  403298:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  40329c:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  4032a0:	f47f ae74 	bne.w	402f8c <_printf_float+0xc0>
  4032a4:	2206      	movs	r2, #6
  4032a6:	e001      	b.n	4032ac <_printf_float+0x3e0>
  4032a8:	b912      	cbnz	r2, 4032b0 <_printf_float+0x3e4>
  4032aa:	2201      	movs	r2, #1
  4032ac:	6062      	str	r2, [r4, #4]
  4032ae:	e675      	b.n	402f9c <_printf_float+0xd0>
  4032b0:	2100      	movs	r1, #0
  4032b2:	9106      	str	r1, [sp, #24]
  4032b4:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  4032b8:	e88d 000c 	stmia.w	sp, {r2, r3}
  4032bc:	6023      	str	r3, [r4, #0]
  4032be:	9005      	str	r0, [sp, #20]
  4032c0:	4642      	mov	r2, r8
  4032c2:	f8cd 9010 	str.w	r9, [sp, #16]
  4032c6:	f8cd e00c 	str.w	lr, [sp, #12]
  4032ca:	9102      	str	r1, [sp, #8]
  4032cc:	4653      	mov	r3, sl
  4032ce:	4628      	mov	r0, r5
  4032d0:	f7ff fd6d 	bl	402dae <__cvt>
  4032d4:	4680      	mov	r8, r0
  4032d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4032d8:	1cd8      	adds	r0, r3, #3
  4032da:	db02      	blt.n	4032e2 <_printf_float+0x416>
  4032dc:	6862      	ldr	r2, [r4, #4]
  4032de:	4293      	cmp	r3, r2
  4032e0:	dd1d      	ble.n	40331e <_printf_float+0x452>
  4032e2:	f1a9 0902 	sub.w	r9, r9, #2
  4032e6:	fa5f f989 	uxtb.w	r9, r9
  4032ea:	e670      	b.n	402fce <_printf_float+0x102>
  4032ec:	3301      	adds	r3, #1
  4032ee:	6123      	str	r3, [r4, #16]
  4032f0:	e684      	b.n	402ffc <_printf_float+0x130>
  4032f2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  4032f6:	d114      	bne.n	403322 <_printf_float+0x456>
  4032f8:	2900      	cmp	r1, #0
  4032fa:	6863      	ldr	r3, [r4, #4]
  4032fc:	dd07      	ble.n	40330e <_printf_float+0x442>
  4032fe:	6121      	str	r1, [r4, #16]
  403300:	b913      	cbnz	r3, 403308 <_printf_float+0x43c>
  403302:	6822      	ldr	r2, [r4, #0]
  403304:	07d2      	lsls	r2, r2, #31
  403306:	d51d      	bpl.n	403344 <_printf_float+0x478>
  403308:	3301      	adds	r3, #1
  40330a:	440b      	add	r3, r1
  40330c:	e019      	b.n	403342 <_printf_float+0x476>
  40330e:	b913      	cbnz	r3, 403316 <_printf_float+0x44a>
  403310:	6822      	ldr	r2, [r4, #0]
  403312:	07d0      	lsls	r0, r2, #31
  403314:	d501      	bpl.n	40331a <_printf_float+0x44e>
  403316:	3302      	adds	r3, #2
  403318:	e013      	b.n	403342 <_printf_float+0x476>
  40331a:	2301      	movs	r3, #1
  40331c:	e011      	b.n	403342 <_printf_float+0x476>
  40331e:	f04f 0967 	mov.w	r9, #103	; 0x67
  403322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403326:	4293      	cmp	r3, r2
  403328:	db05      	blt.n	403336 <_printf_float+0x46a>
  40332a:	6822      	ldr	r2, [r4, #0]
  40332c:	6123      	str	r3, [r4, #16]
  40332e:	07d1      	lsls	r1, r2, #31
  403330:	d508      	bpl.n	403344 <_printf_float+0x478>
  403332:	3301      	adds	r3, #1
  403334:	e005      	b.n	403342 <_printf_float+0x476>
  403336:	2b00      	cmp	r3, #0
  403338:	bfd4      	ite	le
  40333a:	f1c3 0302 	rsble	r3, r3, #2
  40333e:	2301      	movgt	r3, #1
  403340:	4413      	add	r3, r2
  403342:	6123      	str	r3, [r4, #16]
  403344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403346:	65a3      	str	r3, [r4, #88]	; 0x58
  403348:	f04f 0a00 	mov.w	sl, #0
  40334c:	e656      	b.n	402ffc <_printf_float+0x130>
  40334e:	b011      	add	sp, #68	; 0x44
  403350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00403354 <_printf_common>:
  403354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403358:	4691      	mov	r9, r2
  40335a:	461f      	mov	r7, r3
  40335c:	690a      	ldr	r2, [r1, #16]
  40335e:	688b      	ldr	r3, [r1, #8]
  403360:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403364:	4293      	cmp	r3, r2
  403366:	bfb8      	it	lt
  403368:	4613      	movlt	r3, r2
  40336a:	f8c9 3000 	str.w	r3, [r9]
  40336e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  403372:	4606      	mov	r6, r0
  403374:	460c      	mov	r4, r1
  403376:	b112      	cbz	r2, 40337e <_printf_common+0x2a>
  403378:	3301      	adds	r3, #1
  40337a:	f8c9 3000 	str.w	r3, [r9]
  40337e:	6823      	ldr	r3, [r4, #0]
  403380:	0699      	lsls	r1, r3, #26
  403382:	bf42      	ittt	mi
  403384:	f8d9 3000 	ldrmi.w	r3, [r9]
  403388:	3302      	addmi	r3, #2
  40338a:	f8c9 3000 	strmi.w	r3, [r9]
  40338e:	6825      	ldr	r5, [r4, #0]
  403390:	f015 0506 	ands.w	r5, r5, #6
  403394:	d110      	bne.n	4033b8 <_printf_common+0x64>
  403396:	f104 0a19 	add.w	sl, r4, #25
  40339a:	e007      	b.n	4033ac <_printf_common+0x58>
  40339c:	2301      	movs	r3, #1
  40339e:	4652      	mov	r2, sl
  4033a0:	4639      	mov	r1, r7
  4033a2:	4630      	mov	r0, r6
  4033a4:	47c0      	blx	r8
  4033a6:	3001      	adds	r0, #1
  4033a8:	d01a      	beq.n	4033e0 <_printf_common+0x8c>
  4033aa:	3501      	adds	r5, #1
  4033ac:	68e3      	ldr	r3, [r4, #12]
  4033ae:	f8d9 2000 	ldr.w	r2, [r9]
  4033b2:	1a9b      	subs	r3, r3, r2
  4033b4:	429d      	cmp	r5, r3
  4033b6:	dbf1      	blt.n	40339c <_printf_common+0x48>
  4033b8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4033bc:	6822      	ldr	r2, [r4, #0]
  4033be:	3300      	adds	r3, #0
  4033c0:	bf18      	it	ne
  4033c2:	2301      	movne	r3, #1
  4033c4:	0692      	lsls	r2, r2, #26
  4033c6:	d50f      	bpl.n	4033e8 <_printf_common+0x94>
  4033c8:	18e1      	adds	r1, r4, r3
  4033ca:	1c5a      	adds	r2, r3, #1
  4033cc:	2030      	movs	r0, #48	; 0x30
  4033ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4033d2:	4422      	add	r2, r4
  4033d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4033d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4033dc:	3302      	adds	r3, #2
  4033de:	e003      	b.n	4033e8 <_printf_common+0x94>
  4033e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4033e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4033e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4033ec:	4639      	mov	r1, r7
  4033ee:	4630      	mov	r0, r6
  4033f0:	47c0      	blx	r8
  4033f2:	3001      	adds	r0, #1
  4033f4:	d0f4      	beq.n	4033e0 <_printf_common+0x8c>
  4033f6:	6822      	ldr	r2, [r4, #0]
  4033f8:	f8d9 5000 	ldr.w	r5, [r9]
  4033fc:	68e3      	ldr	r3, [r4, #12]
  4033fe:	f002 0206 	and.w	r2, r2, #6
  403402:	2a04      	cmp	r2, #4
  403404:	bf08      	it	eq
  403406:	1b5d      	subeq	r5, r3, r5
  403408:	6922      	ldr	r2, [r4, #16]
  40340a:	68a3      	ldr	r3, [r4, #8]
  40340c:	bf0c      	ite	eq
  40340e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  403412:	2500      	movne	r5, #0
  403414:	4293      	cmp	r3, r2
  403416:	bfc4      	itt	gt
  403418:	1a9b      	subgt	r3, r3, r2
  40341a:	18ed      	addgt	r5, r5, r3
  40341c:	f04f 0900 	mov.w	r9, #0
  403420:	341a      	adds	r4, #26
  403422:	454d      	cmp	r5, r9
  403424:	d009      	beq.n	40343a <_printf_common+0xe6>
  403426:	2301      	movs	r3, #1
  403428:	4622      	mov	r2, r4
  40342a:	4639      	mov	r1, r7
  40342c:	4630      	mov	r0, r6
  40342e:	47c0      	blx	r8
  403430:	3001      	adds	r0, #1
  403432:	d0d5      	beq.n	4033e0 <_printf_common+0x8c>
  403434:	f109 0901 	add.w	r9, r9, #1
  403438:	e7f3      	b.n	403422 <_printf_common+0xce>
  40343a:	2000      	movs	r0, #0
  40343c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403440 <_printf_i>:
  403440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403444:	4617      	mov	r7, r2
  403446:	7e0a      	ldrb	r2, [r1, #24]
  403448:	b085      	sub	sp, #20
  40344a:	2a6e      	cmp	r2, #110	; 0x6e
  40344c:	4698      	mov	r8, r3
  40344e:	4606      	mov	r6, r0
  403450:	460c      	mov	r4, r1
  403452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403454:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  403458:	f000 80ae 	beq.w	4035b8 <_printf_i+0x178>
  40345c:	d811      	bhi.n	403482 <_printf_i+0x42>
  40345e:	2a63      	cmp	r2, #99	; 0x63
  403460:	d022      	beq.n	4034a8 <_printf_i+0x68>
  403462:	d809      	bhi.n	403478 <_printf_i+0x38>
  403464:	2a00      	cmp	r2, #0
  403466:	f000 80bb 	beq.w	4035e0 <_printf_i+0x1a0>
  40346a:	2a58      	cmp	r2, #88	; 0x58
  40346c:	f040 80ca 	bne.w	403604 <_printf_i+0x1c4>
  403470:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  403474:	4983      	ldr	r1, [pc, #524]	; (403684 <_printf_i+0x244>)
  403476:	e055      	b.n	403524 <_printf_i+0xe4>
  403478:	2a64      	cmp	r2, #100	; 0x64
  40347a:	d01e      	beq.n	4034ba <_printf_i+0x7a>
  40347c:	2a69      	cmp	r2, #105	; 0x69
  40347e:	d01c      	beq.n	4034ba <_printf_i+0x7a>
  403480:	e0c0      	b.n	403604 <_printf_i+0x1c4>
  403482:	2a73      	cmp	r2, #115	; 0x73
  403484:	f000 80b0 	beq.w	4035e8 <_printf_i+0x1a8>
  403488:	d809      	bhi.n	40349e <_printf_i+0x5e>
  40348a:	2a6f      	cmp	r2, #111	; 0x6f
  40348c:	d02e      	beq.n	4034ec <_printf_i+0xac>
  40348e:	2a70      	cmp	r2, #112	; 0x70
  403490:	f040 80b8 	bne.w	403604 <_printf_i+0x1c4>
  403494:	680a      	ldr	r2, [r1, #0]
  403496:	f042 0220 	orr.w	r2, r2, #32
  40349a:	600a      	str	r2, [r1, #0]
  40349c:	e03e      	b.n	40351c <_printf_i+0xdc>
  40349e:	2a75      	cmp	r2, #117	; 0x75
  4034a0:	d024      	beq.n	4034ec <_printf_i+0xac>
  4034a2:	2a78      	cmp	r2, #120	; 0x78
  4034a4:	d03a      	beq.n	40351c <_printf_i+0xdc>
  4034a6:	e0ad      	b.n	403604 <_printf_i+0x1c4>
  4034a8:	681a      	ldr	r2, [r3, #0]
  4034aa:	f101 0542 	add.w	r5, r1, #66	; 0x42
  4034ae:	1d11      	adds	r1, r2, #4
  4034b0:	6019      	str	r1, [r3, #0]
  4034b2:	6813      	ldr	r3, [r2, #0]
  4034b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4034b8:	e0a8      	b.n	40360c <_printf_i+0x1cc>
  4034ba:	6821      	ldr	r1, [r4, #0]
  4034bc:	681a      	ldr	r2, [r3, #0]
  4034be:	f011 0f80 	tst.w	r1, #128	; 0x80
  4034c2:	d002      	beq.n	4034ca <_printf_i+0x8a>
  4034c4:	1d11      	adds	r1, r2, #4
  4034c6:	6019      	str	r1, [r3, #0]
  4034c8:	e008      	b.n	4034dc <_printf_i+0x9c>
  4034ca:	f011 0f40 	tst.w	r1, #64	; 0x40
  4034ce:	f102 0104 	add.w	r1, r2, #4
  4034d2:	6019      	str	r1, [r3, #0]
  4034d4:	d002      	beq.n	4034dc <_printf_i+0x9c>
  4034d6:	f9b2 3000 	ldrsh.w	r3, [r2]
  4034da:	e000      	b.n	4034de <_printf_i+0x9e>
  4034dc:	6813      	ldr	r3, [r2, #0]
  4034de:	2b00      	cmp	r3, #0
  4034e0:	da3c      	bge.n	40355c <_printf_i+0x11c>
  4034e2:	222d      	movs	r2, #45	; 0x2d
  4034e4:	425b      	negs	r3, r3
  4034e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4034ea:	e037      	b.n	40355c <_printf_i+0x11c>
  4034ec:	6821      	ldr	r1, [r4, #0]
  4034ee:	681a      	ldr	r2, [r3, #0]
  4034f0:	f011 0f80 	tst.w	r1, #128	; 0x80
  4034f4:	d002      	beq.n	4034fc <_printf_i+0xbc>
  4034f6:	1d11      	adds	r1, r2, #4
  4034f8:	6019      	str	r1, [r3, #0]
  4034fa:	e007      	b.n	40350c <_printf_i+0xcc>
  4034fc:	f011 0f40 	tst.w	r1, #64	; 0x40
  403500:	f102 0104 	add.w	r1, r2, #4
  403504:	6019      	str	r1, [r3, #0]
  403506:	d001      	beq.n	40350c <_printf_i+0xcc>
  403508:	8813      	ldrh	r3, [r2, #0]
  40350a:	e000      	b.n	40350e <_printf_i+0xce>
  40350c:	6813      	ldr	r3, [r2, #0]
  40350e:	7e22      	ldrb	r2, [r4, #24]
  403510:	495c      	ldr	r1, [pc, #368]	; (403684 <_printf_i+0x244>)
  403512:	2a6f      	cmp	r2, #111	; 0x6f
  403514:	bf14      	ite	ne
  403516:	220a      	movne	r2, #10
  403518:	2208      	moveq	r2, #8
  40351a:	e01b      	b.n	403554 <_printf_i+0x114>
  40351c:	2278      	movs	r2, #120	; 0x78
  40351e:	495a      	ldr	r1, [pc, #360]	; (403688 <_printf_i+0x248>)
  403520:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403524:	6822      	ldr	r2, [r4, #0]
  403526:	6818      	ldr	r0, [r3, #0]
  403528:	f012 0f80 	tst.w	r2, #128	; 0x80
  40352c:	f100 0504 	add.w	r5, r0, #4
  403530:	601d      	str	r5, [r3, #0]
  403532:	d103      	bne.n	40353c <_printf_i+0xfc>
  403534:	0655      	lsls	r5, r2, #25
  403536:	d501      	bpl.n	40353c <_printf_i+0xfc>
  403538:	8803      	ldrh	r3, [r0, #0]
  40353a:	e000      	b.n	40353e <_printf_i+0xfe>
  40353c:	6803      	ldr	r3, [r0, #0]
  40353e:	07d0      	lsls	r0, r2, #31
  403540:	bf44      	itt	mi
  403542:	f042 0220 	orrmi.w	r2, r2, #32
  403546:	6022      	strmi	r2, [r4, #0]
  403548:	b91b      	cbnz	r3, 403552 <_printf_i+0x112>
  40354a:	6822      	ldr	r2, [r4, #0]
  40354c:	f022 0220 	bic.w	r2, r2, #32
  403550:	6022      	str	r2, [r4, #0]
  403552:	2210      	movs	r2, #16
  403554:	2000      	movs	r0, #0
  403556:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  40355a:	e001      	b.n	403560 <_printf_i+0x120>
  40355c:	4949      	ldr	r1, [pc, #292]	; (403684 <_printf_i+0x244>)
  40355e:	220a      	movs	r2, #10
  403560:	6865      	ldr	r5, [r4, #4]
  403562:	60a5      	str	r5, [r4, #8]
  403564:	2d00      	cmp	r5, #0
  403566:	db08      	blt.n	40357a <_printf_i+0x13a>
  403568:	6820      	ldr	r0, [r4, #0]
  40356a:	f020 0004 	bic.w	r0, r0, #4
  40356e:	6020      	str	r0, [r4, #0]
  403570:	b92b      	cbnz	r3, 40357e <_printf_i+0x13e>
  403572:	2d00      	cmp	r5, #0
  403574:	d17d      	bne.n	403672 <_printf_i+0x232>
  403576:	4675      	mov	r5, lr
  403578:	e00c      	b.n	403594 <_printf_i+0x154>
  40357a:	2b00      	cmp	r3, #0
  40357c:	d079      	beq.n	403672 <_printf_i+0x232>
  40357e:	4675      	mov	r5, lr
  403580:	fbb3 f0f2 	udiv	r0, r3, r2
  403584:	fb02 3310 	mls	r3, r2, r0, r3
  403588:	5ccb      	ldrb	r3, [r1, r3]
  40358a:	f805 3d01 	strb.w	r3, [r5, #-1]!
  40358e:	4603      	mov	r3, r0
  403590:	2800      	cmp	r0, #0
  403592:	d1f5      	bne.n	403580 <_printf_i+0x140>
  403594:	2a08      	cmp	r2, #8
  403596:	d10b      	bne.n	4035b0 <_printf_i+0x170>
  403598:	6823      	ldr	r3, [r4, #0]
  40359a:	07da      	lsls	r2, r3, #31
  40359c:	d508      	bpl.n	4035b0 <_printf_i+0x170>
  40359e:	6923      	ldr	r3, [r4, #16]
  4035a0:	6862      	ldr	r2, [r4, #4]
  4035a2:	429a      	cmp	r2, r3
  4035a4:	bfde      	ittt	le
  4035a6:	2330      	movle	r3, #48	; 0x30
  4035a8:	f805 3c01 	strble.w	r3, [r5, #-1]
  4035ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  4035b0:	ebc5 030e 	rsb	r3, r5, lr
  4035b4:	6123      	str	r3, [r4, #16]
  4035b6:	e02e      	b.n	403616 <_printf_i+0x1d6>
  4035b8:	6808      	ldr	r0, [r1, #0]
  4035ba:	681a      	ldr	r2, [r3, #0]
  4035bc:	6949      	ldr	r1, [r1, #20]
  4035be:	f010 0f80 	tst.w	r0, #128	; 0x80
  4035c2:	d003      	beq.n	4035cc <_printf_i+0x18c>
  4035c4:	1d10      	adds	r0, r2, #4
  4035c6:	6018      	str	r0, [r3, #0]
  4035c8:	6813      	ldr	r3, [r2, #0]
  4035ca:	e008      	b.n	4035de <_printf_i+0x19e>
  4035cc:	f010 0f40 	tst.w	r0, #64	; 0x40
  4035d0:	f102 0004 	add.w	r0, r2, #4
  4035d4:	6018      	str	r0, [r3, #0]
  4035d6:	6813      	ldr	r3, [r2, #0]
  4035d8:	d001      	beq.n	4035de <_printf_i+0x19e>
  4035da:	8019      	strh	r1, [r3, #0]
  4035dc:	e000      	b.n	4035e0 <_printf_i+0x1a0>
  4035de:	6019      	str	r1, [r3, #0]
  4035e0:	2300      	movs	r3, #0
  4035e2:	6123      	str	r3, [r4, #16]
  4035e4:	4675      	mov	r5, lr
  4035e6:	e016      	b.n	403616 <_printf_i+0x1d6>
  4035e8:	681a      	ldr	r2, [r3, #0]
  4035ea:	1d11      	adds	r1, r2, #4
  4035ec:	6019      	str	r1, [r3, #0]
  4035ee:	6815      	ldr	r5, [r2, #0]
  4035f0:	6862      	ldr	r2, [r4, #4]
  4035f2:	2100      	movs	r1, #0
  4035f4:	4628      	mov	r0, r5
  4035f6:	f002 fc9b 	bl	405f30 <memchr>
  4035fa:	b108      	cbz	r0, 403600 <_printf_i+0x1c0>
  4035fc:	1b40      	subs	r0, r0, r5
  4035fe:	6060      	str	r0, [r4, #4]
  403600:	6863      	ldr	r3, [r4, #4]
  403602:	e004      	b.n	40360e <_printf_i+0x1ce>
  403604:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403608:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  40360c:	2301      	movs	r3, #1
  40360e:	6123      	str	r3, [r4, #16]
  403610:	2300      	movs	r3, #0
  403612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403616:	f8cd 8000 	str.w	r8, [sp]
  40361a:	463b      	mov	r3, r7
  40361c:	aa03      	add	r2, sp, #12
  40361e:	4621      	mov	r1, r4
  403620:	4630      	mov	r0, r6
  403622:	f7ff fe97 	bl	403354 <_printf_common>
  403626:	3001      	adds	r0, #1
  403628:	d102      	bne.n	403630 <_printf_i+0x1f0>
  40362a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40362e:	e026      	b.n	40367e <_printf_i+0x23e>
  403630:	6923      	ldr	r3, [r4, #16]
  403632:	462a      	mov	r2, r5
  403634:	4639      	mov	r1, r7
  403636:	4630      	mov	r0, r6
  403638:	47c0      	blx	r8
  40363a:	3001      	adds	r0, #1
  40363c:	d0f5      	beq.n	40362a <_printf_i+0x1ea>
  40363e:	6823      	ldr	r3, [r4, #0]
  403640:	079b      	lsls	r3, r3, #30
  403642:	d510      	bpl.n	403666 <_printf_i+0x226>
  403644:	2500      	movs	r5, #0
  403646:	f104 0919 	add.w	r9, r4, #25
  40364a:	e007      	b.n	40365c <_printf_i+0x21c>
  40364c:	2301      	movs	r3, #1
  40364e:	464a      	mov	r2, r9
  403650:	4639      	mov	r1, r7
  403652:	4630      	mov	r0, r6
  403654:	47c0      	blx	r8
  403656:	3001      	adds	r0, #1
  403658:	d0e7      	beq.n	40362a <_printf_i+0x1ea>
  40365a:	3501      	adds	r5, #1
  40365c:	68e3      	ldr	r3, [r4, #12]
  40365e:	9a03      	ldr	r2, [sp, #12]
  403660:	1a9b      	subs	r3, r3, r2
  403662:	429d      	cmp	r5, r3
  403664:	dbf2      	blt.n	40364c <_printf_i+0x20c>
  403666:	68e0      	ldr	r0, [r4, #12]
  403668:	9b03      	ldr	r3, [sp, #12]
  40366a:	4298      	cmp	r0, r3
  40366c:	bfb8      	it	lt
  40366e:	4618      	movlt	r0, r3
  403670:	e005      	b.n	40367e <_printf_i+0x23e>
  403672:	780b      	ldrb	r3, [r1, #0]
  403674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403678:	f104 0542 	add.w	r5, r4, #66	; 0x42
  40367c:	e78a      	b.n	403594 <_printf_i+0x154>
  40367e:	b005      	add	sp, #20
  403680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403684:	0040820e 	.word	0x0040820e
  403688:	0040821f 	.word	0x0040821f

0040368c <iprintf>:
  40368c:	b40f      	push	{r0, r1, r2, r3}
  40368e:	4b0a      	ldr	r3, [pc, #40]	; (4036b8 <iprintf+0x2c>)
  403690:	b513      	push	{r0, r1, r4, lr}
  403692:	681c      	ldr	r4, [r3, #0]
  403694:	b124      	cbz	r4, 4036a0 <iprintf+0x14>
  403696:	69a3      	ldr	r3, [r4, #24]
  403698:	b913      	cbnz	r3, 4036a0 <iprintf+0x14>
  40369a:	4620      	mov	r0, r4
  40369c:	f002 f812 	bl	4056c4 <__sinit>
  4036a0:	ab05      	add	r3, sp, #20
  4036a2:	9a04      	ldr	r2, [sp, #16]
  4036a4:	68a1      	ldr	r1, [r4, #8]
  4036a6:	9301      	str	r3, [sp, #4]
  4036a8:	4620      	mov	r0, r4
  4036aa:	f003 f95d 	bl	406968 <_vfiprintf_r>
  4036ae:	b002      	add	sp, #8
  4036b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4036b4:	b004      	add	sp, #16
  4036b6:	4770      	bx	lr
  4036b8:	20000074 	.word	0x20000074

004036bc <_puts_r>:
  4036bc:	b570      	push	{r4, r5, r6, lr}
  4036be:	460e      	mov	r6, r1
  4036c0:	4605      	mov	r5, r0
  4036c2:	b118      	cbz	r0, 4036cc <_puts_r+0x10>
  4036c4:	6983      	ldr	r3, [r0, #24]
  4036c6:	b90b      	cbnz	r3, 4036cc <_puts_r+0x10>
  4036c8:	f001 fffc 	bl	4056c4 <__sinit>
  4036cc:	69ab      	ldr	r3, [r5, #24]
  4036ce:	68ac      	ldr	r4, [r5, #8]
  4036d0:	b913      	cbnz	r3, 4036d8 <_puts_r+0x1c>
  4036d2:	4628      	mov	r0, r5
  4036d4:	f001 fff6 	bl	4056c4 <__sinit>
  4036d8:	4b22      	ldr	r3, [pc, #136]	; (403764 <_puts_r+0xa8>)
  4036da:	429c      	cmp	r4, r3
  4036dc:	d101      	bne.n	4036e2 <_puts_r+0x26>
  4036de:	686c      	ldr	r4, [r5, #4]
  4036e0:	e008      	b.n	4036f4 <_puts_r+0x38>
  4036e2:	4b21      	ldr	r3, [pc, #132]	; (403768 <_puts_r+0xac>)
  4036e4:	429c      	cmp	r4, r3
  4036e6:	d101      	bne.n	4036ec <_puts_r+0x30>
  4036e8:	68ac      	ldr	r4, [r5, #8]
  4036ea:	e003      	b.n	4036f4 <_puts_r+0x38>
  4036ec:	4b1f      	ldr	r3, [pc, #124]	; (40376c <_puts_r+0xb0>)
  4036ee:	429c      	cmp	r4, r3
  4036f0:	bf08      	it	eq
  4036f2:	68ec      	ldreq	r4, [r5, #12]
  4036f4:	89a3      	ldrh	r3, [r4, #12]
  4036f6:	071b      	lsls	r3, r3, #28
  4036f8:	d501      	bpl.n	4036fe <_puts_r+0x42>
  4036fa:	6923      	ldr	r3, [r4, #16]
  4036fc:	b93b      	cbnz	r3, 40370e <_puts_r+0x52>
  4036fe:	4621      	mov	r1, r4
  403700:	4628      	mov	r0, r5
  403702:	f001 f853 	bl	4047ac <__swsetup_r>
  403706:	b110      	cbz	r0, 40370e <_puts_r+0x52>
  403708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40370c:	bd70      	pop	{r4, r5, r6, pc}
  40370e:	3e01      	subs	r6, #1
  403710:	68a3      	ldr	r3, [r4, #8]
  403712:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  403716:	3b01      	subs	r3, #1
  403718:	60a3      	str	r3, [r4, #8]
  40371a:	b191      	cbz	r1, 403742 <_puts_r+0x86>
  40371c:	2b00      	cmp	r3, #0
  40371e:	da04      	bge.n	40372a <_puts_r+0x6e>
  403720:	69a2      	ldr	r2, [r4, #24]
  403722:	4293      	cmp	r3, r2
  403724:	db06      	blt.n	403734 <_puts_r+0x78>
  403726:	290a      	cmp	r1, #10
  403728:	d004      	beq.n	403734 <_puts_r+0x78>
  40372a:	6823      	ldr	r3, [r4, #0]
  40372c:	1c5a      	adds	r2, r3, #1
  40372e:	6022      	str	r2, [r4, #0]
  403730:	7019      	strb	r1, [r3, #0]
  403732:	e7ed      	b.n	403710 <_puts_r+0x54>
  403734:	4622      	mov	r2, r4
  403736:	4628      	mov	r0, r5
  403738:	f000 ffe4 	bl	404704 <__swbuf_r>
  40373c:	3001      	adds	r0, #1
  40373e:	d1e7      	bne.n	403710 <_puts_r+0x54>
  403740:	e7e2      	b.n	403708 <_puts_r+0x4c>
  403742:	2b00      	cmp	r3, #0
  403744:	da08      	bge.n	403758 <_puts_r+0x9c>
  403746:	4622      	mov	r2, r4
  403748:	210a      	movs	r1, #10
  40374a:	4628      	mov	r0, r5
  40374c:	f000 ffda 	bl	404704 <__swbuf_r>
  403750:	3001      	adds	r0, #1
  403752:	d0d9      	beq.n	403708 <_puts_r+0x4c>
  403754:	200a      	movs	r0, #10
  403756:	bd70      	pop	{r4, r5, r6, pc}
  403758:	6823      	ldr	r3, [r4, #0]
  40375a:	200a      	movs	r0, #10
  40375c:	1c5a      	adds	r2, r3, #1
  40375e:	6022      	str	r2, [r4, #0]
  403760:	7018      	strb	r0, [r3, #0]
  403762:	bd70      	pop	{r4, r5, r6, pc}
  403764:	00408290 	.word	0x00408290
  403768:	004082b0 	.word	0x004082b0
  40376c:	004082d0 	.word	0x004082d0

00403770 <puts>:
  403770:	4b02      	ldr	r3, [pc, #8]	; (40377c <puts+0xc>)
  403772:	4601      	mov	r1, r0
  403774:	6818      	ldr	r0, [r3, #0]
  403776:	f7ff bfa1 	b.w	4036bc <_puts_r>
  40377a:	bf00      	nop
  40377c:	20000074 	.word	0x20000074

00403780 <setbuf>:
  403780:	2900      	cmp	r1, #0
  403782:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403786:	bf0c      	ite	eq
  403788:	2202      	moveq	r2, #2
  40378a:	2200      	movne	r2, #0
  40378c:	f000 b800 	b.w	403790 <setvbuf>

00403790 <setvbuf>:
  403790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403794:	461d      	mov	r5, r3
  403796:	4b4f      	ldr	r3, [pc, #316]	; (4038d4 <setvbuf+0x144>)
  403798:	681e      	ldr	r6, [r3, #0]
  40379a:	4604      	mov	r4, r0
  40379c:	460f      	mov	r7, r1
  40379e:	4690      	mov	r8, r2
  4037a0:	b126      	cbz	r6, 4037ac <setvbuf+0x1c>
  4037a2:	69b3      	ldr	r3, [r6, #24]
  4037a4:	b913      	cbnz	r3, 4037ac <setvbuf+0x1c>
  4037a6:	4630      	mov	r0, r6
  4037a8:	f001 ff8c 	bl	4056c4 <__sinit>
  4037ac:	4b4a      	ldr	r3, [pc, #296]	; (4038d8 <setvbuf+0x148>)
  4037ae:	429c      	cmp	r4, r3
  4037b0:	d101      	bne.n	4037b6 <setvbuf+0x26>
  4037b2:	6874      	ldr	r4, [r6, #4]
  4037b4:	e008      	b.n	4037c8 <setvbuf+0x38>
  4037b6:	4b49      	ldr	r3, [pc, #292]	; (4038dc <setvbuf+0x14c>)
  4037b8:	429c      	cmp	r4, r3
  4037ba:	d101      	bne.n	4037c0 <setvbuf+0x30>
  4037bc:	68b4      	ldr	r4, [r6, #8]
  4037be:	e003      	b.n	4037c8 <setvbuf+0x38>
  4037c0:	4b47      	ldr	r3, [pc, #284]	; (4038e0 <setvbuf+0x150>)
  4037c2:	429c      	cmp	r4, r3
  4037c4:	bf08      	it	eq
  4037c6:	68f4      	ldreq	r4, [r6, #12]
  4037c8:	f1b8 0f02 	cmp.w	r8, #2
  4037cc:	d004      	beq.n	4037d8 <setvbuf+0x48>
  4037ce:	f1b8 0f01 	cmp.w	r8, #1
  4037d2:	d879      	bhi.n	4038c8 <setvbuf+0x138>
  4037d4:	2d00      	cmp	r5, #0
  4037d6:	db77      	blt.n	4038c8 <setvbuf+0x138>
  4037d8:	4621      	mov	r1, r4
  4037da:	4630      	mov	r0, r6
  4037dc:	f001 ff08 	bl	4055f0 <_fflush_r>
  4037e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4037e2:	b141      	cbz	r1, 4037f6 <setvbuf+0x66>
  4037e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4037e8:	4299      	cmp	r1, r3
  4037ea:	d002      	beq.n	4037f2 <setvbuf+0x62>
  4037ec:	4630      	mov	r0, r6
  4037ee:	f002 ffe7 	bl	4067c0 <_free_r>
  4037f2:	2300      	movs	r3, #0
  4037f4:	6363      	str	r3, [r4, #52]	; 0x34
  4037f6:	2300      	movs	r3, #0
  4037f8:	61a3      	str	r3, [r4, #24]
  4037fa:	6063      	str	r3, [r4, #4]
  4037fc:	89a3      	ldrh	r3, [r4, #12]
  4037fe:	061b      	lsls	r3, r3, #24
  403800:	d503      	bpl.n	40380a <setvbuf+0x7a>
  403802:	6921      	ldr	r1, [r4, #16]
  403804:	4630      	mov	r0, r6
  403806:	f002 ffdb 	bl	4067c0 <_free_r>
  40380a:	89a3      	ldrh	r3, [r4, #12]
  40380c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403810:	f023 0303 	bic.w	r3, r3, #3
  403814:	f1b8 0f02 	cmp.w	r8, #2
  403818:	81a3      	strh	r3, [r4, #12]
  40381a:	d01e      	beq.n	40385a <setvbuf+0xca>
  40381c:	ab01      	add	r3, sp, #4
  40381e:	466a      	mov	r2, sp
  403820:	4621      	mov	r1, r4
  403822:	4630      	mov	r0, r6
  403824:	f002 fb0a 	bl	405e3c <__swhatbuf_r>
  403828:	89a3      	ldrh	r3, [r4, #12]
  40382a:	4318      	orrs	r0, r3
  40382c:	81a0      	strh	r0, [r4, #12]
  40382e:	b90d      	cbnz	r5, 403834 <setvbuf+0xa4>
  403830:	9d00      	ldr	r5, [sp, #0]
  403832:	e000      	b.n	403836 <setvbuf+0xa6>
  403834:	bb2f      	cbnz	r7, 403882 <setvbuf+0xf2>
  403836:	4628      	mov	r0, r5
  403838:	f002 fb60 	bl	405efc <malloc>
  40383c:	4607      	mov	r7, r0
  40383e:	b9d0      	cbnz	r0, 403876 <setvbuf+0xe6>
  403840:	f8dd 9000 	ldr.w	r9, [sp]
  403844:	45a9      	cmp	r9, r5
  403846:	d102      	bne.n	40384e <setvbuf+0xbe>
  403848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40384c:	e006      	b.n	40385c <setvbuf+0xcc>
  40384e:	4648      	mov	r0, r9
  403850:	f002 fb54 	bl	405efc <malloc>
  403854:	4607      	mov	r7, r0
  403856:	b978      	cbnz	r0, 403878 <setvbuf+0xe8>
  403858:	e7f6      	b.n	403848 <setvbuf+0xb8>
  40385a:	2000      	movs	r0, #0
  40385c:	89a3      	ldrh	r3, [r4, #12]
  40385e:	f043 0302 	orr.w	r3, r3, #2
  403862:	81a3      	strh	r3, [r4, #12]
  403864:	2300      	movs	r3, #0
  403866:	60a3      	str	r3, [r4, #8]
  403868:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40386c:	6023      	str	r3, [r4, #0]
  40386e:	6123      	str	r3, [r4, #16]
  403870:	2301      	movs	r3, #1
  403872:	6163      	str	r3, [r4, #20]
  403874:	e02a      	b.n	4038cc <setvbuf+0x13c>
  403876:	46a9      	mov	r9, r5
  403878:	89a3      	ldrh	r3, [r4, #12]
  40387a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40387e:	81a3      	strh	r3, [r4, #12]
  403880:	464d      	mov	r5, r9
  403882:	69b3      	ldr	r3, [r6, #24]
  403884:	b913      	cbnz	r3, 40388c <setvbuf+0xfc>
  403886:	4630      	mov	r0, r6
  403888:	f001 ff1c 	bl	4056c4 <__sinit>
  40388c:	f1b8 0f01 	cmp.w	r8, #1
  403890:	bf08      	it	eq
  403892:	89a3      	ldrheq	r3, [r4, #12]
  403894:	6027      	str	r7, [r4, #0]
  403896:	bf04      	itt	eq
  403898:	f043 0301 	orreq.w	r3, r3, #1
  40389c:	81a3      	strheq	r3, [r4, #12]
  40389e:	89a3      	ldrh	r3, [r4, #12]
  4038a0:	6127      	str	r7, [r4, #16]
  4038a2:	f003 0008 	and.w	r0, r3, #8
  4038a6:	b280      	uxth	r0, r0
  4038a8:	6165      	str	r5, [r4, #20]
  4038aa:	b158      	cbz	r0, 4038c4 <setvbuf+0x134>
  4038ac:	f013 0301 	ands.w	r3, r3, #1
  4038b0:	f04f 0000 	mov.w	r0, #0
  4038b4:	bf1d      	ittte	ne
  4038b6:	426d      	negne	r5, r5
  4038b8:	60a0      	strne	r0, [r4, #8]
  4038ba:	61a5      	strne	r5, [r4, #24]
  4038bc:	60a5      	streq	r5, [r4, #8]
  4038be:	bf08      	it	eq
  4038c0:	4618      	moveq	r0, r3
  4038c2:	e003      	b.n	4038cc <setvbuf+0x13c>
  4038c4:	60a0      	str	r0, [r4, #8]
  4038c6:	e001      	b.n	4038cc <setvbuf+0x13c>
  4038c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4038cc:	b003      	add	sp, #12
  4038ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4038d2:	bf00      	nop
  4038d4:	20000074 	.word	0x20000074
  4038d8:	00408290 	.word	0x00408290
  4038dc:	004082b0 	.word	0x004082b0
  4038e0:	004082d0 	.word	0x004082d0

004038e4 <strcmp>:
  4038e4:	f810 2b01 	ldrb.w	r2, [r0], #1
  4038e8:	f811 3b01 	ldrb.w	r3, [r1], #1
  4038ec:	2a01      	cmp	r2, #1
  4038ee:	bf28      	it	cs
  4038f0:	429a      	cmpcs	r2, r3
  4038f2:	d0f7      	beq.n	4038e4 <strcmp>
  4038f4:	1ad0      	subs	r0, r2, r3
  4038f6:	4770      	bx	lr

004038f8 <strcpy>:
  4038f8:	4603      	mov	r3, r0
  4038fa:	f811 2b01 	ldrb.w	r2, [r1], #1
  4038fe:	f803 2b01 	strb.w	r2, [r3], #1
  403902:	2a00      	cmp	r2, #0
  403904:	d1f9      	bne.n	4038fa <strcpy+0x2>
  403906:	4770      	bx	lr

00403908 <strlen>:
  403908:	4603      	mov	r3, r0
  40390a:	f813 2b01 	ldrb.w	r2, [r3], #1
  40390e:	2a00      	cmp	r2, #0
  403910:	d1fb      	bne.n	40390a <strlen+0x2>
  403912:	1a18      	subs	r0, r3, r0
  403914:	3801      	subs	r0, #1
  403916:	4770      	bx	lr

00403918 <sulp>:
  403918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40391c:	460f      	mov	r7, r1
  40391e:	4690      	mov	r8, r2
  403920:	f002 fe1c 	bl	40655c <__ulp>
  403924:	4604      	mov	r4, r0
  403926:	460d      	mov	r5, r1
  403928:	f1b8 0f00 	cmp.w	r8, #0
  40392c:	d011      	beq.n	403952 <sulp+0x3a>
  40392e:	f3c7 530a 	ubfx	r3, r7, #20, #11
  403932:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  403936:	2b00      	cmp	r3, #0
  403938:	dd0b      	ble.n	403952 <sulp+0x3a>
  40393a:	051b      	lsls	r3, r3, #20
  40393c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
  403940:	2400      	movs	r4, #0
  403942:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
  403946:	4622      	mov	r2, r4
  403948:	462b      	mov	r3, r5
  40394a:	f003 fbc1 	bl	4070d0 <__aeabi_dmul>
  40394e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403952:	4620      	mov	r0, r4
  403954:	4629      	mov	r1, r5
  403956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40395a:	0000      	movs	r0, r0
  40395c:	0000      	movs	r0, r0
	...

00403960 <_strtod_l>:
  403960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403964:	461f      	mov	r7, r3
  403966:	b09f      	sub	sp, #124	; 0x7c
  403968:	2300      	movs	r3, #0
  40396a:	4682      	mov	sl, r0
  40396c:	4638      	mov	r0, r7
  40396e:	931a      	str	r3, [sp, #104]	; 0x68
  403970:	9106      	str	r1, [sp, #24]
  403972:	9215      	str	r2, [sp, #84]	; 0x54
  403974:	f002 fa51 	bl	405e1a <__localeconv_l>
  403978:	4606      	mov	r6, r0
  40397a:	6800      	ldr	r0, [r0, #0]
  40397c:	f7ff ffc4 	bl	403908 <strlen>
  403980:	9b06      	ldr	r3, [sp, #24]
  403982:	4604      	mov	r4, r0
  403984:	f04f 0800 	mov.w	r8, #0
  403988:	f04f 0900 	mov.w	r9, #0
  40398c:	9319      	str	r3, [sp, #100]	; 0x64
  40398e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403990:	781a      	ldrb	r2, [r3, #0]
  403992:	2a0d      	cmp	r2, #13
  403994:	d805      	bhi.n	4039a2 <_strtod_l+0x42>
  403996:	2a09      	cmp	r2, #9
  403998:	d213      	bcs.n	4039c2 <_strtod_l+0x62>
  40399a:	2a00      	cmp	r2, #0
  40399c:	f000 8196 	beq.w	403ccc <_strtod_l+0x36c>
  4039a0:	e011      	b.n	4039c6 <_strtod_l+0x66>
  4039a2:	2a2b      	cmp	r2, #43	; 0x2b
  4039a4:	d004      	beq.n	4039b0 <_strtod_l+0x50>
  4039a6:	2a2d      	cmp	r2, #45	; 0x2d
  4039a8:	d004      	beq.n	4039b4 <_strtod_l+0x54>
  4039aa:	2a20      	cmp	r2, #32
  4039ac:	d10b      	bne.n	4039c6 <_strtod_l+0x66>
  4039ae:	e008      	b.n	4039c2 <_strtod_l+0x62>
  4039b0:	2200      	movs	r2, #0
  4039b2:	e000      	b.n	4039b6 <_strtod_l+0x56>
  4039b4:	2201      	movs	r2, #1
  4039b6:	920e      	str	r2, [sp, #56]	; 0x38
  4039b8:	1c5a      	adds	r2, r3, #1
  4039ba:	9219      	str	r2, [sp, #100]	; 0x64
  4039bc:	785b      	ldrb	r3, [r3, #1]
  4039be:	b923      	cbnz	r3, 4039ca <_strtod_l+0x6a>
  4039c0:	e184      	b.n	403ccc <_strtod_l+0x36c>
  4039c2:	3301      	adds	r3, #1
  4039c4:	e7e2      	b.n	40398c <_strtod_l+0x2c>
  4039c6:	2300      	movs	r3, #0
  4039c8:	930e      	str	r3, [sp, #56]	; 0x38
  4039ca:	9d19      	ldr	r5, [sp, #100]	; 0x64
  4039cc:	782b      	ldrb	r3, [r5, #0]
  4039ce:	2b30      	cmp	r3, #48	; 0x30
  4039d0:	d15d      	bne.n	403a8e <_strtod_l+0x12e>
  4039d2:	786b      	ldrb	r3, [r5, #1]
  4039d4:	2b58      	cmp	r3, #88	; 0x58
  4039d6:	d001      	beq.n	4039dc <_strtod_l+0x7c>
  4039d8:	2b78      	cmp	r3, #120	; 0x78
  4039da:	d14d      	bne.n	403a78 <_strtod_l+0x118>
  4039dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4039de:	9301      	str	r3, [sp, #4]
  4039e0:	ab1a      	add	r3, sp, #104	; 0x68
  4039e2:	9300      	str	r3, [sp, #0]
  4039e4:	9702      	str	r7, [sp, #8]
  4039e6:	ab1b      	add	r3, sp, #108	; 0x6c
  4039e8:	4a9d      	ldr	r2, [pc, #628]	; (403c60 <_strtod_l+0x300>)
  4039ea:	a919      	add	r1, sp, #100	; 0x64
  4039ec:	4650      	mov	r0, sl
  4039ee:	f001 ff3e 	bl	40586e <__gethex>
  4039f2:	f010 0607 	ands.w	r6, r0, #7
  4039f6:	4604      	mov	r4, r0
  4039f8:	f000 856f 	beq.w	4044da <_strtod_l+0xb7a>
  4039fc:	2e06      	cmp	r6, #6
  4039fe:	d105      	bne.n	403a0c <_strtod_l+0xac>
  403a00:	3501      	adds	r5, #1
  403a02:	2300      	movs	r3, #0
  403a04:	9519      	str	r5, [sp, #100]	; 0x64
  403a06:	930e      	str	r3, [sp, #56]	; 0x38
  403a08:	f000 bd67 	b.w	4044da <_strtod_l+0xb7a>
  403a0c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403a0e:	b13a      	cbz	r2, 403a20 <_strtod_l+0xc0>
  403a10:	2135      	movs	r1, #53	; 0x35
  403a12:	a81c      	add	r0, sp, #112	; 0x70
  403a14:	f002 fe8a 	bl	40672c <__copybits>
  403a18:	991a      	ldr	r1, [sp, #104]	; 0x68
  403a1a:	4650      	mov	r0, sl
  403a1c:	f002 fb0d 	bl	40603a <_Bfree>
  403a20:	2e06      	cmp	r6, #6
  403a22:	d822      	bhi.n	403a6a <_strtod_l+0x10a>
  403a24:	e8df f006 	tbb	[pc, r6]
  403a28:	18080d04 	.word	0x18080d04
  403a2c:	0d1d      	.short	0x0d1d
  403a2e:	04          	.byte	0x04
  403a2f:	00          	.byte	0x00
  403a30:	f04f 0900 	mov.w	r9, #0
  403a34:	46c8      	mov	r8, r9
  403a36:	e018      	b.n	403a6a <_strtod_l+0x10a>
  403a38:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403a3c:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
  403a40:	e013      	b.n	403a6a <_strtod_l+0x10a>
  403a42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403a44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  403a46:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403a4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  403a4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
  403a52:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
  403a56:	e008      	b.n	403a6a <_strtod_l+0x10a>
  403a58:	f8df 9208 	ldr.w	r9, [pc, #520]	; 403c64 <_strtod_l+0x304>
  403a5c:	f04f 0800 	mov.w	r8, #0
  403a60:	e003      	b.n	403a6a <_strtod_l+0x10a>
  403a62:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
  403a66:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  403a6a:	0721      	lsls	r1, r4, #28
  403a6c:	f140 8535 	bpl.w	4044da <_strtod_l+0xb7a>
  403a70:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
  403a74:	f000 bd31 	b.w	4044da <_strtod_l+0xb7a>
  403a78:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403a7a:	1c5a      	adds	r2, r3, #1
  403a7c:	9219      	str	r2, [sp, #100]	; 0x64
  403a7e:	785b      	ldrb	r3, [r3, #1]
  403a80:	2b30      	cmp	r3, #48	; 0x30
  403a82:	d0f9      	beq.n	403a78 <_strtod_l+0x118>
  403a84:	2b00      	cmp	r3, #0
  403a86:	f000 8528 	beq.w	4044da <_strtod_l+0xb7a>
  403a8a:	2301      	movs	r3, #1
  403a8c:	e000      	b.n	403a90 <_strtod_l+0x130>
  403a8e:	2300      	movs	r3, #0
  403a90:	9308      	str	r3, [sp, #32]
  403a92:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403a94:	9309      	str	r3, [sp, #36]	; 0x24
  403a96:	2300      	movs	r3, #0
  403a98:	9305      	str	r3, [sp, #20]
  403a9a:	469b      	mov	fp, r3
  403a9c:	9304      	str	r3, [sp, #16]
  403a9e:	220a      	movs	r2, #10
  403aa0:	9819      	ldr	r0, [sp, #100]	; 0x64
  403aa2:	7805      	ldrb	r5, [r0, #0]
  403aa4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
  403aa8:	b2d9      	uxtb	r1, r3
  403aaa:	2909      	cmp	r1, #9
  403aac:	d80e      	bhi.n	403acc <_strtod_l+0x16c>
  403aae:	9904      	ldr	r1, [sp, #16]
  403ab0:	2908      	cmp	r1, #8
  403ab2:	bfc5      	ittet	gt
  403ab4:	9905      	ldrgt	r1, [sp, #20]
  403ab6:	fb02 3301 	mlagt	r3, r2, r1, r3
  403aba:	fb02 3b0b 	mlale	fp, r2, fp, r3
  403abe:	9305      	strgt	r3, [sp, #20]
  403ac0:	9b04      	ldr	r3, [sp, #16]
  403ac2:	3001      	adds	r0, #1
  403ac4:	3301      	adds	r3, #1
  403ac6:	9304      	str	r3, [sp, #16]
  403ac8:	9019      	str	r0, [sp, #100]	; 0x64
  403aca:	e7e9      	b.n	403aa0 <_strtod_l+0x140>
  403acc:	4622      	mov	r2, r4
  403ace:	6831      	ldr	r1, [r6, #0]
  403ad0:	f003 f8b9 	bl	406c46 <strncmp>
  403ad4:	b128      	cbz	r0, 403ae2 <_strtod_l+0x182>
  403ad6:	2000      	movs	r0, #0
  403ad8:	462b      	mov	r3, r5
  403ada:	4602      	mov	r2, r0
  403adc:	9d04      	ldr	r5, [sp, #16]
  403ade:	4601      	mov	r1, r0
  403ae0:	e04d      	b.n	403b7e <_strtod_l+0x21e>
  403ae2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403ae4:	191a      	adds	r2, r3, r4
  403ae6:	9219      	str	r2, [sp, #100]	; 0x64
  403ae8:	9a04      	ldr	r2, [sp, #16]
  403aea:	5d1b      	ldrb	r3, [r3, r4]
  403aec:	2a00      	cmp	r2, #0
  403aee:	d13f      	bne.n	403b70 <_strtod_l+0x210>
  403af0:	4610      	mov	r0, r2
  403af2:	2b30      	cmp	r3, #48	; 0x30
  403af4:	d105      	bne.n	403b02 <_strtod_l+0x1a2>
  403af6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403af8:	1c5a      	adds	r2, r3, #1
  403afa:	9219      	str	r2, [sp, #100]	; 0x64
  403afc:	3001      	adds	r0, #1
  403afe:	785b      	ldrb	r3, [r3, #1]
  403b00:	e7f7      	b.n	403af2 <_strtod_l+0x192>
  403b02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
  403b06:	2a08      	cmp	r2, #8
  403b08:	d83f      	bhi.n	403b8a <_strtod_l+0x22a>
  403b0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403b0c:	9209      	str	r2, [sp, #36]	; 0x24
  403b0e:	4602      	mov	r2, r0
  403b10:	2000      	movs	r0, #0
  403b12:	4605      	mov	r5, r0
  403b14:	3b30      	subs	r3, #48	; 0x30
  403b16:	f100 0101 	add.w	r1, r0, #1
  403b1a:	d023      	beq.n	403b64 <_strtod_l+0x204>
  403b1c:	440a      	add	r2, r1
  403b1e:	182e      	adds	r6, r5, r0
  403b20:	4629      	mov	r1, r5
  403b22:	240a      	movs	r4, #10
  403b24:	42b1      	cmp	r1, r6
  403b26:	d00c      	beq.n	403b42 <_strtod_l+0x1e2>
  403b28:	3101      	adds	r1, #1
  403b2a:	1e4f      	subs	r7, r1, #1
  403b2c:	2f08      	cmp	r7, #8
  403b2e:	dc02      	bgt.n	403b36 <_strtod_l+0x1d6>
  403b30:	fb04 fb0b 	mul.w	fp, r4, fp
  403b34:	e7f6      	b.n	403b24 <_strtod_l+0x1c4>
  403b36:	2910      	cmp	r1, #16
  403b38:	bfde      	ittt	le
  403b3a:	9f05      	ldrle	r7, [sp, #20]
  403b3c:	4367      	mulle	r7, r4
  403b3e:	9705      	strle	r7, [sp, #20]
  403b40:	e7f0      	b.n	403b24 <_strtod_l+0x1c4>
  403b42:	4428      	add	r0, r5
  403b44:	2808      	cmp	r0, #8
  403b46:	f100 0501 	add.w	r5, r0, #1
  403b4a:	dc03      	bgt.n	403b54 <_strtod_l+0x1f4>
  403b4c:	210a      	movs	r1, #10
  403b4e:	fb01 3b0b 	mla	fp, r1, fp, r3
  403b52:	e006      	b.n	403b62 <_strtod_l+0x202>
  403b54:	2d10      	cmp	r5, #16
  403b56:	bfdf      	itttt	le
  403b58:	9805      	ldrle	r0, [sp, #20]
  403b5a:	210a      	movle	r1, #10
  403b5c:	fb01 3300 	mlale	r3, r1, r0, r3
  403b60:	9305      	strle	r3, [sp, #20]
  403b62:	2100      	movs	r1, #0
  403b64:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403b66:	1c58      	adds	r0, r3, #1
  403b68:	9019      	str	r0, [sp, #100]	; 0x64
  403b6a:	785b      	ldrb	r3, [r3, #1]
  403b6c:	4608      	mov	r0, r1
  403b6e:	e001      	b.n	403b74 <_strtod_l+0x214>
  403b70:	9d04      	ldr	r5, [sp, #16]
  403b72:	4602      	mov	r2, r0
  403b74:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  403b78:	2909      	cmp	r1, #9
  403b7a:	d9cb      	bls.n	403b14 <_strtod_l+0x1b4>
  403b7c:	2101      	movs	r1, #1
  403b7e:	2b65      	cmp	r3, #101	; 0x65
  403b80:	d001      	beq.n	403b86 <_strtod_l+0x226>
  403b82:	2b45      	cmp	r3, #69	; 0x45
  403b84:	d154      	bne.n	403c30 <_strtod_l+0x2d0>
  403b86:	b96d      	cbnz	r5, 403ba4 <_strtod_l+0x244>
  403b88:	e004      	b.n	403b94 <_strtod_l+0x234>
  403b8a:	2b65      	cmp	r3, #101	; 0x65
  403b8c:	f040 84b3 	bne.w	4044f6 <_strtod_l+0xb96>
  403b90:	2200      	movs	r2, #0
  403b92:	2101      	movs	r1, #1
  403b94:	b928      	cbnz	r0, 403ba2 <_strtod_l+0x242>
  403b96:	9b08      	ldr	r3, [sp, #32]
  403b98:	2b00      	cmp	r3, #0
  403b9a:	f000 8097 	beq.w	403ccc <_strtod_l+0x36c>
  403b9e:	4605      	mov	r5, r0
  403ba0:	e000      	b.n	403ba4 <_strtod_l+0x244>
  403ba2:	2500      	movs	r5, #0
  403ba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403ba6:	9306      	str	r3, [sp, #24]
  403ba8:	3301      	adds	r3, #1
  403baa:	9319      	str	r3, [sp, #100]	; 0x64
  403bac:	9b06      	ldr	r3, [sp, #24]
  403bae:	785b      	ldrb	r3, [r3, #1]
  403bb0:	2b2b      	cmp	r3, #43	; 0x2b
  403bb2:	d006      	beq.n	403bc2 <_strtod_l+0x262>
  403bb4:	2b2d      	cmp	r3, #45	; 0x2d
  403bb6:	d002      	beq.n	403bbe <_strtod_l+0x25e>
  403bb8:	2400      	movs	r4, #0
  403bba:	9407      	str	r4, [sp, #28]
  403bbc:	e008      	b.n	403bd0 <_strtod_l+0x270>
  403bbe:	2301      	movs	r3, #1
  403bc0:	e000      	b.n	403bc4 <_strtod_l+0x264>
  403bc2:	2300      	movs	r3, #0
  403bc4:	9307      	str	r3, [sp, #28]
  403bc6:	9b06      	ldr	r3, [sp, #24]
  403bc8:	3302      	adds	r3, #2
  403bca:	9319      	str	r3, [sp, #100]	; 0x64
  403bcc:	9b06      	ldr	r3, [sp, #24]
  403bce:	789b      	ldrb	r3, [r3, #2]
  403bd0:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  403bd4:	2c09      	cmp	r4, #9
  403bd6:	d829      	bhi.n	403c2c <_strtod_l+0x2cc>
  403bd8:	2b30      	cmp	r3, #48	; 0x30
  403bda:	d104      	bne.n	403be6 <_strtod_l+0x286>
  403bdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bde:	1c5c      	adds	r4, r3, #1
  403be0:	9419      	str	r4, [sp, #100]	; 0x64
  403be2:	785b      	ldrb	r3, [r3, #1]
  403be4:	e7f8      	b.n	403bd8 <_strtod_l+0x278>
  403be6:	f1a3 0431 	sub.w	r4, r3, #49	; 0x31
  403bea:	2c08      	cmp	r4, #8
  403bec:	d820      	bhi.n	403c30 <_strtod_l+0x2d0>
  403bee:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  403bf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bf4:	f04f 0e0a 	mov.w	lr, #10
  403bf8:	461e      	mov	r6, r3
  403bfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bfc:	1c5c      	adds	r4, r3, #1
  403bfe:	9419      	str	r4, [sp, #100]	; 0x64
  403c00:	785b      	ldrb	r3, [r3, #1]
  403c02:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
  403c06:	f1bc 0f09 	cmp.w	ip, #9
  403c0a:	d803      	bhi.n	403c14 <_strtod_l+0x2b4>
  403c0c:	fb0e 3707 	mla	r7, lr, r7, r3
  403c10:	3f30      	subs	r7, #48	; 0x30
  403c12:	e7f2      	b.n	403bfa <_strtod_l+0x29a>
  403c14:	1ba4      	subs	r4, r4, r6
  403c16:	2c08      	cmp	r4, #8
  403c18:	f644 641f 	movw	r4, #19999	; 0x4e1f
  403c1c:	dc02      	bgt.n	403c24 <_strtod_l+0x2c4>
  403c1e:	42bc      	cmp	r4, r7
  403c20:	bfa8      	it	ge
  403c22:	463c      	movge	r4, r7
  403c24:	9e07      	ldr	r6, [sp, #28]
  403c26:	b126      	cbz	r6, 403c32 <_strtod_l+0x2d2>
  403c28:	4264      	negs	r4, r4
  403c2a:	e002      	b.n	403c32 <_strtod_l+0x2d2>
  403c2c:	9c06      	ldr	r4, [sp, #24]
  403c2e:	9419      	str	r4, [sp, #100]	; 0x64
  403c30:	2400      	movs	r4, #0
  403c32:	2d00      	cmp	r5, #0
  403c34:	d153      	bne.n	403cde <_strtod_l+0x37e>
  403c36:	2800      	cmp	r0, #0
  403c38:	f040 844f 	bne.w	4044da <_strtod_l+0xb7a>
  403c3c:	9a08      	ldr	r2, [sp, #32]
  403c3e:	2a00      	cmp	r2, #0
  403c40:	f040 844b 	bne.w	4044da <_strtod_l+0xb7a>
  403c44:	2900      	cmp	r1, #0
  403c46:	d141      	bne.n	403ccc <_strtod_l+0x36c>
  403c48:	2b4e      	cmp	r3, #78	; 0x4e
  403c4a:	d020      	beq.n	403c8e <_strtod_l+0x32e>
  403c4c:	dc02      	bgt.n	403c54 <_strtod_l+0x2f4>
  403c4e:	2b49      	cmp	r3, #73	; 0x49
  403c50:	d00a      	beq.n	403c68 <_strtod_l+0x308>
  403c52:	e03b      	b.n	403ccc <_strtod_l+0x36c>
  403c54:	2b69      	cmp	r3, #105	; 0x69
  403c56:	d007      	beq.n	403c68 <_strtod_l+0x308>
  403c58:	2b6e      	cmp	r3, #110	; 0x6e
  403c5a:	d018      	beq.n	403c8e <_strtod_l+0x32e>
  403c5c:	e036      	b.n	403ccc <_strtod_l+0x36c>
  403c5e:	bf00      	nop
  403c60:	00408258 	.word	0x00408258
  403c64:	7ff00000 	.word	0x7ff00000
  403c68:	49ab      	ldr	r1, [pc, #684]	; (403f18 <_strtod_l+0x5b8>)
  403c6a:	a819      	add	r0, sp, #100	; 0x64
  403c6c:	f002 f831 	bl	405cd2 <__match>
  403c70:	b360      	cbz	r0, 403ccc <_strtod_l+0x36c>
  403c72:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c74:	49a9      	ldr	r1, [pc, #676]	; (403f1c <_strtod_l+0x5bc>)
  403c76:	3b01      	subs	r3, #1
  403c78:	a819      	add	r0, sp, #100	; 0x64
  403c7a:	9319      	str	r3, [sp, #100]	; 0x64
  403c7c:	f002 f829 	bl	405cd2 <__match>
  403c80:	b910      	cbnz	r0, 403c88 <_strtod_l+0x328>
  403c82:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c84:	3301      	adds	r3, #1
  403c86:	9319      	str	r3, [sp, #100]	; 0x64
  403c88:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 403f38 <_strtod_l+0x5d8>
  403c8c:	e01a      	b.n	403cc4 <_strtod_l+0x364>
  403c8e:	49a4      	ldr	r1, [pc, #656]	; (403f20 <_strtod_l+0x5c0>)
  403c90:	a819      	add	r0, sp, #100	; 0x64
  403c92:	f002 f81e 	bl	405cd2 <__match>
  403c96:	b1c8      	cbz	r0, 403ccc <_strtod_l+0x36c>
  403c98:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c9a:	781b      	ldrb	r3, [r3, #0]
  403c9c:	2b28      	cmp	r3, #40	; 0x28
  403c9e:	d10f      	bne.n	403cc0 <_strtod_l+0x360>
  403ca0:	aa1c      	add	r2, sp, #112	; 0x70
  403ca2:	49a0      	ldr	r1, [pc, #640]	; (403f24 <_strtod_l+0x5c4>)
  403ca4:	a819      	add	r0, sp, #100	; 0x64
  403ca6:	f002 f827 	bl	405cf8 <__hexnan>
  403caa:	2805      	cmp	r0, #5
  403cac:	d108      	bne.n	403cc0 <_strtod_l+0x360>
  403cae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403cb0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403cb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
  403cb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
  403cbc:	f000 bc0d 	b.w	4044da <_strtod_l+0xb7a>
  403cc0:	f8df 9278 	ldr.w	r9, [pc, #632]	; 403f3c <_strtod_l+0x5dc>
  403cc4:	f04f 0800 	mov.w	r8, #0
  403cc8:	f000 bc07 	b.w	4044da <_strtod_l+0xb7a>
  403ccc:	9b06      	ldr	r3, [sp, #24]
  403cce:	9319      	str	r3, [sp, #100]	; 0x64
  403cd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403cd2:	2b00      	cmp	r3, #0
  403cd4:	f000 840c 	beq.w	4044f0 <_strtod_l+0xb90>
  403cd8:	2300      	movs	r3, #0
  403cda:	930e      	str	r3, [sp, #56]	; 0x38
  403cdc:	e3ff      	b.n	4044de <_strtod_l+0xb7e>
  403cde:	9b04      	ldr	r3, [sp, #16]
  403ce0:	4658      	mov	r0, fp
  403ce2:	2b00      	cmp	r3, #0
  403ce4:	bf08      	it	eq
  403ce6:	462b      	moveq	r3, r5
  403ce8:	2d10      	cmp	r5, #16
  403cea:	eba4 0702 	sub.w	r7, r4, r2
  403cee:	9304      	str	r3, [sp, #16]
  403cf0:	462c      	mov	r4, r5
  403cf2:	bfa8      	it	ge
  403cf4:	2410      	movge	r4, #16
  403cf6:	f003 f975 	bl	406fe4 <__aeabi_ui2d>
  403cfa:	2c09      	cmp	r4, #9
  403cfc:	4680      	mov	r8, r0
  403cfe:	4689      	mov	r9, r1
  403d00:	dd13      	ble.n	403d2a <_strtod_l+0x3ca>
  403d02:	4b89      	ldr	r3, [pc, #548]	; (403f28 <_strtod_l+0x5c8>)
  403d04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  403d08:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  403d0c:	f003 f9e0 	bl	4070d0 <__aeabi_dmul>
  403d10:	4680      	mov	r8, r0
  403d12:	9805      	ldr	r0, [sp, #20]
  403d14:	4689      	mov	r9, r1
  403d16:	f003 f965 	bl	406fe4 <__aeabi_ui2d>
  403d1a:	4602      	mov	r2, r0
  403d1c:	460b      	mov	r3, r1
  403d1e:	4640      	mov	r0, r8
  403d20:	4649      	mov	r1, r9
  403d22:	f003 f823 	bl	406d6c <__adddf3>
  403d26:	4680      	mov	r8, r0
  403d28:	4689      	mov	r9, r1
  403d2a:	2d0f      	cmp	r5, #15
  403d2c:	dc33      	bgt.n	403d96 <_strtod_l+0x436>
  403d2e:	2f00      	cmp	r7, #0
  403d30:	f000 83d3 	beq.w	4044da <_strtod_l+0xb7a>
  403d34:	dd22      	ble.n	403d7c <_strtod_l+0x41c>
  403d36:	2f16      	cmp	r7, #22
  403d38:	dc07      	bgt.n	403d4a <_strtod_l+0x3ea>
  403d3a:	4d7b      	ldr	r5, [pc, #492]	; (403f28 <_strtod_l+0x5c8>)
  403d3c:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
  403d40:	4642      	mov	r2, r8
  403d42:	464b      	mov	r3, r9
  403d44:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d48:	e013      	b.n	403d72 <_strtod_l+0x412>
  403d4a:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
  403d4e:	429f      	cmp	r7, r3
  403d50:	dc21      	bgt.n	403d96 <_strtod_l+0x436>
  403d52:	4c75      	ldr	r4, [pc, #468]	; (403f28 <_strtod_l+0x5c8>)
  403d54:	f1c5 050f 	rsb	r5, r5, #15
  403d58:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  403d5c:	1b7d      	subs	r5, r7, r5
  403d5e:	4642      	mov	r2, r8
  403d60:	464b      	mov	r3, r9
  403d62:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d66:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  403d6a:	f003 f9b1 	bl	4070d0 <__aeabi_dmul>
  403d6e:	e9d4 2300 	ldrd	r2, r3, [r4]
  403d72:	f003 f9ad 	bl	4070d0 <__aeabi_dmul>
  403d76:	4680      	mov	r8, r0
  403d78:	4689      	mov	r9, r1
  403d7a:	e3ae      	b.n	4044da <_strtod_l+0xb7a>
  403d7c:	f117 0f16 	cmn.w	r7, #22
  403d80:	db09      	blt.n	403d96 <_strtod_l+0x436>
  403d82:	4d69      	ldr	r5, [pc, #420]	; (403f28 <_strtod_l+0x5c8>)
  403d84:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
  403d88:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d8c:	4640      	mov	r0, r8
  403d8e:	4649      	mov	r1, r9
  403d90:	f003 fac8 	bl	407324 <__aeabi_ddiv>
  403d94:	e7ef      	b.n	403d76 <_strtod_l+0x416>
  403d96:	1b2c      	subs	r4, r5, r4
  403d98:	443c      	add	r4, r7
  403d9a:	2c00      	cmp	r4, #0
  403d9c:	dd5d      	ble.n	403e5a <_strtod_l+0x4fa>
  403d9e:	f014 010f 	ands.w	r1, r4, #15
  403da2:	d00a      	beq.n	403dba <_strtod_l+0x45a>
  403da4:	4b60      	ldr	r3, [pc, #384]	; (403f28 <_strtod_l+0x5c8>)
  403da6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  403daa:	4642      	mov	r2, r8
  403dac:	464b      	mov	r3, r9
  403dae:	e9d1 0100 	ldrd	r0, r1, [r1]
  403db2:	f003 f98d 	bl	4070d0 <__aeabi_dmul>
  403db6:	4680      	mov	r8, r0
  403db8:	4689      	mov	r9, r1
  403dba:	f034 040f 	bics.w	r4, r4, #15
  403dbe:	f000 80c1 	beq.w	403f44 <_strtod_l+0x5e4>
  403dc2:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  403dc6:	dd0f      	ble.n	403de8 <_strtod_l+0x488>
  403dc8:	f04f 0b00 	mov.w	fp, #0
  403dcc:	f8cd b010 	str.w	fp, [sp, #16]
  403dd0:	f8cd b01c 	str.w	fp, [sp, #28]
  403dd4:	f8cd b018 	str.w	fp, [sp, #24]
  403dd8:	2322      	movs	r3, #34	; 0x22
  403dda:	f8ca 3000 	str.w	r3, [sl]
  403dde:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403f38 <_strtod_l+0x5d8>
  403de2:	f04f 0800 	mov.w	r8, #0
  403de6:	e188      	b.n	4040fa <_strtod_l+0x79a>
  403de8:	2300      	movs	r3, #0
  403dea:	4e50      	ldr	r6, [pc, #320]	; (403f2c <_strtod_l+0x5cc>)
  403dec:	9305      	str	r3, [sp, #20]
  403dee:	1124      	asrs	r4, r4, #4
  403df0:	4640      	mov	r0, r8
  403df2:	4649      	mov	r1, r9
  403df4:	2c01      	cmp	r4, #1
  403df6:	dd0c      	ble.n	403e12 <_strtod_l+0x4b2>
  403df8:	07e2      	lsls	r2, r4, #31
  403dfa:	d504      	bpl.n	403e06 <_strtod_l+0x4a6>
  403dfc:	e9d6 2300 	ldrd	r2, r3, [r6]
  403e00:	f003 f966 	bl	4070d0 <__aeabi_dmul>
  403e04:	2301      	movs	r3, #1
  403e06:	9a05      	ldr	r2, [sp, #20]
  403e08:	3201      	adds	r2, #1
  403e0a:	9205      	str	r2, [sp, #20]
  403e0c:	1064      	asrs	r4, r4, #1
  403e0e:	3608      	adds	r6, #8
  403e10:	e7f0      	b.n	403df4 <_strtod_l+0x494>
  403e12:	b10b      	cbz	r3, 403e18 <_strtod_l+0x4b8>
  403e14:	4680      	mov	r8, r0
  403e16:	4689      	mov	r9, r1
  403e18:	4b44      	ldr	r3, [pc, #272]	; (403f2c <_strtod_l+0x5cc>)
  403e1a:	9a05      	ldr	r2, [sp, #20]
  403e1c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  403e20:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
  403e24:	e9d1 0100 	ldrd	r0, r1, [r1]
  403e28:	4642      	mov	r2, r8
  403e2a:	464b      	mov	r3, r9
  403e2c:	f003 f950 	bl	4070d0 <__aeabi_dmul>
  403e30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  403e34:	4689      	mov	r9, r1
  403e36:	460a      	mov	r2, r1
  403e38:	0d1b      	lsrs	r3, r3, #20
  403e3a:	493d      	ldr	r1, [pc, #244]	; (403f30 <_strtod_l+0x5d0>)
  403e3c:	051b      	lsls	r3, r3, #20
  403e3e:	428b      	cmp	r3, r1
  403e40:	4680      	mov	r8, r0
  403e42:	d8c1      	bhi.n	403dc8 <_strtod_l+0x468>
  403e44:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
  403e48:	428b      	cmp	r3, r1
  403e4a:	bf86      	itte	hi
  403e4c:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 403f40 <_strtod_l+0x5e0>
  403e50:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
  403e54:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
  403e58:	e074      	b.n	403f44 <_strtod_l+0x5e4>
  403e5a:	d073      	beq.n	403f44 <_strtod_l+0x5e4>
  403e5c:	4264      	negs	r4, r4
  403e5e:	f014 020f 	ands.w	r2, r4, #15
  403e62:	d00a      	beq.n	403e7a <_strtod_l+0x51a>
  403e64:	4b30      	ldr	r3, [pc, #192]	; (403f28 <_strtod_l+0x5c8>)
  403e66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403e6a:	4640      	mov	r0, r8
  403e6c:	4649      	mov	r1, r9
  403e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e72:	f003 fa57 	bl	407324 <__aeabi_ddiv>
  403e76:	4680      	mov	r8, r0
  403e78:	4689      	mov	r9, r1
  403e7a:	1124      	asrs	r4, r4, #4
  403e7c:	d062      	beq.n	403f44 <_strtod_l+0x5e4>
  403e7e:	2c1f      	cmp	r4, #31
  403e80:	dd08      	ble.n	403e94 <_strtod_l+0x534>
  403e82:	f04f 0b00 	mov.w	fp, #0
  403e86:	f8cd b010 	str.w	fp, [sp, #16]
  403e8a:	f8cd b01c 	str.w	fp, [sp, #28]
  403e8e:	f8cd b018 	str.w	fp, [sp, #24]
  403e92:	e12b      	b.n	4040ec <_strtod_l+0x78c>
  403e94:	f014 0f10 	tst.w	r4, #16
  403e98:	bf0c      	ite	eq
  403e9a:	2300      	moveq	r3, #0
  403e9c:	236a      	movne	r3, #106	; 0x6a
  403e9e:	4e25      	ldr	r6, [pc, #148]	; (403f34 <_strtod_l+0x5d4>)
  403ea0:	9305      	str	r3, [sp, #20]
  403ea2:	4640      	mov	r0, r8
  403ea4:	4649      	mov	r1, r9
  403ea6:	2300      	movs	r3, #0
  403ea8:	2c00      	cmp	r4, #0
  403eaa:	dd09      	ble.n	403ec0 <_strtod_l+0x560>
  403eac:	07e2      	lsls	r2, r4, #31
  403eae:	d504      	bpl.n	403eba <_strtod_l+0x55a>
  403eb0:	e9d6 2300 	ldrd	r2, r3, [r6]
  403eb4:	f003 f90c 	bl	4070d0 <__aeabi_dmul>
  403eb8:	2301      	movs	r3, #1
  403eba:	1064      	asrs	r4, r4, #1
  403ebc:	3608      	adds	r6, #8
  403ebe:	e7f3      	b.n	403ea8 <_strtod_l+0x548>
  403ec0:	b10b      	cbz	r3, 403ec6 <_strtod_l+0x566>
  403ec2:	4680      	mov	r8, r0
  403ec4:	4689      	mov	r9, r1
  403ec6:	9b05      	ldr	r3, [sp, #20]
  403ec8:	b1eb      	cbz	r3, 403f06 <_strtod_l+0x5a6>
  403eca:	f3c9 530a 	ubfx	r3, r9, #20, #11
  403ece:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  403ed2:	2b00      	cmp	r3, #0
  403ed4:	4649      	mov	r1, r9
  403ed6:	dd16      	ble.n	403f06 <_strtod_l+0x5a6>
  403ed8:	2b1f      	cmp	r3, #31
  403eda:	dd0e      	ble.n	403efa <_strtod_l+0x59a>
  403edc:	2b34      	cmp	r3, #52	; 0x34
  403ede:	bfde      	ittt	le
  403ee0:	3b20      	suble	r3, #32
  403ee2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
  403ee6:	fa02 f303 	lslle.w	r3, r2, r3
  403eea:	f04f 0800 	mov.w	r8, #0
  403eee:	bfcc      	ite	gt
  403ef0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
  403ef4:	ea03 0901 	andle.w	r9, r3, r1
  403ef8:	e005      	b.n	403f06 <_strtod_l+0x5a6>
  403efa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  403efe:	fa02 f303 	lsl.w	r3, r2, r3
  403f02:	ea03 0808 	and.w	r8, r3, r8
  403f06:	2200      	movs	r2, #0
  403f08:	2300      	movs	r3, #0
  403f0a:	4640      	mov	r0, r8
  403f0c:	4649      	mov	r1, r9
  403f0e:	f003 fb47 	bl	4075a0 <__aeabi_dcmpeq>
  403f12:	2800      	cmp	r0, #0
  403f14:	d1b5      	bne.n	403e82 <_strtod_l+0x522>
  403f16:	e017      	b.n	403f48 <_strtod_l+0x5e8>
  403f18:	00408201 	.word	0x00408201
  403f1c:	00408283 	.word	0x00408283
  403f20:	00408209 	.word	0x00408209
  403f24:	0040826c 	.word	0x0040826c
  403f28:	00408300 	.word	0x00408300
  403f2c:	004083c8 	.word	0x004083c8
  403f30:	7ca00000 	.word	0x7ca00000
  403f34:	00408230 	.word	0x00408230
  403f38:	7ff00000 	.word	0x7ff00000
  403f3c:	fff80000 	.word	0xfff80000
  403f40:	7fefffff 	.word	0x7fefffff
  403f44:	2300      	movs	r3, #0
  403f46:	9305      	str	r3, [sp, #20]
  403f48:	f8cd b000 	str.w	fp, [sp]
  403f4c:	462b      	mov	r3, r5
  403f4e:	9a04      	ldr	r2, [sp, #16]
  403f50:	9909      	ldr	r1, [sp, #36]	; 0x24
  403f52:	4650      	mov	r0, sl
  403f54:	f002 f8c3 	bl	4060de <__s2b>
  403f58:	9007      	str	r0, [sp, #28]
  403f5a:	2800      	cmp	r0, #0
  403f5c:	f43f af34 	beq.w	403dc8 <_strtod_l+0x468>
  403f60:	2f00      	cmp	r7, #0
  403f62:	f1c7 0300 	rsb	r3, r7, #0
  403f66:	bfa8      	it	ge
  403f68:	2300      	movge	r3, #0
  403f6a:	930f      	str	r3, [sp, #60]	; 0x3c
  403f6c:	f04f 0b00 	mov.w	fp, #0
  403f70:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
  403f74:	9314      	str	r3, [sp, #80]	; 0x50
  403f76:	f8cd b010 	str.w	fp, [sp, #16]
  403f7a:	9b07      	ldr	r3, [sp, #28]
  403f7c:	4650      	mov	r0, sl
  403f7e:	6859      	ldr	r1, [r3, #4]
  403f80:	f002 f826 	bl	405fd0 <_Balloc>
  403f84:	9006      	str	r0, [sp, #24]
  403f86:	2800      	cmp	r0, #0
  403f88:	f43f af26 	beq.w	403dd8 <_strtod_l+0x478>
  403f8c:	9b07      	ldr	r3, [sp, #28]
  403f8e:	691a      	ldr	r2, [r3, #16]
  403f90:	3202      	adds	r2, #2
  403f92:	f103 010c 	add.w	r1, r3, #12
  403f96:	0092      	lsls	r2, r2, #2
  403f98:	300c      	adds	r0, #12
  403f9a:	f7fe fef5 	bl	402d88 <memcpy>
  403f9e:	ab1c      	add	r3, sp, #112	; 0x70
  403fa0:	9301      	str	r3, [sp, #4]
  403fa2:	ab1b      	add	r3, sp, #108	; 0x6c
  403fa4:	9300      	str	r3, [sp, #0]
  403fa6:	4642      	mov	r2, r8
  403fa8:	464b      	mov	r3, r9
  403faa:	4650      	mov	r0, sl
  403fac:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  403fb0:	f002 fb45 	bl	40663e <__d2b>
  403fb4:	901a      	str	r0, [sp, #104]	; 0x68
  403fb6:	2800      	cmp	r0, #0
  403fb8:	f43f af0e 	beq.w	403dd8 <_strtod_l+0x478>
  403fbc:	2101      	movs	r1, #1
  403fbe:	4650      	mov	r0, sl
  403fc0:	f002 f918 	bl	4061f4 <__i2b>
  403fc4:	9004      	str	r0, [sp, #16]
  403fc6:	2800      	cmp	r0, #0
  403fc8:	f43f af06 	beq.w	403dd8 <_strtod_l+0x478>
  403fcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  403fce:	9905      	ldr	r1, [sp, #20]
  403fd0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
  403fd2:	2b00      	cmp	r3, #0
  403fd4:	bfad      	iteet	ge
  403fd6:	9a0f      	ldrge	r2, [sp, #60]	; 0x3c
  403fd8:	9a14      	ldrlt	r2, [sp, #80]	; 0x50
  403fda:	9e0f      	ldrlt	r6, [sp, #60]	; 0x3c
  403fdc:	18d6      	addge	r6, r2, r3
  403fde:	bfb8      	it	lt
  403fe0:	1ad2      	sublt	r2, r2, r3
  403fe2:	eba3 0301 	sub.w	r3, r3, r1
  403fe6:	4423      	add	r3, r4
  403fe8:	49af      	ldr	r1, [pc, #700]	; (4042a8 <_strtod_l+0x948>)
  403fea:	bfa8      	it	ge
  403fec:	9a14      	ldrge	r2, [sp, #80]	; 0x50
  403fee:	3b01      	subs	r3, #1
  403ff0:	428b      	cmp	r3, r1
  403ff2:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
  403ff6:	f280 8085 	bge.w	404104 <_strtod_l+0x7a4>
  403ffa:	1ac9      	subs	r1, r1, r3
  403ffc:	291f      	cmp	r1, #31
  403ffe:	bfc8      	it	gt
  404000:	4daa      	ldrgt	r5, [pc, #680]	; (4042ac <_strtod_l+0x94c>)
  404002:	f04f 0701 	mov.w	r7, #1
  404006:	bfd4      	ite	le
  404008:	fa07 f301 	lslle.w	r3, r7, r1
  40400c:	1aed      	subgt	r5, r5, r3
  40400e:	eba4 0401 	sub.w	r4, r4, r1
  404012:	bfd9      	ittee	le
  404014:	9309      	strle	r3, [sp, #36]	; 0x24
  404016:	2500      	movle	r5, #0
  404018:	fa07 f505 	lslgt.w	r5, r7, r5
  40401c:	9709      	strgt	r7, [sp, #36]	; 0x24
  40401e:	1937      	adds	r7, r6, r4
  404020:	9b05      	ldr	r3, [sp, #20]
  404022:	42be      	cmp	r6, r7
  404024:	4414      	add	r4, r2
  404026:	441c      	add	r4, r3
  404028:	4633      	mov	r3, r6
  40402a:	bfa8      	it	ge
  40402c:	463b      	movge	r3, r7
  40402e:	42a3      	cmp	r3, r4
  404030:	bfa8      	it	ge
  404032:	4623      	movge	r3, r4
  404034:	2b00      	cmp	r3, #0
  404036:	bfc2      	ittt	gt
  404038:	1aff      	subgt	r7, r7, r3
  40403a:	1ae4      	subgt	r4, r4, r3
  40403c:	1af6      	subgt	r6, r6, r3
  40403e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404040:	2b00      	cmp	r3, #0
  404042:	d163      	bne.n	40410c <_strtod_l+0x7ac>
  404044:	2f00      	cmp	r7, #0
  404046:	dc7a      	bgt.n	40413e <_strtod_l+0x7de>
  404048:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40404a:	2b00      	cmp	r3, #0
  40404c:	f040 8081 	bne.w	404152 <_strtod_l+0x7f2>
  404050:	2c00      	cmp	r4, #0
  404052:	f300 8088 	bgt.w	404166 <_strtod_l+0x806>
  404056:	2e00      	cmp	r6, #0
  404058:	f300 808f 	bgt.w	40417a <_strtod_l+0x81a>
  40405c:	9a06      	ldr	r2, [sp, #24]
  40405e:	991a      	ldr	r1, [sp, #104]	; 0x68
  404060:	4650      	mov	r0, sl
  404062:	f002 fa1c 	bl	40649e <__mdiff>
  404066:	4683      	mov	fp, r0
  404068:	2800      	cmp	r0, #0
  40406a:	f43f aeb5 	beq.w	403dd8 <_strtod_l+0x478>
  40406e:	2400      	movs	r4, #0
  404070:	68c3      	ldr	r3, [r0, #12]
  404072:	9904      	ldr	r1, [sp, #16]
  404074:	60c4      	str	r4, [r0, #12]
  404076:	9308      	str	r3, [sp, #32]
  404078:	f002 f9f5 	bl	406466 <__mcmp>
  40407c:	42a0      	cmp	r0, r4
  40407e:	f280 808b 	bge.w	404198 <_strtod_l+0x838>
  404082:	9b08      	ldr	r3, [sp, #32]
  404084:	2b00      	cmp	r3, #0
  404086:	f040 8201 	bne.w	40448c <_strtod_l+0xb2c>
  40408a:	f1b8 0f00 	cmp.w	r8, #0
  40408e:	f040 81fd 	bne.w	40448c <_strtod_l+0xb2c>
  404092:	f3c9 0313 	ubfx	r3, r9, #0, #20
  404096:	2b00      	cmp	r3, #0
  404098:	f040 81f8 	bne.w	40448c <_strtod_l+0xb2c>
  40409c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4040a0:	0d1b      	lsrs	r3, r3, #20
  4040a2:	051b      	lsls	r3, r3, #20
  4040a4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  4040a8:	f240 81f0 	bls.w	40448c <_strtod_l+0xb2c>
  4040ac:	f8db 3014 	ldr.w	r3, [fp, #20]
  4040b0:	2b00      	cmp	r3, #0
  4040b2:	d06c      	beq.n	40418e <_strtod_l+0x82e>
  4040b4:	4659      	mov	r1, fp
  4040b6:	2201      	movs	r2, #1
  4040b8:	4650      	mov	r0, sl
  4040ba:	f002 f983 	bl	4063c4 <__lshift>
  4040be:	9904      	ldr	r1, [sp, #16]
  4040c0:	4683      	mov	fp, r0
  4040c2:	f002 f9d0 	bl	406466 <__mcmp>
  4040c6:	2800      	cmp	r0, #0
  4040c8:	f340 81e0 	ble.w	40448c <_strtod_l+0xb2c>
  4040cc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4040d0:	9a05      	ldr	r2, [sp, #20]
  4040d2:	0d1b      	lsrs	r3, r3, #20
  4040d4:	051b      	lsls	r3, r3, #20
  4040d6:	2a00      	cmp	r2, #0
  4040d8:	f000 808d 	beq.w	4041f6 <_strtod_l+0x896>
  4040dc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  4040e0:	f300 8089 	bgt.w	4041f6 <_strtod_l+0x896>
  4040e4:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  4040e8:	f300 81d2 	bgt.w	404490 <_strtod_l+0xb30>
  4040ec:	2322      	movs	r3, #34	; 0x22
  4040ee:	f04f 0800 	mov.w	r8, #0
  4040f2:	f04f 0900 	mov.w	r9, #0
  4040f6:	f8ca 3000 	str.w	r3, [sl]
  4040fa:	9b07      	ldr	r3, [sp, #28]
  4040fc:	2b00      	cmp	r3, #0
  4040fe:	f040 81d8 	bne.w	4044b2 <_strtod_l+0xb52>
  404102:	e1ea      	b.n	4044da <_strtod_l+0xb7a>
  404104:	2301      	movs	r3, #1
  404106:	2500      	movs	r5, #0
  404108:	9309      	str	r3, [sp, #36]	; 0x24
  40410a:	e788      	b.n	40401e <_strtod_l+0x6be>
  40410c:	461a      	mov	r2, r3
  40410e:	9904      	ldr	r1, [sp, #16]
  404110:	4650      	mov	r0, sl
  404112:	f002 f909 	bl	406328 <__pow5mult>
  404116:	9004      	str	r0, [sp, #16]
  404118:	2800      	cmp	r0, #0
  40411a:	f43f ae5d 	beq.w	403dd8 <_strtod_l+0x478>
  40411e:	4601      	mov	r1, r0
  404120:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404122:	4650      	mov	r0, sl
  404124:	f002 f86f 	bl	406206 <__multiply>
  404128:	9008      	str	r0, [sp, #32]
  40412a:	2800      	cmp	r0, #0
  40412c:	f43f ae54 	beq.w	403dd8 <_strtod_l+0x478>
  404130:	991a      	ldr	r1, [sp, #104]	; 0x68
  404132:	4650      	mov	r0, sl
  404134:	f001 ff81 	bl	40603a <_Bfree>
  404138:	9b08      	ldr	r3, [sp, #32]
  40413a:	931a      	str	r3, [sp, #104]	; 0x68
  40413c:	e782      	b.n	404044 <_strtod_l+0x6e4>
  40413e:	463a      	mov	r2, r7
  404140:	991a      	ldr	r1, [sp, #104]	; 0x68
  404142:	4650      	mov	r0, sl
  404144:	f002 f93e 	bl	4063c4 <__lshift>
  404148:	901a      	str	r0, [sp, #104]	; 0x68
  40414a:	2800      	cmp	r0, #0
  40414c:	f47f af7c 	bne.w	404048 <_strtod_l+0x6e8>
  404150:	e642      	b.n	403dd8 <_strtod_l+0x478>
  404152:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404154:	9906      	ldr	r1, [sp, #24]
  404156:	4650      	mov	r0, sl
  404158:	f002 f8e6 	bl	406328 <__pow5mult>
  40415c:	9006      	str	r0, [sp, #24]
  40415e:	2800      	cmp	r0, #0
  404160:	f47f af76 	bne.w	404050 <_strtod_l+0x6f0>
  404164:	e638      	b.n	403dd8 <_strtod_l+0x478>
  404166:	4622      	mov	r2, r4
  404168:	9906      	ldr	r1, [sp, #24]
  40416a:	4650      	mov	r0, sl
  40416c:	f002 f92a 	bl	4063c4 <__lshift>
  404170:	9006      	str	r0, [sp, #24]
  404172:	2800      	cmp	r0, #0
  404174:	f47f af6f 	bne.w	404056 <_strtod_l+0x6f6>
  404178:	e62e      	b.n	403dd8 <_strtod_l+0x478>
  40417a:	4632      	mov	r2, r6
  40417c:	9904      	ldr	r1, [sp, #16]
  40417e:	4650      	mov	r0, sl
  404180:	f002 f920 	bl	4063c4 <__lshift>
  404184:	9004      	str	r0, [sp, #16]
  404186:	2800      	cmp	r0, #0
  404188:	f47f af68 	bne.w	40405c <_strtod_l+0x6fc>
  40418c:	e624      	b.n	403dd8 <_strtod_l+0x478>
  40418e:	f8db 3010 	ldr.w	r3, [fp, #16]
  404192:	2b01      	cmp	r3, #1
  404194:	dc8e      	bgt.n	4040b4 <_strtod_l+0x754>
  404196:	e179      	b.n	40448c <_strtod_l+0xb2c>
  404198:	d161      	bne.n	40425e <_strtod_l+0x8fe>
  40419a:	9a08      	ldr	r2, [sp, #32]
  40419c:	f3c9 0313 	ubfx	r3, r9, #0, #20
  4041a0:	b322      	cbz	r2, 4041ec <_strtod_l+0x88c>
  4041a2:	4943      	ldr	r1, [pc, #268]	; (4042b0 <_strtod_l+0x950>)
  4041a4:	428b      	cmp	r3, r1
  4041a6:	464a      	mov	r2, r9
  4041a8:	d12e      	bne.n	404208 <_strtod_l+0x8a8>
  4041aa:	9b05      	ldr	r3, [sp, #20]
  4041ac:	4641      	mov	r1, r8
  4041ae:	b163      	cbz	r3, 4041ca <_strtod_l+0x86a>
  4041b0:	4b40      	ldr	r3, [pc, #256]	; (4042b4 <_strtod_l+0x954>)
  4041b2:	4013      	ands	r3, r2
  4041b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  4041b8:	d807      	bhi.n	4041ca <_strtod_l+0x86a>
  4041ba:	0d1b      	lsrs	r3, r3, #20
  4041bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  4041c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4041c4:	fa00 f303 	lsl.w	r3, r0, r3
  4041c8:	e001      	b.n	4041ce <_strtod_l+0x86e>
  4041ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  4041ce:	428b      	cmp	r3, r1
  4041d0:	d11a      	bne.n	404208 <_strtod_l+0x8a8>
  4041d2:	4939      	ldr	r1, [pc, #228]	; (4042b8 <_strtod_l+0x958>)
  4041d4:	428a      	cmp	r2, r1
  4041d6:	d102      	bne.n	4041de <_strtod_l+0x87e>
  4041d8:	3301      	adds	r3, #1
  4041da:	f43f adfd 	beq.w	403dd8 <_strtod_l+0x478>
  4041de:	4b35      	ldr	r3, [pc, #212]	; (4042b4 <_strtod_l+0x954>)
  4041e0:	4013      	ands	r3, r2
  4041e2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
  4041e6:	f04f 0800 	mov.w	r8, #0
  4041ea:	e14f      	b.n	40448c <_strtod_l+0xb2c>
  4041ec:	b963      	cbnz	r3, 404208 <_strtod_l+0x8a8>
  4041ee:	f1b8 0f00 	cmp.w	r8, #0
  4041f2:	d109      	bne.n	404208 <_strtod_l+0x8a8>
  4041f4:	e76a      	b.n	4040cc <_strtod_l+0x76c>
  4041f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  4041fa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
  4041fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
  404202:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  404206:	e141      	b.n	40448c <_strtod_l+0xb2c>
  404208:	b115      	cbz	r5, 404210 <_strtod_l+0x8b0>
  40420a:	ea15 0f09 	tst.w	r5, r9
  40420e:	e002      	b.n	404216 <_strtod_l+0x8b6>
  404210:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404212:	ea13 0f08 	tst.w	r3, r8
  404216:	f000 8139 	beq.w	40448c <_strtod_l+0xb2c>
  40421a:	9b08      	ldr	r3, [sp, #32]
  40421c:	9a05      	ldr	r2, [sp, #20]
  40421e:	4640      	mov	r0, r8
  404220:	4649      	mov	r1, r9
  404222:	b153      	cbz	r3, 40423a <_strtod_l+0x8da>
  404224:	f7ff fb78 	bl	403918 <sulp>
  404228:	4602      	mov	r2, r0
  40422a:	460b      	mov	r3, r1
  40422c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404230:	f002 fd9c 	bl	406d6c <__adddf3>
  404234:	4680      	mov	r8, r0
  404236:	4689      	mov	r9, r1
  404238:	e128      	b.n	40448c <_strtod_l+0xb2c>
  40423a:	f7ff fb6d 	bl	403918 <sulp>
  40423e:	4602      	mov	r2, r0
  404240:	460b      	mov	r3, r1
  404242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404246:	f002 fd8f 	bl	406d68 <__aeabi_dsub>
  40424a:	2200      	movs	r2, #0
  40424c:	2300      	movs	r3, #0
  40424e:	4680      	mov	r8, r0
  404250:	4689      	mov	r9, r1
  404252:	f003 f9a5 	bl	4075a0 <__aeabi_dcmpeq>
  404256:	2800      	cmp	r0, #0
  404258:	f47f af48 	bne.w	4040ec <_strtod_l+0x78c>
  40425c:	e116      	b.n	40448c <_strtod_l+0xb2c>
  40425e:	9904      	ldr	r1, [sp, #16]
  404260:	4658      	mov	r0, fp
  404262:	f002 fa3a 	bl	4066da <__ratio>
  404266:	2200      	movs	r2, #0
  404268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40426c:	4606      	mov	r6, r0
  40426e:	460f      	mov	r7, r1
  404270:	f003 f9aa 	bl	4075c8 <__aeabi_dcmple>
  404274:	2800      	cmp	r0, #0
  404276:	d03e      	beq.n	4042f6 <_strtod_l+0x996>
  404278:	9b08      	ldr	r3, [sp, #32]
  40427a:	b113      	cbz	r3, 404282 <_strtod_l+0x922>
  40427c:	2600      	movs	r6, #0
  40427e:	4f0f      	ldr	r7, [pc, #60]	; (4042bc <_strtod_l+0x95c>)
  404280:	e010      	b.n	4042a4 <_strtod_l+0x944>
  404282:	f1b8 0f00 	cmp.w	r8, #0
  404286:	d103      	bne.n	404290 <_strtod_l+0x930>
  404288:	f3c9 0313 	ubfx	r3, r9, #0, #20
  40428c:	b93b      	cbnz	r3, 40429e <_strtod_l+0x93e>
  40428e:	e019      	b.n	4042c4 <_strtod_l+0x964>
  404290:	f1b8 0f01 	cmp.w	r8, #1
  404294:	d103      	bne.n	40429e <_strtod_l+0x93e>
  404296:	f1b9 0f00 	cmp.w	r9, #0
  40429a:	f43f af27 	beq.w	4040ec <_strtod_l+0x78c>
  40429e:	4f08      	ldr	r7, [pc, #32]	; (4042c0 <_strtod_l+0x960>)
  4042a0:	2600      	movs	r6, #0
  4042a2:	2400      	movs	r4, #0
  4042a4:	4d05      	ldr	r5, [pc, #20]	; (4042bc <_strtod_l+0x95c>)
  4042a6:	e03b      	b.n	404320 <_strtod_l+0x9c0>
  4042a8:	fffffc02 	.word	0xfffffc02
  4042ac:	fffffbe2 	.word	0xfffffbe2
  4042b0:	000fffff 	.word	0x000fffff
  4042b4:	7ff00000 	.word	0x7ff00000
  4042b8:	7fefffff 	.word	0x7fefffff
  4042bc:	3ff00000 	.word	0x3ff00000
  4042c0:	bff00000 	.word	0xbff00000
  4042c4:	2200      	movs	r2, #0
  4042c6:	4b9a      	ldr	r3, [pc, #616]	; (404530 <_strtod_l+0xbd0>)
  4042c8:	4630      	mov	r0, r6
  4042ca:	4639      	mov	r1, r7
  4042cc:	f003 f972 	bl	4075b4 <__aeabi_dcmplt>
  4042d0:	b940      	cbnz	r0, 4042e4 <_strtod_l+0x984>
  4042d2:	2200      	movs	r2, #0
  4042d4:	4b97      	ldr	r3, [pc, #604]	; (404534 <_strtod_l+0xbd4>)
  4042d6:	4630      	mov	r0, r6
  4042d8:	4639      	mov	r1, r7
  4042da:	f002 fef9 	bl	4070d0 <__aeabi_dmul>
  4042de:	4604      	mov	r4, r0
  4042e0:	460d      	mov	r5, r1
  4042e2:	e001      	b.n	4042e8 <_strtod_l+0x988>
  4042e4:	9c08      	ldr	r4, [sp, #32]
  4042e6:	4d93      	ldr	r5, [pc, #588]	; (404534 <_strtod_l+0xbd4>)
  4042e8:	9416      	str	r4, [sp, #88]	; 0x58
  4042ea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4042ee:	9317      	str	r3, [sp, #92]	; 0x5c
  4042f0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
  4042f4:	e014      	b.n	404320 <_strtod_l+0x9c0>
  4042f6:	4b8f      	ldr	r3, [pc, #572]	; (404534 <_strtod_l+0xbd4>)
  4042f8:	2200      	movs	r2, #0
  4042fa:	4630      	mov	r0, r6
  4042fc:	4639      	mov	r1, r7
  4042fe:	f002 fee7 	bl	4070d0 <__aeabi_dmul>
  404302:	9b08      	ldr	r3, [sp, #32]
  404304:	4604      	mov	r4, r0
  404306:	460d      	mov	r5, r1
  404308:	b923      	cbnz	r3, 404314 <_strtod_l+0x9b4>
  40430a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40430e:	9010      	str	r0, [sp, #64]	; 0x40
  404310:	9311      	str	r3, [sp, #68]	; 0x44
  404312:	e003      	b.n	40431c <_strtod_l+0x9bc>
  404314:	4602      	mov	r2, r0
  404316:	460b      	mov	r3, r1
  404318:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  40431c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
  404320:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  404324:	0d1b      	lsrs	r3, r3, #20
  404326:	051b      	lsls	r3, r3, #20
  404328:	9309      	str	r3, [sp, #36]	; 0x24
  40432a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40432c:	4b82      	ldr	r3, [pc, #520]	; (404538 <_strtod_l+0xbd8>)
  40432e:	429a      	cmp	r2, r3
  404330:	d12b      	bne.n	40438a <_strtod_l+0xa2a>
  404332:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404336:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  40433a:	4640      	mov	r0, r8
  40433c:	4649      	mov	r1, r9
  40433e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  404342:	f002 f90b 	bl	40655c <__ulp>
  404346:	4602      	mov	r2, r0
  404348:	460b      	mov	r3, r1
  40434a:	4630      	mov	r0, r6
  40434c:	4639      	mov	r1, r7
  40434e:	f002 febf 	bl	4070d0 <__aeabi_dmul>
  404352:	4642      	mov	r2, r8
  404354:	464b      	mov	r3, r9
  404356:	f002 fd09 	bl	406d6c <__adddf3>
  40435a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40435e:	0d1b      	lsrs	r3, r3, #20
  404360:	4a76      	ldr	r2, [pc, #472]	; (40453c <_strtod_l+0xbdc>)
  404362:	051b      	lsls	r3, r3, #20
  404364:	4293      	cmp	r3, r2
  404366:	4680      	mov	r8, r0
  404368:	d90c      	bls.n	404384 <_strtod_l+0xa24>
  40436a:	4b75      	ldr	r3, [pc, #468]	; (404540 <_strtod_l+0xbe0>)
  40436c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40436e:	429a      	cmp	r2, r3
  404370:	d103      	bne.n	40437a <_strtod_l+0xa1a>
  404372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404374:	3301      	adds	r3, #1
  404376:	f43f ad2f 	beq.w	403dd8 <_strtod_l+0x478>
  40437a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 404540 <_strtod_l+0xbe0>
  40437e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  404382:	e072      	b.n	40446a <_strtod_l+0xb0a>
  404384:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
  404388:	e039      	b.n	4043fe <_strtod_l+0xa9e>
  40438a:	9b05      	ldr	r3, [sp, #20]
  40438c:	b33b      	cbz	r3, 4043de <_strtod_l+0xa7e>
  40438e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404390:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  404394:	d823      	bhi.n	4043de <_strtod_l+0xa7e>
  404396:	a35e      	add	r3, pc, #376	; (adr r3, 404510 <_strtod_l+0xbb0>)
  404398:	e9d3 2300 	ldrd	r2, r3, [r3]
  40439c:	4620      	mov	r0, r4
  40439e:	4629      	mov	r1, r5
  4043a0:	f003 f912 	bl	4075c8 <__aeabi_dcmple>
  4043a4:	b1b8      	cbz	r0, 4043d6 <_strtod_l+0xa76>
  4043a6:	4629      	mov	r1, r5
  4043a8:	4620      	mov	r0, r4
  4043aa:	f003 f969 	bl	407680 <__aeabi_d2uiz>
  4043ae:	2800      	cmp	r0, #0
  4043b0:	bf08      	it	eq
  4043b2:	2001      	moveq	r0, #1
  4043b4:	f002 fe16 	bl	406fe4 <__aeabi_ui2d>
  4043b8:	9b08      	ldr	r3, [sp, #32]
  4043ba:	4604      	mov	r4, r0
  4043bc:	460d      	mov	r5, r1
  4043be:	b923      	cbnz	r3, 4043ca <_strtod_l+0xa6a>
  4043c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4043c4:	9012      	str	r0, [sp, #72]	; 0x48
  4043c6:	9313      	str	r3, [sp, #76]	; 0x4c
  4043c8:	e003      	b.n	4043d2 <_strtod_l+0xa72>
  4043ca:	4602      	mov	r2, r0
  4043cc:	460b      	mov	r3, r1
  4043ce:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4043d2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
  4043d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4043d8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
  4043dc:	1a9f      	subs	r7, r3, r2
  4043de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4043e2:	f002 f8bb 	bl	40655c <__ulp>
  4043e6:	4602      	mov	r2, r0
  4043e8:	460b      	mov	r3, r1
  4043ea:	4630      	mov	r0, r6
  4043ec:	4639      	mov	r1, r7
  4043ee:	f002 fe6f 	bl	4070d0 <__aeabi_dmul>
  4043f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4043f6:	f002 fcb9 	bl	406d6c <__adddf3>
  4043fa:	4680      	mov	r8, r0
  4043fc:	4689      	mov	r9, r1
  4043fe:	9b05      	ldr	r3, [sp, #20]
  404400:	bb9b      	cbnz	r3, 40446a <_strtod_l+0xb0a>
  404402:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  404406:	0d1b      	lsrs	r3, r3, #20
  404408:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40440a:	051b      	lsls	r3, r3, #20
  40440c:	429a      	cmp	r2, r3
  40440e:	464e      	mov	r6, r9
  404410:	d12b      	bne.n	40446a <_strtod_l+0xb0a>
  404412:	4629      	mov	r1, r5
  404414:	4620      	mov	r0, r4
  404416:	f003 f90b 	bl	407630 <__aeabi_d2iz>
  40441a:	f002 fdf3 	bl	407004 <__aeabi_i2d>
  40441e:	460b      	mov	r3, r1
  404420:	4602      	mov	r2, r0
  404422:	4629      	mov	r1, r5
  404424:	4620      	mov	r0, r4
  404426:	f002 fc9f 	bl	406d68 <__aeabi_dsub>
  40442a:	9b08      	ldr	r3, [sp, #32]
  40442c:	4604      	mov	r4, r0
  40442e:	460d      	mov	r5, r1
  404430:	b92b      	cbnz	r3, 40443e <_strtod_l+0xade>
  404432:	f1b8 0f00 	cmp.w	r8, #0
  404436:	d102      	bne.n	40443e <_strtod_l+0xade>
  404438:	f3c9 0613 	ubfx	r6, r9, #0, #20
  40443c:	b17e      	cbz	r6, 40445e <_strtod_l+0xafe>
  40443e:	a336      	add	r3, pc, #216	; (adr r3, 404518 <_strtod_l+0xbb8>)
  404440:	e9d3 2300 	ldrd	r2, r3, [r3]
  404444:	4620      	mov	r0, r4
  404446:	4629      	mov	r1, r5
  404448:	f003 f8b4 	bl	4075b4 <__aeabi_dcmplt>
  40444c:	bb88      	cbnz	r0, 4044b2 <_strtod_l+0xb52>
  40444e:	a334      	add	r3, pc, #208	; (adr r3, 404520 <_strtod_l+0xbc0>)
  404450:	e9d3 2300 	ldrd	r2, r3, [r3]
  404454:	4620      	mov	r0, r4
  404456:	4629      	mov	r1, r5
  404458:	f003 f8ca 	bl	4075f0 <__aeabi_dcmpgt>
  40445c:	e004      	b.n	404468 <_strtod_l+0xb08>
  40445e:	a332      	add	r3, pc, #200	; (adr r3, 404528 <_strtod_l+0xbc8>)
  404460:	e9d3 2300 	ldrd	r2, r3, [r3]
  404464:	f003 f8a6 	bl	4075b4 <__aeabi_dcmplt>
  404468:	bb18      	cbnz	r0, 4044b2 <_strtod_l+0xb52>
  40446a:	991a      	ldr	r1, [sp, #104]	; 0x68
  40446c:	4650      	mov	r0, sl
  40446e:	f001 fde4 	bl	40603a <_Bfree>
  404472:	9906      	ldr	r1, [sp, #24]
  404474:	4650      	mov	r0, sl
  404476:	f001 fde0 	bl	40603a <_Bfree>
  40447a:	9904      	ldr	r1, [sp, #16]
  40447c:	4650      	mov	r0, sl
  40447e:	f001 fddc 	bl	40603a <_Bfree>
  404482:	4659      	mov	r1, fp
  404484:	4650      	mov	r0, sl
  404486:	f001 fdd8 	bl	40603a <_Bfree>
  40448a:	e576      	b.n	403f7a <_strtod_l+0x61a>
  40448c:	9b05      	ldr	r3, [sp, #20]
  40448e:	b183      	cbz	r3, 4044b2 <_strtod_l+0xb52>
  404490:	4b2c      	ldr	r3, [pc, #176]	; (404544 <_strtod_l+0xbe4>)
  404492:	930d      	str	r3, [sp, #52]	; 0x34
  404494:	2300      	movs	r3, #0
  404496:	930c      	str	r3, [sp, #48]	; 0x30
  404498:	4640      	mov	r0, r8
  40449a:	4649      	mov	r1, r9
  40449c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4044a0:	f002 fe16 	bl	4070d0 <__aeabi_dmul>
  4044a4:	4680      	mov	r8, r0
  4044a6:	4689      	mov	r9, r1
  4044a8:	b919      	cbnz	r1, 4044b2 <_strtod_l+0xb52>
  4044aa:	b910      	cbnz	r0, 4044b2 <_strtod_l+0xb52>
  4044ac:	2322      	movs	r3, #34	; 0x22
  4044ae:	f8ca 3000 	str.w	r3, [sl]
  4044b2:	991a      	ldr	r1, [sp, #104]	; 0x68
  4044b4:	4650      	mov	r0, sl
  4044b6:	f001 fdc0 	bl	40603a <_Bfree>
  4044ba:	9906      	ldr	r1, [sp, #24]
  4044bc:	4650      	mov	r0, sl
  4044be:	f001 fdbc 	bl	40603a <_Bfree>
  4044c2:	9904      	ldr	r1, [sp, #16]
  4044c4:	4650      	mov	r0, sl
  4044c6:	f001 fdb8 	bl	40603a <_Bfree>
  4044ca:	9907      	ldr	r1, [sp, #28]
  4044cc:	4650      	mov	r0, sl
  4044ce:	f001 fdb4 	bl	40603a <_Bfree>
  4044d2:	4659      	mov	r1, fp
  4044d4:	4650      	mov	r0, sl
  4044d6:	f001 fdb0 	bl	40603a <_Bfree>
  4044da:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4044dc:	b113      	cbz	r3, 4044e4 <_strtod_l+0xb84>
  4044de:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4044e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4044e2:	6013      	str	r3, [r2, #0]
  4044e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4044e6:	b11b      	cbz	r3, 4044f0 <_strtod_l+0xb90>
  4044e8:	4642      	mov	r2, r8
  4044ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
  4044ee:	e007      	b.n	404500 <_strtod_l+0xba0>
  4044f0:	4642      	mov	r2, r8
  4044f2:	464b      	mov	r3, r9
  4044f4:	e004      	b.n	404500 <_strtod_l+0xba0>
  4044f6:	2500      	movs	r5, #0
  4044f8:	462a      	mov	r2, r5
  4044fa:	2101      	movs	r1, #1
  4044fc:	f7ff bb41 	b.w	403b82 <_strtod_l+0x222>
  404500:	4610      	mov	r0, r2
  404502:	4619      	mov	r1, r3
  404504:	b01f      	add	sp, #124	; 0x7c
  404506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40450a:	bf00      	nop
  40450c:	f3af 8000 	nop.w
  404510:	ffc00000 	.word	0xffc00000
  404514:	41dfffff 	.word	0x41dfffff
  404518:	94a03595 	.word	0x94a03595
  40451c:	3fdfffff 	.word	0x3fdfffff
  404520:	35afe535 	.word	0x35afe535
  404524:	3fe00000 	.word	0x3fe00000
  404528:	94a03595 	.word	0x94a03595
  40452c:	3fcfffff 	.word	0x3fcfffff
  404530:	3ff00000 	.word	0x3ff00000
  404534:	3fe00000 	.word	0x3fe00000
  404538:	7fe00000 	.word	0x7fe00000
  40453c:	7c9fffff 	.word	0x7c9fffff
  404540:	7fefffff 	.word	0x7fefffff
  404544:	39500000 	.word	0x39500000

00404548 <strtod>:
  404548:	4b06      	ldr	r3, [pc, #24]	; (404564 <strtod+0x1c>)
  40454a:	4a07      	ldr	r2, [pc, #28]	; (404568 <strtod+0x20>)
  40454c:	b410      	push	{r4}
  40454e:	681c      	ldr	r4, [r3, #0]
  404550:	6a23      	ldr	r3, [r4, #32]
  404552:	2b00      	cmp	r3, #0
  404554:	bf08      	it	eq
  404556:	4613      	moveq	r3, r2
  404558:	460a      	mov	r2, r1
  40455a:	4601      	mov	r1, r0
  40455c:	4620      	mov	r0, r4
  40455e:	bc10      	pop	{r4}
  404560:	f7ff b9fe 	b.w	403960 <_strtod_l>
  404564:	20000074 	.word	0x20000074
  404568:	20000078 	.word	0x20000078

0040456c <__strtok_r>:
  40456c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40456e:	b948      	cbnz	r0, 404584 <__strtok_r+0x18>
  404570:	6810      	ldr	r0, [r2, #0]
  404572:	b938      	cbnz	r0, 404584 <__strtok_r+0x18>
  404574:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404576:	f817 6b01 	ldrb.w	r6, [r7], #1
  40457a:	b15e      	cbz	r6, 404594 <__strtok_r+0x28>
  40457c:	42b5      	cmp	r5, r6
  40457e:	d1fa      	bne.n	404576 <__strtok_r+0xa>
  404580:	b12b      	cbz	r3, 40458e <__strtok_r+0x22>
  404582:	4620      	mov	r0, r4
  404584:	4604      	mov	r4, r0
  404586:	460f      	mov	r7, r1
  404588:	f814 5b01 	ldrb.w	r5, [r4], #1
  40458c:	e7f3      	b.n	404576 <__strtok_r+0xa>
  40458e:	6014      	str	r4, [r2, #0]
  404590:	7003      	strb	r3, [r0, #0]
  404592:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404594:	b94d      	cbnz	r5, 4045aa <__strtok_r+0x3e>
  404596:	6015      	str	r5, [r2, #0]
  404598:	4628      	mov	r0, r5
  40459a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40459c:	f817 6b01 	ldrb.w	r6, [r7], #1
  4045a0:	42b5      	cmp	r5, r6
  4045a2:	d007      	beq.n	4045b4 <__strtok_r+0x48>
  4045a4:	2e00      	cmp	r6, #0
  4045a6:	d1f9      	bne.n	40459c <__strtok_r+0x30>
  4045a8:	461c      	mov	r4, r3
  4045aa:	4623      	mov	r3, r4
  4045ac:	460f      	mov	r7, r1
  4045ae:	f813 5b01 	ldrb.w	r5, [r3], #1
  4045b2:	e7f3      	b.n	40459c <__strtok_r+0x30>
  4045b4:	b115      	cbz	r5, 4045bc <__strtok_r+0x50>
  4045b6:	2100      	movs	r1, #0
  4045b8:	7021      	strb	r1, [r4, #0]
  4045ba:	e000      	b.n	4045be <__strtok_r+0x52>
  4045bc:	462b      	mov	r3, r5
  4045be:	6013      	str	r3, [r2, #0]
  4045c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

004045c2 <strtok_r>:
  4045c2:	2301      	movs	r3, #1
  4045c4:	f7ff bfd2 	b.w	40456c <__strtok_r>

004045c8 <_strtol_l.isra.0>:
  4045c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4045cc:	4680      	mov	r8, r0
  4045ce:	4689      	mov	r9, r1
  4045d0:	4692      	mov	sl, r2
  4045d2:	461e      	mov	r6, r3
  4045d4:	460f      	mov	r7, r1
  4045d6:	463d      	mov	r5, r7
  4045d8:	9808      	ldr	r0, [sp, #32]
  4045da:	f815 4b01 	ldrb.w	r4, [r5], #1
  4045de:	f001 fc19 	bl	405e14 <__locale_ctype_ptr_l>
  4045e2:	4420      	add	r0, r4
  4045e4:	7842      	ldrb	r2, [r0, #1]
  4045e6:	f002 0208 	and.w	r2, r2, #8
  4045ea:	f002 03ff 	and.w	r3, r2, #255	; 0xff
  4045ee:	b10a      	cbz	r2, 4045f4 <_strtol_l.isra.0+0x2c>
  4045f0:	462f      	mov	r7, r5
  4045f2:	e7f0      	b.n	4045d6 <_strtol_l.isra.0+0xe>
  4045f4:	2c2d      	cmp	r4, #45	; 0x2d
  4045f6:	d103      	bne.n	404600 <_strtol_l.isra.0+0x38>
  4045f8:	1cbd      	adds	r5, r7, #2
  4045fa:	787c      	ldrb	r4, [r7, #1]
  4045fc:	2301      	movs	r3, #1
  4045fe:	e003      	b.n	404608 <_strtol_l.isra.0+0x40>
  404600:	2c2b      	cmp	r4, #43	; 0x2b
  404602:	bf04      	itt	eq
  404604:	787c      	ldrbeq	r4, [r7, #1]
  404606:	1cbd      	addeq	r5, r7, #2
  404608:	b116      	cbz	r6, 404610 <_strtol_l.isra.0+0x48>
  40460a:	2e10      	cmp	r6, #16
  40460c:	d10a      	bne.n	404624 <_strtol_l.isra.0+0x5c>
  40460e:	e05e      	b.n	4046ce <_strtol_l.isra.0+0x106>
  404610:	2c30      	cmp	r4, #48	; 0x30
  404612:	d15a      	bne.n	4046ca <_strtol_l.isra.0+0x102>
  404614:	782a      	ldrb	r2, [r5, #0]
  404616:	f002 02df 	and.w	r2, r2, #223	; 0xdf
  40461a:	2a58      	cmp	r2, #88	; 0x58
  40461c:	d150      	bne.n	4046c0 <_strtol_l.isra.0+0xf8>
  40461e:	786c      	ldrb	r4, [r5, #1]
  404620:	2610      	movs	r6, #16
  404622:	3502      	adds	r5, #2
  404624:	2b00      	cmp	r3, #0
  404626:	bf14      	ite	ne
  404628:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
  40462c:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
  404630:	fbb2 fef6 	udiv	lr, r2, r6
  404634:	fb06 211e 	mls	r1, r6, lr, r2
  404638:	2200      	movs	r2, #0
  40463a:	4610      	mov	r0, r2
  40463c:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
  404640:	2f09      	cmp	r7, #9
  404642:	d801      	bhi.n	404648 <_strtol_l.isra.0+0x80>
  404644:	463c      	mov	r4, r7
  404646:	e00a      	b.n	40465e <_strtol_l.isra.0+0x96>
  404648:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
  40464c:	2f19      	cmp	r7, #25
  40464e:	d801      	bhi.n	404654 <_strtol_l.isra.0+0x8c>
  404650:	3c37      	subs	r4, #55	; 0x37
  404652:	e004      	b.n	40465e <_strtol_l.isra.0+0x96>
  404654:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
  404658:	2f19      	cmp	r7, #25
  40465a:	d813      	bhi.n	404684 <_strtol_l.isra.0+0xbc>
  40465c:	3c57      	subs	r4, #87	; 0x57
  40465e:	42a6      	cmp	r6, r4
  404660:	dd10      	ble.n	404684 <_strtol_l.isra.0+0xbc>
  404662:	1c57      	adds	r7, r2, #1
  404664:	d00b      	beq.n	40467e <_strtol_l.isra.0+0xb6>
  404666:	4586      	cmp	lr, r0
  404668:	d307      	bcc.n	40467a <_strtol_l.isra.0+0xb2>
  40466a:	d101      	bne.n	404670 <_strtol_l.isra.0+0xa8>
  40466c:	42a1      	cmp	r1, r4
  40466e:	db03      	blt.n	404678 <_strtol_l.isra.0+0xb0>
  404670:	fb00 4006 	mla	r0, r0, r6, r4
  404674:	2201      	movs	r2, #1
  404676:	e002      	b.n	40467e <_strtol_l.isra.0+0xb6>
  404678:	4670      	mov	r0, lr
  40467a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  40467e:	f815 4b01 	ldrb.w	r4, [r5], #1
  404682:	e7db      	b.n	40463c <_strtol_l.isra.0+0x74>
  404684:	1c51      	adds	r1, r2, #1
  404686:	d10e      	bne.n	4046a6 <_strtol_l.isra.0+0xde>
  404688:	2b00      	cmp	r3, #0
  40468a:	f04f 0322 	mov.w	r3, #34	; 0x22
  40468e:	bf14      	ite	ne
  404690:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  404694:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  404698:	f8c8 3000 	str.w	r3, [r8]
  40469c:	f1ba 0f00 	cmp.w	sl, #0
  4046a0:	d107      	bne.n	4046b2 <_strtol_l.isra.0+0xea>
  4046a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4046a6:	b103      	cbz	r3, 4046aa <_strtol_l.isra.0+0xe2>
  4046a8:	4240      	negs	r0, r0
  4046aa:	f1ba 0f00 	cmp.w	sl, #0
  4046ae:	d011      	beq.n	4046d4 <_strtol_l.isra.0+0x10c>
  4046b0:	b10a      	cbz	r2, 4046b6 <_strtol_l.isra.0+0xee>
  4046b2:	3d01      	subs	r5, #1
  4046b4:	e000      	b.n	4046b8 <_strtol_l.isra.0+0xf0>
  4046b6:	464d      	mov	r5, r9
  4046b8:	f8ca 5000 	str.w	r5, [sl]
  4046bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4046c0:	2430      	movs	r4, #48	; 0x30
  4046c2:	2e00      	cmp	r6, #0
  4046c4:	d1ae      	bne.n	404624 <_strtol_l.isra.0+0x5c>
  4046c6:	2608      	movs	r6, #8
  4046c8:	e7ac      	b.n	404624 <_strtol_l.isra.0+0x5c>
  4046ca:	260a      	movs	r6, #10
  4046cc:	e7aa      	b.n	404624 <_strtol_l.isra.0+0x5c>
  4046ce:	2c30      	cmp	r4, #48	; 0x30
  4046d0:	d0a0      	beq.n	404614 <_strtol_l.isra.0+0x4c>
  4046d2:	e7a7      	b.n	404624 <_strtol_l.isra.0+0x5c>
  4046d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004046d8 <strtol>:
  4046d8:	4b08      	ldr	r3, [pc, #32]	; (4046fc <strtol+0x24>)
  4046da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  4046dc:	681c      	ldr	r4, [r3, #0]
  4046de:	4d08      	ldr	r5, [pc, #32]	; (404700 <strtol+0x28>)
  4046e0:	6a23      	ldr	r3, [r4, #32]
  4046e2:	2b00      	cmp	r3, #0
  4046e4:	bf08      	it	eq
  4046e6:	462b      	moveq	r3, r5
  4046e8:	9300      	str	r3, [sp, #0]
  4046ea:	4613      	mov	r3, r2
  4046ec:	460a      	mov	r2, r1
  4046ee:	4601      	mov	r1, r0
  4046f0:	4620      	mov	r0, r4
  4046f2:	f7ff ff69 	bl	4045c8 <_strtol_l.isra.0>
  4046f6:	b003      	add	sp, #12
  4046f8:	bd30      	pop	{r4, r5, pc}
  4046fa:	bf00      	nop
  4046fc:	20000074 	.word	0x20000074
  404700:	20000078 	.word	0x20000078

00404704 <__swbuf_r>:
  404704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404706:	460f      	mov	r7, r1
  404708:	4614      	mov	r4, r2
  40470a:	4605      	mov	r5, r0
  40470c:	b118      	cbz	r0, 404716 <__swbuf_r+0x12>
  40470e:	6983      	ldr	r3, [r0, #24]
  404710:	b90b      	cbnz	r3, 404716 <__swbuf_r+0x12>
  404712:	f000 ffd7 	bl	4056c4 <__sinit>
  404716:	4b22      	ldr	r3, [pc, #136]	; (4047a0 <__swbuf_r+0x9c>)
  404718:	429c      	cmp	r4, r3
  40471a:	d101      	bne.n	404720 <__swbuf_r+0x1c>
  40471c:	686c      	ldr	r4, [r5, #4]
  40471e:	e008      	b.n	404732 <__swbuf_r+0x2e>
  404720:	4b20      	ldr	r3, [pc, #128]	; (4047a4 <__swbuf_r+0xa0>)
  404722:	429c      	cmp	r4, r3
  404724:	d101      	bne.n	40472a <__swbuf_r+0x26>
  404726:	68ac      	ldr	r4, [r5, #8]
  404728:	e003      	b.n	404732 <__swbuf_r+0x2e>
  40472a:	4b1f      	ldr	r3, [pc, #124]	; (4047a8 <__swbuf_r+0xa4>)
  40472c:	429c      	cmp	r4, r3
  40472e:	bf08      	it	eq
  404730:	68ec      	ldreq	r4, [r5, #12]
  404732:	69a3      	ldr	r3, [r4, #24]
  404734:	60a3      	str	r3, [r4, #8]
  404736:	89a3      	ldrh	r3, [r4, #12]
  404738:	071a      	lsls	r2, r3, #28
  40473a:	d509      	bpl.n	404750 <__swbuf_r+0x4c>
  40473c:	6923      	ldr	r3, [r4, #16]
  40473e:	b13b      	cbz	r3, 404750 <__swbuf_r+0x4c>
  404740:	6823      	ldr	r3, [r4, #0]
  404742:	6920      	ldr	r0, [r4, #16]
  404744:	1a18      	subs	r0, r3, r0
  404746:	6963      	ldr	r3, [r4, #20]
  404748:	4298      	cmp	r0, r3
  40474a:	b2fe      	uxtb	r6, r7
  40474c:	db0f      	blt.n	40476e <__swbuf_r+0x6a>
  40474e:	e008      	b.n	404762 <__swbuf_r+0x5e>
  404750:	4621      	mov	r1, r4
  404752:	4628      	mov	r0, r5
  404754:	f000 f82a 	bl	4047ac <__swsetup_r>
  404758:	2800      	cmp	r0, #0
  40475a:	d0f1      	beq.n	404740 <__swbuf_r+0x3c>
  40475c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  404760:	e01b      	b.n	40479a <__swbuf_r+0x96>
  404762:	4621      	mov	r1, r4
  404764:	4628      	mov	r0, r5
  404766:	f000 ff43 	bl	4055f0 <_fflush_r>
  40476a:	2800      	cmp	r0, #0
  40476c:	d1f6      	bne.n	40475c <__swbuf_r+0x58>
  40476e:	68a3      	ldr	r3, [r4, #8]
  404770:	3b01      	subs	r3, #1
  404772:	60a3      	str	r3, [r4, #8]
  404774:	6823      	ldr	r3, [r4, #0]
  404776:	1c5a      	adds	r2, r3, #1
  404778:	6022      	str	r2, [r4, #0]
  40477a:	701f      	strb	r7, [r3, #0]
  40477c:	6963      	ldr	r3, [r4, #20]
  40477e:	3001      	adds	r0, #1
  404780:	4298      	cmp	r0, r3
  404782:	d004      	beq.n	40478e <__swbuf_r+0x8a>
  404784:	89a3      	ldrh	r3, [r4, #12]
  404786:	07db      	lsls	r3, r3, #31
  404788:	d507      	bpl.n	40479a <__swbuf_r+0x96>
  40478a:	2e0a      	cmp	r6, #10
  40478c:	d105      	bne.n	40479a <__swbuf_r+0x96>
  40478e:	4621      	mov	r1, r4
  404790:	4628      	mov	r0, r5
  404792:	f000 ff2d 	bl	4055f0 <_fflush_r>
  404796:	2800      	cmp	r0, #0
  404798:	d1e0      	bne.n	40475c <__swbuf_r+0x58>
  40479a:	4630      	mov	r0, r6
  40479c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40479e:	bf00      	nop
  4047a0:	00408290 	.word	0x00408290
  4047a4:	004082b0 	.word	0x004082b0
  4047a8:	004082d0 	.word	0x004082d0

004047ac <__swsetup_r>:
  4047ac:	4b32      	ldr	r3, [pc, #200]	; (404878 <__swsetup_r+0xcc>)
  4047ae:	b570      	push	{r4, r5, r6, lr}
  4047b0:	681d      	ldr	r5, [r3, #0]
  4047b2:	4606      	mov	r6, r0
  4047b4:	460c      	mov	r4, r1
  4047b6:	b125      	cbz	r5, 4047c2 <__swsetup_r+0x16>
  4047b8:	69ab      	ldr	r3, [r5, #24]
  4047ba:	b913      	cbnz	r3, 4047c2 <__swsetup_r+0x16>
  4047bc:	4628      	mov	r0, r5
  4047be:	f000 ff81 	bl	4056c4 <__sinit>
  4047c2:	4b2e      	ldr	r3, [pc, #184]	; (40487c <__swsetup_r+0xd0>)
  4047c4:	429c      	cmp	r4, r3
  4047c6:	d101      	bne.n	4047cc <__swsetup_r+0x20>
  4047c8:	686c      	ldr	r4, [r5, #4]
  4047ca:	e008      	b.n	4047de <__swsetup_r+0x32>
  4047cc:	4b2c      	ldr	r3, [pc, #176]	; (404880 <__swsetup_r+0xd4>)
  4047ce:	429c      	cmp	r4, r3
  4047d0:	d101      	bne.n	4047d6 <__swsetup_r+0x2a>
  4047d2:	68ac      	ldr	r4, [r5, #8]
  4047d4:	e003      	b.n	4047de <__swsetup_r+0x32>
  4047d6:	4b2b      	ldr	r3, [pc, #172]	; (404884 <__swsetup_r+0xd8>)
  4047d8:	429c      	cmp	r4, r3
  4047da:	bf08      	it	eq
  4047dc:	68ec      	ldreq	r4, [r5, #12]
  4047de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047e2:	b29a      	uxth	r2, r3
  4047e4:	0715      	lsls	r5, r2, #28
  4047e6:	d41d      	bmi.n	404824 <__swsetup_r+0x78>
  4047e8:	06d0      	lsls	r0, r2, #27
  4047ea:	d402      	bmi.n	4047f2 <__swsetup_r+0x46>
  4047ec:	2209      	movs	r2, #9
  4047ee:	6032      	str	r2, [r6, #0]
  4047f0:	e03a      	b.n	404868 <__swsetup_r+0xbc>
  4047f2:	0751      	lsls	r1, r2, #29
  4047f4:	d512      	bpl.n	40481c <__swsetup_r+0x70>
  4047f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4047f8:	b141      	cbz	r1, 40480c <__swsetup_r+0x60>
  4047fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4047fe:	4299      	cmp	r1, r3
  404800:	d002      	beq.n	404808 <__swsetup_r+0x5c>
  404802:	4630      	mov	r0, r6
  404804:	f001 ffdc 	bl	4067c0 <_free_r>
  404808:	2300      	movs	r3, #0
  40480a:	6363      	str	r3, [r4, #52]	; 0x34
  40480c:	89a3      	ldrh	r3, [r4, #12]
  40480e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  404812:	81a3      	strh	r3, [r4, #12]
  404814:	2300      	movs	r3, #0
  404816:	6063      	str	r3, [r4, #4]
  404818:	6923      	ldr	r3, [r4, #16]
  40481a:	6023      	str	r3, [r4, #0]
  40481c:	89a3      	ldrh	r3, [r4, #12]
  40481e:	f043 0308 	orr.w	r3, r3, #8
  404822:	81a3      	strh	r3, [r4, #12]
  404824:	6923      	ldr	r3, [r4, #16]
  404826:	b94b      	cbnz	r3, 40483c <__swsetup_r+0x90>
  404828:	89a3      	ldrh	r3, [r4, #12]
  40482a:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40482e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404832:	d003      	beq.n	40483c <__swsetup_r+0x90>
  404834:	4621      	mov	r1, r4
  404836:	4630      	mov	r0, r6
  404838:	f001 fb24 	bl	405e84 <__smakebuf_r>
  40483c:	89a2      	ldrh	r2, [r4, #12]
  40483e:	f012 0301 	ands.w	r3, r2, #1
  404842:	d005      	beq.n	404850 <__swsetup_r+0xa4>
  404844:	2300      	movs	r3, #0
  404846:	60a3      	str	r3, [r4, #8]
  404848:	6963      	ldr	r3, [r4, #20]
  40484a:	425b      	negs	r3, r3
  40484c:	61a3      	str	r3, [r4, #24]
  40484e:	e003      	b.n	404858 <__swsetup_r+0xac>
  404850:	0792      	lsls	r2, r2, #30
  404852:	bf58      	it	pl
  404854:	6963      	ldrpl	r3, [r4, #20]
  404856:	60a3      	str	r3, [r4, #8]
  404858:	6923      	ldr	r3, [r4, #16]
  40485a:	b95b      	cbnz	r3, 404874 <__swsetup_r+0xc8>
  40485c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404860:	f003 0080 	and.w	r0, r3, #128	; 0x80
  404864:	b280      	uxth	r0, r0
  404866:	b130      	cbz	r0, 404876 <__swsetup_r+0xca>
  404868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40486c:	81a3      	strh	r3, [r4, #12]
  40486e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  404872:	bd70      	pop	{r4, r5, r6, pc}
  404874:	2000      	movs	r0, #0
  404876:	bd70      	pop	{r4, r5, r6, pc}
  404878:	20000074 	.word	0x20000074
  40487c:	00408290 	.word	0x00408290
  404880:	004082b0 	.word	0x004082b0
  404884:	004082d0 	.word	0x004082d0

00404888 <quorem>:
  404888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40488c:	6903      	ldr	r3, [r0, #16]
  40488e:	690c      	ldr	r4, [r1, #16]
  404890:	429c      	cmp	r4, r3
  404892:	4680      	mov	r8, r0
  404894:	f300 8083 	bgt.w	40499e <quorem+0x116>
  404898:	3c01      	subs	r4, #1
  40489a:	f101 0714 	add.w	r7, r1, #20
  40489e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  4048a2:	f100 0614 	add.w	r6, r0, #20
  4048a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  4048aa:	eb06 030e 	add.w	r3, r6, lr
  4048ae:	9301      	str	r3, [sp, #4]
  4048b0:	3501      	adds	r5, #1
  4048b2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  4048b6:	fbb3 f5f5 	udiv	r5, r3, r5
  4048ba:	eb07 090e 	add.w	r9, r7, lr
  4048be:	2d00      	cmp	r5, #0
  4048c0:	d039      	beq.n	404936 <quorem+0xae>
  4048c2:	f04f 0a00 	mov.w	sl, #0
  4048c6:	4638      	mov	r0, r7
  4048c8:	46b4      	mov	ip, r6
  4048ca:	46d3      	mov	fp, sl
  4048cc:	f850 2b04 	ldr.w	r2, [r0], #4
  4048d0:	b293      	uxth	r3, r2
  4048d2:	fb05 a303 	mla	r3, r5, r3, sl
  4048d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4048da:	b29b      	uxth	r3, r3
  4048dc:	ebc3 030b 	rsb	r3, r3, fp
  4048e0:	0c12      	lsrs	r2, r2, #16
  4048e2:	f8bc b000 	ldrh.w	fp, [ip]
  4048e6:	fb05 a202 	mla	r2, r5, r2, sl
  4048ea:	fa13 f38b 	uxtah	r3, r3, fp
  4048ee:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4048f2:	fa1f fb82 	uxth.w	fp, r2
  4048f6:	f8dc 2000 	ldr.w	r2, [ip]
  4048fa:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4048fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
  404902:	b29b      	uxth	r3, r3
  404904:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404908:	4581      	cmp	r9, r0
  40490a:	ea4f 4b22 	mov.w	fp, r2, asr #16
  40490e:	f84c 3b04 	str.w	r3, [ip], #4
  404912:	d2db      	bcs.n	4048cc <quorem+0x44>
  404914:	f856 300e 	ldr.w	r3, [r6, lr]
  404918:	b96b      	cbnz	r3, 404936 <quorem+0xae>
  40491a:	9b01      	ldr	r3, [sp, #4]
  40491c:	3b04      	subs	r3, #4
  40491e:	429e      	cmp	r6, r3
  404920:	461a      	mov	r2, r3
  404922:	d302      	bcc.n	40492a <quorem+0xa2>
  404924:	f8c8 4010 	str.w	r4, [r8, #16]
  404928:	e005      	b.n	404936 <quorem+0xae>
  40492a:	6812      	ldr	r2, [r2, #0]
  40492c:	3b04      	subs	r3, #4
  40492e:	2a00      	cmp	r2, #0
  404930:	d1f8      	bne.n	404924 <quorem+0x9c>
  404932:	3c01      	subs	r4, #1
  404934:	e7f3      	b.n	40491e <quorem+0x96>
  404936:	4640      	mov	r0, r8
  404938:	f001 fd95 	bl	406466 <__mcmp>
  40493c:	2800      	cmp	r0, #0
  40493e:	db2c      	blt.n	40499a <quorem+0x112>
  404940:	3501      	adds	r5, #1
  404942:	4630      	mov	r0, r6
  404944:	f04f 0e00 	mov.w	lr, #0
  404948:	f857 1b04 	ldr.w	r1, [r7], #4
  40494c:	f8d0 c000 	ldr.w	ip, [r0]
  404950:	b28a      	uxth	r2, r1
  404952:	ebc2 030e 	rsb	r3, r2, lr
  404956:	0c09      	lsrs	r1, r1, #16
  404958:	fa13 f38c 	uxtah	r3, r3, ip
  40495c:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  404960:	eb02 4223 	add.w	r2, r2, r3, asr #16
  404964:	b29b      	uxth	r3, r3
  404966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40496a:	45b9      	cmp	r9, r7
  40496c:	ea4f 4e22 	mov.w	lr, r2, asr #16
  404970:	f840 3b04 	str.w	r3, [r0], #4
  404974:	d2e8      	bcs.n	404948 <quorem+0xc0>
  404976:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40497a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  40497e:	b962      	cbnz	r2, 40499a <quorem+0x112>
  404980:	3b04      	subs	r3, #4
  404982:	429e      	cmp	r6, r3
  404984:	461a      	mov	r2, r3
  404986:	d302      	bcc.n	40498e <quorem+0x106>
  404988:	f8c8 4010 	str.w	r4, [r8, #16]
  40498c:	e005      	b.n	40499a <quorem+0x112>
  40498e:	6812      	ldr	r2, [r2, #0]
  404990:	3b04      	subs	r3, #4
  404992:	2a00      	cmp	r2, #0
  404994:	d1f8      	bne.n	404988 <quorem+0x100>
  404996:	3c01      	subs	r4, #1
  404998:	e7f3      	b.n	404982 <quorem+0xfa>
  40499a:	4628      	mov	r0, r5
  40499c:	e000      	b.n	4049a0 <quorem+0x118>
  40499e:	2000      	movs	r0, #0
  4049a0:	b003      	add	sp, #12
  4049a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

004049a8 <_dtoa_r>:
  4049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4049ac:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4049ae:	b095      	sub	sp, #84	; 0x54
  4049b0:	4682      	mov	sl, r0
  4049b2:	9c21      	ldr	r4, [sp, #132]	; 0x84
  4049b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4049b8:	b945      	cbnz	r5, 4049cc <_dtoa_r+0x24>
  4049ba:	2010      	movs	r0, #16
  4049bc:	f001 fa9e 	bl	405efc <malloc>
  4049c0:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  4049c4:	6045      	str	r5, [r0, #4]
  4049c6:	6085      	str	r5, [r0, #8]
  4049c8:	6005      	str	r5, [r0, #0]
  4049ca:	60c5      	str	r5, [r0, #12]
  4049cc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4049d0:	6819      	ldr	r1, [r3, #0]
  4049d2:	b159      	cbz	r1, 4049ec <_dtoa_r+0x44>
  4049d4:	685a      	ldr	r2, [r3, #4]
  4049d6:	604a      	str	r2, [r1, #4]
  4049d8:	2301      	movs	r3, #1
  4049da:	4093      	lsls	r3, r2
  4049dc:	608b      	str	r3, [r1, #8]
  4049de:	4650      	mov	r0, sl
  4049e0:	f001 fb2b 	bl	40603a <_Bfree>
  4049e4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4049e8:	2200      	movs	r2, #0
  4049ea:	601a      	str	r2, [r3, #0]
  4049ec:	9b03      	ldr	r3, [sp, #12]
  4049ee:	4aa0      	ldr	r2, [pc, #640]	; (404c70 <_dtoa_r+0x2c8>)
  4049f0:	2b00      	cmp	r3, #0
  4049f2:	bfbf      	itttt	lt
  4049f4:	2301      	movlt	r3, #1
  4049f6:	6023      	strlt	r3, [r4, #0]
  4049f8:	9b03      	ldrlt	r3, [sp, #12]
  4049fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4049fe:	bfb8      	it	lt
  404a00:	9303      	strlt	r3, [sp, #12]
  404a02:	f8dd 800c 	ldr.w	r8, [sp, #12]
  404a06:	bfa4      	itt	ge
  404a08:	2300      	movge	r3, #0
  404a0a:	6023      	strge	r3, [r4, #0]
  404a0c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  404a10:	0d1b      	lsrs	r3, r3, #20
  404a12:	051b      	lsls	r3, r3, #20
  404a14:	4293      	cmp	r3, r2
  404a16:	d11d      	bne.n	404a54 <_dtoa_r+0xac>
  404a18:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404a1a:	f242 730f 	movw	r3, #9999	; 0x270f
  404a1e:	6013      	str	r3, [r2, #0]
  404a20:	9b02      	ldr	r3, [sp, #8]
  404a22:	b943      	cbnz	r3, 404a36 <_dtoa_r+0x8e>
  404a24:	4a93      	ldr	r2, [pc, #588]	; (404c74 <_dtoa_r+0x2cc>)
  404a26:	4b94      	ldr	r3, [pc, #592]	; (404c78 <_dtoa_r+0x2d0>)
  404a28:	f3c8 0013 	ubfx	r0, r8, #0, #20
  404a2c:	2800      	cmp	r0, #0
  404a2e:	bf14      	ite	ne
  404a30:	4618      	movne	r0, r3
  404a32:	4610      	moveq	r0, r2
  404a34:	e000      	b.n	404a38 <_dtoa_r+0x90>
  404a36:	4890      	ldr	r0, [pc, #576]	; (404c78 <_dtoa_r+0x2d0>)
  404a38:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404a3a:	2b00      	cmp	r3, #0
  404a3c:	f000 854a 	beq.w	4054d4 <_dtoa_r+0xb2c>
  404a40:	78c3      	ldrb	r3, [r0, #3]
  404a42:	b113      	cbz	r3, 404a4a <_dtoa_r+0xa2>
  404a44:	f100 0308 	add.w	r3, r0, #8
  404a48:	e000      	b.n	404a4c <_dtoa_r+0xa4>
  404a4a:	1cc3      	adds	r3, r0, #3
  404a4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404a4e:	6013      	str	r3, [r2, #0]
  404a50:	f000 bd40 	b.w	4054d4 <_dtoa_r+0xb2c>
  404a54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  404a58:	2200      	movs	r2, #0
  404a5a:	2300      	movs	r3, #0
  404a5c:	4620      	mov	r0, r4
  404a5e:	4629      	mov	r1, r5
  404a60:	f002 fd9e 	bl	4075a0 <__aeabi_dcmpeq>
  404a64:	4607      	mov	r7, r0
  404a66:	b158      	cbz	r0, 404a80 <_dtoa_r+0xd8>
  404a68:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404a6a:	2301      	movs	r3, #1
  404a6c:	6013      	str	r3, [r2, #0]
  404a6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404a70:	2b00      	cmp	r3, #0
  404a72:	f000 8522 	beq.w	4054ba <_dtoa_r+0xb12>
  404a76:	4881      	ldr	r0, [pc, #516]	; (404c7c <_dtoa_r+0x2d4>)
  404a78:	6018      	str	r0, [r3, #0]
  404a7a:	3801      	subs	r0, #1
  404a7c:	f000 bd2a 	b.w	4054d4 <_dtoa_r+0xb2c>
  404a80:	ab12      	add	r3, sp, #72	; 0x48
  404a82:	9301      	str	r3, [sp, #4]
  404a84:	ab13      	add	r3, sp, #76	; 0x4c
  404a86:	9300      	str	r3, [sp, #0]
  404a88:	4622      	mov	r2, r4
  404a8a:	462b      	mov	r3, r5
  404a8c:	4650      	mov	r0, sl
  404a8e:	f001 fdd6 	bl	40663e <__d2b>
  404a92:	f3c8 560a 	ubfx	r6, r8, #20, #11
  404a96:	9004      	str	r0, [sp, #16]
  404a98:	b156      	cbz	r6, 404ab0 <_dtoa_r+0x108>
  404a9a:	f3c5 0313 	ubfx	r3, r5, #0, #20
  404a9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  404aa2:	4620      	mov	r0, r4
  404aa4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404aa8:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  404aac:	9711      	str	r7, [sp, #68]	; 0x44
  404aae:	e01d      	b.n	404aec <_dtoa_r+0x144>
  404ab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404ab2:	9e12      	ldr	r6, [sp, #72]	; 0x48
  404ab4:	441e      	add	r6, r3
  404ab6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404aba:	2b20      	cmp	r3, #32
  404abc:	dd0a      	ble.n	404ad4 <_dtoa_r+0x12c>
  404abe:	9a02      	ldr	r2, [sp, #8]
  404ac0:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404ac4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404ac8:	fa22 f000 	lsr.w	r0, r2, r0
  404acc:	fa08 f303 	lsl.w	r3, r8, r3
  404ad0:	4318      	orrs	r0, r3
  404ad2:	e004      	b.n	404ade <_dtoa_r+0x136>
  404ad4:	f1c3 0020 	rsb	r0, r3, #32
  404ad8:	9b02      	ldr	r3, [sp, #8]
  404ada:	fa03 f000 	lsl.w	r0, r3, r0
  404ade:	f002 fa81 	bl	406fe4 <__aeabi_ui2d>
  404ae2:	2301      	movs	r3, #1
  404ae4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404ae8:	3e01      	subs	r6, #1
  404aea:	9311      	str	r3, [sp, #68]	; 0x44
  404aec:	2200      	movs	r2, #0
  404aee:	4b64      	ldr	r3, [pc, #400]	; (404c80 <_dtoa_r+0x2d8>)
  404af0:	f002 f93a 	bl	406d68 <__aeabi_dsub>
  404af4:	a358      	add	r3, pc, #352	; (adr r3, 404c58 <_dtoa_r+0x2b0>)
  404af6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404afa:	f002 fae9 	bl	4070d0 <__aeabi_dmul>
  404afe:	a358      	add	r3, pc, #352	; (adr r3, 404c60 <_dtoa_r+0x2b8>)
  404b00:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b04:	f002 f932 	bl	406d6c <__adddf3>
  404b08:	4604      	mov	r4, r0
  404b0a:	4630      	mov	r0, r6
  404b0c:	460d      	mov	r5, r1
  404b0e:	f002 fa79 	bl	407004 <__aeabi_i2d>
  404b12:	a355      	add	r3, pc, #340	; (adr r3, 404c68 <_dtoa_r+0x2c0>)
  404b14:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b18:	f002 fada 	bl	4070d0 <__aeabi_dmul>
  404b1c:	4602      	mov	r2, r0
  404b1e:	460b      	mov	r3, r1
  404b20:	4620      	mov	r0, r4
  404b22:	4629      	mov	r1, r5
  404b24:	f002 f922 	bl	406d6c <__adddf3>
  404b28:	4604      	mov	r4, r0
  404b2a:	460d      	mov	r5, r1
  404b2c:	f002 fd80 	bl	407630 <__aeabi_d2iz>
  404b30:	2200      	movs	r2, #0
  404b32:	4683      	mov	fp, r0
  404b34:	2300      	movs	r3, #0
  404b36:	4620      	mov	r0, r4
  404b38:	4629      	mov	r1, r5
  404b3a:	f002 fd3b 	bl	4075b4 <__aeabi_dcmplt>
  404b3e:	b158      	cbz	r0, 404b58 <_dtoa_r+0x1b0>
  404b40:	4658      	mov	r0, fp
  404b42:	f002 fa5f 	bl	407004 <__aeabi_i2d>
  404b46:	4602      	mov	r2, r0
  404b48:	460b      	mov	r3, r1
  404b4a:	4620      	mov	r0, r4
  404b4c:	4629      	mov	r1, r5
  404b4e:	f002 fd27 	bl	4075a0 <__aeabi_dcmpeq>
  404b52:	b908      	cbnz	r0, 404b58 <_dtoa_r+0x1b0>
  404b54:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  404b58:	f1bb 0f16 	cmp.w	fp, #22
  404b5c:	d80d      	bhi.n	404b7a <_dtoa_r+0x1d2>
  404b5e:	4949      	ldr	r1, [pc, #292]	; (404c84 <_dtoa_r+0x2dc>)
  404b60:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  404b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404b68:	e9d1 0100 	ldrd	r0, r1, [r1]
  404b6c:	f002 fd40 	bl	4075f0 <__aeabi_dcmpgt>
  404b70:	b130      	cbz	r0, 404b80 <_dtoa_r+0x1d8>
  404b72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  404b76:	2300      	movs	r3, #0
  404b78:	e000      	b.n	404b7c <_dtoa_r+0x1d4>
  404b7a:	2301      	movs	r3, #1
  404b7c:	9310      	str	r3, [sp, #64]	; 0x40
  404b7e:	e000      	b.n	404b82 <_dtoa_r+0x1da>
  404b80:	9010      	str	r0, [sp, #64]	; 0x40
  404b82:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404b84:	1b9e      	subs	r6, r3, r6
  404b86:	1e73      	subs	r3, r6, #1
  404b88:	9307      	str	r3, [sp, #28]
  404b8a:	bf43      	ittte	mi
  404b8c:	f1c3 0800 	rsbmi	r8, r3, #0
  404b90:	2300      	movmi	r3, #0
  404b92:	9307      	strmi	r3, [sp, #28]
  404b94:	f04f 0800 	movpl.w	r8, #0
  404b98:	f1bb 0f00 	cmp.w	fp, #0
  404b9c:	db06      	blt.n	404bac <_dtoa_r+0x204>
  404b9e:	9b07      	ldr	r3, [sp, #28]
  404ba0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  404ba4:	445b      	add	r3, fp
  404ba6:	9307      	str	r3, [sp, #28]
  404ba8:	2700      	movs	r7, #0
  404baa:	e005      	b.n	404bb8 <_dtoa_r+0x210>
  404bac:	2300      	movs	r3, #0
  404bae:	ebcb 0808 	rsb	r8, fp, r8
  404bb2:	f1cb 0700 	rsb	r7, fp, #0
  404bb6:	930b      	str	r3, [sp, #44]	; 0x2c
  404bb8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404bba:	2b09      	cmp	r3, #9
  404bbc:	d827      	bhi.n	404c0e <_dtoa_r+0x266>
  404bbe:	2b05      	cmp	r3, #5
  404bc0:	bfc4      	itt	gt
  404bc2:	3b04      	subgt	r3, #4
  404bc4:	931e      	strgt	r3, [sp, #120]	; 0x78
  404bc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404bc8:	f1a3 0302 	sub.w	r3, r3, #2
  404bcc:	bfcc      	ite	gt
  404bce:	2500      	movgt	r5, #0
  404bd0:	2501      	movle	r5, #1
  404bd2:	2b03      	cmp	r3, #3
  404bd4:	d820      	bhi.n	404c18 <_dtoa_r+0x270>
  404bd6:	e8df f003 	tbb	[pc, r3]
  404bda:	0e06      	.short	0x0e06
  404bdc:	0402      	.short	0x0402
  404bde:	2301      	movs	r3, #1
  404be0:	e002      	b.n	404be8 <_dtoa_r+0x240>
  404be2:	2301      	movs	r3, #1
  404be4:	e008      	b.n	404bf8 <_dtoa_r+0x250>
  404be6:	2300      	movs	r3, #0
  404be8:	930a      	str	r3, [sp, #40]	; 0x28
  404bea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404bec:	2b00      	cmp	r3, #0
  404bee:	dd1d      	ble.n	404c2c <_dtoa_r+0x284>
  404bf0:	4699      	mov	r9, r3
  404bf2:	9305      	str	r3, [sp, #20]
  404bf4:	e021      	b.n	404c3a <_dtoa_r+0x292>
  404bf6:	2300      	movs	r3, #0
  404bf8:	930a      	str	r3, [sp, #40]	; 0x28
  404bfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404bfc:	eb0b 0903 	add.w	r9, fp, r3
  404c00:	f109 0301 	add.w	r3, r9, #1
  404c04:	2b01      	cmp	r3, #1
  404c06:	9305      	str	r3, [sp, #20]
  404c08:	bfb8      	it	lt
  404c0a:	2301      	movlt	r3, #1
  404c0c:	e015      	b.n	404c3a <_dtoa_r+0x292>
  404c0e:	2501      	movs	r5, #1
  404c10:	2300      	movs	r3, #0
  404c12:	931e      	str	r3, [sp, #120]	; 0x78
  404c14:	950a      	str	r5, [sp, #40]	; 0x28
  404c16:	e001      	b.n	404c1c <_dtoa_r+0x274>
  404c18:	2301      	movs	r3, #1
  404c1a:	930a      	str	r3, [sp, #40]	; 0x28
  404c1c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  404c20:	2200      	movs	r2, #0
  404c22:	f8cd 9014 	str.w	r9, [sp, #20]
  404c26:	2312      	movs	r3, #18
  404c28:	921f      	str	r2, [sp, #124]	; 0x7c
  404c2a:	e006      	b.n	404c3a <_dtoa_r+0x292>
  404c2c:	f04f 0901 	mov.w	r9, #1
  404c30:	f8cd 9014 	str.w	r9, [sp, #20]
  404c34:	464b      	mov	r3, r9
  404c36:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  404c3a:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  404c3e:	2200      	movs	r2, #0
  404c40:	6062      	str	r2, [r4, #4]
  404c42:	2104      	movs	r1, #4
  404c44:	f101 0214 	add.w	r2, r1, #20
  404c48:	429a      	cmp	r2, r3
  404c4a:	d81d      	bhi.n	404c88 <_dtoa_r+0x2e0>
  404c4c:	6862      	ldr	r2, [r4, #4]
  404c4e:	3201      	adds	r2, #1
  404c50:	6062      	str	r2, [r4, #4]
  404c52:	0049      	lsls	r1, r1, #1
  404c54:	e7f6      	b.n	404c44 <_dtoa_r+0x29c>
  404c56:	bf00      	nop
  404c58:	636f4361 	.word	0x636f4361
  404c5c:	3fd287a7 	.word	0x3fd287a7
  404c60:	8b60c8b3 	.word	0x8b60c8b3
  404c64:	3fc68a28 	.word	0x3fc68a28
  404c68:	509f79fb 	.word	0x509f79fb
  404c6c:	3fd34413 	.word	0x3fd34413
  404c70:	7ff00000 	.word	0x7ff00000
  404c74:	00408280 	.word	0x00408280
  404c78:	00408289 	.word	0x00408289
  404c7c:	0040820d 	.word	0x0040820d
  404c80:	3ff80000 	.word	0x3ff80000
  404c84:	00408300 	.word	0x00408300
  404c88:	6861      	ldr	r1, [r4, #4]
  404c8a:	4650      	mov	r0, sl
  404c8c:	f001 f9a0 	bl	405fd0 <_Balloc>
  404c90:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  404c94:	6020      	str	r0, [r4, #0]
  404c96:	681b      	ldr	r3, [r3, #0]
  404c98:	9306      	str	r3, [sp, #24]
  404c9a:	9b05      	ldr	r3, [sp, #20]
  404c9c:	2b0e      	cmp	r3, #14
  404c9e:	f200 815d 	bhi.w	404f5c <_dtoa_r+0x5b4>
  404ca2:	2d00      	cmp	r5, #0
  404ca4:	f000 815a 	beq.w	404f5c <_dtoa_r+0x5b4>
  404ca8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  404cac:	f1bb 0f00 	cmp.w	fp, #0
  404cb0:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  404cb4:	dd31      	ble.n	404d1a <_dtoa_r+0x372>
  404cb6:	4aa0      	ldr	r2, [pc, #640]	; (404f38 <_dtoa_r+0x590>)
  404cb8:	f00b 030f 	and.w	r3, fp, #15
  404cbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404cc0:	e9d3 3400 	ldrd	r3, r4, [r3]
  404cc4:	ea4f 152b 	mov.w	r5, fp, asr #4
  404cc8:	06e8      	lsls	r0, r5, #27
  404cca:	e9cd 3408 	strd	r3, r4, [sp, #32]
  404cce:	d50c      	bpl.n	404cea <_dtoa_r+0x342>
  404cd0:	4b9a      	ldr	r3, [pc, #616]	; (404f3c <_dtoa_r+0x594>)
  404cd2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404cd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404cda:	f002 fb23 	bl	407324 <__aeabi_ddiv>
  404cde:	f005 050f 	and.w	r5, r5, #15
  404ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404ce6:	2403      	movs	r4, #3
  404ce8:	e000      	b.n	404cec <_dtoa_r+0x344>
  404cea:	2402      	movs	r4, #2
  404cec:	4e93      	ldr	r6, [pc, #588]	; (404f3c <_dtoa_r+0x594>)
  404cee:	b16d      	cbz	r5, 404d0c <_dtoa_r+0x364>
  404cf0:	07e9      	lsls	r1, r5, #31
  404cf2:	d508      	bpl.n	404d06 <_dtoa_r+0x35e>
  404cf4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404cf8:	e9d6 2300 	ldrd	r2, r3, [r6]
  404cfc:	f002 f9e8 	bl	4070d0 <__aeabi_dmul>
  404d00:	e9cd 0108 	strd	r0, r1, [sp, #32]
  404d04:	3401      	adds	r4, #1
  404d06:	106d      	asrs	r5, r5, #1
  404d08:	3608      	adds	r6, #8
  404d0a:	e7f0      	b.n	404cee <_dtoa_r+0x346>
  404d0c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  404d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d14:	f002 fb06 	bl	407324 <__aeabi_ddiv>
  404d18:	e020      	b.n	404d5c <_dtoa_r+0x3b4>
  404d1a:	f1cb 0500 	rsb	r5, fp, #0
  404d1e:	b305      	cbz	r5, 404d62 <_dtoa_r+0x3ba>
  404d20:	4b85      	ldr	r3, [pc, #532]	; (404f38 <_dtoa_r+0x590>)
  404d22:	4e86      	ldr	r6, [pc, #536]	; (404f3c <_dtoa_r+0x594>)
  404d24:	f005 020f 	and.w	r2, r5, #15
  404d28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404d34:	f002 f9cc 	bl	4070d0 <__aeabi_dmul>
  404d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d3c:	112d      	asrs	r5, r5, #4
  404d3e:	2300      	movs	r3, #0
  404d40:	2402      	movs	r4, #2
  404d42:	b155      	cbz	r5, 404d5a <_dtoa_r+0x3b2>
  404d44:	07ea      	lsls	r2, r5, #31
  404d46:	d505      	bpl.n	404d54 <_dtoa_r+0x3ac>
  404d48:	e9d6 2300 	ldrd	r2, r3, [r6]
  404d4c:	f002 f9c0 	bl	4070d0 <__aeabi_dmul>
  404d50:	3401      	adds	r4, #1
  404d52:	2301      	movs	r3, #1
  404d54:	106d      	asrs	r5, r5, #1
  404d56:	3608      	adds	r6, #8
  404d58:	e7f3      	b.n	404d42 <_dtoa_r+0x39a>
  404d5a:	b11b      	cbz	r3, 404d64 <_dtoa_r+0x3bc>
  404d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d60:	e000      	b.n	404d64 <_dtoa_r+0x3bc>
  404d62:	2402      	movs	r4, #2
  404d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404d66:	b1e3      	cbz	r3, 404da2 <_dtoa_r+0x3fa>
  404d68:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  404d6c:	2200      	movs	r2, #0
  404d6e:	4b74      	ldr	r3, [pc, #464]	; (404f40 <_dtoa_r+0x598>)
  404d70:	4628      	mov	r0, r5
  404d72:	4631      	mov	r1, r6
  404d74:	f002 fc1e 	bl	4075b4 <__aeabi_dcmplt>
  404d78:	b198      	cbz	r0, 404da2 <_dtoa_r+0x3fa>
  404d7a:	9b05      	ldr	r3, [sp, #20]
  404d7c:	b18b      	cbz	r3, 404da2 <_dtoa_r+0x3fa>
  404d7e:	f1b9 0f00 	cmp.w	r9, #0
  404d82:	f340 80e7 	ble.w	404f54 <_dtoa_r+0x5ac>
  404d86:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  404d8a:	9308      	str	r3, [sp, #32]
  404d8c:	4631      	mov	r1, r6
  404d8e:	2200      	movs	r2, #0
  404d90:	4b6c      	ldr	r3, [pc, #432]	; (404f44 <_dtoa_r+0x59c>)
  404d92:	4628      	mov	r0, r5
  404d94:	f002 f99c 	bl	4070d0 <__aeabi_dmul>
  404d98:	3401      	adds	r4, #1
  404d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d9e:	464e      	mov	r6, r9
  404da0:	e002      	b.n	404da8 <_dtoa_r+0x400>
  404da2:	9e05      	ldr	r6, [sp, #20]
  404da4:	f8cd b020 	str.w	fp, [sp, #32]
  404da8:	4620      	mov	r0, r4
  404daa:	f002 f92b 	bl	407004 <__aeabi_i2d>
  404dae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404db2:	f002 f98d 	bl	4070d0 <__aeabi_dmul>
  404db6:	4b64      	ldr	r3, [pc, #400]	; (404f48 <_dtoa_r+0x5a0>)
  404db8:	2200      	movs	r2, #0
  404dba:	f001 ffd7 	bl	406d6c <__adddf3>
  404dbe:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  404dc2:	4604      	mov	r4, r0
  404dc4:	930c      	str	r3, [sp, #48]	; 0x30
  404dc6:	461d      	mov	r5, r3
  404dc8:	b9d6      	cbnz	r6, 404e00 <_dtoa_r+0x458>
  404dca:	2200      	movs	r2, #0
  404dcc:	4b5f      	ldr	r3, [pc, #380]	; (404f4c <_dtoa_r+0x5a4>)
  404dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404dd2:	f001 ffc9 	bl	406d68 <__aeabi_dsub>
  404dd6:	4622      	mov	r2, r4
  404dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404dda:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404dde:	f002 fc07 	bl	4075f0 <__aeabi_dcmpgt>
  404de2:	2800      	cmp	r0, #0
  404de4:	f040 8240 	bne.w	405268 <_dtoa_r+0x8c0>
  404de8:	990c      	ldr	r1, [sp, #48]	; 0x30
  404dea:	4622      	mov	r2, r4
  404dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  404df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404df4:	f002 fbde 	bl	4075b4 <__aeabi_dcmplt>
  404df8:	2800      	cmp	r0, #0
  404dfa:	f040 822c 	bne.w	405256 <_dtoa_r+0x8ae>
  404dfe:	e0a9      	b.n	404f54 <_dtoa_r+0x5ac>
  404e00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404e02:	4b4d      	ldr	r3, [pc, #308]	; (404f38 <_dtoa_r+0x590>)
  404e04:	1e71      	subs	r1, r6, #1
  404e06:	2a00      	cmp	r2, #0
  404e08:	d049      	beq.n	404e9e <_dtoa_r+0x4f6>
  404e0a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  404e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404e12:	2000      	movs	r0, #0
  404e14:	494e      	ldr	r1, [pc, #312]	; (404f50 <_dtoa_r+0x5a8>)
  404e16:	f002 fa85 	bl	407324 <__aeabi_ddiv>
  404e1a:	4622      	mov	r2, r4
  404e1c:	462b      	mov	r3, r5
  404e1e:	f001 ffa3 	bl	406d68 <__aeabi_dsub>
  404e22:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404e26:	9c06      	ldr	r4, [sp, #24]
  404e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e2c:	f002 fc00 	bl	407630 <__aeabi_d2iz>
  404e30:	4605      	mov	r5, r0
  404e32:	f002 f8e7 	bl	407004 <__aeabi_i2d>
  404e36:	4602      	mov	r2, r0
  404e38:	460b      	mov	r3, r1
  404e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e3e:	f001 ff93 	bl	406d68 <__aeabi_dsub>
  404e42:	3530      	adds	r5, #48	; 0x30
  404e44:	f804 5b01 	strb.w	r5, [r4], #1
  404e48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404e50:	f002 fbb0 	bl	4075b4 <__aeabi_dcmplt>
  404e54:	2800      	cmp	r0, #0
  404e56:	f040 8320 	bne.w	40549a <_dtoa_r+0xaf2>
  404e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404e5e:	2000      	movs	r0, #0
  404e60:	4937      	ldr	r1, [pc, #220]	; (404f40 <_dtoa_r+0x598>)
  404e62:	f001 ff81 	bl	406d68 <__aeabi_dsub>
  404e66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404e6a:	f002 fba3 	bl	4075b4 <__aeabi_dcmplt>
  404e6e:	2800      	cmp	r0, #0
  404e70:	f040 80d2 	bne.w	405018 <_dtoa_r+0x670>
  404e74:	9b06      	ldr	r3, [sp, #24]
  404e76:	1ae3      	subs	r3, r4, r3
  404e78:	42b3      	cmp	r3, r6
  404e7a:	da6b      	bge.n	404f54 <_dtoa_r+0x5ac>
  404e7c:	2200      	movs	r2, #0
  404e7e:	4b31      	ldr	r3, [pc, #196]	; (404f44 <_dtoa_r+0x59c>)
  404e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404e84:	f002 f924 	bl	4070d0 <__aeabi_dmul>
  404e88:	2200      	movs	r2, #0
  404e8a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404e8e:	4b2d      	ldr	r3, [pc, #180]	; (404f44 <_dtoa_r+0x59c>)
  404e90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e94:	f002 f91c 	bl	4070d0 <__aeabi_dmul>
  404e98:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404e9c:	e7c4      	b.n	404e28 <_dtoa_r+0x480>
  404e9e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404ea2:	4622      	mov	r2, r4
  404ea4:	462b      	mov	r3, r5
  404ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
  404eaa:	f002 f911 	bl	4070d0 <__aeabi_dmul>
  404eae:	9b06      	ldr	r3, [sp, #24]
  404eb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404eb4:	199c      	adds	r4, r3, r6
  404eb6:	461d      	mov	r5, r3
  404eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ebc:	f002 fbb8 	bl	407630 <__aeabi_d2iz>
  404ec0:	4606      	mov	r6, r0
  404ec2:	f002 f89f 	bl	407004 <__aeabi_i2d>
  404ec6:	3630      	adds	r6, #48	; 0x30
  404ec8:	4602      	mov	r2, r0
  404eca:	460b      	mov	r3, r1
  404ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ed0:	f001 ff4a 	bl	406d68 <__aeabi_dsub>
  404ed4:	f805 6b01 	strb.w	r6, [r5], #1
  404ed8:	42ac      	cmp	r4, r5
  404eda:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404ede:	f04f 0200 	mov.w	r2, #0
  404ee2:	d123      	bne.n	404f2c <_dtoa_r+0x584>
  404ee4:	4b1a      	ldr	r3, [pc, #104]	; (404f50 <_dtoa_r+0x5a8>)
  404ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404eea:	f001 ff3f 	bl	406d6c <__adddf3>
  404eee:	4602      	mov	r2, r0
  404ef0:	460b      	mov	r3, r1
  404ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ef6:	f002 fb7b 	bl	4075f0 <__aeabi_dcmpgt>
  404efa:	2800      	cmp	r0, #0
  404efc:	f040 808c 	bne.w	405018 <_dtoa_r+0x670>
  404f00:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404f04:	2000      	movs	r0, #0
  404f06:	4912      	ldr	r1, [pc, #72]	; (404f50 <_dtoa_r+0x5a8>)
  404f08:	f001 ff2e 	bl	406d68 <__aeabi_dsub>
  404f0c:	4602      	mov	r2, r0
  404f0e:	460b      	mov	r3, r1
  404f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404f14:	f002 fb4e 	bl	4075b4 <__aeabi_dcmplt>
  404f18:	b1e0      	cbz	r0, 404f54 <_dtoa_r+0x5ac>
  404f1a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  404f1e:	2b30      	cmp	r3, #48	; 0x30
  404f20:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  404f24:	f040 82b9 	bne.w	40549a <_dtoa_r+0xaf2>
  404f28:	4614      	mov	r4, r2
  404f2a:	e7f6      	b.n	404f1a <_dtoa_r+0x572>
  404f2c:	4b05      	ldr	r3, [pc, #20]	; (404f44 <_dtoa_r+0x59c>)
  404f2e:	f002 f8cf 	bl	4070d0 <__aeabi_dmul>
  404f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404f36:	e7bf      	b.n	404eb8 <_dtoa_r+0x510>
  404f38:	00408300 	.word	0x00408300
  404f3c:	004083c8 	.word	0x004083c8
  404f40:	3ff00000 	.word	0x3ff00000
  404f44:	40240000 	.word	0x40240000
  404f48:	401c0000 	.word	0x401c0000
  404f4c:	40140000 	.word	0x40140000
  404f50:	3fe00000 	.word	0x3fe00000
  404f54:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  404f58:	e9cd 3402 	strd	r3, r4, [sp, #8]
  404f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404f5e:	2b00      	cmp	r3, #0
  404f60:	db7d      	blt.n	40505e <_dtoa_r+0x6b6>
  404f62:	f1bb 0f0e 	cmp.w	fp, #14
  404f66:	dc7a      	bgt.n	40505e <_dtoa_r+0x6b6>
  404f68:	4bab      	ldr	r3, [pc, #684]	; (405218 <_dtoa_r+0x870>)
  404f6a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  404f6e:	e9d3 6700 	ldrd	r6, r7, [r3]
  404f72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404f74:	2b00      	cmp	r3, #0
  404f76:	da14      	bge.n	404fa2 <_dtoa_r+0x5fa>
  404f78:	9b05      	ldr	r3, [sp, #20]
  404f7a:	2b00      	cmp	r3, #0
  404f7c:	dc11      	bgt.n	404fa2 <_dtoa_r+0x5fa>
  404f7e:	f040 816c 	bne.w	40525a <_dtoa_r+0x8b2>
  404f82:	2200      	movs	r2, #0
  404f84:	4ba5      	ldr	r3, [pc, #660]	; (40521c <_dtoa_r+0x874>)
  404f86:	4630      	mov	r0, r6
  404f88:	4639      	mov	r1, r7
  404f8a:	f002 f8a1 	bl	4070d0 <__aeabi_dmul>
  404f8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404f92:	f002 fb23 	bl	4075dc <__aeabi_dcmpge>
  404f96:	9d05      	ldr	r5, [sp, #20]
  404f98:	462e      	mov	r6, r5
  404f9a:	2800      	cmp	r0, #0
  404f9c:	f040 815f 	bne.w	40525e <_dtoa_r+0x8b6>
  404fa0:	e165      	b.n	40526e <_dtoa_r+0x8c6>
  404fa2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  404fa6:	9c06      	ldr	r4, [sp, #24]
  404fa8:	4632      	mov	r2, r6
  404faa:	463b      	mov	r3, r7
  404fac:	4640      	mov	r0, r8
  404fae:	4649      	mov	r1, r9
  404fb0:	f002 f9b8 	bl	407324 <__aeabi_ddiv>
  404fb4:	f002 fb3c 	bl	407630 <__aeabi_d2iz>
  404fb8:	4605      	mov	r5, r0
  404fba:	f002 f823 	bl	407004 <__aeabi_i2d>
  404fbe:	4632      	mov	r2, r6
  404fc0:	463b      	mov	r3, r7
  404fc2:	f002 f885 	bl	4070d0 <__aeabi_dmul>
  404fc6:	460b      	mov	r3, r1
  404fc8:	4602      	mov	r2, r0
  404fca:	4649      	mov	r1, r9
  404fcc:	4640      	mov	r0, r8
  404fce:	f001 fecb 	bl	406d68 <__aeabi_dsub>
  404fd2:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  404fd6:	9b06      	ldr	r3, [sp, #24]
  404fd8:	f804 eb01 	strb.w	lr, [r4], #1
  404fdc:	ebc3 0e04 	rsb	lr, r3, r4
  404fe0:	9b05      	ldr	r3, [sp, #20]
  404fe2:	4573      	cmp	r3, lr
  404fe4:	d12e      	bne.n	405044 <_dtoa_r+0x69c>
  404fe6:	4602      	mov	r2, r0
  404fe8:	460b      	mov	r3, r1
  404fea:	f001 febf 	bl	406d6c <__adddf3>
  404fee:	4680      	mov	r8, r0
  404ff0:	4689      	mov	r9, r1
  404ff2:	4602      	mov	r2, r0
  404ff4:	460b      	mov	r3, r1
  404ff6:	4630      	mov	r0, r6
  404ff8:	4639      	mov	r1, r7
  404ffa:	f002 fadb 	bl	4075b4 <__aeabi_dcmplt>
  404ffe:	b978      	cbnz	r0, 405020 <_dtoa_r+0x678>
  405000:	4642      	mov	r2, r8
  405002:	464b      	mov	r3, r9
  405004:	4630      	mov	r0, r6
  405006:	4639      	mov	r1, r7
  405008:	f002 faca 	bl	4075a0 <__aeabi_dcmpeq>
  40500c:	2800      	cmp	r0, #0
  40500e:	f000 8246 	beq.w	40549e <_dtoa_r+0xaf6>
  405012:	07eb      	lsls	r3, r5, #31
  405014:	d404      	bmi.n	405020 <_dtoa_r+0x678>
  405016:	e242      	b.n	40549e <_dtoa_r+0xaf6>
  405018:	f8dd b020 	ldr.w	fp, [sp, #32]
  40501c:	e000      	b.n	405020 <_dtoa_r+0x678>
  40501e:	461c      	mov	r4, r3
  405020:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  405024:	2a39      	cmp	r2, #57	; 0x39
  405026:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  40502a:	d107      	bne.n	40503c <_dtoa_r+0x694>
  40502c:	9a06      	ldr	r2, [sp, #24]
  40502e:	429a      	cmp	r2, r3
  405030:	d1f5      	bne.n	40501e <_dtoa_r+0x676>
  405032:	9906      	ldr	r1, [sp, #24]
  405034:	2230      	movs	r2, #48	; 0x30
  405036:	f10b 0b01 	add.w	fp, fp, #1
  40503a:	700a      	strb	r2, [r1, #0]
  40503c:	781a      	ldrb	r2, [r3, #0]
  40503e:	3201      	adds	r2, #1
  405040:	701a      	strb	r2, [r3, #0]
  405042:	e22c      	b.n	40549e <_dtoa_r+0xaf6>
  405044:	2200      	movs	r2, #0
  405046:	4b76      	ldr	r3, [pc, #472]	; (405220 <_dtoa_r+0x878>)
  405048:	f002 f842 	bl	4070d0 <__aeabi_dmul>
  40504c:	2200      	movs	r2, #0
  40504e:	2300      	movs	r3, #0
  405050:	4680      	mov	r8, r0
  405052:	4689      	mov	r9, r1
  405054:	f002 faa4 	bl	4075a0 <__aeabi_dcmpeq>
  405058:	2800      	cmp	r0, #0
  40505a:	d0a5      	beq.n	404fa8 <_dtoa_r+0x600>
  40505c:	e21f      	b.n	40549e <_dtoa_r+0xaf6>
  40505e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405060:	2a00      	cmp	r2, #0
  405062:	d02b      	beq.n	4050bc <_dtoa_r+0x714>
  405064:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  405066:	2a01      	cmp	r2, #1
  405068:	dc0a      	bgt.n	405080 <_dtoa_r+0x6d8>
  40506a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40506c:	b112      	cbz	r2, 405074 <_dtoa_r+0x6cc>
  40506e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405072:	e002      	b.n	40507a <_dtoa_r+0x6d2>
  405074:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405076:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40507a:	463d      	mov	r5, r7
  40507c:	4644      	mov	r4, r8
  40507e:	e013      	b.n	4050a8 <_dtoa_r+0x700>
  405080:	9b05      	ldr	r3, [sp, #20]
  405082:	1e5d      	subs	r5, r3, #1
  405084:	42af      	cmp	r7, r5
  405086:	bfbf      	itttt	lt
  405088:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  40508a:	1bea      	sublt	r2, r5, r7
  40508c:	189b      	addlt	r3, r3, r2
  40508e:	930b      	strlt	r3, [sp, #44]	; 0x2c
  405090:	9b05      	ldr	r3, [sp, #20]
  405092:	bfb6      	itet	lt
  405094:	462f      	movlt	r7, r5
  405096:	1b7d      	subge	r5, r7, r5
  405098:	2500      	movlt	r5, #0
  40509a:	2b00      	cmp	r3, #0
  40509c:	bfab      	itete	ge
  40509e:	9b05      	ldrge	r3, [sp, #20]
  4050a0:	ebc3 0408 	rsblt	r4, r3, r8
  4050a4:	4644      	movge	r4, r8
  4050a6:	2300      	movlt	r3, #0
  4050a8:	9a07      	ldr	r2, [sp, #28]
  4050aa:	2101      	movs	r1, #1
  4050ac:	441a      	add	r2, r3
  4050ae:	4650      	mov	r0, sl
  4050b0:	4498      	add	r8, r3
  4050b2:	9207      	str	r2, [sp, #28]
  4050b4:	f001 f89e 	bl	4061f4 <__i2b>
  4050b8:	4606      	mov	r6, r0
  4050ba:	e002      	b.n	4050c2 <_dtoa_r+0x71a>
  4050bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4050be:	463d      	mov	r5, r7
  4050c0:	4644      	mov	r4, r8
  4050c2:	b15c      	cbz	r4, 4050dc <_dtoa_r+0x734>
  4050c4:	9b07      	ldr	r3, [sp, #28]
  4050c6:	2b00      	cmp	r3, #0
  4050c8:	dd08      	ble.n	4050dc <_dtoa_r+0x734>
  4050ca:	42a3      	cmp	r3, r4
  4050cc:	9a07      	ldr	r2, [sp, #28]
  4050ce:	bfa8      	it	ge
  4050d0:	4623      	movge	r3, r4
  4050d2:	ebc3 0808 	rsb	r8, r3, r8
  4050d6:	1ae4      	subs	r4, r4, r3
  4050d8:	1ad3      	subs	r3, r2, r3
  4050da:	9307      	str	r3, [sp, #28]
  4050dc:	2f00      	cmp	r7, #0
  4050de:	dd1d      	ble.n	40511c <_dtoa_r+0x774>
  4050e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050e2:	b1ab      	cbz	r3, 405110 <_dtoa_r+0x768>
  4050e4:	b18d      	cbz	r5, 40510a <_dtoa_r+0x762>
  4050e6:	4631      	mov	r1, r6
  4050e8:	462a      	mov	r2, r5
  4050ea:	4650      	mov	r0, sl
  4050ec:	f001 f91c 	bl	406328 <__pow5mult>
  4050f0:	9a04      	ldr	r2, [sp, #16]
  4050f2:	4601      	mov	r1, r0
  4050f4:	4606      	mov	r6, r0
  4050f6:	4650      	mov	r0, sl
  4050f8:	f001 f885 	bl	406206 <__multiply>
  4050fc:	9904      	ldr	r1, [sp, #16]
  4050fe:	9008      	str	r0, [sp, #32]
  405100:	4650      	mov	r0, sl
  405102:	f000 ff9a 	bl	40603a <_Bfree>
  405106:	9b08      	ldr	r3, [sp, #32]
  405108:	9304      	str	r3, [sp, #16]
  40510a:	1b7a      	subs	r2, r7, r5
  40510c:	d006      	beq.n	40511c <_dtoa_r+0x774>
  40510e:	e000      	b.n	405112 <_dtoa_r+0x76a>
  405110:	463a      	mov	r2, r7
  405112:	9904      	ldr	r1, [sp, #16]
  405114:	4650      	mov	r0, sl
  405116:	f001 f907 	bl	406328 <__pow5mult>
  40511a:	9004      	str	r0, [sp, #16]
  40511c:	2101      	movs	r1, #1
  40511e:	4650      	mov	r0, sl
  405120:	f001 f868 	bl	4061f4 <__i2b>
  405124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405126:	4605      	mov	r5, r0
  405128:	b35b      	cbz	r3, 405182 <_dtoa_r+0x7da>
  40512a:	461a      	mov	r2, r3
  40512c:	4601      	mov	r1, r0
  40512e:	4650      	mov	r0, sl
  405130:	f001 f8fa 	bl	406328 <__pow5mult>
  405134:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405136:	2b01      	cmp	r3, #1
  405138:	4605      	mov	r5, r0
  40513a:	dc18      	bgt.n	40516e <_dtoa_r+0x7c6>
  40513c:	9b02      	ldr	r3, [sp, #8]
  40513e:	b983      	cbnz	r3, 405162 <_dtoa_r+0x7ba>
  405140:	9b03      	ldr	r3, [sp, #12]
  405142:	f3c3 0313 	ubfx	r3, r3, #0, #20
  405146:	b973      	cbnz	r3, 405166 <_dtoa_r+0x7be>
  405148:	9b03      	ldr	r3, [sp, #12]
  40514a:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  40514e:	0d3f      	lsrs	r7, r7, #20
  405150:	053f      	lsls	r7, r7, #20
  405152:	b14f      	cbz	r7, 405168 <_dtoa_r+0x7c0>
  405154:	9b07      	ldr	r3, [sp, #28]
  405156:	3301      	adds	r3, #1
  405158:	f108 0801 	add.w	r8, r8, #1
  40515c:	9307      	str	r3, [sp, #28]
  40515e:	2701      	movs	r7, #1
  405160:	e002      	b.n	405168 <_dtoa_r+0x7c0>
  405162:	2700      	movs	r7, #0
  405164:	e000      	b.n	405168 <_dtoa_r+0x7c0>
  405166:	9f02      	ldr	r7, [sp, #8]
  405168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40516a:	b173      	cbz	r3, 40518a <_dtoa_r+0x7e2>
  40516c:	e000      	b.n	405170 <_dtoa_r+0x7c8>
  40516e:	2700      	movs	r7, #0
  405170:	692b      	ldr	r3, [r5, #16]
  405172:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  405176:	6918      	ldr	r0, [r3, #16]
  405178:	f000 ffef 	bl	40615a <__hi0bits>
  40517c:	f1c0 0020 	rsb	r0, r0, #32
  405180:	e004      	b.n	40518c <_dtoa_r+0x7e4>
  405182:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405184:	2b01      	cmp	r3, #1
  405186:	ddd9      	ble.n	40513c <_dtoa_r+0x794>
  405188:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40518a:	2001      	movs	r0, #1
  40518c:	9b07      	ldr	r3, [sp, #28]
  40518e:	4418      	add	r0, r3
  405190:	f010 001f 	ands.w	r0, r0, #31
  405194:	d008      	beq.n	4051a8 <_dtoa_r+0x800>
  405196:	f1c0 0320 	rsb	r3, r0, #32
  40519a:	2b04      	cmp	r3, #4
  40519c:	dd02      	ble.n	4051a4 <_dtoa_r+0x7fc>
  40519e:	f1c0 001c 	rsb	r0, r0, #28
  4051a2:	e002      	b.n	4051aa <_dtoa_r+0x802>
  4051a4:	d006      	beq.n	4051b4 <_dtoa_r+0x80c>
  4051a6:	4618      	mov	r0, r3
  4051a8:	301c      	adds	r0, #28
  4051aa:	9b07      	ldr	r3, [sp, #28]
  4051ac:	4403      	add	r3, r0
  4051ae:	4480      	add	r8, r0
  4051b0:	4404      	add	r4, r0
  4051b2:	9307      	str	r3, [sp, #28]
  4051b4:	f1b8 0f00 	cmp.w	r8, #0
  4051b8:	dd05      	ble.n	4051c6 <_dtoa_r+0x81e>
  4051ba:	4642      	mov	r2, r8
  4051bc:	9904      	ldr	r1, [sp, #16]
  4051be:	4650      	mov	r0, sl
  4051c0:	f001 f900 	bl	4063c4 <__lshift>
  4051c4:	9004      	str	r0, [sp, #16]
  4051c6:	9b07      	ldr	r3, [sp, #28]
  4051c8:	2b00      	cmp	r3, #0
  4051ca:	dd05      	ble.n	4051d8 <_dtoa_r+0x830>
  4051cc:	4629      	mov	r1, r5
  4051ce:	461a      	mov	r2, r3
  4051d0:	4650      	mov	r0, sl
  4051d2:	f001 f8f7 	bl	4063c4 <__lshift>
  4051d6:	4605      	mov	r5, r0
  4051d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4051da:	b31b      	cbz	r3, 405224 <_dtoa_r+0x87c>
  4051dc:	4629      	mov	r1, r5
  4051de:	9804      	ldr	r0, [sp, #16]
  4051e0:	f001 f941 	bl	406466 <__mcmp>
  4051e4:	2800      	cmp	r0, #0
  4051e6:	da1d      	bge.n	405224 <_dtoa_r+0x87c>
  4051e8:	2300      	movs	r3, #0
  4051ea:	220a      	movs	r2, #10
  4051ec:	9904      	ldr	r1, [sp, #16]
  4051ee:	4650      	mov	r0, sl
  4051f0:	f000 ff3a 	bl	406068 <__multadd>
  4051f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4051f6:	9004      	str	r0, [sp, #16]
  4051f8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  4051fc:	2b00      	cmp	r3, #0
  4051fe:	f000 8160 	beq.w	4054c2 <_dtoa_r+0xb1a>
  405202:	4631      	mov	r1, r6
  405204:	2300      	movs	r3, #0
  405206:	220a      	movs	r2, #10
  405208:	4650      	mov	r0, sl
  40520a:	f000 ff2d 	bl	406068 <__multadd>
  40520e:	f1b9 0f00 	cmp.w	r9, #0
  405212:	4606      	mov	r6, r0
  405214:	dc3e      	bgt.n	405294 <_dtoa_r+0x8ec>
  405216:	e03a      	b.n	40528e <_dtoa_r+0x8e6>
  405218:	00408300 	.word	0x00408300
  40521c:	40140000 	.word	0x40140000
  405220:	40240000 	.word	0x40240000
  405224:	9b05      	ldr	r3, [sp, #20]
  405226:	2b00      	cmp	r3, #0
  405228:	dc2b      	bgt.n	405282 <_dtoa_r+0x8da>
  40522a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40522c:	2b02      	cmp	r3, #2
  40522e:	dd28      	ble.n	405282 <_dtoa_r+0x8da>
  405230:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405234:	f1b9 0f00 	cmp.w	r9, #0
  405238:	d111      	bne.n	40525e <_dtoa_r+0x8b6>
  40523a:	4629      	mov	r1, r5
  40523c:	464b      	mov	r3, r9
  40523e:	2205      	movs	r2, #5
  405240:	4650      	mov	r0, sl
  405242:	f000 ff11 	bl	406068 <__multadd>
  405246:	4601      	mov	r1, r0
  405248:	4605      	mov	r5, r0
  40524a:	9804      	ldr	r0, [sp, #16]
  40524c:	f001 f90b 	bl	406466 <__mcmp>
  405250:	2800      	cmp	r0, #0
  405252:	dc0c      	bgt.n	40526e <_dtoa_r+0x8c6>
  405254:	e003      	b.n	40525e <_dtoa_r+0x8b6>
  405256:	4635      	mov	r5, r6
  405258:	e000      	b.n	40525c <_dtoa_r+0x8b4>
  40525a:	2500      	movs	r5, #0
  40525c:	462e      	mov	r6, r5
  40525e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405260:	9c06      	ldr	r4, [sp, #24]
  405262:	ea6f 0b03 	mvn.w	fp, r3
  405266:	e009      	b.n	40527c <_dtoa_r+0x8d4>
  405268:	f8dd b020 	ldr.w	fp, [sp, #32]
  40526c:	4635      	mov	r5, r6
  40526e:	9b06      	ldr	r3, [sp, #24]
  405270:	9a06      	ldr	r2, [sp, #24]
  405272:	1c5c      	adds	r4, r3, #1
  405274:	2331      	movs	r3, #49	; 0x31
  405276:	7013      	strb	r3, [r2, #0]
  405278:	f10b 0b01 	add.w	fp, fp, #1
  40527c:	9605      	str	r6, [sp, #20]
  40527e:	2600      	movs	r6, #0
  405280:	e0f9      	b.n	405476 <_dtoa_r+0xace>
  405282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405284:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405288:	b923      	cbnz	r3, 405294 <_dtoa_r+0x8ec>
  40528a:	9c06      	ldr	r4, [sp, #24]
  40528c:	e0b2      	b.n	4053f4 <_dtoa_r+0xa4c>
  40528e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405290:	2b02      	cmp	r3, #2
  405292:	dccf      	bgt.n	405234 <_dtoa_r+0x88c>
  405294:	2c00      	cmp	r4, #0
  405296:	dd05      	ble.n	4052a4 <_dtoa_r+0x8fc>
  405298:	4631      	mov	r1, r6
  40529a:	4622      	mov	r2, r4
  40529c:	4650      	mov	r0, sl
  40529e:	f001 f891 	bl	4063c4 <__lshift>
  4052a2:	4606      	mov	r6, r0
  4052a4:	b19f      	cbz	r7, 4052ce <_dtoa_r+0x926>
  4052a6:	6871      	ldr	r1, [r6, #4]
  4052a8:	4650      	mov	r0, sl
  4052aa:	f000 fe91 	bl	405fd0 <_Balloc>
  4052ae:	6932      	ldr	r2, [r6, #16]
  4052b0:	3202      	adds	r2, #2
  4052b2:	4604      	mov	r4, r0
  4052b4:	0092      	lsls	r2, r2, #2
  4052b6:	f106 010c 	add.w	r1, r6, #12
  4052ba:	300c      	adds	r0, #12
  4052bc:	f7fd fd64 	bl	402d88 <memcpy>
  4052c0:	2201      	movs	r2, #1
  4052c2:	4621      	mov	r1, r4
  4052c4:	4650      	mov	r0, sl
  4052c6:	f001 f87d 	bl	4063c4 <__lshift>
  4052ca:	9005      	str	r0, [sp, #20]
  4052cc:	e000      	b.n	4052d0 <_dtoa_r+0x928>
  4052ce:	9605      	str	r6, [sp, #20]
  4052d0:	9b02      	ldr	r3, [sp, #8]
  4052d2:	9f06      	ldr	r7, [sp, #24]
  4052d4:	f003 0301 	and.w	r3, r3, #1
  4052d8:	9307      	str	r3, [sp, #28]
  4052da:	4629      	mov	r1, r5
  4052dc:	9804      	ldr	r0, [sp, #16]
  4052de:	f7ff fad3 	bl	404888 <quorem>
  4052e2:	4631      	mov	r1, r6
  4052e4:	4604      	mov	r4, r0
  4052e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
  4052ea:	9804      	ldr	r0, [sp, #16]
  4052ec:	f001 f8bb 	bl	406466 <__mcmp>
  4052f0:	9a05      	ldr	r2, [sp, #20]
  4052f2:	9002      	str	r0, [sp, #8]
  4052f4:	4629      	mov	r1, r5
  4052f6:	4650      	mov	r0, sl
  4052f8:	f001 f8d1 	bl	40649e <__mdiff>
  4052fc:	68c3      	ldr	r3, [r0, #12]
  4052fe:	4602      	mov	r2, r0
  405300:	b93b      	cbnz	r3, 405312 <_dtoa_r+0x96a>
  405302:	4601      	mov	r1, r0
  405304:	900a      	str	r0, [sp, #40]	; 0x28
  405306:	9804      	ldr	r0, [sp, #16]
  405308:	f001 f8ad 	bl	406466 <__mcmp>
  40530c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40530e:	4603      	mov	r3, r0
  405310:	e000      	b.n	405314 <_dtoa_r+0x96c>
  405312:	2301      	movs	r3, #1
  405314:	4611      	mov	r1, r2
  405316:	4650      	mov	r0, sl
  405318:	930a      	str	r3, [sp, #40]	; 0x28
  40531a:	f000 fe8e 	bl	40603a <_Bfree>
  40531e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405320:	b953      	cbnz	r3, 405338 <_dtoa_r+0x990>
  405322:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  405324:	b942      	cbnz	r2, 405338 <_dtoa_r+0x990>
  405326:	9a07      	ldr	r2, [sp, #28]
  405328:	b932      	cbnz	r2, 405338 <_dtoa_r+0x990>
  40532a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40532e:	d02a      	beq.n	405386 <_dtoa_r+0x9de>
  405330:	9b02      	ldr	r3, [sp, #8]
  405332:	2b00      	cmp	r3, #0
  405334:	dc1c      	bgt.n	405370 <_dtoa_r+0x9c8>
  405336:	e01d      	b.n	405374 <_dtoa_r+0x9cc>
  405338:	9a02      	ldr	r2, [sp, #8]
  40533a:	2a00      	cmp	r2, #0
  40533c:	db04      	blt.n	405348 <_dtoa_r+0x9a0>
  40533e:	d11b      	bne.n	405378 <_dtoa_r+0x9d0>
  405340:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  405342:	b9ca      	cbnz	r2, 405378 <_dtoa_r+0x9d0>
  405344:	9a07      	ldr	r2, [sp, #28]
  405346:	b9ba      	cbnz	r2, 405378 <_dtoa_r+0x9d0>
  405348:	2b00      	cmp	r3, #0
  40534a:	dd13      	ble.n	405374 <_dtoa_r+0x9cc>
  40534c:	2201      	movs	r2, #1
  40534e:	9904      	ldr	r1, [sp, #16]
  405350:	4650      	mov	r0, sl
  405352:	f001 f837 	bl	4063c4 <__lshift>
  405356:	4629      	mov	r1, r5
  405358:	9004      	str	r0, [sp, #16]
  40535a:	f001 f884 	bl	406466 <__mcmp>
  40535e:	2800      	cmp	r0, #0
  405360:	dc03      	bgt.n	40536a <_dtoa_r+0x9c2>
  405362:	d107      	bne.n	405374 <_dtoa_r+0x9cc>
  405364:	f018 0f01 	tst.w	r8, #1
  405368:	d004      	beq.n	405374 <_dtoa_r+0x9cc>
  40536a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40536e:	d00a      	beq.n	405386 <_dtoa_r+0x9de>
  405370:	f104 0831 	add.w	r8, r4, #49	; 0x31
  405374:	1c7c      	adds	r4, r7, #1
  405376:	e00c      	b.n	405392 <_dtoa_r+0x9ea>
  405378:	2b00      	cmp	r3, #0
  40537a:	f107 0401 	add.w	r4, r7, #1
  40537e:	dd0b      	ble.n	405398 <_dtoa_r+0x9f0>
  405380:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405384:	d103      	bne.n	40538e <_dtoa_r+0x9e6>
  405386:	2339      	movs	r3, #57	; 0x39
  405388:	703b      	strb	r3, [r7, #0]
  40538a:	3701      	adds	r7, #1
  40538c:	e056      	b.n	40543c <_dtoa_r+0xa94>
  40538e:	f108 0801 	add.w	r8, r8, #1
  405392:	f887 8000 	strb.w	r8, [r7]
  405396:	e06e      	b.n	405476 <_dtoa_r+0xace>
  405398:	9b06      	ldr	r3, [sp, #24]
  40539a:	f804 8c01 	strb.w	r8, [r4, #-1]
  40539e:	1ae3      	subs	r3, r4, r3
  4053a0:	454b      	cmp	r3, r9
  4053a2:	4627      	mov	r7, r4
  4053a4:	d03b      	beq.n	40541e <_dtoa_r+0xa76>
  4053a6:	2300      	movs	r3, #0
  4053a8:	220a      	movs	r2, #10
  4053aa:	9904      	ldr	r1, [sp, #16]
  4053ac:	4650      	mov	r0, sl
  4053ae:	f000 fe5b 	bl	406068 <__multadd>
  4053b2:	9b05      	ldr	r3, [sp, #20]
  4053b4:	9004      	str	r0, [sp, #16]
  4053b6:	429e      	cmp	r6, r3
  4053b8:	f04f 020a 	mov.w	r2, #10
  4053bc:	f04f 0300 	mov.w	r3, #0
  4053c0:	4631      	mov	r1, r6
  4053c2:	4650      	mov	r0, sl
  4053c4:	d104      	bne.n	4053d0 <_dtoa_r+0xa28>
  4053c6:	f000 fe4f 	bl	406068 <__multadd>
  4053ca:	4606      	mov	r6, r0
  4053cc:	9005      	str	r0, [sp, #20]
  4053ce:	e784      	b.n	4052da <_dtoa_r+0x932>
  4053d0:	f000 fe4a 	bl	406068 <__multadd>
  4053d4:	2300      	movs	r3, #0
  4053d6:	4606      	mov	r6, r0
  4053d8:	220a      	movs	r2, #10
  4053da:	9905      	ldr	r1, [sp, #20]
  4053dc:	4650      	mov	r0, sl
  4053de:	f000 fe43 	bl	406068 <__multadd>
  4053e2:	9005      	str	r0, [sp, #20]
  4053e4:	e779      	b.n	4052da <_dtoa_r+0x932>
  4053e6:	2300      	movs	r3, #0
  4053e8:	220a      	movs	r2, #10
  4053ea:	9904      	ldr	r1, [sp, #16]
  4053ec:	4650      	mov	r0, sl
  4053ee:	f000 fe3b 	bl	406068 <__multadd>
  4053f2:	9004      	str	r0, [sp, #16]
  4053f4:	4629      	mov	r1, r5
  4053f6:	9804      	ldr	r0, [sp, #16]
  4053f8:	f7ff fa46 	bl	404888 <quorem>
  4053fc:	f100 0830 	add.w	r8, r0, #48	; 0x30
  405400:	f804 8b01 	strb.w	r8, [r4], #1
  405404:	9b06      	ldr	r3, [sp, #24]
  405406:	1ae3      	subs	r3, r4, r3
  405408:	454b      	cmp	r3, r9
  40540a:	dbec      	blt.n	4053e6 <_dtoa_r+0xa3e>
  40540c:	9b06      	ldr	r3, [sp, #24]
  40540e:	9605      	str	r6, [sp, #20]
  405410:	f1b9 0f01 	cmp.w	r9, #1
  405414:	bfac      	ite	ge
  405416:	444b      	addge	r3, r9
  405418:	3301      	addlt	r3, #1
  40541a:	461f      	mov	r7, r3
  40541c:	2600      	movs	r6, #0
  40541e:	2201      	movs	r2, #1
  405420:	9904      	ldr	r1, [sp, #16]
  405422:	4650      	mov	r0, sl
  405424:	f000 ffce 	bl	4063c4 <__lshift>
  405428:	4629      	mov	r1, r5
  40542a:	9004      	str	r0, [sp, #16]
  40542c:	f001 f81b 	bl	406466 <__mcmp>
  405430:	2800      	cmp	r0, #0
  405432:	dc03      	bgt.n	40543c <_dtoa_r+0xa94>
  405434:	d116      	bne.n	405464 <_dtoa_r+0xabc>
  405436:	f018 0f01 	tst.w	r8, #1
  40543a:	d013      	beq.n	405464 <_dtoa_r+0xabc>
  40543c:	463c      	mov	r4, r7
  40543e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  405442:	2b39      	cmp	r3, #57	; 0x39
  405444:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  405448:	d109      	bne.n	40545e <_dtoa_r+0xab6>
  40544a:	9b06      	ldr	r3, [sp, #24]
  40544c:	4293      	cmp	r3, r2
  40544e:	d104      	bne.n	40545a <_dtoa_r+0xab2>
  405450:	f10b 0b01 	add.w	fp, fp, #1
  405454:	2331      	movs	r3, #49	; 0x31
  405456:	9a06      	ldr	r2, [sp, #24]
  405458:	e002      	b.n	405460 <_dtoa_r+0xab8>
  40545a:	4614      	mov	r4, r2
  40545c:	e7ef      	b.n	40543e <_dtoa_r+0xa96>
  40545e:	3301      	adds	r3, #1
  405460:	7013      	strb	r3, [r2, #0]
  405462:	e008      	b.n	405476 <_dtoa_r+0xace>
  405464:	463c      	mov	r4, r7
  405466:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40546a:	2b30      	cmp	r3, #48	; 0x30
  40546c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  405470:	d101      	bne.n	405476 <_dtoa_r+0xace>
  405472:	4614      	mov	r4, r2
  405474:	e7f7      	b.n	405466 <_dtoa_r+0xabe>
  405476:	4629      	mov	r1, r5
  405478:	4650      	mov	r0, sl
  40547a:	f000 fdde 	bl	40603a <_Bfree>
  40547e:	9b05      	ldr	r3, [sp, #20]
  405480:	b16b      	cbz	r3, 40549e <_dtoa_r+0xaf6>
  405482:	b12e      	cbz	r6, 405490 <_dtoa_r+0xae8>
  405484:	429e      	cmp	r6, r3
  405486:	d003      	beq.n	405490 <_dtoa_r+0xae8>
  405488:	4631      	mov	r1, r6
  40548a:	4650      	mov	r0, sl
  40548c:	f000 fdd5 	bl	40603a <_Bfree>
  405490:	9905      	ldr	r1, [sp, #20]
  405492:	4650      	mov	r0, sl
  405494:	f000 fdd1 	bl	40603a <_Bfree>
  405498:	e001      	b.n	40549e <_dtoa_r+0xaf6>
  40549a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40549e:	9904      	ldr	r1, [sp, #16]
  4054a0:	4650      	mov	r0, sl
  4054a2:	f000 fdca 	bl	40603a <_Bfree>
  4054a6:	2300      	movs	r3, #0
  4054a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4054aa:	7023      	strb	r3, [r4, #0]
  4054ac:	f10b 0301 	add.w	r3, fp, #1
  4054b0:	6013      	str	r3, [r2, #0]
  4054b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4054b4:	b11b      	cbz	r3, 4054be <_dtoa_r+0xb16>
  4054b6:	601c      	str	r4, [r3, #0]
  4054b8:	e001      	b.n	4054be <_dtoa_r+0xb16>
  4054ba:	4808      	ldr	r0, [pc, #32]	; (4054dc <_dtoa_r+0xb34>)
  4054bc:	e00a      	b.n	4054d4 <_dtoa_r+0xb2c>
  4054be:	9806      	ldr	r0, [sp, #24]
  4054c0:	e008      	b.n	4054d4 <_dtoa_r+0xb2c>
  4054c2:	f1b9 0f00 	cmp.w	r9, #0
  4054c6:	f73f aee0 	bgt.w	40528a <_dtoa_r+0x8e2>
  4054ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4054cc:	2b02      	cmp	r3, #2
  4054ce:	f77f aedc 	ble.w	40528a <_dtoa_r+0x8e2>
  4054d2:	e6af      	b.n	405234 <_dtoa_r+0x88c>
  4054d4:	b015      	add	sp, #84	; 0x54
  4054d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054da:	bf00      	nop
  4054dc:	0040820c 	.word	0x0040820c

004054e0 <__sflush_r>:
  4054e0:	898a      	ldrh	r2, [r1, #12]
  4054e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054e6:	4605      	mov	r5, r0
  4054e8:	0710      	lsls	r0, r2, #28
  4054ea:	460c      	mov	r4, r1
  4054ec:	d459      	bmi.n	4055a2 <__sflush_r+0xc2>
  4054ee:	684b      	ldr	r3, [r1, #4]
  4054f0:	2b00      	cmp	r3, #0
  4054f2:	dc02      	bgt.n	4054fa <__sflush_r+0x1a>
  4054f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4054f6:	2b00      	cmp	r3, #0
  4054f8:	dd17      	ble.n	40552a <__sflush_r+0x4a>
  4054fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4054fc:	b1ae      	cbz	r6, 40552a <__sflush_r+0x4a>
  4054fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  405502:	2300      	movs	r3, #0
  405504:	b292      	uxth	r2, r2
  405506:	682f      	ldr	r7, [r5, #0]
  405508:	602b      	str	r3, [r5, #0]
  40550a:	b10a      	cbz	r2, 405510 <__sflush_r+0x30>
  40550c:	6d60      	ldr	r0, [r4, #84]	; 0x54
  40550e:	e015      	b.n	40553c <__sflush_r+0x5c>
  405510:	6a21      	ldr	r1, [r4, #32]
  405512:	2301      	movs	r3, #1
  405514:	4628      	mov	r0, r5
  405516:	47b0      	blx	r6
  405518:	1c41      	adds	r1, r0, #1
  40551a:	d10f      	bne.n	40553c <__sflush_r+0x5c>
  40551c:	682b      	ldr	r3, [r5, #0]
  40551e:	b16b      	cbz	r3, 40553c <__sflush_r+0x5c>
  405520:	2b1d      	cmp	r3, #29
  405522:	d001      	beq.n	405528 <__sflush_r+0x48>
  405524:	2b16      	cmp	r3, #22
  405526:	d103      	bne.n	405530 <__sflush_r+0x50>
  405528:	602f      	str	r7, [r5, #0]
  40552a:	2000      	movs	r0, #0
  40552c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405530:	89a3      	ldrh	r3, [r4, #12]
  405532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405536:	81a3      	strh	r3, [r4, #12]
  405538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40553c:	89a3      	ldrh	r3, [r4, #12]
  40553e:	075a      	lsls	r2, r3, #29
  405540:	d505      	bpl.n	40554e <__sflush_r+0x6e>
  405542:	6863      	ldr	r3, [r4, #4]
  405544:	1ac0      	subs	r0, r0, r3
  405546:	6b63      	ldr	r3, [r4, #52]	; 0x34
  405548:	b10b      	cbz	r3, 40554e <__sflush_r+0x6e>
  40554a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40554c:	1ac0      	subs	r0, r0, r3
  40554e:	2300      	movs	r3, #0
  405550:	4602      	mov	r2, r0
  405552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  405554:	6a21      	ldr	r1, [r4, #32]
  405556:	4628      	mov	r0, r5
  405558:	47b0      	blx	r6
  40555a:	1c43      	adds	r3, r0, #1
  40555c:	89a3      	ldrh	r3, [r4, #12]
  40555e:	d106      	bne.n	40556e <__sflush_r+0x8e>
  405560:	6829      	ldr	r1, [r5, #0]
  405562:	291d      	cmp	r1, #29
  405564:	d83a      	bhi.n	4055dc <__sflush_r+0xfc>
  405566:	4a21      	ldr	r2, [pc, #132]	; (4055ec <__sflush_r+0x10c>)
  405568:	40ca      	lsrs	r2, r1
  40556a:	07d6      	lsls	r6, r2, #31
  40556c:	d536      	bpl.n	4055dc <__sflush_r+0xfc>
  40556e:	2200      	movs	r2, #0
  405570:	6062      	str	r2, [r4, #4]
  405572:	04d9      	lsls	r1, r3, #19
  405574:	6922      	ldr	r2, [r4, #16]
  405576:	6022      	str	r2, [r4, #0]
  405578:	d504      	bpl.n	405584 <__sflush_r+0xa4>
  40557a:	1c42      	adds	r2, r0, #1
  40557c:	d101      	bne.n	405582 <__sflush_r+0xa2>
  40557e:	682b      	ldr	r3, [r5, #0]
  405580:	b903      	cbnz	r3, 405584 <__sflush_r+0xa4>
  405582:	6560      	str	r0, [r4, #84]	; 0x54
  405584:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405586:	602f      	str	r7, [r5, #0]
  405588:	2900      	cmp	r1, #0
  40558a:	d0ce      	beq.n	40552a <__sflush_r+0x4a>
  40558c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405590:	4299      	cmp	r1, r3
  405592:	d002      	beq.n	40559a <__sflush_r+0xba>
  405594:	4628      	mov	r0, r5
  405596:	f001 f913 	bl	4067c0 <_free_r>
  40559a:	2000      	movs	r0, #0
  40559c:	6360      	str	r0, [r4, #52]	; 0x34
  40559e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055a2:	690f      	ldr	r7, [r1, #16]
  4055a4:	2f00      	cmp	r7, #0
  4055a6:	d0c0      	beq.n	40552a <__sflush_r+0x4a>
  4055a8:	0793      	lsls	r3, r2, #30
  4055aa:	680e      	ldr	r6, [r1, #0]
  4055ac:	bf08      	it	eq
  4055ae:	694b      	ldreq	r3, [r1, #20]
  4055b0:	600f      	str	r7, [r1, #0]
  4055b2:	bf18      	it	ne
  4055b4:	2300      	movne	r3, #0
  4055b6:	ebc7 0806 	rsb	r8, r7, r6
  4055ba:	608b      	str	r3, [r1, #8]
  4055bc:	e002      	b.n	4055c4 <__sflush_r+0xe4>
  4055be:	4407      	add	r7, r0
  4055c0:	ebc0 0808 	rsb	r8, r0, r8
  4055c4:	f1b8 0f00 	cmp.w	r8, #0
  4055c8:	ddaf      	ble.n	40552a <__sflush_r+0x4a>
  4055ca:	4643      	mov	r3, r8
  4055cc:	463a      	mov	r2, r7
  4055ce:	6a21      	ldr	r1, [r4, #32]
  4055d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4055d2:	4628      	mov	r0, r5
  4055d4:	47b0      	blx	r6
  4055d6:	2800      	cmp	r0, #0
  4055d8:	dcf1      	bgt.n	4055be <__sflush_r+0xde>
  4055da:	89a3      	ldrh	r3, [r4, #12]
  4055dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4055e0:	81a3      	strh	r3, [r4, #12]
  4055e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4055e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055ea:	bf00      	nop
  4055ec:	20400001 	.word	0x20400001

004055f0 <_fflush_r>:
  4055f0:	b538      	push	{r3, r4, r5, lr}
  4055f2:	690b      	ldr	r3, [r1, #16]
  4055f4:	4605      	mov	r5, r0
  4055f6:	460c      	mov	r4, r1
  4055f8:	b1db      	cbz	r3, 405632 <_fflush_r+0x42>
  4055fa:	b118      	cbz	r0, 405604 <_fflush_r+0x14>
  4055fc:	6983      	ldr	r3, [r0, #24]
  4055fe:	b90b      	cbnz	r3, 405604 <_fflush_r+0x14>
  405600:	f000 f860 	bl	4056c4 <__sinit>
  405604:	4b0c      	ldr	r3, [pc, #48]	; (405638 <_fflush_r+0x48>)
  405606:	429c      	cmp	r4, r3
  405608:	d101      	bne.n	40560e <_fflush_r+0x1e>
  40560a:	686c      	ldr	r4, [r5, #4]
  40560c:	e008      	b.n	405620 <_fflush_r+0x30>
  40560e:	4b0b      	ldr	r3, [pc, #44]	; (40563c <_fflush_r+0x4c>)
  405610:	429c      	cmp	r4, r3
  405612:	d101      	bne.n	405618 <_fflush_r+0x28>
  405614:	68ac      	ldr	r4, [r5, #8]
  405616:	e003      	b.n	405620 <_fflush_r+0x30>
  405618:	4b09      	ldr	r3, [pc, #36]	; (405640 <_fflush_r+0x50>)
  40561a:	429c      	cmp	r4, r3
  40561c:	bf08      	it	eq
  40561e:	68ec      	ldreq	r4, [r5, #12]
  405620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405624:	b12b      	cbz	r3, 405632 <_fflush_r+0x42>
  405626:	4621      	mov	r1, r4
  405628:	4628      	mov	r0, r5
  40562a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40562e:	f7ff bf57 	b.w	4054e0 <__sflush_r>
  405632:	2000      	movs	r0, #0
  405634:	bd38      	pop	{r3, r4, r5, pc}
  405636:	bf00      	nop
  405638:	00408290 	.word	0x00408290
  40563c:	004082b0 	.word	0x004082b0
  405640:	004082d0 	.word	0x004082d0

00405644 <_cleanup_r>:
  405644:	4901      	ldr	r1, [pc, #4]	; (40564c <_cleanup_r+0x8>)
  405646:	f000 b8a9 	b.w	40579c <_fwalk_reent>
  40564a:	bf00      	nop
  40564c:	004055f1 	.word	0x004055f1

00405650 <std.isra.0>:
  405650:	2300      	movs	r3, #0
  405652:	b510      	push	{r4, lr}
  405654:	4604      	mov	r4, r0
  405656:	6003      	str	r3, [r0, #0]
  405658:	6043      	str	r3, [r0, #4]
  40565a:	6083      	str	r3, [r0, #8]
  40565c:	8181      	strh	r1, [r0, #12]
  40565e:	6643      	str	r3, [r0, #100]	; 0x64
  405660:	81c2      	strh	r2, [r0, #14]
  405662:	6103      	str	r3, [r0, #16]
  405664:	6143      	str	r3, [r0, #20]
  405666:	6183      	str	r3, [r0, #24]
  405668:	4619      	mov	r1, r3
  40566a:	2208      	movs	r2, #8
  40566c:	305c      	adds	r0, #92	; 0x5c
  40566e:	f7fd fb96 	bl	402d9e <memset>
  405672:	4b05      	ldr	r3, [pc, #20]	; (405688 <std.isra.0+0x38>)
  405674:	6263      	str	r3, [r4, #36]	; 0x24
  405676:	4b05      	ldr	r3, [pc, #20]	; (40568c <std.isra.0+0x3c>)
  405678:	62a3      	str	r3, [r4, #40]	; 0x28
  40567a:	4b05      	ldr	r3, [pc, #20]	; (405690 <std.isra.0+0x40>)
  40567c:	62e3      	str	r3, [r4, #44]	; 0x2c
  40567e:	4b05      	ldr	r3, [pc, #20]	; (405694 <std.isra.0+0x44>)
  405680:	6224      	str	r4, [r4, #32]
  405682:	6323      	str	r3, [r4, #48]	; 0x30
  405684:	bd10      	pop	{r4, pc}
  405686:	bf00      	nop
  405688:	00406bc1 	.word	0x00406bc1
  40568c:	00406be3 	.word	0x00406be3
  405690:	00406c1b 	.word	0x00406c1b
  405694:	00406c3f 	.word	0x00406c3f

00405698 <__sfmoreglue>:
  405698:	b570      	push	{r4, r5, r6, lr}
  40569a:	2368      	movs	r3, #104	; 0x68
  40569c:	1e4d      	subs	r5, r1, #1
  40569e:	435d      	muls	r5, r3
  4056a0:	460e      	mov	r6, r1
  4056a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4056a6:	f001 f8d9 	bl	40685c <_malloc_r>
  4056aa:	4604      	mov	r4, r0
  4056ac:	b140      	cbz	r0, 4056c0 <__sfmoreglue+0x28>
  4056ae:	2100      	movs	r1, #0
  4056b0:	e880 0042 	stmia.w	r0, {r1, r6}
  4056b4:	300c      	adds	r0, #12
  4056b6:	60a0      	str	r0, [r4, #8]
  4056b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4056bc:	f7fd fb6f 	bl	402d9e <memset>
  4056c0:	4620      	mov	r0, r4
  4056c2:	bd70      	pop	{r4, r5, r6, pc}

004056c4 <__sinit>:
  4056c4:	6983      	ldr	r3, [r0, #24]
  4056c6:	b510      	push	{r4, lr}
  4056c8:	4604      	mov	r4, r0
  4056ca:	bb33      	cbnz	r3, 40571a <__sinit+0x56>
  4056cc:	6483      	str	r3, [r0, #72]	; 0x48
  4056ce:	64c3      	str	r3, [r0, #76]	; 0x4c
  4056d0:	6503      	str	r3, [r0, #80]	; 0x50
  4056d2:	4b12      	ldr	r3, [pc, #72]	; (40571c <__sinit+0x58>)
  4056d4:	4a12      	ldr	r2, [pc, #72]	; (405720 <__sinit+0x5c>)
  4056d6:	681b      	ldr	r3, [r3, #0]
  4056d8:	6282      	str	r2, [r0, #40]	; 0x28
  4056da:	4298      	cmp	r0, r3
  4056dc:	bf04      	itt	eq
  4056de:	2301      	moveq	r3, #1
  4056e0:	6183      	streq	r3, [r0, #24]
  4056e2:	f000 f81f 	bl	405724 <__sfp>
  4056e6:	6060      	str	r0, [r4, #4]
  4056e8:	4620      	mov	r0, r4
  4056ea:	f000 f81b 	bl	405724 <__sfp>
  4056ee:	60a0      	str	r0, [r4, #8]
  4056f0:	4620      	mov	r0, r4
  4056f2:	f000 f817 	bl	405724 <__sfp>
  4056f6:	2200      	movs	r2, #0
  4056f8:	60e0      	str	r0, [r4, #12]
  4056fa:	2104      	movs	r1, #4
  4056fc:	6860      	ldr	r0, [r4, #4]
  4056fe:	f7ff ffa7 	bl	405650 <std.isra.0>
  405702:	2201      	movs	r2, #1
  405704:	2109      	movs	r1, #9
  405706:	68a0      	ldr	r0, [r4, #8]
  405708:	f7ff ffa2 	bl	405650 <std.isra.0>
  40570c:	2202      	movs	r2, #2
  40570e:	2112      	movs	r1, #18
  405710:	68e0      	ldr	r0, [r4, #12]
  405712:	f7ff ff9d 	bl	405650 <std.isra.0>
  405716:	2301      	movs	r3, #1
  405718:	61a3      	str	r3, [r4, #24]
  40571a:	bd10      	pop	{r4, pc}
  40571c:	004081f8 	.word	0x004081f8
  405720:	00405645 	.word	0x00405645

00405724 <__sfp>:
  405724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405726:	4b1c      	ldr	r3, [pc, #112]	; (405798 <__sfp+0x74>)
  405728:	681e      	ldr	r6, [r3, #0]
  40572a:	69b3      	ldr	r3, [r6, #24]
  40572c:	4607      	mov	r7, r0
  40572e:	b913      	cbnz	r3, 405736 <__sfp+0x12>
  405730:	4630      	mov	r0, r6
  405732:	f7ff ffc7 	bl	4056c4 <__sinit>
  405736:	3648      	adds	r6, #72	; 0x48
  405738:	68b4      	ldr	r4, [r6, #8]
  40573a:	6873      	ldr	r3, [r6, #4]
  40573c:	3b01      	subs	r3, #1
  40573e:	d404      	bmi.n	40574a <__sfp+0x26>
  405740:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  405744:	b17d      	cbz	r5, 405766 <__sfp+0x42>
  405746:	3468      	adds	r4, #104	; 0x68
  405748:	e7f8      	b.n	40573c <__sfp+0x18>
  40574a:	6833      	ldr	r3, [r6, #0]
  40574c:	b10b      	cbz	r3, 405752 <__sfp+0x2e>
  40574e:	6836      	ldr	r6, [r6, #0]
  405750:	e7f2      	b.n	405738 <__sfp+0x14>
  405752:	2104      	movs	r1, #4
  405754:	4638      	mov	r0, r7
  405756:	f7ff ff9f 	bl	405698 <__sfmoreglue>
  40575a:	6030      	str	r0, [r6, #0]
  40575c:	2800      	cmp	r0, #0
  40575e:	d1f6      	bne.n	40574e <__sfp+0x2a>
  405760:	230c      	movs	r3, #12
  405762:	603b      	str	r3, [r7, #0]
  405764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405766:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40576a:	81e3      	strh	r3, [r4, #14]
  40576c:	2301      	movs	r3, #1
  40576e:	81a3      	strh	r3, [r4, #12]
  405770:	6665      	str	r5, [r4, #100]	; 0x64
  405772:	6025      	str	r5, [r4, #0]
  405774:	60a5      	str	r5, [r4, #8]
  405776:	6065      	str	r5, [r4, #4]
  405778:	6125      	str	r5, [r4, #16]
  40577a:	6165      	str	r5, [r4, #20]
  40577c:	61a5      	str	r5, [r4, #24]
  40577e:	2208      	movs	r2, #8
  405780:	4629      	mov	r1, r5
  405782:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  405786:	f7fd fb0a 	bl	402d9e <memset>
  40578a:	6365      	str	r5, [r4, #52]	; 0x34
  40578c:	63a5      	str	r5, [r4, #56]	; 0x38
  40578e:	64a5      	str	r5, [r4, #72]	; 0x48
  405790:	64e5      	str	r5, [r4, #76]	; 0x4c
  405792:	4620      	mov	r0, r4
  405794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405796:	bf00      	nop
  405798:	004081f8 	.word	0x004081f8

0040579c <_fwalk_reent>:
  40579c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4057a0:	4680      	mov	r8, r0
  4057a2:	4689      	mov	r9, r1
  4057a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4057a8:	2600      	movs	r6, #0
  4057aa:	b194      	cbz	r4, 4057d2 <_fwalk_reent+0x36>
  4057ac:	68a5      	ldr	r5, [r4, #8]
  4057ae:	6867      	ldr	r7, [r4, #4]
  4057b0:	3f01      	subs	r7, #1
  4057b2:	d40c      	bmi.n	4057ce <_fwalk_reent+0x32>
  4057b4:	89ab      	ldrh	r3, [r5, #12]
  4057b6:	2b01      	cmp	r3, #1
  4057b8:	d907      	bls.n	4057ca <_fwalk_reent+0x2e>
  4057ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4057be:	3301      	adds	r3, #1
  4057c0:	d003      	beq.n	4057ca <_fwalk_reent+0x2e>
  4057c2:	4629      	mov	r1, r5
  4057c4:	4640      	mov	r0, r8
  4057c6:	47c8      	blx	r9
  4057c8:	4306      	orrs	r6, r0
  4057ca:	3568      	adds	r5, #104	; 0x68
  4057cc:	e7f0      	b.n	4057b0 <_fwalk_reent+0x14>
  4057ce:	6824      	ldr	r4, [r4, #0]
  4057d0:	e7eb      	b.n	4057aa <_fwalk_reent+0xe>
  4057d2:	4630      	mov	r0, r6
  4057d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004057d8 <rshift>:
  4057d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4057da:	6906      	ldr	r6, [r0, #16]
  4057dc:	114b      	asrs	r3, r1, #5
  4057de:	42b3      	cmp	r3, r6
  4057e0:	f100 0514 	add.w	r5, r0, #20
  4057e4:	da27      	bge.n	405836 <rshift+0x5e>
  4057e6:	f011 011f 	ands.w	r1, r1, #31
  4057ea:	eb05 0686 	add.w	r6, r5, r6, lsl #2
  4057ee:	eb05 0283 	add.w	r2, r5, r3, lsl #2
  4057f2:	d101      	bne.n	4057f8 <rshift+0x20>
  4057f4:	4629      	mov	r1, r5
  4057f6:	e016      	b.n	405826 <rshift+0x4e>
  4057f8:	1d14      	adds	r4, r2, #4
  4057fa:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  4057fe:	f1c1 0e20 	rsb	lr, r1, #32
  405802:	40ca      	lsrs	r2, r1
  405804:	462b      	mov	r3, r5
  405806:	42b4      	cmp	r4, r6
  405808:	d209      	bcs.n	40581e <rshift+0x46>
  40580a:	6827      	ldr	r7, [r4, #0]
  40580c:	fa07 f70e 	lsl.w	r7, r7, lr
  405810:	433a      	orrs	r2, r7
  405812:	f843 2b04 	str.w	r2, [r3], #4
  405816:	f854 2b04 	ldr.w	r2, [r4], #4
  40581a:	40ca      	lsrs	r2, r1
  40581c:	e7f3      	b.n	405806 <rshift+0x2e>
  40581e:	601a      	str	r2, [r3, #0]
  405820:	b152      	cbz	r2, 405838 <rshift+0x60>
  405822:	3304      	adds	r3, #4
  405824:	e008      	b.n	405838 <rshift+0x60>
  405826:	42b2      	cmp	r2, r6
  405828:	460b      	mov	r3, r1
  40582a:	d205      	bcs.n	405838 <rshift+0x60>
  40582c:	f852 3b04 	ldr.w	r3, [r2], #4
  405830:	f841 3b04 	str.w	r3, [r1], #4
  405834:	e7f7      	b.n	405826 <rshift+0x4e>
  405836:	462b      	mov	r3, r5
  405838:	1b5b      	subs	r3, r3, r5
  40583a:	109b      	asrs	r3, r3, #2
  40583c:	6103      	str	r3, [r0, #16]
  40583e:	b903      	cbnz	r3, 405842 <rshift+0x6a>
  405840:	6143      	str	r3, [r0, #20]
  405842:	bdf0      	pop	{r4, r5, r6, r7, pc}

00405844 <__hexdig_fun>:
  405844:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  405848:	2b09      	cmp	r3, #9
  40584a:	d801      	bhi.n	405850 <__hexdig_fun+0xc>
  40584c:	3820      	subs	r0, #32
  40584e:	e00a      	b.n	405866 <__hexdig_fun+0x22>
  405850:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  405854:	2b05      	cmp	r3, #5
  405856:	d801      	bhi.n	40585c <__hexdig_fun+0x18>
  405858:	3847      	subs	r0, #71	; 0x47
  40585a:	e004      	b.n	405866 <__hexdig_fun+0x22>
  40585c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  405860:	2b05      	cmp	r3, #5
  405862:	d802      	bhi.n	40586a <__hexdig_fun+0x26>
  405864:	3827      	subs	r0, #39	; 0x27
  405866:	b2c0      	uxtb	r0, r0
  405868:	4770      	bx	lr
  40586a:	2000      	movs	r0, #0
  40586c:	4770      	bx	lr

0040586e <__gethex>:
  40586e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405872:	b08b      	sub	sp, #44	; 0x2c
  405874:	468a      	mov	sl, r1
  405876:	9002      	str	r0, [sp, #8]
  405878:	9816      	ldr	r0, [sp, #88]	; 0x58
  40587a:	9306      	str	r3, [sp, #24]
  40587c:	4690      	mov	r8, r2
  40587e:	f000 facc 	bl	405e1a <__localeconv_l>
  405882:	6803      	ldr	r3, [r0, #0]
  405884:	9303      	str	r3, [sp, #12]
  405886:	4618      	mov	r0, r3
  405888:	f7fe f83e 	bl	403908 <strlen>
  40588c:	9b03      	ldr	r3, [sp, #12]
  40588e:	9001      	str	r0, [sp, #4]
  405890:	4403      	add	r3, r0
  405892:	f04f 0b00 	mov.w	fp, #0
  405896:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40589a:	9307      	str	r3, [sp, #28]
  40589c:	f8da 3000 	ldr.w	r3, [sl]
  4058a0:	3302      	adds	r3, #2
  4058a2:	461f      	mov	r7, r3
  4058a4:	f813 0b01 	ldrb.w	r0, [r3], #1
  4058a8:	2830      	cmp	r0, #48	; 0x30
  4058aa:	d102      	bne.n	4058b2 <__gethex+0x44>
  4058ac:	f10b 0b01 	add.w	fp, fp, #1
  4058b0:	e7f7      	b.n	4058a2 <__gethex+0x34>
  4058b2:	f7ff ffc7 	bl	405844 <__hexdig_fun>
  4058b6:	4604      	mov	r4, r0
  4058b8:	b9e0      	cbnz	r0, 4058f4 <__gethex+0x86>
  4058ba:	9a01      	ldr	r2, [sp, #4]
  4058bc:	9903      	ldr	r1, [sp, #12]
  4058be:	4638      	mov	r0, r7
  4058c0:	f001 f9c1 	bl	406c46 <strncmp>
  4058c4:	2800      	cmp	r0, #0
  4058c6:	d134      	bne.n	405932 <__gethex+0xc4>
  4058c8:	9b01      	ldr	r3, [sp, #4]
  4058ca:	5cf8      	ldrb	r0, [r7, r3]
  4058cc:	18fe      	adds	r6, r7, r3
  4058ce:	f7ff ffb9 	bl	405844 <__hexdig_fun>
  4058d2:	b380      	cbz	r0, 405936 <__gethex+0xc8>
  4058d4:	4633      	mov	r3, r6
  4058d6:	7818      	ldrb	r0, [r3, #0]
  4058d8:	2830      	cmp	r0, #48	; 0x30
  4058da:	461f      	mov	r7, r3
  4058dc:	f103 0301 	add.w	r3, r3, #1
  4058e0:	d0f9      	beq.n	4058d6 <__gethex+0x68>
  4058e2:	f7ff ffaf 	bl	405844 <__hexdig_fun>
  4058e6:	fab0 f580 	clz	r5, r0
  4058ea:	096d      	lsrs	r5, r5, #5
  4058ec:	4634      	mov	r4, r6
  4058ee:	f04f 0b01 	mov.w	fp, #1
  4058f2:	e001      	b.n	4058f8 <__gethex+0x8a>
  4058f4:	2500      	movs	r5, #0
  4058f6:	462c      	mov	r4, r5
  4058f8:	463a      	mov	r2, r7
  4058fa:	4616      	mov	r6, r2
  4058fc:	3201      	adds	r2, #1
  4058fe:	7830      	ldrb	r0, [r6, #0]
  405900:	f7ff ffa0 	bl	405844 <__hexdig_fun>
  405904:	2800      	cmp	r0, #0
  405906:	d1f8      	bne.n	4058fa <__gethex+0x8c>
  405908:	9a01      	ldr	r2, [sp, #4]
  40590a:	9903      	ldr	r1, [sp, #12]
  40590c:	4630      	mov	r0, r6
  40590e:	f001 f99a 	bl	406c46 <strncmp>
  405912:	b950      	cbnz	r0, 40592a <__gethex+0xbc>
  405914:	b954      	cbnz	r4, 40592c <__gethex+0xbe>
  405916:	9b01      	ldr	r3, [sp, #4]
  405918:	18f4      	adds	r4, r6, r3
  40591a:	4622      	mov	r2, r4
  40591c:	4616      	mov	r6, r2
  40591e:	3201      	adds	r2, #1
  405920:	7830      	ldrb	r0, [r6, #0]
  405922:	f7ff ff8f 	bl	405844 <__hexdig_fun>
  405926:	2800      	cmp	r0, #0
  405928:	d1f8      	bne.n	40591c <__gethex+0xae>
  40592a:	b134      	cbz	r4, 40593a <__gethex+0xcc>
  40592c:	1ba4      	subs	r4, r4, r6
  40592e:	00a4      	lsls	r4, r4, #2
  405930:	e003      	b.n	40593a <__gethex+0xcc>
  405932:	463e      	mov	r6, r7
  405934:	e000      	b.n	405938 <__gethex+0xca>
  405936:	4604      	mov	r4, r0
  405938:	2501      	movs	r5, #1
  40593a:	7833      	ldrb	r3, [r6, #0]
  40593c:	2b50      	cmp	r3, #80	; 0x50
  40593e:	d001      	beq.n	405944 <__gethex+0xd6>
  405940:	2b70      	cmp	r3, #112	; 0x70
  405942:	d12a      	bne.n	40599a <__gethex+0x12c>
  405944:	7873      	ldrb	r3, [r6, #1]
  405946:	2b2b      	cmp	r3, #43	; 0x2b
  405948:	d008      	beq.n	40595c <__gethex+0xee>
  40594a:	2b2d      	cmp	r3, #45	; 0x2d
  40594c:	d003      	beq.n	405956 <__gethex+0xe8>
  40594e:	1c71      	adds	r1, r6, #1
  405950:	f04f 0900 	mov.w	r9, #0
  405954:	e005      	b.n	405962 <__gethex+0xf4>
  405956:	f04f 0901 	mov.w	r9, #1
  40595a:	e001      	b.n	405960 <__gethex+0xf2>
  40595c:	f04f 0900 	mov.w	r9, #0
  405960:	1cb1      	adds	r1, r6, #2
  405962:	7808      	ldrb	r0, [r1, #0]
  405964:	f7ff ff6e 	bl	405844 <__hexdig_fun>
  405968:	1e43      	subs	r3, r0, #1
  40596a:	b2db      	uxtb	r3, r3
  40596c:	2b18      	cmp	r3, #24
  40596e:	d814      	bhi.n	40599a <__gethex+0x12c>
  405970:	f1a0 0210 	sub.w	r2, r0, #16
  405974:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  405978:	f7ff ff64 	bl	405844 <__hexdig_fun>
  40597c:	1e43      	subs	r3, r0, #1
  40597e:	b2db      	uxtb	r3, r3
  405980:	2b18      	cmp	r3, #24
  405982:	d804      	bhi.n	40598e <__gethex+0x120>
  405984:	230a      	movs	r3, #10
  405986:	fb03 0202 	mla	r2, r3, r2, r0
  40598a:	3a10      	subs	r2, #16
  40598c:	e7f2      	b.n	405974 <__gethex+0x106>
  40598e:	f1b9 0f00 	cmp.w	r9, #0
  405992:	d000      	beq.n	405996 <__gethex+0x128>
  405994:	4252      	negs	r2, r2
  405996:	4414      	add	r4, r2
  405998:	e000      	b.n	40599c <__gethex+0x12e>
  40599a:	4631      	mov	r1, r6
  40599c:	f8ca 1000 	str.w	r1, [sl]
  4059a0:	b12d      	cbz	r5, 4059ae <__gethex+0x140>
  4059a2:	f1bb 0f00 	cmp.w	fp, #0
  4059a6:	bf14      	ite	ne
  4059a8:	2000      	movne	r0, #0
  4059aa:	2006      	moveq	r0, #6
  4059ac:	e17c      	b.n	405ca8 <__gethex+0x43a>
  4059ae:	1bf3      	subs	r3, r6, r7
  4059b0:	3b01      	subs	r3, #1
  4059b2:	4629      	mov	r1, r5
  4059b4:	2b07      	cmp	r3, #7
  4059b6:	dd02      	ble.n	4059be <__gethex+0x150>
  4059b8:	3101      	adds	r1, #1
  4059ba:	105b      	asrs	r3, r3, #1
  4059bc:	e7fa      	b.n	4059b4 <__gethex+0x146>
  4059be:	9802      	ldr	r0, [sp, #8]
  4059c0:	f000 fb06 	bl	405fd0 <_Balloc>
  4059c4:	9b01      	ldr	r3, [sp, #4]
  4059c6:	f100 0a14 	add.w	sl, r0, #20
  4059ca:	f04f 0900 	mov.w	r9, #0
  4059ce:	f1c3 0301 	rsb	r3, r3, #1
  4059d2:	4605      	mov	r5, r0
  4059d4:	f8cd a010 	str.w	sl, [sp, #16]
  4059d8:	46cb      	mov	fp, r9
  4059da:	9308      	str	r3, [sp, #32]
  4059dc:	42b7      	cmp	r7, r6
  4059de:	d22f      	bcs.n	405a40 <__gethex+0x1d2>
  4059e0:	1e73      	subs	r3, r6, #1
  4059e2:	9305      	str	r3, [sp, #20]
  4059e4:	9a07      	ldr	r2, [sp, #28]
  4059e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  4059ea:	4293      	cmp	r3, r2
  4059ec:	d00b      	beq.n	405a06 <__gethex+0x198>
  4059ee:	f1bb 0f20 	cmp.w	fp, #32
  4059f2:	d116      	bne.n	405a22 <__gethex+0x1b4>
  4059f4:	9b04      	ldr	r3, [sp, #16]
  4059f6:	f8c3 9000 	str.w	r9, [r3]
  4059fa:	3304      	adds	r3, #4
  4059fc:	f04f 0900 	mov.w	r9, #0
  405a00:	9304      	str	r3, [sp, #16]
  405a02:	46cb      	mov	fp, r9
  405a04:	e00d      	b.n	405a22 <__gethex+0x1b4>
  405a06:	9b05      	ldr	r3, [sp, #20]
  405a08:	9a08      	ldr	r2, [sp, #32]
  405a0a:	4413      	add	r3, r2
  405a0c:	429f      	cmp	r7, r3
  405a0e:	d8ee      	bhi.n	4059ee <__gethex+0x180>
  405a10:	4618      	mov	r0, r3
  405a12:	9a01      	ldr	r2, [sp, #4]
  405a14:	9903      	ldr	r1, [sp, #12]
  405a16:	9309      	str	r3, [sp, #36]	; 0x24
  405a18:	f001 f915 	bl	406c46 <strncmp>
  405a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405a1e:	b168      	cbz	r0, 405a3c <__gethex+0x1ce>
  405a20:	e7e5      	b.n	4059ee <__gethex+0x180>
  405a22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
  405a26:	f7ff ff0d 	bl	405844 <__hexdig_fun>
  405a2a:	f000 000f 	and.w	r0, r0, #15
  405a2e:	fa00 f00b 	lsl.w	r0, r0, fp
  405a32:	9b05      	ldr	r3, [sp, #20]
  405a34:	ea49 0900 	orr.w	r9, r9, r0
  405a38:	f10b 0b04 	add.w	fp, fp, #4
  405a3c:	461e      	mov	r6, r3
  405a3e:	e7cd      	b.n	4059dc <__gethex+0x16e>
  405a40:	9804      	ldr	r0, [sp, #16]
  405a42:	f840 9b04 	str.w	r9, [r0], #4
  405a46:	ebca 0000 	rsb	r0, sl, r0
  405a4a:	1080      	asrs	r0, r0, #2
  405a4c:	6128      	str	r0, [r5, #16]
  405a4e:	0147      	lsls	r7, r0, #5
  405a50:	4648      	mov	r0, r9
  405a52:	f000 fb82 	bl	40615a <__hi0bits>
  405a56:	f8d8 6000 	ldr.w	r6, [r8]
  405a5a:	1a38      	subs	r0, r7, r0
  405a5c:	42b0      	cmp	r0, r6
  405a5e:	dd26      	ble.n	405aae <__gethex+0x240>
  405a60:	1b87      	subs	r7, r0, r6
  405a62:	4639      	mov	r1, r7
  405a64:	4628      	mov	r0, r5
  405a66:	f000 fe7b 	bl	406760 <__any_on>
  405a6a:	b1c8      	cbz	r0, 405aa0 <__gethex+0x232>
  405a6c:	1e7b      	subs	r3, r7, #1
  405a6e:	1159      	asrs	r1, r3, #5
  405a70:	f003 021f 	and.w	r2, r3, #31
  405a74:	f04f 0901 	mov.w	r9, #1
  405a78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
  405a7c:	fa09 f202 	lsl.w	r2, r9, r2
  405a80:	420a      	tst	r2, r1
  405a82:	d00e      	beq.n	405aa2 <__gethex+0x234>
  405a84:	454b      	cmp	r3, r9
  405a86:	dc02      	bgt.n	405a8e <__gethex+0x220>
  405a88:	f04f 0902 	mov.w	r9, #2
  405a8c:	e009      	b.n	405aa2 <__gethex+0x234>
  405a8e:	1eb9      	subs	r1, r7, #2
  405a90:	4628      	mov	r0, r5
  405a92:	f000 fe65 	bl	406760 <__any_on>
  405a96:	2800      	cmp	r0, #0
  405a98:	d0f6      	beq.n	405a88 <__gethex+0x21a>
  405a9a:	f04f 0903 	mov.w	r9, #3
  405a9e:	e000      	b.n	405aa2 <__gethex+0x234>
  405aa0:	4681      	mov	r9, r0
  405aa2:	4639      	mov	r1, r7
  405aa4:	4628      	mov	r0, r5
  405aa6:	f7ff fe97 	bl	4057d8 <rshift>
  405aaa:	443c      	add	r4, r7
  405aac:	e00c      	b.n	405ac8 <__gethex+0x25a>
  405aae:	da09      	bge.n	405ac4 <__gethex+0x256>
  405ab0:	1a37      	subs	r7, r6, r0
  405ab2:	4629      	mov	r1, r5
  405ab4:	463a      	mov	r2, r7
  405ab6:	9802      	ldr	r0, [sp, #8]
  405ab8:	f000 fc84 	bl	4063c4 <__lshift>
  405abc:	1be4      	subs	r4, r4, r7
  405abe:	4605      	mov	r5, r0
  405ac0:	f100 0a14 	add.w	sl, r0, #20
  405ac4:	f04f 0900 	mov.w	r9, #0
  405ac8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405acc:	429c      	cmp	r4, r3
  405ace:	dd08      	ble.n	405ae2 <__gethex+0x274>
  405ad0:	9802      	ldr	r0, [sp, #8]
  405ad2:	4629      	mov	r1, r5
  405ad4:	f000 fab1 	bl	40603a <_Bfree>
  405ad8:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405ada:	2300      	movs	r3, #0
  405adc:	6013      	str	r3, [r2, #0]
  405ade:	20a3      	movs	r0, #163	; 0xa3
  405ae0:	e0e2      	b.n	405ca8 <__gethex+0x43a>
  405ae2:	f8d8 0004 	ldr.w	r0, [r8, #4]
  405ae6:	4284      	cmp	r4, r0
  405ae8:	da53      	bge.n	405b92 <__gethex+0x324>
  405aea:	1b04      	subs	r4, r0, r4
  405aec:	42a6      	cmp	r6, r4
  405aee:	dc2e      	bgt.n	405b4e <__gethex+0x2e0>
  405af0:	f8d8 300c 	ldr.w	r3, [r8, #12]
  405af4:	2b02      	cmp	r3, #2
  405af6:	d01a      	beq.n	405b2e <__gethex+0x2c0>
  405af8:	2b03      	cmp	r3, #3
  405afa:	d01c      	beq.n	405b36 <__gethex+0x2c8>
  405afc:	2b01      	cmp	r3, #1
  405afe:	d11d      	bne.n	405b3c <__gethex+0x2ce>
  405b00:	42a6      	cmp	r6, r4
  405b02:	d11b      	bne.n	405b3c <__gethex+0x2ce>
  405b04:	2e01      	cmp	r6, #1
  405b06:	dc0b      	bgt.n	405b20 <__gethex+0x2b2>
  405b08:	9a06      	ldr	r2, [sp, #24]
  405b0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
  405b0e:	6013      	str	r3, [r2, #0]
  405b10:	2301      	movs	r3, #1
  405b12:	612b      	str	r3, [r5, #16]
  405b14:	f8ca 3000 	str.w	r3, [sl]
  405b18:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405b1a:	2062      	movs	r0, #98	; 0x62
  405b1c:	601d      	str	r5, [r3, #0]
  405b1e:	e0c3      	b.n	405ca8 <__gethex+0x43a>
  405b20:	1e71      	subs	r1, r6, #1
  405b22:	4628      	mov	r0, r5
  405b24:	f000 fe1c 	bl	406760 <__any_on>
  405b28:	2800      	cmp	r0, #0
  405b2a:	d1ed      	bne.n	405b08 <__gethex+0x29a>
  405b2c:	e006      	b.n	405b3c <__gethex+0x2ce>
  405b2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b30:	2b00      	cmp	r3, #0
  405b32:	d0e9      	beq.n	405b08 <__gethex+0x29a>
  405b34:	e002      	b.n	405b3c <__gethex+0x2ce>
  405b36:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b38:	2b00      	cmp	r3, #0
  405b3a:	d1e5      	bne.n	405b08 <__gethex+0x29a>
  405b3c:	9802      	ldr	r0, [sp, #8]
  405b3e:	4629      	mov	r1, r5
  405b40:	f000 fa7b 	bl	40603a <_Bfree>
  405b44:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405b46:	2300      	movs	r3, #0
  405b48:	6013      	str	r3, [r2, #0]
  405b4a:	2050      	movs	r0, #80	; 0x50
  405b4c:	e0ac      	b.n	405ca8 <__gethex+0x43a>
  405b4e:	1e67      	subs	r7, r4, #1
  405b50:	f1b9 0f00 	cmp.w	r9, #0
  405b54:	d106      	bne.n	405b64 <__gethex+0x2f6>
  405b56:	b13f      	cbz	r7, 405b68 <__gethex+0x2fa>
  405b58:	4639      	mov	r1, r7
  405b5a:	4628      	mov	r0, r5
  405b5c:	f000 fe00 	bl	406760 <__any_on>
  405b60:	4681      	mov	r9, r0
  405b62:	e001      	b.n	405b68 <__gethex+0x2fa>
  405b64:	f04f 0901 	mov.w	r9, #1
  405b68:	117a      	asrs	r2, r7, #5
  405b6a:	2301      	movs	r3, #1
  405b6c:	f007 071f 	and.w	r7, r7, #31
  405b70:	fa03 f707 	lsl.w	r7, r3, r7
  405b74:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  405b78:	4621      	mov	r1, r4
  405b7a:	421f      	tst	r7, r3
  405b7c:	4628      	mov	r0, r5
  405b7e:	bf18      	it	ne
  405b80:	f049 0902 	orrne.w	r9, r9, #2
  405b84:	1b36      	subs	r6, r6, r4
  405b86:	f7ff fe27 	bl	4057d8 <rshift>
  405b8a:	2702      	movs	r7, #2
  405b8c:	f8d8 4004 	ldr.w	r4, [r8, #4]
  405b90:	e000      	b.n	405b94 <__gethex+0x326>
  405b92:	2701      	movs	r7, #1
  405b94:	f1b9 0f00 	cmp.w	r9, #0
  405b98:	f000 8081 	beq.w	405c9e <__gethex+0x430>
  405b9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  405ba0:	2b02      	cmp	r3, #2
  405ba2:	d00e      	beq.n	405bc2 <__gethex+0x354>
  405ba4:	2b03      	cmp	r3, #3
  405ba6:	d010      	beq.n	405bca <__gethex+0x35c>
  405ba8:	2b01      	cmp	r3, #1
  405baa:	d176      	bne.n	405c9a <__gethex+0x42c>
  405bac:	f019 0f02 	tst.w	r9, #2
  405bb0:	d073      	beq.n	405c9a <__gethex+0x42c>
  405bb2:	f8da 0000 	ldr.w	r0, [sl]
  405bb6:	ea49 0900 	orr.w	r9, r9, r0
  405bba:	f019 0f01 	tst.w	r9, #1
  405bbe:	d107      	bne.n	405bd0 <__gethex+0x362>
  405bc0:	e06b      	b.n	405c9a <__gethex+0x42c>
  405bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405bc4:	f1c3 0301 	rsb	r3, r3, #1
  405bc8:	9315      	str	r3, [sp, #84]	; 0x54
  405bca:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405bcc:	2b00      	cmp	r3, #0
  405bce:	d064      	beq.n	405c9a <__gethex+0x42c>
  405bd0:	f8d5 a010 	ldr.w	sl, [r5, #16]
  405bd4:	f105 0314 	add.w	r3, r5, #20
  405bd8:	ea4f 098a 	mov.w	r9, sl, lsl #2
  405bdc:	eb03 0109 	add.w	r1, r3, r9
  405be0:	2000      	movs	r0, #0
  405be2:	681a      	ldr	r2, [r3, #0]
  405be4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
  405be8:	d002      	beq.n	405bf0 <__gethex+0x382>
  405bea:	3201      	adds	r2, #1
  405bec:	601a      	str	r2, [r3, #0]
  405bee:	e020      	b.n	405c32 <__gethex+0x3c4>
  405bf0:	f843 0b04 	str.w	r0, [r3], #4
  405bf4:	4299      	cmp	r1, r3
  405bf6:	d8f4      	bhi.n	405be2 <__gethex+0x374>
  405bf8:	68ab      	ldr	r3, [r5, #8]
  405bfa:	459a      	cmp	sl, r3
  405bfc:	db12      	blt.n	405c24 <__gethex+0x3b6>
  405bfe:	6869      	ldr	r1, [r5, #4]
  405c00:	9802      	ldr	r0, [sp, #8]
  405c02:	3101      	adds	r1, #1
  405c04:	f000 f9e4 	bl	405fd0 <_Balloc>
  405c08:	692a      	ldr	r2, [r5, #16]
  405c0a:	3202      	adds	r2, #2
  405c0c:	f105 010c 	add.w	r1, r5, #12
  405c10:	4683      	mov	fp, r0
  405c12:	0092      	lsls	r2, r2, #2
  405c14:	300c      	adds	r0, #12
  405c16:	f7fd f8b7 	bl	402d88 <memcpy>
  405c1a:	4629      	mov	r1, r5
  405c1c:	9802      	ldr	r0, [sp, #8]
  405c1e:	f000 fa0c 	bl	40603a <_Bfree>
  405c22:	465d      	mov	r5, fp
  405c24:	692b      	ldr	r3, [r5, #16]
  405c26:	1c5a      	adds	r2, r3, #1
  405c28:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  405c2c:	612a      	str	r2, [r5, #16]
  405c2e:	2201      	movs	r2, #1
  405c30:	615a      	str	r2, [r3, #20]
  405c32:	2f02      	cmp	r7, #2
  405c34:	f105 0214 	add.w	r2, r5, #20
  405c38:	d111      	bne.n	405c5e <__gethex+0x3f0>
  405c3a:	f8d8 3000 	ldr.w	r3, [r8]
  405c3e:	3b01      	subs	r3, #1
  405c40:	429e      	cmp	r6, r3
  405c42:	d127      	bne.n	405c94 <__gethex+0x426>
  405c44:	1171      	asrs	r1, r6, #5
  405c46:	2301      	movs	r3, #1
  405c48:	f006 061f 	and.w	r6, r6, #31
  405c4c:	fa03 f606 	lsl.w	r6, r3, r6
  405c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  405c54:	421e      	tst	r6, r3
  405c56:	bf0c      	ite	eq
  405c58:	2702      	moveq	r7, #2
  405c5a:	2701      	movne	r7, #1
  405c5c:	e01a      	b.n	405c94 <__gethex+0x426>
  405c5e:	692b      	ldr	r3, [r5, #16]
  405c60:	459a      	cmp	sl, r3
  405c62:	da0a      	bge.n	405c7a <__gethex+0x40c>
  405c64:	2101      	movs	r1, #1
  405c66:	4628      	mov	r0, r5
  405c68:	f7ff fdb6 	bl	4057d8 <rshift>
  405c6c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405c70:	3401      	adds	r4, #1
  405c72:	429c      	cmp	r4, r3
  405c74:	f73f af2c 	bgt.w	405ad0 <__gethex+0x262>
  405c78:	e00b      	b.n	405c92 <__gethex+0x424>
  405c7a:	f016 061f 	ands.w	r6, r6, #31
  405c7e:	d008      	beq.n	405c92 <__gethex+0x424>
  405c80:	4491      	add	r9, r2
  405c82:	f1c6 0620 	rsb	r6, r6, #32
  405c86:	f859 0c04 	ldr.w	r0, [r9, #-4]
  405c8a:	f000 fa66 	bl	40615a <__hi0bits>
  405c8e:	42b0      	cmp	r0, r6
  405c90:	dbe8      	blt.n	405c64 <__gethex+0x3f6>
  405c92:	2701      	movs	r7, #1
  405c94:	f047 0720 	orr.w	r7, r7, #32
  405c98:	e001      	b.n	405c9e <__gethex+0x430>
  405c9a:	f047 0710 	orr.w	r7, r7, #16
  405c9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405ca0:	601d      	str	r5, [r3, #0]
  405ca2:	9b06      	ldr	r3, [sp, #24]
  405ca4:	4638      	mov	r0, r7
  405ca6:	601c      	str	r4, [r3, #0]
  405ca8:	b00b      	add	sp, #44	; 0x2c
  405caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405cae <L_shift>:
  405cae:	f1c2 0208 	rsb	r2, r2, #8
  405cb2:	0092      	lsls	r2, r2, #2
  405cb4:	b570      	push	{r4, r5, r6, lr}
  405cb6:	f1c2 0620 	rsb	r6, r2, #32
  405cba:	6843      	ldr	r3, [r0, #4]
  405cbc:	6805      	ldr	r5, [r0, #0]
  405cbe:	fa03 f406 	lsl.w	r4, r3, r6
  405cc2:	432c      	orrs	r4, r5
  405cc4:	40d3      	lsrs	r3, r2
  405cc6:	6004      	str	r4, [r0, #0]
  405cc8:	f840 3f04 	str.w	r3, [r0, #4]!
  405ccc:	4288      	cmp	r0, r1
  405cce:	d3f4      	bcc.n	405cba <L_shift+0xc>
  405cd0:	bd70      	pop	{r4, r5, r6, pc}

00405cd2 <__match>:
  405cd2:	b530      	push	{r4, r5, lr}
  405cd4:	6803      	ldr	r3, [r0, #0]
  405cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
  405cda:	3301      	adds	r3, #1
  405cdc:	b14c      	cbz	r4, 405cf2 <__match+0x20>
  405cde:	781a      	ldrb	r2, [r3, #0]
  405ce0:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
  405ce4:	2d19      	cmp	r5, #25
  405ce6:	bf98      	it	ls
  405ce8:	3220      	addls	r2, #32
  405cea:	42a2      	cmp	r2, r4
  405cec:	d0f3      	beq.n	405cd6 <__match+0x4>
  405cee:	2000      	movs	r0, #0
  405cf0:	bd30      	pop	{r4, r5, pc}
  405cf2:	6003      	str	r3, [r0, #0]
  405cf4:	2001      	movs	r0, #1
  405cf6:	bd30      	pop	{r4, r5, pc}

00405cf8 <__hexnan>:
  405cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cfc:	680b      	ldr	r3, [r1, #0]
  405cfe:	f8d0 b000 	ldr.w	fp, [r0]
  405d02:	115e      	asrs	r6, r3, #5
  405d04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  405d08:	f013 031f 	ands.w	r3, r3, #31
  405d0c:	b085      	sub	sp, #20
  405d0e:	bf18      	it	ne
  405d10:	3604      	addne	r6, #4
  405d12:	1f35      	subs	r5, r6, #4
  405d14:	4617      	mov	r7, r2
  405d16:	2200      	movs	r2, #0
  405d18:	4682      	mov	sl, r0
  405d1a:	9301      	str	r3, [sp, #4]
  405d1c:	f846 2c04 	str.w	r2, [r6, #-4]
  405d20:	46a8      	mov	r8, r5
  405d22:	462c      	mov	r4, r5
  405d24:	9200      	str	r2, [sp, #0]
  405d26:	4691      	mov	r9, r2
  405d28:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
  405d2c:	2900      	cmp	r1, #0
  405d2e:	d03c      	beq.n	405daa <__hexnan+0xb2>
  405d30:	4608      	mov	r0, r1
  405d32:	9203      	str	r2, [sp, #12]
  405d34:	9102      	str	r1, [sp, #8]
  405d36:	f7ff fd85 	bl	405844 <__hexdig_fun>
  405d3a:	9a03      	ldr	r2, [sp, #12]
  405d3c:	bb00      	cbnz	r0, 405d80 <__hexnan+0x88>
  405d3e:	9902      	ldr	r1, [sp, #8]
  405d40:	2920      	cmp	r1, #32
  405d42:	d816      	bhi.n	405d72 <__hexnan+0x7a>
  405d44:	9b00      	ldr	r3, [sp, #0]
  405d46:	4599      	cmp	r9, r3
  405d48:	ddee      	ble.n	405d28 <__hexnan+0x30>
  405d4a:	4544      	cmp	r4, r8
  405d4c:	d205      	bcs.n	405d5a <__hexnan+0x62>
  405d4e:	2a07      	cmp	r2, #7
  405d50:	dc03      	bgt.n	405d5a <__hexnan+0x62>
  405d52:	4641      	mov	r1, r8
  405d54:	4620      	mov	r0, r4
  405d56:	f7ff ffaa 	bl	405cae <L_shift>
  405d5a:	42bc      	cmp	r4, r7
  405d5c:	d923      	bls.n	405da6 <__hexnan+0xae>
  405d5e:	2300      	movs	r3, #0
  405d60:	f1a4 0804 	sub.w	r8, r4, #4
  405d64:	f844 3c04 	str.w	r3, [r4, #-4]
  405d68:	f8cd 9000 	str.w	r9, [sp]
  405d6c:	4644      	mov	r4, r8
  405d6e:	461a      	mov	r2, r3
  405d70:	e7da      	b.n	405d28 <__hexnan+0x30>
  405d72:	2929      	cmp	r1, #41	; 0x29
  405d74:	d148      	bne.n	405e08 <__hexnan+0x110>
  405d76:	f10b 0301 	add.w	r3, fp, #1
  405d7a:	f8ca 3000 	str.w	r3, [sl]
  405d7e:	e014      	b.n	405daa <__hexnan+0xb2>
  405d80:	3201      	adds	r2, #1
  405d82:	2a08      	cmp	r2, #8
  405d84:	f109 0901 	add.w	r9, r9, #1
  405d88:	dd06      	ble.n	405d98 <__hexnan+0xa0>
  405d8a:	42bc      	cmp	r4, r7
  405d8c:	d9cc      	bls.n	405d28 <__hexnan+0x30>
  405d8e:	2300      	movs	r3, #0
  405d90:	f844 3c04 	str.w	r3, [r4, #-4]
  405d94:	2201      	movs	r2, #1
  405d96:	3c04      	subs	r4, #4
  405d98:	6821      	ldr	r1, [r4, #0]
  405d9a:	f000 000f 	and.w	r0, r0, #15
  405d9e:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
  405da2:	6020      	str	r0, [r4, #0]
  405da4:	e7c0      	b.n	405d28 <__hexnan+0x30>
  405da6:	2208      	movs	r2, #8
  405da8:	e7be      	b.n	405d28 <__hexnan+0x30>
  405daa:	f1b9 0f00 	cmp.w	r9, #0
  405dae:	d02b      	beq.n	405e08 <__hexnan+0x110>
  405db0:	4544      	cmp	r4, r8
  405db2:	d205      	bcs.n	405dc0 <__hexnan+0xc8>
  405db4:	2a07      	cmp	r2, #7
  405db6:	dc03      	bgt.n	405dc0 <__hexnan+0xc8>
  405db8:	4641      	mov	r1, r8
  405dba:	4620      	mov	r0, r4
  405dbc:	f7ff ff77 	bl	405cae <L_shift>
  405dc0:	42bc      	cmp	r4, r7
  405dc2:	d90c      	bls.n	405dde <__hexnan+0xe6>
  405dc4:	463b      	mov	r3, r7
  405dc6:	f854 2b04 	ldr.w	r2, [r4], #4
  405dca:	f843 2b04 	str.w	r2, [r3], #4
  405dce:	42a5      	cmp	r5, r4
  405dd0:	d2f9      	bcs.n	405dc6 <__hexnan+0xce>
  405dd2:	2200      	movs	r2, #0
  405dd4:	f843 2b04 	str.w	r2, [r3], #4
  405dd8:	429d      	cmp	r5, r3
  405dda:	d2fb      	bcs.n	405dd4 <__hexnan+0xdc>
  405ddc:	e00b      	b.n	405df6 <__hexnan+0xfe>
  405dde:	9b01      	ldr	r3, [sp, #4]
  405de0:	b14b      	cbz	r3, 405df6 <__hexnan+0xfe>
  405de2:	f1c3 0220 	rsb	r2, r3, #32
  405de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  405dea:	40d3      	lsrs	r3, r2
  405dec:	f856 2c04 	ldr.w	r2, [r6, #-4]
  405df0:	4013      	ands	r3, r2
  405df2:	f846 3c04 	str.w	r3, [r6, #-4]
  405df6:	682b      	ldr	r3, [r5, #0]
  405df8:	b943      	cbnz	r3, 405e0c <__hexnan+0x114>
  405dfa:	42bd      	cmp	r5, r7
  405dfc:	d102      	bne.n	405e04 <__hexnan+0x10c>
  405dfe:	2301      	movs	r3, #1
  405e00:	602b      	str	r3, [r5, #0]
  405e02:	e003      	b.n	405e0c <__hexnan+0x114>
  405e04:	3d04      	subs	r5, #4
  405e06:	e7f6      	b.n	405df6 <__hexnan+0xfe>
  405e08:	2004      	movs	r0, #4
  405e0a:	e000      	b.n	405e0e <__hexnan+0x116>
  405e0c:	2005      	movs	r0, #5
  405e0e:	b005      	add	sp, #20
  405e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405e14 <__locale_ctype_ptr_l>:
  405e14:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  405e18:	4770      	bx	lr

00405e1a <__localeconv_l>:
  405e1a:	30f0      	adds	r0, #240	; 0xf0
  405e1c:	4770      	bx	lr
	...

00405e20 <_localeconv_r>:
  405e20:	4b04      	ldr	r3, [pc, #16]	; (405e34 <_localeconv_r+0x14>)
  405e22:	681b      	ldr	r3, [r3, #0]
  405e24:	6a18      	ldr	r0, [r3, #32]
  405e26:	4b04      	ldr	r3, [pc, #16]	; (405e38 <_localeconv_r+0x18>)
  405e28:	2800      	cmp	r0, #0
  405e2a:	bf08      	it	eq
  405e2c:	4618      	moveq	r0, r3
  405e2e:	30f0      	adds	r0, #240	; 0xf0
  405e30:	4770      	bx	lr
  405e32:	bf00      	nop
  405e34:	20000074 	.word	0x20000074
  405e38:	20000078 	.word	0x20000078

00405e3c <__swhatbuf_r>:
  405e3c:	b570      	push	{r4, r5, r6, lr}
  405e3e:	460e      	mov	r6, r1
  405e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405e44:	2900      	cmp	r1, #0
  405e46:	b090      	sub	sp, #64	; 0x40
  405e48:	4614      	mov	r4, r2
  405e4a:	461d      	mov	r5, r3
  405e4c:	da06      	bge.n	405e5c <__swhatbuf_r+0x20>
  405e4e:	2300      	movs	r3, #0
  405e50:	602b      	str	r3, [r5, #0]
  405e52:	89b3      	ldrh	r3, [r6, #12]
  405e54:	061a      	lsls	r2, r3, #24
  405e56:	d50e      	bpl.n	405e76 <__swhatbuf_r+0x3a>
  405e58:	2340      	movs	r3, #64	; 0x40
  405e5a:	e00e      	b.n	405e7a <__swhatbuf_r+0x3e>
  405e5c:	aa01      	add	r2, sp, #4
  405e5e:	f000 ff37 	bl	406cd0 <_fstat_r>
  405e62:	2800      	cmp	r0, #0
  405e64:	dbf3      	blt.n	405e4e <__swhatbuf_r+0x12>
  405e66:	9a02      	ldr	r2, [sp, #8]
  405e68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405e6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  405e70:	425a      	negs	r2, r3
  405e72:	415a      	adcs	r2, r3
  405e74:	602a      	str	r2, [r5, #0]
  405e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405e7a:	2000      	movs	r0, #0
  405e7c:	6023      	str	r3, [r4, #0]
  405e7e:	b010      	add	sp, #64	; 0x40
  405e80:	bd70      	pop	{r4, r5, r6, pc}
	...

00405e84 <__smakebuf_r>:
  405e84:	898b      	ldrh	r3, [r1, #12]
  405e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
  405e88:	079e      	lsls	r6, r3, #30
  405e8a:	4605      	mov	r5, r0
  405e8c:	460c      	mov	r4, r1
  405e8e:	d410      	bmi.n	405eb2 <__smakebuf_r+0x2e>
  405e90:	ab01      	add	r3, sp, #4
  405e92:	466a      	mov	r2, sp
  405e94:	f7ff ffd2 	bl	405e3c <__swhatbuf_r>
  405e98:	9900      	ldr	r1, [sp, #0]
  405e9a:	4606      	mov	r6, r0
  405e9c:	4628      	mov	r0, r5
  405e9e:	f000 fcdd 	bl	40685c <_malloc_r>
  405ea2:	b968      	cbnz	r0, 405ec0 <__smakebuf_r+0x3c>
  405ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ea8:	059a      	lsls	r2, r3, #22
  405eaa:	d422      	bmi.n	405ef2 <__smakebuf_r+0x6e>
  405eac:	f043 0302 	orr.w	r3, r3, #2
  405eb0:	81a3      	strh	r3, [r4, #12]
  405eb2:	f104 0347 	add.w	r3, r4, #71	; 0x47
  405eb6:	6023      	str	r3, [r4, #0]
  405eb8:	6123      	str	r3, [r4, #16]
  405eba:	2301      	movs	r3, #1
  405ebc:	6163      	str	r3, [r4, #20]
  405ebe:	e018      	b.n	405ef2 <__smakebuf_r+0x6e>
  405ec0:	4b0d      	ldr	r3, [pc, #52]	; (405ef8 <__smakebuf_r+0x74>)
  405ec2:	62ab      	str	r3, [r5, #40]	; 0x28
  405ec4:	89a3      	ldrh	r3, [r4, #12]
  405ec6:	6020      	str	r0, [r4, #0]
  405ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405ecc:	81a3      	strh	r3, [r4, #12]
  405ece:	9b00      	ldr	r3, [sp, #0]
  405ed0:	6163      	str	r3, [r4, #20]
  405ed2:	9b01      	ldr	r3, [sp, #4]
  405ed4:	6120      	str	r0, [r4, #16]
  405ed6:	b14b      	cbz	r3, 405eec <__smakebuf_r+0x68>
  405ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405edc:	4628      	mov	r0, r5
  405ede:	f000 ff09 	bl	406cf4 <_isatty_r>
  405ee2:	b118      	cbz	r0, 405eec <__smakebuf_r+0x68>
  405ee4:	89a3      	ldrh	r3, [r4, #12]
  405ee6:	f043 0301 	orr.w	r3, r3, #1
  405eea:	81a3      	strh	r3, [r4, #12]
  405eec:	89a0      	ldrh	r0, [r4, #12]
  405eee:	4330      	orrs	r0, r6
  405ef0:	81a0      	strh	r0, [r4, #12]
  405ef2:	b002      	add	sp, #8
  405ef4:	bd70      	pop	{r4, r5, r6, pc}
  405ef6:	bf00      	nop
  405ef8:	00405645 	.word	0x00405645

00405efc <malloc>:
  405efc:	4b02      	ldr	r3, [pc, #8]	; (405f08 <malloc+0xc>)
  405efe:	4601      	mov	r1, r0
  405f00:	6818      	ldr	r0, [r3, #0]
  405f02:	f000 bcab 	b.w	40685c <_malloc_r>
  405f06:	bf00      	nop
  405f08:	20000074 	.word	0x20000074

00405f0c <__ascii_mbtowc>:
  405f0c:	b082      	sub	sp, #8
  405f0e:	b901      	cbnz	r1, 405f12 <__ascii_mbtowc+0x6>
  405f10:	a901      	add	r1, sp, #4
  405f12:	b13a      	cbz	r2, 405f24 <__ascii_mbtowc+0x18>
  405f14:	b143      	cbz	r3, 405f28 <__ascii_mbtowc+0x1c>
  405f16:	7813      	ldrb	r3, [r2, #0]
  405f18:	600b      	str	r3, [r1, #0]
  405f1a:	7812      	ldrb	r2, [r2, #0]
  405f1c:	1c10      	adds	r0, r2, #0
  405f1e:	bf18      	it	ne
  405f20:	2001      	movne	r0, #1
  405f22:	e003      	b.n	405f2c <__ascii_mbtowc+0x20>
  405f24:	4610      	mov	r0, r2
  405f26:	e001      	b.n	405f2c <__ascii_mbtowc+0x20>
  405f28:	f06f 0001 	mvn.w	r0, #1
  405f2c:	b002      	add	sp, #8
  405f2e:	4770      	bx	lr

00405f30 <memchr>:
  405f30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f34:	2a10      	cmp	r2, #16
  405f36:	db2b      	blt.n	405f90 <memchr+0x60>
  405f38:	f010 0f07 	tst.w	r0, #7
  405f3c:	d008      	beq.n	405f50 <memchr+0x20>
  405f3e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f42:	3a01      	subs	r2, #1
  405f44:	428b      	cmp	r3, r1
  405f46:	d02d      	beq.n	405fa4 <memchr+0x74>
  405f48:	f010 0f07 	tst.w	r0, #7
  405f4c:	b342      	cbz	r2, 405fa0 <memchr+0x70>
  405f4e:	d1f6      	bne.n	405f3e <memchr+0xe>
  405f50:	b4f0      	push	{r4, r5, r6, r7}
  405f52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405f56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405f5a:	f022 0407 	bic.w	r4, r2, #7
  405f5e:	f07f 0700 	mvns.w	r7, #0
  405f62:	2300      	movs	r3, #0
  405f64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405f68:	3c08      	subs	r4, #8
  405f6a:	ea85 0501 	eor.w	r5, r5, r1
  405f6e:	ea86 0601 	eor.w	r6, r6, r1
  405f72:	fa85 f547 	uadd8	r5, r5, r7
  405f76:	faa3 f587 	sel	r5, r3, r7
  405f7a:	fa86 f647 	uadd8	r6, r6, r7
  405f7e:	faa5 f687 	sel	r6, r5, r7
  405f82:	b98e      	cbnz	r6, 405fa8 <memchr+0x78>
  405f84:	d1ee      	bne.n	405f64 <memchr+0x34>
  405f86:	bcf0      	pop	{r4, r5, r6, r7}
  405f88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f8c:	f002 0207 	and.w	r2, r2, #7
  405f90:	b132      	cbz	r2, 405fa0 <memchr+0x70>
  405f92:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f96:	3a01      	subs	r2, #1
  405f98:	ea83 0301 	eor.w	r3, r3, r1
  405f9c:	b113      	cbz	r3, 405fa4 <memchr+0x74>
  405f9e:	d1f8      	bne.n	405f92 <memchr+0x62>
  405fa0:	2000      	movs	r0, #0
  405fa2:	4770      	bx	lr
  405fa4:	3801      	subs	r0, #1
  405fa6:	4770      	bx	lr
  405fa8:	2d00      	cmp	r5, #0
  405faa:	bf06      	itte	eq
  405fac:	4635      	moveq	r5, r6
  405fae:	3803      	subeq	r0, #3
  405fb0:	3807      	subne	r0, #7
  405fb2:	f015 0f01 	tst.w	r5, #1
  405fb6:	d107      	bne.n	405fc8 <memchr+0x98>
  405fb8:	3001      	adds	r0, #1
  405fba:	f415 7f80 	tst.w	r5, #256	; 0x100
  405fbe:	bf02      	ittt	eq
  405fc0:	3001      	addeq	r0, #1
  405fc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405fc6:	3001      	addeq	r0, #1
  405fc8:	bcf0      	pop	{r4, r5, r6, r7}
  405fca:	3801      	subs	r0, #1
  405fcc:	4770      	bx	lr
  405fce:	bf00      	nop

00405fd0 <_Balloc>:
  405fd0:	b570      	push	{r4, r5, r6, lr}
  405fd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
  405fd4:	4604      	mov	r4, r0
  405fd6:	460e      	mov	r6, r1
  405fd8:	b93d      	cbnz	r5, 405fea <_Balloc+0x1a>
  405fda:	2010      	movs	r0, #16
  405fdc:	f7ff ff8e 	bl	405efc <malloc>
  405fe0:	6260      	str	r0, [r4, #36]	; 0x24
  405fe2:	6045      	str	r5, [r0, #4]
  405fe4:	6085      	str	r5, [r0, #8]
  405fe6:	6005      	str	r5, [r0, #0]
  405fe8:	60c5      	str	r5, [r0, #12]
  405fea:	6a65      	ldr	r5, [r4, #36]	; 0x24
  405fec:	68eb      	ldr	r3, [r5, #12]
  405fee:	b143      	cbz	r3, 406002 <_Balloc+0x32>
  405ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405ff2:	68db      	ldr	r3, [r3, #12]
  405ff4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  405ff8:	b178      	cbz	r0, 40601a <_Balloc+0x4a>
  405ffa:	6802      	ldr	r2, [r0, #0]
  405ffc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  406000:	e017      	b.n	406032 <_Balloc+0x62>
  406002:	2221      	movs	r2, #33	; 0x21
  406004:	2104      	movs	r1, #4
  406006:	4620      	mov	r0, r4
  406008:	f000 fbcc 	bl	4067a4 <_calloc_r>
  40600c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40600e:	60e8      	str	r0, [r5, #12]
  406010:	68db      	ldr	r3, [r3, #12]
  406012:	2b00      	cmp	r3, #0
  406014:	d1ec      	bne.n	405ff0 <_Balloc+0x20>
  406016:	2000      	movs	r0, #0
  406018:	bd70      	pop	{r4, r5, r6, pc}
  40601a:	2101      	movs	r1, #1
  40601c:	fa01 f506 	lsl.w	r5, r1, r6
  406020:	1d6a      	adds	r2, r5, #5
  406022:	0092      	lsls	r2, r2, #2
  406024:	4620      	mov	r0, r4
  406026:	f000 fbbd 	bl	4067a4 <_calloc_r>
  40602a:	2800      	cmp	r0, #0
  40602c:	d0f3      	beq.n	406016 <_Balloc+0x46>
  40602e:	6046      	str	r6, [r0, #4]
  406030:	6085      	str	r5, [r0, #8]
  406032:	2300      	movs	r3, #0
  406034:	6103      	str	r3, [r0, #16]
  406036:	60c3      	str	r3, [r0, #12]
  406038:	bd70      	pop	{r4, r5, r6, pc}

0040603a <_Bfree>:
  40603a:	b570      	push	{r4, r5, r6, lr}
  40603c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40603e:	4606      	mov	r6, r0
  406040:	460d      	mov	r5, r1
  406042:	b93c      	cbnz	r4, 406054 <_Bfree+0x1a>
  406044:	2010      	movs	r0, #16
  406046:	f7ff ff59 	bl	405efc <malloc>
  40604a:	6270      	str	r0, [r6, #36]	; 0x24
  40604c:	6044      	str	r4, [r0, #4]
  40604e:	6084      	str	r4, [r0, #8]
  406050:	6004      	str	r4, [r0, #0]
  406052:	60c4      	str	r4, [r0, #12]
  406054:	b13d      	cbz	r5, 406066 <_Bfree+0x2c>
  406056:	6a73      	ldr	r3, [r6, #36]	; 0x24
  406058:	686a      	ldr	r2, [r5, #4]
  40605a:	68db      	ldr	r3, [r3, #12]
  40605c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406060:	6029      	str	r1, [r5, #0]
  406062:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406066:	bd70      	pop	{r4, r5, r6, pc}

00406068 <__multadd>:
  406068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40606c:	690d      	ldr	r5, [r1, #16]
  40606e:	461f      	mov	r7, r3
  406070:	4606      	mov	r6, r0
  406072:	460c      	mov	r4, r1
  406074:	f101 0e14 	add.w	lr, r1, #20
  406078:	2300      	movs	r3, #0
  40607a:	f8de 0000 	ldr.w	r0, [lr]
  40607e:	b281      	uxth	r1, r0
  406080:	fb02 7101 	mla	r1, r2, r1, r7
  406084:	0c0f      	lsrs	r7, r1, #16
  406086:	0c00      	lsrs	r0, r0, #16
  406088:	fb02 7000 	mla	r0, r2, r0, r7
  40608c:	b289      	uxth	r1, r1
  40608e:	3301      	adds	r3, #1
  406090:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  406094:	429d      	cmp	r5, r3
  406096:	ea4f 4710 	mov.w	r7, r0, lsr #16
  40609a:	f84e 1b04 	str.w	r1, [lr], #4
  40609e:	dcec      	bgt.n	40607a <__multadd+0x12>
  4060a0:	b1d7      	cbz	r7, 4060d8 <__multadd+0x70>
  4060a2:	68a3      	ldr	r3, [r4, #8]
  4060a4:	429d      	cmp	r5, r3
  4060a6:	db12      	blt.n	4060ce <__multadd+0x66>
  4060a8:	6861      	ldr	r1, [r4, #4]
  4060aa:	4630      	mov	r0, r6
  4060ac:	3101      	adds	r1, #1
  4060ae:	f7ff ff8f 	bl	405fd0 <_Balloc>
  4060b2:	6922      	ldr	r2, [r4, #16]
  4060b4:	3202      	adds	r2, #2
  4060b6:	f104 010c 	add.w	r1, r4, #12
  4060ba:	4680      	mov	r8, r0
  4060bc:	0092      	lsls	r2, r2, #2
  4060be:	300c      	adds	r0, #12
  4060c0:	f7fc fe62 	bl	402d88 <memcpy>
  4060c4:	4621      	mov	r1, r4
  4060c6:	4630      	mov	r0, r6
  4060c8:	f7ff ffb7 	bl	40603a <_Bfree>
  4060cc:	4644      	mov	r4, r8
  4060ce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4060d2:	3501      	adds	r5, #1
  4060d4:	615f      	str	r7, [r3, #20]
  4060d6:	6125      	str	r5, [r4, #16]
  4060d8:	4620      	mov	r0, r4
  4060da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004060de <__s2b>:
  4060de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4060e2:	460c      	mov	r4, r1
  4060e4:	4615      	mov	r5, r2
  4060e6:	461f      	mov	r7, r3
  4060e8:	2209      	movs	r2, #9
  4060ea:	3308      	adds	r3, #8
  4060ec:	4606      	mov	r6, r0
  4060ee:	fb93 f3f2 	sdiv	r3, r3, r2
  4060f2:	2100      	movs	r1, #0
  4060f4:	2201      	movs	r2, #1
  4060f6:	429a      	cmp	r2, r3
  4060f8:	da02      	bge.n	406100 <__s2b+0x22>
  4060fa:	0052      	lsls	r2, r2, #1
  4060fc:	3101      	adds	r1, #1
  4060fe:	e7fa      	b.n	4060f6 <__s2b+0x18>
  406100:	4630      	mov	r0, r6
  406102:	f7ff ff65 	bl	405fd0 <_Balloc>
  406106:	9b08      	ldr	r3, [sp, #32]
  406108:	6143      	str	r3, [r0, #20]
  40610a:	2d09      	cmp	r5, #9
  40610c:	f04f 0301 	mov.w	r3, #1
  406110:	6103      	str	r3, [r0, #16]
  406112:	dd11      	ble.n	406138 <__s2b+0x5a>
  406114:	f104 0809 	add.w	r8, r4, #9
  406118:	46c1      	mov	r9, r8
  40611a:	442c      	add	r4, r5
  40611c:	f819 3b01 	ldrb.w	r3, [r9], #1
  406120:	4601      	mov	r1, r0
  406122:	3b30      	subs	r3, #48	; 0x30
  406124:	220a      	movs	r2, #10
  406126:	4630      	mov	r0, r6
  406128:	f7ff ff9e 	bl	406068 <__multadd>
  40612c:	45a1      	cmp	r9, r4
  40612e:	d1f5      	bne.n	40611c <__s2b+0x3e>
  406130:	eb08 0405 	add.w	r4, r8, r5
  406134:	3c08      	subs	r4, #8
  406136:	e001      	b.n	40613c <__s2b+0x5e>
  406138:	340a      	adds	r4, #10
  40613a:	2509      	movs	r5, #9
  40613c:	1b2d      	subs	r5, r5, r4
  40613e:	1963      	adds	r3, r4, r5
  406140:	429f      	cmp	r7, r3
  406142:	dd08      	ble.n	406156 <__s2b+0x78>
  406144:	f814 3b01 	ldrb.w	r3, [r4], #1
  406148:	4601      	mov	r1, r0
  40614a:	3b30      	subs	r3, #48	; 0x30
  40614c:	220a      	movs	r2, #10
  40614e:	4630      	mov	r0, r6
  406150:	f7ff ff8a 	bl	406068 <__multadd>
  406154:	e7f3      	b.n	40613e <__s2b+0x60>
  406156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040615a <__hi0bits>:
  40615a:	0c03      	lsrs	r3, r0, #16
  40615c:	041b      	lsls	r3, r3, #16
  40615e:	b913      	cbnz	r3, 406166 <__hi0bits+0xc>
  406160:	0400      	lsls	r0, r0, #16
  406162:	2310      	movs	r3, #16
  406164:	e000      	b.n	406168 <__hi0bits+0xe>
  406166:	2300      	movs	r3, #0
  406168:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40616c:	bf04      	itt	eq
  40616e:	0200      	lsleq	r0, r0, #8
  406170:	3308      	addeq	r3, #8
  406172:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  406176:	bf04      	itt	eq
  406178:	0100      	lsleq	r0, r0, #4
  40617a:	3304      	addeq	r3, #4
  40617c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  406180:	bf04      	itt	eq
  406182:	0080      	lsleq	r0, r0, #2
  406184:	3302      	addeq	r3, #2
  406186:	2800      	cmp	r0, #0
  406188:	db03      	blt.n	406192 <__hi0bits+0x38>
  40618a:	0042      	lsls	r2, r0, #1
  40618c:	d503      	bpl.n	406196 <__hi0bits+0x3c>
  40618e:	1c58      	adds	r0, r3, #1
  406190:	4770      	bx	lr
  406192:	4618      	mov	r0, r3
  406194:	4770      	bx	lr
  406196:	2020      	movs	r0, #32
  406198:	4770      	bx	lr

0040619a <__lo0bits>:
  40619a:	6803      	ldr	r3, [r0, #0]
  40619c:	f013 0207 	ands.w	r2, r3, #7
  4061a0:	d00b      	beq.n	4061ba <__lo0bits+0x20>
  4061a2:	07d9      	lsls	r1, r3, #31
  4061a4:	d422      	bmi.n	4061ec <__lo0bits+0x52>
  4061a6:	079a      	lsls	r2, r3, #30
  4061a8:	bf4b      	itete	mi
  4061aa:	085b      	lsrmi	r3, r3, #1
  4061ac:	089b      	lsrpl	r3, r3, #2
  4061ae:	6003      	strmi	r3, [r0, #0]
  4061b0:	6003      	strpl	r3, [r0, #0]
  4061b2:	bf4c      	ite	mi
  4061b4:	2001      	movmi	r0, #1
  4061b6:	2002      	movpl	r0, #2
  4061b8:	4770      	bx	lr
  4061ba:	b299      	uxth	r1, r3
  4061bc:	b909      	cbnz	r1, 4061c2 <__lo0bits+0x28>
  4061be:	0c1b      	lsrs	r3, r3, #16
  4061c0:	2210      	movs	r2, #16
  4061c2:	f013 0fff 	tst.w	r3, #255	; 0xff
  4061c6:	bf04      	itt	eq
  4061c8:	0a1b      	lsreq	r3, r3, #8
  4061ca:	3208      	addeq	r2, #8
  4061cc:	0719      	lsls	r1, r3, #28
  4061ce:	bf04      	itt	eq
  4061d0:	091b      	lsreq	r3, r3, #4
  4061d2:	3204      	addeq	r2, #4
  4061d4:	0799      	lsls	r1, r3, #30
  4061d6:	bf04      	itt	eq
  4061d8:	089b      	lsreq	r3, r3, #2
  4061da:	3202      	addeq	r2, #2
  4061dc:	07d9      	lsls	r1, r3, #31
  4061de:	d402      	bmi.n	4061e6 <__lo0bits+0x4c>
  4061e0:	085b      	lsrs	r3, r3, #1
  4061e2:	d005      	beq.n	4061f0 <__lo0bits+0x56>
  4061e4:	3201      	adds	r2, #1
  4061e6:	6003      	str	r3, [r0, #0]
  4061e8:	4610      	mov	r0, r2
  4061ea:	4770      	bx	lr
  4061ec:	2000      	movs	r0, #0
  4061ee:	4770      	bx	lr
  4061f0:	2020      	movs	r0, #32
  4061f2:	4770      	bx	lr

004061f4 <__i2b>:
  4061f4:	b510      	push	{r4, lr}
  4061f6:	460c      	mov	r4, r1
  4061f8:	2101      	movs	r1, #1
  4061fa:	f7ff fee9 	bl	405fd0 <_Balloc>
  4061fe:	2201      	movs	r2, #1
  406200:	6144      	str	r4, [r0, #20]
  406202:	6102      	str	r2, [r0, #16]
  406204:	bd10      	pop	{r4, pc}

00406206 <__multiply>:
  406206:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40620a:	4614      	mov	r4, r2
  40620c:	690a      	ldr	r2, [r1, #16]
  40620e:	6923      	ldr	r3, [r4, #16]
  406210:	429a      	cmp	r2, r3
  406212:	bfb8      	it	lt
  406214:	460b      	movlt	r3, r1
  406216:	4688      	mov	r8, r1
  406218:	bfbc      	itt	lt
  40621a:	46a0      	movlt	r8, r4
  40621c:	461c      	movlt	r4, r3
  40621e:	f8d8 7010 	ldr.w	r7, [r8, #16]
  406222:	f8d4 9010 	ldr.w	r9, [r4, #16]
  406226:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40622a:	f8d8 1004 	ldr.w	r1, [r8, #4]
  40622e:	eb07 0609 	add.w	r6, r7, r9
  406232:	429e      	cmp	r6, r3
  406234:	bfc8      	it	gt
  406236:	3101      	addgt	r1, #1
  406238:	f7ff feca 	bl	405fd0 <_Balloc>
  40623c:	f100 0514 	add.w	r5, r0, #20
  406240:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  406244:	462b      	mov	r3, r5
  406246:	2200      	movs	r2, #0
  406248:	4563      	cmp	r3, ip
  40624a:	d202      	bcs.n	406252 <__multiply+0x4c>
  40624c:	f843 2b04 	str.w	r2, [r3], #4
  406250:	e7fa      	b.n	406248 <__multiply+0x42>
  406252:	f104 0214 	add.w	r2, r4, #20
  406256:	f108 0114 	add.w	r1, r8, #20
  40625a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  40625e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  406262:	9300      	str	r3, [sp, #0]
  406264:	9b00      	ldr	r3, [sp, #0]
  406266:	9201      	str	r2, [sp, #4]
  406268:	4293      	cmp	r3, r2
  40626a:	d957      	bls.n	40631c <__multiply+0x116>
  40626c:	f8b2 b000 	ldrh.w	fp, [r2]
  406270:	f1bb 0f00 	cmp.w	fp, #0
  406274:	d023      	beq.n	4062be <__multiply+0xb8>
  406276:	4689      	mov	r9, r1
  406278:	46ae      	mov	lr, r5
  40627a:	f04f 0800 	mov.w	r8, #0
  40627e:	f859 4b04 	ldr.w	r4, [r9], #4
  406282:	f8be a000 	ldrh.w	sl, [lr]
  406286:	b2a3      	uxth	r3, r4
  406288:	fb0b a303 	mla	r3, fp, r3, sl
  40628c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  406290:	f8de 4000 	ldr.w	r4, [lr]
  406294:	4443      	add	r3, r8
  406296:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40629a:	fb0b 840a 	mla	r4, fp, sl, r8
  40629e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  4062a2:	46f2      	mov	sl, lr
  4062a4:	b29b      	uxth	r3, r3
  4062a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  4062aa:	454f      	cmp	r7, r9
  4062ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4062b0:	f84a 3b04 	str.w	r3, [sl], #4
  4062b4:	d901      	bls.n	4062ba <__multiply+0xb4>
  4062b6:	46d6      	mov	lr, sl
  4062b8:	e7e1      	b.n	40627e <__multiply+0x78>
  4062ba:	f8ce 8004 	str.w	r8, [lr, #4]
  4062be:	9b01      	ldr	r3, [sp, #4]
  4062c0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  4062c4:	3204      	adds	r2, #4
  4062c6:	f1ba 0f00 	cmp.w	sl, #0
  4062ca:	d021      	beq.n	406310 <__multiply+0x10a>
  4062cc:	682b      	ldr	r3, [r5, #0]
  4062ce:	462c      	mov	r4, r5
  4062d0:	4689      	mov	r9, r1
  4062d2:	f04f 0800 	mov.w	r8, #0
  4062d6:	f8b9 e000 	ldrh.w	lr, [r9]
  4062da:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  4062de:	fb0a be0e 	mla	lr, sl, lr, fp
  4062e2:	44f0      	add	r8, lr
  4062e4:	46a3      	mov	fp, r4
  4062e6:	b29b      	uxth	r3, r3
  4062e8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4062ec:	f84b 3b04 	str.w	r3, [fp], #4
  4062f0:	f859 3b04 	ldr.w	r3, [r9], #4
  4062f4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  4062f8:	0c1b      	lsrs	r3, r3, #16
  4062fa:	fb0a e303 	mla	r3, sl, r3, lr
  4062fe:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  406302:	454f      	cmp	r7, r9
  406304:	ea4f 4813 	mov.w	r8, r3, lsr #16
  406308:	d901      	bls.n	40630e <__multiply+0x108>
  40630a:	465c      	mov	r4, fp
  40630c:	e7e3      	b.n	4062d6 <__multiply+0xd0>
  40630e:	6063      	str	r3, [r4, #4]
  406310:	3504      	adds	r5, #4
  406312:	e7a7      	b.n	406264 <__multiply+0x5e>
  406314:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  406318:	b913      	cbnz	r3, 406320 <__multiply+0x11a>
  40631a:	3e01      	subs	r6, #1
  40631c:	2e00      	cmp	r6, #0
  40631e:	dcf9      	bgt.n	406314 <__multiply+0x10e>
  406320:	6106      	str	r6, [r0, #16]
  406322:	b003      	add	sp, #12
  406324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406328 <__pow5mult>:
  406328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40632c:	4615      	mov	r5, r2
  40632e:	f012 0203 	ands.w	r2, r2, #3
  406332:	4606      	mov	r6, r0
  406334:	460f      	mov	r7, r1
  406336:	d007      	beq.n	406348 <__pow5mult+0x20>
  406338:	3a01      	subs	r2, #1
  40633a:	4c21      	ldr	r4, [pc, #132]	; (4063c0 <__pow5mult+0x98>)
  40633c:	2300      	movs	r3, #0
  40633e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  406342:	f7ff fe91 	bl	406068 <__multadd>
  406346:	4607      	mov	r7, r0
  406348:	10ad      	asrs	r5, r5, #2
  40634a:	d036      	beq.n	4063ba <__pow5mult+0x92>
  40634c:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40634e:	b93c      	cbnz	r4, 406360 <__pow5mult+0x38>
  406350:	2010      	movs	r0, #16
  406352:	f7ff fdd3 	bl	405efc <malloc>
  406356:	6270      	str	r0, [r6, #36]	; 0x24
  406358:	6044      	str	r4, [r0, #4]
  40635a:	6084      	str	r4, [r0, #8]
  40635c:	6004      	str	r4, [r0, #0]
  40635e:	60c4      	str	r4, [r0, #12]
  406360:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  406364:	f8d8 4008 	ldr.w	r4, [r8, #8]
  406368:	b94c      	cbnz	r4, 40637e <__pow5mult+0x56>
  40636a:	f240 2171 	movw	r1, #625	; 0x271
  40636e:	4630      	mov	r0, r6
  406370:	f7ff ff40 	bl	4061f4 <__i2b>
  406374:	2300      	movs	r3, #0
  406376:	f8c8 0008 	str.w	r0, [r8, #8]
  40637a:	4604      	mov	r4, r0
  40637c:	6003      	str	r3, [r0, #0]
  40637e:	f04f 0800 	mov.w	r8, #0
  406382:	07eb      	lsls	r3, r5, #31
  406384:	d50a      	bpl.n	40639c <__pow5mult+0x74>
  406386:	4639      	mov	r1, r7
  406388:	4622      	mov	r2, r4
  40638a:	4630      	mov	r0, r6
  40638c:	f7ff ff3b 	bl	406206 <__multiply>
  406390:	4639      	mov	r1, r7
  406392:	4681      	mov	r9, r0
  406394:	4630      	mov	r0, r6
  406396:	f7ff fe50 	bl	40603a <_Bfree>
  40639a:	464f      	mov	r7, r9
  40639c:	106d      	asrs	r5, r5, #1
  40639e:	d00c      	beq.n	4063ba <__pow5mult+0x92>
  4063a0:	6820      	ldr	r0, [r4, #0]
  4063a2:	b108      	cbz	r0, 4063a8 <__pow5mult+0x80>
  4063a4:	4604      	mov	r4, r0
  4063a6:	e7ec      	b.n	406382 <__pow5mult+0x5a>
  4063a8:	4622      	mov	r2, r4
  4063aa:	4621      	mov	r1, r4
  4063ac:	4630      	mov	r0, r6
  4063ae:	f7ff ff2a 	bl	406206 <__multiply>
  4063b2:	6020      	str	r0, [r4, #0]
  4063b4:	f8c0 8000 	str.w	r8, [r0]
  4063b8:	e7f4      	b.n	4063a4 <__pow5mult+0x7c>
  4063ba:	4638      	mov	r0, r7
  4063bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4063c0:	004083f0 	.word	0x004083f0

004063c4 <__lshift>:
  4063c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4063c8:	460c      	mov	r4, r1
  4063ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4063ce:	6926      	ldr	r6, [r4, #16]
  4063d0:	6849      	ldr	r1, [r1, #4]
  4063d2:	68a3      	ldr	r3, [r4, #8]
  4063d4:	4456      	add	r6, sl
  4063d6:	4607      	mov	r7, r0
  4063d8:	4691      	mov	r9, r2
  4063da:	1c75      	adds	r5, r6, #1
  4063dc:	42ab      	cmp	r3, r5
  4063de:	da02      	bge.n	4063e6 <__lshift+0x22>
  4063e0:	3101      	adds	r1, #1
  4063e2:	005b      	lsls	r3, r3, #1
  4063e4:	e7fa      	b.n	4063dc <__lshift+0x18>
  4063e6:	4638      	mov	r0, r7
  4063e8:	f7ff fdf2 	bl	405fd0 <_Balloc>
  4063ec:	2300      	movs	r3, #0
  4063ee:	4680      	mov	r8, r0
  4063f0:	f100 0114 	add.w	r1, r0, #20
  4063f4:	461a      	mov	r2, r3
  4063f6:	4553      	cmp	r3, sl
  4063f8:	da03      	bge.n	406402 <__lshift+0x3e>
  4063fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4063fe:	3301      	adds	r3, #1
  406400:	e7f9      	b.n	4063f6 <__lshift+0x32>
  406402:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  406406:	6920      	ldr	r0, [r4, #16]
  406408:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40640c:	f019 091f 	ands.w	r9, r9, #31
  406410:	f104 0114 	add.w	r1, r4, #20
  406414:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  406418:	d014      	beq.n	406444 <__lshift+0x80>
  40641a:	f1c9 0c20 	rsb	ip, r9, #32
  40641e:	2200      	movs	r2, #0
  406420:	6808      	ldr	r0, [r1, #0]
  406422:	fa00 f009 	lsl.w	r0, r0, r9
  406426:	4302      	orrs	r2, r0
  406428:	469a      	mov	sl, r3
  40642a:	f843 2b04 	str.w	r2, [r3], #4
  40642e:	f851 2b04 	ldr.w	r2, [r1], #4
  406432:	458e      	cmp	lr, r1
  406434:	fa22 f20c 	lsr.w	r2, r2, ip
  406438:	d8f2      	bhi.n	406420 <__lshift+0x5c>
  40643a:	f8ca 2004 	str.w	r2, [sl, #4]
  40643e:	b142      	cbz	r2, 406452 <__lshift+0x8e>
  406440:	1cb5      	adds	r5, r6, #2
  406442:	e006      	b.n	406452 <__lshift+0x8e>
  406444:	3b04      	subs	r3, #4
  406446:	f851 2b04 	ldr.w	r2, [r1], #4
  40644a:	f843 2f04 	str.w	r2, [r3, #4]!
  40644e:	458e      	cmp	lr, r1
  406450:	d8f9      	bhi.n	406446 <__lshift+0x82>
  406452:	3d01      	subs	r5, #1
  406454:	4638      	mov	r0, r7
  406456:	f8c8 5010 	str.w	r5, [r8, #16]
  40645a:	4621      	mov	r1, r4
  40645c:	f7ff fded 	bl	40603a <_Bfree>
  406460:	4640      	mov	r0, r8
  406462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00406466 <__mcmp>:
  406466:	6903      	ldr	r3, [r0, #16]
  406468:	690a      	ldr	r2, [r1, #16]
  40646a:	1a9b      	subs	r3, r3, r2
  40646c:	b510      	push	{r4, lr}
  40646e:	d111      	bne.n	406494 <__mcmp+0x2e>
  406470:	0092      	lsls	r2, r2, #2
  406472:	3014      	adds	r0, #20
  406474:	3114      	adds	r1, #20
  406476:	1883      	adds	r3, r0, r2
  406478:	440a      	add	r2, r1
  40647a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40647e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  406482:	428c      	cmp	r4, r1
  406484:	d002      	beq.n	40648c <__mcmp+0x26>
  406486:	d307      	bcc.n	406498 <__mcmp+0x32>
  406488:	2001      	movs	r0, #1
  40648a:	bd10      	pop	{r4, pc}
  40648c:	4298      	cmp	r0, r3
  40648e:	d3f4      	bcc.n	40647a <__mcmp+0x14>
  406490:	2000      	movs	r0, #0
  406492:	bd10      	pop	{r4, pc}
  406494:	4618      	mov	r0, r3
  406496:	bd10      	pop	{r4, pc}
  406498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40649c:	bd10      	pop	{r4, pc}

0040649e <__mdiff>:
  40649e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4064a2:	460c      	mov	r4, r1
  4064a4:	4607      	mov	r7, r0
  4064a6:	4611      	mov	r1, r2
  4064a8:	4620      	mov	r0, r4
  4064aa:	4615      	mov	r5, r2
  4064ac:	f7ff ffdb 	bl	406466 <__mcmp>
  4064b0:	1e06      	subs	r6, r0, #0
  4064b2:	d108      	bne.n	4064c6 <__mdiff+0x28>
  4064b4:	4631      	mov	r1, r6
  4064b6:	4638      	mov	r0, r7
  4064b8:	f7ff fd8a 	bl	405fd0 <_Balloc>
  4064bc:	2301      	movs	r3, #1
  4064be:	6103      	str	r3, [r0, #16]
  4064c0:	6146      	str	r6, [r0, #20]
  4064c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4064c6:	bfbc      	itt	lt
  4064c8:	4623      	movlt	r3, r4
  4064ca:	462c      	movlt	r4, r5
  4064cc:	4638      	mov	r0, r7
  4064ce:	6861      	ldr	r1, [r4, #4]
  4064d0:	bfba      	itte	lt
  4064d2:	461d      	movlt	r5, r3
  4064d4:	2601      	movlt	r6, #1
  4064d6:	2600      	movge	r6, #0
  4064d8:	f7ff fd7a 	bl	405fd0 <_Balloc>
  4064dc:	692b      	ldr	r3, [r5, #16]
  4064de:	60c6      	str	r6, [r0, #12]
  4064e0:	6926      	ldr	r6, [r4, #16]
  4064e2:	f105 0914 	add.w	r9, r5, #20
  4064e6:	3414      	adds	r4, #20
  4064e8:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  4064ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  4064f0:	f100 0514 	add.w	r5, r0, #20
  4064f4:	f04f 0c00 	mov.w	ip, #0
  4064f8:	f854 3b04 	ldr.w	r3, [r4], #4
  4064fc:	f859 2b04 	ldr.w	r2, [r9], #4
  406500:	fa1c f183 	uxtah	r1, ip, r3
  406504:	fa1f fe82 	uxth.w	lr, r2
  406508:	0c12      	lsrs	r2, r2, #16
  40650a:	ebce 0101 	rsb	r1, lr, r1
  40650e:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  406512:	eb03 4321 	add.w	r3, r3, r1, asr #16
  406516:	b289      	uxth	r1, r1
  406518:	ea4f 4c23 	mov.w	ip, r3, asr #16
  40651c:	45c8      	cmp	r8, r9
  40651e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  406522:	46a6      	mov	lr, r4
  406524:	f845 3b04 	str.w	r3, [r5], #4
  406528:	d8e6      	bhi.n	4064f8 <__mdiff+0x5a>
  40652a:	45be      	cmp	lr, r7
  40652c:	d20e      	bcs.n	40654c <__mdiff+0xae>
  40652e:	f85e 1b04 	ldr.w	r1, [lr], #4
  406532:	fa1c f281 	uxtah	r2, ip, r1
  406536:	1413      	asrs	r3, r2, #16
  406538:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  40653c:	b292      	uxth	r2, r2
  40653e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406542:	ea4f 4c23 	mov.w	ip, r3, asr #16
  406546:	f845 2b04 	str.w	r2, [r5], #4
  40654a:	e7ee      	b.n	40652a <__mdiff+0x8c>
  40654c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  406550:	b90b      	cbnz	r3, 406556 <__mdiff+0xb8>
  406552:	3e01      	subs	r6, #1
  406554:	e7fa      	b.n	40654c <__mdiff+0xae>
  406556:	6106      	str	r6, [r0, #16]
  406558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040655c <__ulp>:
  40655c:	4b10      	ldr	r3, [pc, #64]	; (4065a0 <__ulp+0x44>)
  40655e:	400b      	ands	r3, r1
  406560:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  406564:	2b00      	cmp	r3, #0
  406566:	dd02      	ble.n	40656e <__ulp+0x12>
  406568:	2000      	movs	r0, #0
  40656a:	4619      	mov	r1, r3
  40656c:	4770      	bx	lr
  40656e:	425b      	negs	r3, r3
  406570:	151b      	asrs	r3, r3, #20
  406572:	2b13      	cmp	r3, #19
  406574:	f04f 0000 	mov.w	r0, #0
  406578:	f04f 0100 	mov.w	r1, #0
  40657c:	dc04      	bgt.n	406588 <__ulp+0x2c>
  40657e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  406582:	fa42 f103 	asr.w	r1, r2, r3
  406586:	4770      	bx	lr
  406588:	3b14      	subs	r3, #20
  40658a:	2b1e      	cmp	r3, #30
  40658c:	f04f 0201 	mov.w	r2, #1
  406590:	bfda      	itte	le
  406592:	f1c3 031f 	rsble	r3, r3, #31
  406596:	fa02 f303 	lslle.w	r3, r2, r3
  40659a:	4613      	movgt	r3, r2
  40659c:	4618      	mov	r0, r3
  40659e:	4770      	bx	lr
  4065a0:	7ff00000 	.word	0x7ff00000

004065a4 <__b2d>:
  4065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4065a6:	6905      	ldr	r5, [r0, #16]
  4065a8:	f100 0614 	add.w	r6, r0, #20
  4065ac:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  4065b0:	1f2f      	subs	r7, r5, #4
  4065b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
  4065b6:	4620      	mov	r0, r4
  4065b8:	f7ff fdcf 	bl	40615a <__hi0bits>
  4065bc:	f1c0 0320 	rsb	r3, r0, #32
  4065c0:	280a      	cmp	r0, #10
  4065c2:	600b      	str	r3, [r1, #0]
  4065c4:	dc14      	bgt.n	4065f0 <__b2d+0x4c>
  4065c6:	f1c0 0e0b 	rsb	lr, r0, #11
  4065ca:	fa24 f10e 	lsr.w	r1, r4, lr
  4065ce:	42be      	cmp	r6, r7
  4065d0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
  4065d4:	bf34      	ite	cc
  4065d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
  4065da:	2100      	movcs	r1, #0
  4065dc:	3015      	adds	r0, #21
  4065de:	fa04 f000 	lsl.w	r0, r4, r0
  4065e2:	fa21 f10e 	lsr.w	r1, r1, lr
  4065e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  4065ea:	ea40 0201 	orr.w	r2, r0, r1
  4065ee:	e023      	b.n	406638 <__b2d+0x94>
  4065f0:	42be      	cmp	r6, r7
  4065f2:	bf3a      	itte	cc
  4065f4:	f1a5 0708 	subcc.w	r7, r5, #8
  4065f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
  4065fc:	2100      	movcs	r1, #0
  4065fe:	380b      	subs	r0, #11
  406600:	d015      	beq.n	40662e <__b2d+0x8a>
  406602:	4084      	lsls	r4, r0
  406604:	f1c0 0520 	rsb	r5, r0, #32
  406608:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
  40660c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
  406610:	42b7      	cmp	r7, r6
  406612:	fa21 fe05 	lsr.w	lr, r1, r5
  406616:	ea44 030e 	orr.w	r3, r4, lr
  40661a:	bf8c      	ite	hi
  40661c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
  406620:	2400      	movls	r4, #0
  406622:	fa01 f000 	lsl.w	r0, r1, r0
  406626:	40ec      	lsrs	r4, r5
  406628:	ea40 0204 	orr.w	r2, r0, r4
  40662c:	e004      	b.n	406638 <__b2d+0x94>
  40662e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
  406632:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  406636:	460a      	mov	r2, r1
  406638:	4610      	mov	r0, r2
  40663a:	4619      	mov	r1, r3
  40663c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040663e <__d2b>:
  40663e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  406642:	2101      	movs	r1, #1
  406644:	461c      	mov	r4, r3
  406646:	4690      	mov	r8, r2
  406648:	9e08      	ldr	r6, [sp, #32]
  40664a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40664c:	f7ff fcc0 	bl	405fd0 <_Balloc>
  406650:	f3c4 0213 	ubfx	r2, r4, #0, #20
  406654:	f3c4 540a 	ubfx	r4, r4, #20, #11
  406658:	4607      	mov	r7, r0
  40665a:	b10c      	cbz	r4, 406660 <__d2b+0x22>
  40665c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  406660:	9201      	str	r2, [sp, #4]
  406662:	f1b8 0f00 	cmp.w	r8, #0
  406666:	d019      	beq.n	40669c <__d2b+0x5e>
  406668:	a802      	add	r0, sp, #8
  40666a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40666e:	f7ff fd94 	bl	40619a <__lo0bits>
  406672:	9b00      	ldr	r3, [sp, #0]
  406674:	b148      	cbz	r0, 40668a <__d2b+0x4c>
  406676:	9a01      	ldr	r2, [sp, #4]
  406678:	f1c0 0120 	rsb	r1, r0, #32
  40667c:	fa02 f101 	lsl.w	r1, r2, r1
  406680:	430b      	orrs	r3, r1
  406682:	40c2      	lsrs	r2, r0
  406684:	617b      	str	r3, [r7, #20]
  406686:	9201      	str	r2, [sp, #4]
  406688:	e000      	b.n	40668c <__d2b+0x4e>
  40668a:	617b      	str	r3, [r7, #20]
  40668c:	9b01      	ldr	r3, [sp, #4]
  40668e:	61bb      	str	r3, [r7, #24]
  406690:	2b00      	cmp	r3, #0
  406692:	bf14      	ite	ne
  406694:	2102      	movne	r1, #2
  406696:	2101      	moveq	r1, #1
  406698:	6139      	str	r1, [r7, #16]
  40669a:	e007      	b.n	4066ac <__d2b+0x6e>
  40669c:	a801      	add	r0, sp, #4
  40669e:	f7ff fd7c 	bl	40619a <__lo0bits>
  4066a2:	9b01      	ldr	r3, [sp, #4]
  4066a4:	617b      	str	r3, [r7, #20]
  4066a6:	2101      	movs	r1, #1
  4066a8:	6139      	str	r1, [r7, #16]
  4066aa:	3020      	adds	r0, #32
  4066ac:	b134      	cbz	r4, 4066bc <__d2b+0x7e>
  4066ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  4066b2:	4404      	add	r4, r0
  4066b4:	6034      	str	r4, [r6, #0]
  4066b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4066ba:	e009      	b.n	4066d0 <__d2b+0x92>
  4066bc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  4066c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4066c4:	6030      	str	r0, [r6, #0]
  4066c6:	6918      	ldr	r0, [r3, #16]
  4066c8:	f7ff fd47 	bl	40615a <__hi0bits>
  4066cc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4066d0:	6028      	str	r0, [r5, #0]
  4066d2:	4638      	mov	r0, r7
  4066d4:	b002      	add	sp, #8
  4066d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004066da <__ratio>:
  4066da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4066de:	4688      	mov	r8, r1
  4066e0:	4669      	mov	r1, sp
  4066e2:	4681      	mov	r9, r0
  4066e4:	f7ff ff5e 	bl	4065a4 <__b2d>
  4066e8:	460d      	mov	r5, r1
  4066ea:	4604      	mov	r4, r0
  4066ec:	a901      	add	r1, sp, #4
  4066ee:	4640      	mov	r0, r8
  4066f0:	f7ff ff58 	bl	4065a4 <__b2d>
  4066f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
  4066f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
  4066fc:	460f      	mov	r7, r1
  4066fe:	1a9a      	subs	r2, r3, r2
  406700:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406704:	1ac9      	subs	r1, r1, r3
  406706:	eb01 1342 	add.w	r3, r1, r2, lsl #5
  40670a:	2b00      	cmp	r3, #0
  40670c:	bfc8      	it	gt
  40670e:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
  406712:	4606      	mov	r6, r0
  406714:	bfd8      	it	le
  406716:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
  40671a:	4632      	mov	r2, r6
  40671c:	463b      	mov	r3, r7
  40671e:	4620      	mov	r0, r4
  406720:	4629      	mov	r1, r5
  406722:	f000 fdff 	bl	407324 <__aeabi_ddiv>
  406726:	b003      	add	sp, #12
  406728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0040672c <__copybits>:
  40672c:	3901      	subs	r1, #1
  40672e:	b510      	push	{r4, lr}
  406730:	1149      	asrs	r1, r1, #5
  406732:	6914      	ldr	r4, [r2, #16]
  406734:	3101      	adds	r1, #1
  406736:	f102 0314 	add.w	r3, r2, #20
  40673a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  40673e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  406742:	42a3      	cmp	r3, r4
  406744:	4602      	mov	r2, r0
  406746:	d204      	bcs.n	406752 <__copybits+0x26>
  406748:	f853 2b04 	ldr.w	r2, [r3], #4
  40674c:	f840 2b04 	str.w	r2, [r0], #4
  406750:	e7f7      	b.n	406742 <__copybits+0x16>
  406752:	2300      	movs	r3, #0
  406754:	428a      	cmp	r2, r1
  406756:	d202      	bcs.n	40675e <__copybits+0x32>
  406758:	f842 3b04 	str.w	r3, [r2], #4
  40675c:	e7fa      	b.n	406754 <__copybits+0x28>
  40675e:	bd10      	pop	{r4, pc}

00406760 <__any_on>:
  406760:	f100 0214 	add.w	r2, r0, #20
  406764:	6900      	ldr	r0, [r0, #16]
  406766:	114b      	asrs	r3, r1, #5
  406768:	4298      	cmp	r0, r3
  40676a:	b510      	push	{r4, lr}
  40676c:	db0c      	blt.n	406788 <__any_on+0x28>
  40676e:	dd0c      	ble.n	40678a <__any_on+0x2a>
  406770:	f011 011f 	ands.w	r1, r1, #31
  406774:	d009      	beq.n	40678a <__any_on+0x2a>
  406776:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
  40677a:	fa24 f001 	lsr.w	r0, r4, r1
  40677e:	fa00 f101 	lsl.w	r1, r0, r1
  406782:	428c      	cmp	r4, r1
  406784:	d10c      	bne.n	4067a0 <__any_on+0x40>
  406786:	e000      	b.n	40678a <__any_on+0x2a>
  406788:	4603      	mov	r3, r0
  40678a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40678e:	4293      	cmp	r3, r2
  406790:	d904      	bls.n	40679c <__any_on+0x3c>
  406792:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  406796:	2900      	cmp	r1, #0
  406798:	d0f9      	beq.n	40678e <__any_on+0x2e>
  40679a:	e001      	b.n	4067a0 <__any_on+0x40>
  40679c:	2000      	movs	r0, #0
  40679e:	bd10      	pop	{r4, pc}
  4067a0:	2001      	movs	r0, #1
  4067a2:	bd10      	pop	{r4, pc}

004067a4 <_calloc_r>:
  4067a4:	b538      	push	{r3, r4, r5, lr}
  4067a6:	fb02 f401 	mul.w	r4, r2, r1
  4067aa:	4621      	mov	r1, r4
  4067ac:	f000 f856 	bl	40685c <_malloc_r>
  4067b0:	4605      	mov	r5, r0
  4067b2:	b118      	cbz	r0, 4067bc <_calloc_r+0x18>
  4067b4:	4622      	mov	r2, r4
  4067b6:	2100      	movs	r1, #0
  4067b8:	f7fc faf1 	bl	402d9e <memset>
  4067bc:	4628      	mov	r0, r5
  4067be:	bd38      	pop	{r3, r4, r5, pc}

004067c0 <_free_r>:
  4067c0:	b538      	push	{r3, r4, r5, lr}
  4067c2:	4605      	mov	r5, r0
  4067c4:	2900      	cmp	r1, #0
  4067c6:	d046      	beq.n	406856 <_free_r+0x96>
  4067c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4067cc:	1f0c      	subs	r4, r1, #4
  4067ce:	2b00      	cmp	r3, #0
  4067d0:	bfb8      	it	lt
  4067d2:	18e4      	addlt	r4, r4, r3
  4067d4:	f000 fab0 	bl	406d38 <__malloc_lock>
  4067d8:	4a1f      	ldr	r2, [pc, #124]	; (406858 <_free_r+0x98>)
  4067da:	6813      	ldr	r3, [r2, #0]
  4067dc:	4611      	mov	r1, r2
  4067de:	b913      	cbnz	r3, 4067e6 <_free_r+0x26>
  4067e0:	6063      	str	r3, [r4, #4]
  4067e2:	6014      	str	r4, [r2, #0]
  4067e4:	e032      	b.n	40684c <_free_r+0x8c>
  4067e6:	42a3      	cmp	r3, r4
  4067e8:	d90e      	bls.n	406808 <_free_r+0x48>
  4067ea:	6822      	ldr	r2, [r4, #0]
  4067ec:	18a0      	adds	r0, r4, r2
  4067ee:	4283      	cmp	r3, r0
  4067f0:	bf04      	itt	eq
  4067f2:	6818      	ldreq	r0, [r3, #0]
  4067f4:	685b      	ldreq	r3, [r3, #4]
  4067f6:	6063      	str	r3, [r4, #4]
  4067f8:	bf04      	itt	eq
  4067fa:	1812      	addeq	r2, r2, r0
  4067fc:	6022      	streq	r2, [r4, #0]
  4067fe:	600c      	str	r4, [r1, #0]
  406800:	e024      	b.n	40684c <_free_r+0x8c>
  406802:	42a2      	cmp	r2, r4
  406804:	d803      	bhi.n	40680e <_free_r+0x4e>
  406806:	4613      	mov	r3, r2
  406808:	685a      	ldr	r2, [r3, #4]
  40680a:	2a00      	cmp	r2, #0
  40680c:	d1f9      	bne.n	406802 <_free_r+0x42>
  40680e:	6818      	ldr	r0, [r3, #0]
  406810:	1819      	adds	r1, r3, r0
  406812:	42a1      	cmp	r1, r4
  406814:	d10b      	bne.n	40682e <_free_r+0x6e>
  406816:	6821      	ldr	r1, [r4, #0]
  406818:	4401      	add	r1, r0
  40681a:	1858      	adds	r0, r3, r1
  40681c:	4282      	cmp	r2, r0
  40681e:	6019      	str	r1, [r3, #0]
  406820:	d114      	bne.n	40684c <_free_r+0x8c>
  406822:	6810      	ldr	r0, [r2, #0]
  406824:	6852      	ldr	r2, [r2, #4]
  406826:	605a      	str	r2, [r3, #4]
  406828:	4401      	add	r1, r0
  40682a:	6019      	str	r1, [r3, #0]
  40682c:	e00e      	b.n	40684c <_free_r+0x8c>
  40682e:	d902      	bls.n	406836 <_free_r+0x76>
  406830:	230c      	movs	r3, #12
  406832:	602b      	str	r3, [r5, #0]
  406834:	e00a      	b.n	40684c <_free_r+0x8c>
  406836:	6821      	ldr	r1, [r4, #0]
  406838:	1860      	adds	r0, r4, r1
  40683a:	4282      	cmp	r2, r0
  40683c:	bf04      	itt	eq
  40683e:	6810      	ldreq	r0, [r2, #0]
  406840:	6852      	ldreq	r2, [r2, #4]
  406842:	6062      	str	r2, [r4, #4]
  406844:	bf04      	itt	eq
  406846:	1809      	addeq	r1, r1, r0
  406848:	6021      	streq	r1, [r4, #0]
  40684a:	605c      	str	r4, [r3, #4]
  40684c:	4628      	mov	r0, r5
  40684e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406852:	f000 ba72 	b.w	406d3a <__malloc_unlock>
  406856:	bd38      	pop	{r3, r4, r5, pc}
  406858:	200004f4 	.word	0x200004f4

0040685c <_malloc_r>:
  40685c:	b570      	push	{r4, r5, r6, lr}
  40685e:	1ccd      	adds	r5, r1, #3
  406860:	f025 0503 	bic.w	r5, r5, #3
  406864:	3508      	adds	r5, #8
  406866:	2d0c      	cmp	r5, #12
  406868:	bf38      	it	cc
  40686a:	250c      	movcc	r5, #12
  40686c:	2d00      	cmp	r5, #0
  40686e:	4606      	mov	r6, r0
  406870:	db01      	blt.n	406876 <_malloc_r+0x1a>
  406872:	42a9      	cmp	r1, r5
  406874:	d902      	bls.n	40687c <_malloc_r+0x20>
  406876:	230c      	movs	r3, #12
  406878:	6033      	str	r3, [r6, #0]
  40687a:	e046      	b.n	40690a <_malloc_r+0xae>
  40687c:	f000 fa5c 	bl	406d38 <__malloc_lock>
  406880:	4b23      	ldr	r3, [pc, #140]	; (406910 <_malloc_r+0xb4>)
  406882:	681c      	ldr	r4, [r3, #0]
  406884:	461a      	mov	r2, r3
  406886:	4621      	mov	r1, r4
  406888:	b1a1      	cbz	r1, 4068b4 <_malloc_r+0x58>
  40688a:	680b      	ldr	r3, [r1, #0]
  40688c:	1b5b      	subs	r3, r3, r5
  40688e:	d40e      	bmi.n	4068ae <_malloc_r+0x52>
  406890:	2b0b      	cmp	r3, #11
  406892:	d903      	bls.n	40689c <_malloc_r+0x40>
  406894:	600b      	str	r3, [r1, #0]
  406896:	18cc      	adds	r4, r1, r3
  406898:	50cd      	str	r5, [r1, r3]
  40689a:	e01e      	b.n	4068da <_malloc_r+0x7e>
  40689c:	428c      	cmp	r4, r1
  40689e:	bf0d      	iteet	eq
  4068a0:	6863      	ldreq	r3, [r4, #4]
  4068a2:	684b      	ldrne	r3, [r1, #4]
  4068a4:	6063      	strne	r3, [r4, #4]
  4068a6:	6013      	streq	r3, [r2, #0]
  4068a8:	bf18      	it	ne
  4068aa:	460c      	movne	r4, r1
  4068ac:	e015      	b.n	4068da <_malloc_r+0x7e>
  4068ae:	460c      	mov	r4, r1
  4068b0:	6849      	ldr	r1, [r1, #4]
  4068b2:	e7e9      	b.n	406888 <_malloc_r+0x2c>
  4068b4:	4c17      	ldr	r4, [pc, #92]	; (406914 <_malloc_r+0xb8>)
  4068b6:	6823      	ldr	r3, [r4, #0]
  4068b8:	b91b      	cbnz	r3, 4068c2 <_malloc_r+0x66>
  4068ba:	4630      	mov	r0, r6
  4068bc:	f000 f970 	bl	406ba0 <_sbrk_r>
  4068c0:	6020      	str	r0, [r4, #0]
  4068c2:	4629      	mov	r1, r5
  4068c4:	4630      	mov	r0, r6
  4068c6:	f000 f96b 	bl	406ba0 <_sbrk_r>
  4068ca:	1c43      	adds	r3, r0, #1
  4068cc:	d018      	beq.n	406900 <_malloc_r+0xa4>
  4068ce:	1cc4      	adds	r4, r0, #3
  4068d0:	f024 0403 	bic.w	r4, r4, #3
  4068d4:	42a0      	cmp	r0, r4
  4068d6:	d10d      	bne.n	4068f4 <_malloc_r+0x98>
  4068d8:	6025      	str	r5, [r4, #0]
  4068da:	4630      	mov	r0, r6
  4068dc:	f000 fa2d 	bl	406d3a <__malloc_unlock>
  4068e0:	f104 000b 	add.w	r0, r4, #11
  4068e4:	1d23      	adds	r3, r4, #4
  4068e6:	f020 0007 	bic.w	r0, r0, #7
  4068ea:	1ac3      	subs	r3, r0, r3
  4068ec:	d00e      	beq.n	40690c <_malloc_r+0xb0>
  4068ee:	425a      	negs	r2, r3
  4068f0:	50e2      	str	r2, [r4, r3]
  4068f2:	bd70      	pop	{r4, r5, r6, pc}
  4068f4:	1a21      	subs	r1, r4, r0
  4068f6:	4630      	mov	r0, r6
  4068f8:	f000 f952 	bl	406ba0 <_sbrk_r>
  4068fc:	3001      	adds	r0, #1
  4068fe:	d1eb      	bne.n	4068d8 <_malloc_r+0x7c>
  406900:	230c      	movs	r3, #12
  406902:	6033      	str	r3, [r6, #0]
  406904:	4630      	mov	r0, r6
  406906:	f000 fa18 	bl	406d3a <__malloc_unlock>
  40690a:	2000      	movs	r0, #0
  40690c:	bd70      	pop	{r4, r5, r6, pc}
  40690e:	bf00      	nop
  406910:	200004f4 	.word	0x200004f4
  406914:	200004f0 	.word	0x200004f0

00406918 <__sfputc_r>:
  406918:	6893      	ldr	r3, [r2, #8]
  40691a:	3b01      	subs	r3, #1
  40691c:	2b00      	cmp	r3, #0
  40691e:	b410      	push	{r4}
  406920:	6093      	str	r3, [r2, #8]
  406922:	da08      	bge.n	406936 <__sfputc_r+0x1e>
  406924:	6994      	ldr	r4, [r2, #24]
  406926:	42a3      	cmp	r3, r4
  406928:	db02      	blt.n	406930 <__sfputc_r+0x18>
  40692a:	b2cb      	uxtb	r3, r1
  40692c:	2b0a      	cmp	r3, #10
  40692e:	d102      	bne.n	406936 <__sfputc_r+0x1e>
  406930:	bc10      	pop	{r4}
  406932:	f7fd bee7 	b.w	404704 <__swbuf_r>
  406936:	6813      	ldr	r3, [r2, #0]
  406938:	1c58      	adds	r0, r3, #1
  40693a:	6010      	str	r0, [r2, #0]
  40693c:	7019      	strb	r1, [r3, #0]
  40693e:	b2c8      	uxtb	r0, r1
  406940:	bc10      	pop	{r4}
  406942:	4770      	bx	lr

00406944 <__sfputs_r>:
  406944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406946:	4606      	mov	r6, r0
  406948:	460f      	mov	r7, r1
  40694a:	4614      	mov	r4, r2
  40694c:	18d5      	adds	r5, r2, r3
  40694e:	42ac      	cmp	r4, r5
  406950:	d008      	beq.n	406964 <__sfputs_r+0x20>
  406952:	463a      	mov	r2, r7
  406954:	f814 1b01 	ldrb.w	r1, [r4], #1
  406958:	4630      	mov	r0, r6
  40695a:	f7ff ffdd 	bl	406918 <__sfputc_r>
  40695e:	1c43      	adds	r3, r0, #1
  406960:	d1f5      	bne.n	40694e <__sfputs_r+0xa>
  406962:	e000      	b.n	406966 <__sfputs_r+0x22>
  406964:	2000      	movs	r0, #0
  406966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00406968 <_vfiprintf_r>:
  406968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40696c:	b09d      	sub	sp, #116	; 0x74
  40696e:	460c      	mov	r4, r1
  406970:	4617      	mov	r7, r2
  406972:	9303      	str	r3, [sp, #12]
  406974:	4606      	mov	r6, r0
  406976:	b118      	cbz	r0, 406980 <_vfiprintf_r+0x18>
  406978:	6983      	ldr	r3, [r0, #24]
  40697a:	b90b      	cbnz	r3, 406980 <_vfiprintf_r+0x18>
  40697c:	f7fe fea2 	bl	4056c4 <__sinit>
  406980:	4b7f      	ldr	r3, [pc, #508]	; (406b80 <_vfiprintf_r+0x218>)
  406982:	429c      	cmp	r4, r3
  406984:	d101      	bne.n	40698a <_vfiprintf_r+0x22>
  406986:	6874      	ldr	r4, [r6, #4]
  406988:	e008      	b.n	40699c <_vfiprintf_r+0x34>
  40698a:	4b7e      	ldr	r3, [pc, #504]	; (406b84 <_vfiprintf_r+0x21c>)
  40698c:	429c      	cmp	r4, r3
  40698e:	d101      	bne.n	406994 <_vfiprintf_r+0x2c>
  406990:	68b4      	ldr	r4, [r6, #8]
  406992:	e003      	b.n	40699c <_vfiprintf_r+0x34>
  406994:	4b7c      	ldr	r3, [pc, #496]	; (406b88 <_vfiprintf_r+0x220>)
  406996:	429c      	cmp	r4, r3
  406998:	bf08      	it	eq
  40699a:	68f4      	ldreq	r4, [r6, #12]
  40699c:	89a3      	ldrh	r3, [r4, #12]
  40699e:	0718      	lsls	r0, r3, #28
  4069a0:	d50c      	bpl.n	4069bc <_vfiprintf_r+0x54>
  4069a2:	6923      	ldr	r3, [r4, #16]
  4069a4:	b153      	cbz	r3, 4069bc <_vfiprintf_r+0x54>
  4069a6:	2300      	movs	r3, #0
  4069a8:	9309      	str	r3, [sp, #36]	; 0x24
  4069aa:	2320      	movs	r3, #32
  4069ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  4069b0:	2330      	movs	r3, #48	; 0x30
  4069b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4069b6:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 406b8c <_vfiprintf_r+0x224>
  4069ba:	e044      	b.n	406a46 <_vfiprintf_r+0xde>
  4069bc:	4621      	mov	r1, r4
  4069be:	4630      	mov	r0, r6
  4069c0:	f7fd fef4 	bl	4047ac <__swsetup_r>
  4069c4:	2800      	cmp	r0, #0
  4069c6:	d0ee      	beq.n	4069a6 <_vfiprintf_r+0x3e>
  4069c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4069cc:	e0d5      	b.n	406b7a <_vfiprintf_r+0x212>
  4069ce:	9a03      	ldr	r2, [sp, #12]
  4069d0:	1d11      	adds	r1, r2, #4
  4069d2:	6812      	ldr	r2, [r2, #0]
  4069d4:	9103      	str	r1, [sp, #12]
  4069d6:	2a00      	cmp	r2, #0
  4069d8:	f280 808c 	bge.w	406af4 <_vfiprintf_r+0x18c>
  4069dc:	4252      	negs	r2, r2
  4069de:	f043 0002 	orr.w	r0, r3, #2
  4069e2:	9207      	str	r2, [sp, #28]
  4069e4:	9004      	str	r0, [sp, #16]
  4069e6:	f898 3000 	ldrb.w	r3, [r8]
  4069ea:	2b2e      	cmp	r3, #46	; 0x2e
  4069ec:	f000 8084 	beq.w	406af8 <_vfiprintf_r+0x190>
  4069f0:	2203      	movs	r2, #3
  4069f2:	f898 1000 	ldrb.w	r1, [r8]
  4069f6:	4865      	ldr	r0, [pc, #404]	; (406b8c <_vfiprintf_r+0x224>)
  4069f8:	f7ff fa9a 	bl	405f30 <memchr>
  4069fc:	b148      	cbz	r0, 406a12 <_vfiprintf_r+0xaa>
  4069fe:	2340      	movs	r3, #64	; 0x40
  406a00:	ebcb 0000 	rsb	r0, fp, r0
  406a04:	fa03 f000 	lsl.w	r0, r3, r0
  406a08:	9b04      	ldr	r3, [sp, #16]
  406a0a:	4318      	orrs	r0, r3
  406a0c:	9004      	str	r0, [sp, #16]
  406a0e:	f108 0801 	add.w	r8, r8, #1
  406a12:	f898 1000 	ldrb.w	r1, [r8]
  406a16:	485e      	ldr	r0, [pc, #376]	; (406b90 <_vfiprintf_r+0x228>)
  406a18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  406a1c:	2206      	movs	r2, #6
  406a1e:	f108 0701 	add.w	r7, r8, #1
  406a22:	f7ff fa85 	bl	405f30 <memchr>
  406a26:	2800      	cmp	r0, #0
  406a28:	f000 8095 	beq.w	406b56 <_vfiprintf_r+0x1ee>
  406a2c:	4b59      	ldr	r3, [pc, #356]	; (406b94 <_vfiprintf_r+0x22c>)
  406a2e:	2b00      	cmp	r3, #0
  406a30:	f040 8088 	bne.w	406b44 <_vfiprintf_r+0x1dc>
  406a34:	9b03      	ldr	r3, [sp, #12]
  406a36:	3307      	adds	r3, #7
  406a38:	f023 0307 	bic.w	r3, r3, #7
  406a3c:	3308      	adds	r3, #8
  406a3e:	9303      	str	r3, [sp, #12]
  406a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a42:	4453      	add	r3, sl
  406a44:	9309      	str	r3, [sp, #36]	; 0x24
  406a46:	46b8      	mov	r8, r7
  406a48:	4645      	mov	r5, r8
  406a4a:	f815 3b01 	ldrb.w	r3, [r5], #1
  406a4e:	b91b      	cbnz	r3, 406a58 <_vfiprintf_r+0xf0>
  406a50:	ebb8 0907 	subs.w	r9, r8, r7
  406a54:	d00f      	beq.n	406a76 <_vfiprintf_r+0x10e>
  406a56:	e003      	b.n	406a60 <_vfiprintf_r+0xf8>
  406a58:	2b25      	cmp	r3, #37	; 0x25
  406a5a:	d0f9      	beq.n	406a50 <_vfiprintf_r+0xe8>
  406a5c:	46a8      	mov	r8, r5
  406a5e:	e7f3      	b.n	406a48 <_vfiprintf_r+0xe0>
  406a60:	464b      	mov	r3, r9
  406a62:	463a      	mov	r2, r7
  406a64:	4621      	mov	r1, r4
  406a66:	4630      	mov	r0, r6
  406a68:	f7ff ff6c 	bl	406944 <__sfputs_r>
  406a6c:	3001      	adds	r0, #1
  406a6e:	d07f      	beq.n	406b70 <_vfiprintf_r+0x208>
  406a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a72:	444b      	add	r3, r9
  406a74:	9309      	str	r3, [sp, #36]	; 0x24
  406a76:	f898 3000 	ldrb.w	r3, [r8]
  406a7a:	2b00      	cmp	r3, #0
  406a7c:	d078      	beq.n	406b70 <_vfiprintf_r+0x208>
  406a7e:	2300      	movs	r3, #0
  406a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  406a84:	9304      	str	r3, [sp, #16]
  406a86:	9307      	str	r3, [sp, #28]
  406a88:	9205      	str	r2, [sp, #20]
  406a8a:	9306      	str	r3, [sp, #24]
  406a8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  406a90:	931a      	str	r3, [sp, #104]	; 0x68
  406a92:	2701      	movs	r7, #1
  406a94:	2205      	movs	r2, #5
  406a96:	7829      	ldrb	r1, [r5, #0]
  406a98:	483f      	ldr	r0, [pc, #252]	; (406b98 <_vfiprintf_r+0x230>)
  406a9a:	f7ff fa49 	bl	405f30 <memchr>
  406a9e:	f105 0801 	add.w	r8, r5, #1
  406aa2:	9b04      	ldr	r3, [sp, #16]
  406aa4:	b138      	cbz	r0, 406ab6 <_vfiprintf_r+0x14e>
  406aa6:	4a3c      	ldr	r2, [pc, #240]	; (406b98 <_vfiprintf_r+0x230>)
  406aa8:	1a80      	subs	r0, r0, r2
  406aaa:	fa07 f000 	lsl.w	r0, r7, r0
  406aae:	4318      	orrs	r0, r3
  406ab0:	9004      	str	r0, [sp, #16]
  406ab2:	4645      	mov	r5, r8
  406ab4:	e7ee      	b.n	406a94 <_vfiprintf_r+0x12c>
  406ab6:	06d9      	lsls	r1, r3, #27
  406ab8:	bf44      	itt	mi
  406aba:	2220      	movmi	r2, #32
  406abc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  406ac0:	071a      	lsls	r2, r3, #28
  406ac2:	bf44      	itt	mi
  406ac4:	222b      	movmi	r2, #43	; 0x2b
  406ac6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  406aca:	782a      	ldrb	r2, [r5, #0]
  406acc:	2a2a      	cmp	r2, #42	; 0x2a
  406ace:	f43f af7e 	beq.w	4069ce <_vfiprintf_r+0x66>
  406ad2:	9a07      	ldr	r2, [sp, #28]
  406ad4:	2100      	movs	r1, #0
  406ad6:	200a      	movs	r0, #10
  406ad8:	46a8      	mov	r8, r5
  406ada:	3501      	adds	r5, #1
  406adc:	f898 3000 	ldrb.w	r3, [r8]
  406ae0:	3b30      	subs	r3, #48	; 0x30
  406ae2:	2b09      	cmp	r3, #9
  406ae4:	d803      	bhi.n	406aee <_vfiprintf_r+0x186>
  406ae6:	fb00 3202 	mla	r2, r0, r2, r3
  406aea:	2101      	movs	r1, #1
  406aec:	e7f4      	b.n	406ad8 <_vfiprintf_r+0x170>
  406aee:	2900      	cmp	r1, #0
  406af0:	f43f af79 	beq.w	4069e6 <_vfiprintf_r+0x7e>
  406af4:	9207      	str	r2, [sp, #28]
  406af6:	e776      	b.n	4069e6 <_vfiprintf_r+0x7e>
  406af8:	f898 3001 	ldrb.w	r3, [r8, #1]
  406afc:	2b2a      	cmp	r3, #42	; 0x2a
  406afe:	d10b      	bne.n	406b18 <_vfiprintf_r+0x1b0>
  406b00:	9b03      	ldr	r3, [sp, #12]
  406b02:	1d1a      	adds	r2, r3, #4
  406b04:	681b      	ldr	r3, [r3, #0]
  406b06:	9203      	str	r2, [sp, #12]
  406b08:	2b00      	cmp	r3, #0
  406b0a:	bfb8      	it	lt
  406b0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  406b10:	f108 0802 	add.w	r8, r8, #2
  406b14:	9305      	str	r3, [sp, #20]
  406b16:	e76b      	b.n	4069f0 <_vfiprintf_r+0x88>
  406b18:	2300      	movs	r3, #0
  406b1a:	9305      	str	r3, [sp, #20]
  406b1c:	f108 0001 	add.w	r0, r8, #1
  406b20:	4619      	mov	r1, r3
  406b22:	250a      	movs	r5, #10
  406b24:	4680      	mov	r8, r0
  406b26:	3001      	adds	r0, #1
  406b28:	f898 2000 	ldrb.w	r2, [r8]
  406b2c:	3a30      	subs	r2, #48	; 0x30
  406b2e:	2a09      	cmp	r2, #9
  406b30:	d803      	bhi.n	406b3a <_vfiprintf_r+0x1d2>
  406b32:	fb05 2101 	mla	r1, r5, r1, r2
  406b36:	2301      	movs	r3, #1
  406b38:	e7f4      	b.n	406b24 <_vfiprintf_r+0x1bc>
  406b3a:	2b00      	cmp	r3, #0
  406b3c:	f43f af58 	beq.w	4069f0 <_vfiprintf_r+0x88>
  406b40:	9105      	str	r1, [sp, #20]
  406b42:	e755      	b.n	4069f0 <_vfiprintf_r+0x88>
  406b44:	ab03      	add	r3, sp, #12
  406b46:	9300      	str	r3, [sp, #0]
  406b48:	4622      	mov	r2, r4
  406b4a:	4b14      	ldr	r3, [pc, #80]	; (406b9c <_vfiprintf_r+0x234>)
  406b4c:	a904      	add	r1, sp, #16
  406b4e:	4630      	mov	r0, r6
  406b50:	f7fc f9bc 	bl	402ecc <_printf_float>
  406b54:	e007      	b.n	406b66 <_vfiprintf_r+0x1fe>
  406b56:	ab03      	add	r3, sp, #12
  406b58:	9300      	str	r3, [sp, #0]
  406b5a:	4622      	mov	r2, r4
  406b5c:	4b0f      	ldr	r3, [pc, #60]	; (406b9c <_vfiprintf_r+0x234>)
  406b5e:	a904      	add	r1, sp, #16
  406b60:	4630      	mov	r0, r6
  406b62:	f7fc fc6d 	bl	403440 <_printf_i>
  406b66:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  406b6a:	4682      	mov	sl, r0
  406b6c:	f47f af68 	bne.w	406a40 <_vfiprintf_r+0xd8>
  406b70:	89a3      	ldrh	r3, [r4, #12]
  406b72:	065b      	lsls	r3, r3, #25
  406b74:	f53f af28 	bmi.w	4069c8 <_vfiprintf_r+0x60>
  406b78:	9809      	ldr	r0, [sp, #36]	; 0x24
  406b7a:	b01d      	add	sp, #116	; 0x74
  406b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b80:	00408290 	.word	0x00408290
  406b84:	004082b0 	.word	0x004082b0
  406b88:	004082d0 	.word	0x004082d0
  406b8c:	00408402 	.word	0x00408402
  406b90:	00408406 	.word	0x00408406
  406b94:	00402ecd 	.word	0x00402ecd
  406b98:	004083fc 	.word	0x004083fc
  406b9c:	00406945 	.word	0x00406945

00406ba0 <_sbrk_r>:
  406ba0:	b538      	push	{r3, r4, r5, lr}
  406ba2:	4c06      	ldr	r4, [pc, #24]	; (406bbc <_sbrk_r+0x1c>)
  406ba4:	2300      	movs	r3, #0
  406ba6:	4605      	mov	r5, r0
  406ba8:	4608      	mov	r0, r1
  406baa:	6023      	str	r3, [r4, #0]
  406bac:	f7fb fd02 	bl	4025b4 <_sbrk>
  406bb0:	1c43      	adds	r3, r0, #1
  406bb2:	d102      	bne.n	406bba <_sbrk_r+0x1a>
  406bb4:	6823      	ldr	r3, [r4, #0]
  406bb6:	b103      	cbz	r3, 406bba <_sbrk_r+0x1a>
  406bb8:	602b      	str	r3, [r5, #0]
  406bba:	bd38      	pop	{r3, r4, r5, pc}
  406bbc:	20000870 	.word	0x20000870

00406bc0 <__sread>:
  406bc0:	b510      	push	{r4, lr}
  406bc2:	460c      	mov	r4, r1
  406bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406bc8:	f000 f8b8 	bl	406d3c <_read_r>
  406bcc:	2800      	cmp	r0, #0
  406bce:	bfab      	itete	ge
  406bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  406bd2:	89a3      	ldrhlt	r3, [r4, #12]
  406bd4:	181b      	addge	r3, r3, r0
  406bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  406bda:	bfac      	ite	ge
  406bdc:	6563      	strge	r3, [r4, #84]	; 0x54
  406bde:	81a3      	strhlt	r3, [r4, #12]
  406be0:	bd10      	pop	{r4, pc}

00406be2 <__swrite>:
  406be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406be6:	461f      	mov	r7, r3
  406be8:	898b      	ldrh	r3, [r1, #12]
  406bea:	05db      	lsls	r3, r3, #23
  406bec:	4605      	mov	r5, r0
  406bee:	460c      	mov	r4, r1
  406bf0:	4616      	mov	r6, r2
  406bf2:	d505      	bpl.n	406c00 <__swrite+0x1e>
  406bf4:	2302      	movs	r3, #2
  406bf6:	2200      	movs	r2, #0
  406bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406bfc:	f000 f88a 	bl	406d14 <_lseek_r>
  406c00:	89a3      	ldrh	r3, [r4, #12]
  406c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406c0a:	81a3      	strh	r3, [r4, #12]
  406c0c:	4632      	mov	r2, r6
  406c0e:	463b      	mov	r3, r7
  406c10:	4628      	mov	r0, r5
  406c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406c16:	f000 b839 	b.w	406c8c <_write_r>

00406c1a <__sseek>:
  406c1a:	b510      	push	{r4, lr}
  406c1c:	460c      	mov	r4, r1
  406c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406c22:	f000 f877 	bl	406d14 <_lseek_r>
  406c26:	1c43      	adds	r3, r0, #1
  406c28:	89a3      	ldrh	r3, [r4, #12]
  406c2a:	bf15      	itete	ne
  406c2c:	6560      	strne	r0, [r4, #84]	; 0x54
  406c2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406c32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406c36:	81a3      	strheq	r3, [r4, #12]
  406c38:	bf18      	it	ne
  406c3a:	81a3      	strhne	r3, [r4, #12]
  406c3c:	bd10      	pop	{r4, pc}

00406c3e <__sclose>:
  406c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406c42:	f000 b835 	b.w	406cb0 <_close_r>

00406c46 <strncmp>:
  406c46:	b530      	push	{r4, r5, lr}
  406c48:	b182      	cbz	r2, 406c6c <strncmp+0x26>
  406c4a:	1e45      	subs	r5, r0, #1
  406c4c:	3901      	subs	r1, #1
  406c4e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  406c52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  406c56:	42a3      	cmp	r3, r4
  406c58:	d106      	bne.n	406c68 <strncmp+0x22>
  406c5a:	43ec      	mvns	r4, r5
  406c5c:	4414      	add	r4, r2
  406c5e:	42e0      	cmn	r0, r4
  406c60:	d001      	beq.n	406c66 <strncmp+0x20>
  406c62:	2b00      	cmp	r3, #0
  406c64:	d1f3      	bne.n	406c4e <strncmp+0x8>
  406c66:	461c      	mov	r4, r3
  406c68:	1b18      	subs	r0, r3, r4
  406c6a:	bd30      	pop	{r4, r5, pc}
  406c6c:	4610      	mov	r0, r2
  406c6e:	bd30      	pop	{r4, r5, pc}

00406c70 <__ascii_wctomb>:
  406c70:	b149      	cbz	r1, 406c86 <__ascii_wctomb+0x16>
  406c72:	2aff      	cmp	r2, #255	; 0xff
  406c74:	bf85      	ittet	hi
  406c76:	238a      	movhi	r3, #138	; 0x8a
  406c78:	6003      	strhi	r3, [r0, #0]
  406c7a:	700a      	strbls	r2, [r1, #0]
  406c7c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  406c80:	bf98      	it	ls
  406c82:	2001      	movls	r0, #1
  406c84:	4770      	bx	lr
  406c86:	4608      	mov	r0, r1
  406c88:	4770      	bx	lr
	...

00406c8c <_write_r>:
  406c8c:	b538      	push	{r3, r4, r5, lr}
  406c8e:	4c07      	ldr	r4, [pc, #28]	; (406cac <_write_r+0x20>)
  406c90:	4605      	mov	r5, r0
  406c92:	4608      	mov	r0, r1
  406c94:	4611      	mov	r1, r2
  406c96:	2200      	movs	r2, #0
  406c98:	6022      	str	r2, [r4, #0]
  406c9a:	461a      	mov	r2, r3
  406c9c:	f7f9 fa86 	bl	4001ac <_write>
  406ca0:	1c43      	adds	r3, r0, #1
  406ca2:	d102      	bne.n	406caa <_write_r+0x1e>
  406ca4:	6823      	ldr	r3, [r4, #0]
  406ca6:	b103      	cbz	r3, 406caa <_write_r+0x1e>
  406ca8:	602b      	str	r3, [r5, #0]
  406caa:	bd38      	pop	{r3, r4, r5, pc}
  406cac:	20000870 	.word	0x20000870

00406cb0 <_close_r>:
  406cb0:	b538      	push	{r3, r4, r5, lr}
  406cb2:	4c06      	ldr	r4, [pc, #24]	; (406ccc <_close_r+0x1c>)
  406cb4:	2300      	movs	r3, #0
  406cb6:	4605      	mov	r5, r0
  406cb8:	4608      	mov	r0, r1
  406cba:	6023      	str	r3, [r4, #0]
  406cbc:	f7fb fc94 	bl	4025e8 <_close>
  406cc0:	1c43      	adds	r3, r0, #1
  406cc2:	d102      	bne.n	406cca <_close_r+0x1a>
  406cc4:	6823      	ldr	r3, [r4, #0]
  406cc6:	b103      	cbz	r3, 406cca <_close_r+0x1a>
  406cc8:	602b      	str	r3, [r5, #0]
  406cca:	bd38      	pop	{r3, r4, r5, pc}
  406ccc:	20000870 	.word	0x20000870

00406cd0 <_fstat_r>:
  406cd0:	b538      	push	{r3, r4, r5, lr}
  406cd2:	4c07      	ldr	r4, [pc, #28]	; (406cf0 <_fstat_r+0x20>)
  406cd4:	2300      	movs	r3, #0
  406cd6:	4605      	mov	r5, r0
  406cd8:	4608      	mov	r0, r1
  406cda:	4611      	mov	r1, r2
  406cdc:	6023      	str	r3, [r4, #0]
  406cde:	f7fb fc87 	bl	4025f0 <_fstat>
  406ce2:	1c43      	adds	r3, r0, #1
  406ce4:	d102      	bne.n	406cec <_fstat_r+0x1c>
  406ce6:	6823      	ldr	r3, [r4, #0]
  406ce8:	b103      	cbz	r3, 406cec <_fstat_r+0x1c>
  406cea:	602b      	str	r3, [r5, #0]
  406cec:	bd38      	pop	{r3, r4, r5, pc}
  406cee:	bf00      	nop
  406cf0:	20000870 	.word	0x20000870

00406cf4 <_isatty_r>:
  406cf4:	b538      	push	{r3, r4, r5, lr}
  406cf6:	4c06      	ldr	r4, [pc, #24]	; (406d10 <_isatty_r+0x1c>)
  406cf8:	2300      	movs	r3, #0
  406cfa:	4605      	mov	r5, r0
  406cfc:	4608      	mov	r0, r1
  406cfe:	6023      	str	r3, [r4, #0]
  406d00:	f7fb fc7c 	bl	4025fc <_isatty>
  406d04:	1c43      	adds	r3, r0, #1
  406d06:	d102      	bne.n	406d0e <_isatty_r+0x1a>
  406d08:	6823      	ldr	r3, [r4, #0]
  406d0a:	b103      	cbz	r3, 406d0e <_isatty_r+0x1a>
  406d0c:	602b      	str	r3, [r5, #0]
  406d0e:	bd38      	pop	{r3, r4, r5, pc}
  406d10:	20000870 	.word	0x20000870

00406d14 <_lseek_r>:
  406d14:	b538      	push	{r3, r4, r5, lr}
  406d16:	4c07      	ldr	r4, [pc, #28]	; (406d34 <_lseek_r+0x20>)
  406d18:	4605      	mov	r5, r0
  406d1a:	4608      	mov	r0, r1
  406d1c:	4611      	mov	r1, r2
  406d1e:	2200      	movs	r2, #0
  406d20:	6022      	str	r2, [r4, #0]
  406d22:	461a      	mov	r2, r3
  406d24:	f7fb fc6c 	bl	402600 <_lseek>
  406d28:	1c43      	adds	r3, r0, #1
  406d2a:	d102      	bne.n	406d32 <_lseek_r+0x1e>
  406d2c:	6823      	ldr	r3, [r4, #0]
  406d2e:	b103      	cbz	r3, 406d32 <_lseek_r+0x1e>
  406d30:	602b      	str	r3, [r5, #0]
  406d32:	bd38      	pop	{r3, r4, r5, pc}
  406d34:	20000870 	.word	0x20000870

00406d38 <__malloc_lock>:
  406d38:	4770      	bx	lr

00406d3a <__malloc_unlock>:
  406d3a:	4770      	bx	lr

00406d3c <_read_r>:
  406d3c:	b538      	push	{r3, r4, r5, lr}
  406d3e:	4c07      	ldr	r4, [pc, #28]	; (406d5c <_read_r+0x20>)
  406d40:	4605      	mov	r5, r0
  406d42:	4608      	mov	r0, r1
  406d44:	4611      	mov	r1, r2
  406d46:	2200      	movs	r2, #0
  406d48:	6022      	str	r2, [r4, #0]
  406d4a:	461a      	mov	r2, r3
  406d4c:	f7f9 fa10 	bl	400170 <_read>
  406d50:	1c43      	adds	r3, r0, #1
  406d52:	d102      	bne.n	406d5a <_read_r+0x1e>
  406d54:	6823      	ldr	r3, [r4, #0]
  406d56:	b103      	cbz	r3, 406d5a <_read_r+0x1e>
  406d58:	602b      	str	r3, [r5, #0]
  406d5a:	bd38      	pop	{r3, r4, r5, pc}
  406d5c:	20000870 	.word	0x20000870

00406d60 <__aeabi_drsub>:
  406d60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406d64:	e002      	b.n	406d6c <__adddf3>
  406d66:	bf00      	nop

00406d68 <__aeabi_dsub>:
  406d68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406d6c <__adddf3>:
  406d6c:	b530      	push	{r4, r5, lr}
  406d6e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  406d72:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406d76:	ea94 0f05 	teq	r4, r5
  406d7a:	bf08      	it	eq
  406d7c:	ea90 0f02 	teqeq	r0, r2
  406d80:	bf1f      	itttt	ne
  406d82:	ea54 0c00 	orrsne.w	ip, r4, r0
  406d86:	ea55 0c02 	orrsne.w	ip, r5, r2
  406d8a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  406d8e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406d92:	f000 80e2 	beq.w	406f5a <__adddf3+0x1ee>
  406d96:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406d9a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406d9e:	bfb8      	it	lt
  406da0:	426d      	neglt	r5, r5
  406da2:	dd0c      	ble.n	406dbe <__adddf3+0x52>
  406da4:	442c      	add	r4, r5
  406da6:	ea80 0202 	eor.w	r2, r0, r2
  406daa:	ea81 0303 	eor.w	r3, r1, r3
  406dae:	ea82 0000 	eor.w	r0, r2, r0
  406db2:	ea83 0101 	eor.w	r1, r3, r1
  406db6:	ea80 0202 	eor.w	r2, r0, r2
  406dba:	ea81 0303 	eor.w	r3, r1, r3
  406dbe:	2d36      	cmp	r5, #54	; 0x36
  406dc0:	bf88      	it	hi
  406dc2:	bd30      	pophi	{r4, r5, pc}
  406dc4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406dc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406dcc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406dd0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406dd4:	d002      	beq.n	406ddc <__adddf3+0x70>
  406dd6:	4240      	negs	r0, r0
  406dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406ddc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406de0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406de4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406de8:	d002      	beq.n	406df0 <__adddf3+0x84>
  406dea:	4252      	negs	r2, r2
  406dec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406df0:	ea94 0f05 	teq	r4, r5
  406df4:	f000 80a7 	beq.w	406f46 <__adddf3+0x1da>
  406df8:	f1a4 0401 	sub.w	r4, r4, #1
  406dfc:	f1d5 0e20 	rsbs	lr, r5, #32
  406e00:	db0d      	blt.n	406e1e <__adddf3+0xb2>
  406e02:	fa02 fc0e 	lsl.w	ip, r2, lr
  406e06:	fa22 f205 	lsr.w	r2, r2, r5
  406e0a:	1880      	adds	r0, r0, r2
  406e0c:	f141 0100 	adc.w	r1, r1, #0
  406e10:	fa03 f20e 	lsl.w	r2, r3, lr
  406e14:	1880      	adds	r0, r0, r2
  406e16:	fa43 f305 	asr.w	r3, r3, r5
  406e1a:	4159      	adcs	r1, r3
  406e1c:	e00e      	b.n	406e3c <__adddf3+0xd0>
  406e1e:	f1a5 0520 	sub.w	r5, r5, #32
  406e22:	f10e 0e20 	add.w	lr, lr, #32
  406e26:	2a01      	cmp	r2, #1
  406e28:	fa03 fc0e 	lsl.w	ip, r3, lr
  406e2c:	bf28      	it	cs
  406e2e:	f04c 0c02 	orrcs.w	ip, ip, #2
  406e32:	fa43 f305 	asr.w	r3, r3, r5
  406e36:	18c0      	adds	r0, r0, r3
  406e38:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406e3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406e40:	d507      	bpl.n	406e52 <__adddf3+0xe6>
  406e42:	f04f 0e00 	mov.w	lr, #0
  406e46:	f1dc 0c00 	rsbs	ip, ip, #0
  406e4a:	eb7e 0000 	sbcs.w	r0, lr, r0
  406e4e:	eb6e 0101 	sbc.w	r1, lr, r1
  406e52:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406e56:	d31b      	bcc.n	406e90 <__adddf3+0x124>
  406e58:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406e5c:	d30c      	bcc.n	406e78 <__adddf3+0x10c>
  406e5e:	0849      	lsrs	r1, r1, #1
  406e60:	ea5f 0030 	movs.w	r0, r0, rrx
  406e64:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406e68:	f104 0401 	add.w	r4, r4, #1
  406e6c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406e70:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406e74:	f080 809a 	bcs.w	406fac <__adddf3+0x240>
  406e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406e7c:	bf08      	it	eq
  406e7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406e82:	f150 0000 	adcs.w	r0, r0, #0
  406e86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406e8a:	ea41 0105 	orr.w	r1, r1, r5
  406e8e:	bd30      	pop	{r4, r5, pc}
  406e90:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406e94:	4140      	adcs	r0, r0
  406e96:	eb41 0101 	adc.w	r1, r1, r1
  406e9a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406e9e:	f1a4 0401 	sub.w	r4, r4, #1
  406ea2:	d1e9      	bne.n	406e78 <__adddf3+0x10c>
  406ea4:	f091 0f00 	teq	r1, #0
  406ea8:	bf04      	itt	eq
  406eaa:	4601      	moveq	r1, r0
  406eac:	2000      	moveq	r0, #0
  406eae:	fab1 f381 	clz	r3, r1
  406eb2:	bf08      	it	eq
  406eb4:	3320      	addeq	r3, #32
  406eb6:	f1a3 030b 	sub.w	r3, r3, #11
  406eba:	f1b3 0220 	subs.w	r2, r3, #32
  406ebe:	da0c      	bge.n	406eda <__adddf3+0x16e>
  406ec0:	320c      	adds	r2, #12
  406ec2:	dd08      	ble.n	406ed6 <__adddf3+0x16a>
  406ec4:	f102 0c14 	add.w	ip, r2, #20
  406ec8:	f1c2 020c 	rsb	r2, r2, #12
  406ecc:	fa01 f00c 	lsl.w	r0, r1, ip
  406ed0:	fa21 f102 	lsr.w	r1, r1, r2
  406ed4:	e00c      	b.n	406ef0 <__adddf3+0x184>
  406ed6:	f102 0214 	add.w	r2, r2, #20
  406eda:	bfd8      	it	le
  406edc:	f1c2 0c20 	rsble	ip, r2, #32
  406ee0:	fa01 f102 	lsl.w	r1, r1, r2
  406ee4:	fa20 fc0c 	lsr.w	ip, r0, ip
  406ee8:	bfdc      	itt	le
  406eea:	ea41 010c 	orrle.w	r1, r1, ip
  406eee:	4090      	lslle	r0, r2
  406ef0:	1ae4      	subs	r4, r4, r3
  406ef2:	bfa2      	ittt	ge
  406ef4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406ef8:	4329      	orrge	r1, r5
  406efa:	bd30      	popge	{r4, r5, pc}
  406efc:	ea6f 0404 	mvn.w	r4, r4
  406f00:	3c1f      	subs	r4, #31
  406f02:	da1c      	bge.n	406f3e <__adddf3+0x1d2>
  406f04:	340c      	adds	r4, #12
  406f06:	dc0e      	bgt.n	406f26 <__adddf3+0x1ba>
  406f08:	f104 0414 	add.w	r4, r4, #20
  406f0c:	f1c4 0220 	rsb	r2, r4, #32
  406f10:	fa20 f004 	lsr.w	r0, r0, r4
  406f14:	fa01 f302 	lsl.w	r3, r1, r2
  406f18:	ea40 0003 	orr.w	r0, r0, r3
  406f1c:	fa21 f304 	lsr.w	r3, r1, r4
  406f20:	ea45 0103 	orr.w	r1, r5, r3
  406f24:	bd30      	pop	{r4, r5, pc}
  406f26:	f1c4 040c 	rsb	r4, r4, #12
  406f2a:	f1c4 0220 	rsb	r2, r4, #32
  406f2e:	fa20 f002 	lsr.w	r0, r0, r2
  406f32:	fa01 f304 	lsl.w	r3, r1, r4
  406f36:	ea40 0003 	orr.w	r0, r0, r3
  406f3a:	4629      	mov	r1, r5
  406f3c:	bd30      	pop	{r4, r5, pc}
  406f3e:	fa21 f004 	lsr.w	r0, r1, r4
  406f42:	4629      	mov	r1, r5
  406f44:	bd30      	pop	{r4, r5, pc}
  406f46:	f094 0f00 	teq	r4, #0
  406f4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  406f4e:	bf06      	itte	eq
  406f50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406f54:	3401      	addeq	r4, #1
  406f56:	3d01      	subne	r5, #1
  406f58:	e74e      	b.n	406df8 <__adddf3+0x8c>
  406f5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406f5e:	bf18      	it	ne
  406f60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406f64:	d029      	beq.n	406fba <__adddf3+0x24e>
  406f66:	ea94 0f05 	teq	r4, r5
  406f6a:	bf08      	it	eq
  406f6c:	ea90 0f02 	teqeq	r0, r2
  406f70:	d005      	beq.n	406f7e <__adddf3+0x212>
  406f72:	ea54 0c00 	orrs.w	ip, r4, r0
  406f76:	bf04      	itt	eq
  406f78:	4619      	moveq	r1, r3
  406f7a:	4610      	moveq	r0, r2
  406f7c:	bd30      	pop	{r4, r5, pc}
  406f7e:	ea91 0f03 	teq	r1, r3
  406f82:	bf1e      	ittt	ne
  406f84:	2100      	movne	r1, #0
  406f86:	2000      	movne	r0, #0
  406f88:	bd30      	popne	{r4, r5, pc}
  406f8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  406f8e:	d105      	bne.n	406f9c <__adddf3+0x230>
  406f90:	0040      	lsls	r0, r0, #1
  406f92:	4149      	adcs	r1, r1
  406f94:	bf28      	it	cs
  406f96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406f9a:	bd30      	pop	{r4, r5, pc}
  406f9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406fa0:	bf3c      	itt	cc
  406fa2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  406fa6:	bd30      	popcc	{r4, r5, pc}
  406fa8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406fac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406fb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406fb4:	f04f 0000 	mov.w	r0, #0
  406fb8:	bd30      	pop	{r4, r5, pc}
  406fba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406fbe:	bf1a      	itte	ne
  406fc0:	4619      	movne	r1, r3
  406fc2:	4610      	movne	r0, r2
  406fc4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  406fc8:	bf1c      	itt	ne
  406fca:	460b      	movne	r3, r1
  406fcc:	4602      	movne	r2, r0
  406fce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406fd2:	bf06      	itte	eq
  406fd4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  406fd8:	ea91 0f03 	teqeq	r1, r3
  406fdc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406fe0:	bd30      	pop	{r4, r5, pc}
  406fe2:	bf00      	nop

00406fe4 <__aeabi_ui2d>:
  406fe4:	f090 0f00 	teq	r0, #0
  406fe8:	bf04      	itt	eq
  406fea:	2100      	moveq	r1, #0
  406fec:	4770      	bxeq	lr
  406fee:	b530      	push	{r4, r5, lr}
  406ff0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406ff4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406ff8:	f04f 0500 	mov.w	r5, #0
  406ffc:	f04f 0100 	mov.w	r1, #0
  407000:	e750      	b.n	406ea4 <__adddf3+0x138>
  407002:	bf00      	nop

00407004 <__aeabi_i2d>:
  407004:	f090 0f00 	teq	r0, #0
  407008:	bf04      	itt	eq
  40700a:	2100      	moveq	r1, #0
  40700c:	4770      	bxeq	lr
  40700e:	b530      	push	{r4, r5, lr}
  407010:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407014:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407018:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40701c:	bf48      	it	mi
  40701e:	4240      	negmi	r0, r0
  407020:	f04f 0100 	mov.w	r1, #0
  407024:	e73e      	b.n	406ea4 <__adddf3+0x138>
  407026:	bf00      	nop

00407028 <__aeabi_f2d>:
  407028:	0042      	lsls	r2, r0, #1
  40702a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40702e:	ea4f 0131 	mov.w	r1, r1, rrx
  407032:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407036:	bf1f      	itttt	ne
  407038:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40703c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407040:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407044:	4770      	bxne	lr
  407046:	f092 0f00 	teq	r2, #0
  40704a:	bf14      	ite	ne
  40704c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407050:	4770      	bxeq	lr
  407052:	b530      	push	{r4, r5, lr}
  407054:	f44f 7460 	mov.w	r4, #896	; 0x380
  407058:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40705c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407060:	e720      	b.n	406ea4 <__adddf3+0x138>
  407062:	bf00      	nop

00407064 <__aeabi_ul2d>:
  407064:	ea50 0201 	orrs.w	r2, r0, r1
  407068:	bf08      	it	eq
  40706a:	4770      	bxeq	lr
  40706c:	b530      	push	{r4, r5, lr}
  40706e:	f04f 0500 	mov.w	r5, #0
  407072:	e00a      	b.n	40708a <__aeabi_l2d+0x16>

00407074 <__aeabi_l2d>:
  407074:	ea50 0201 	orrs.w	r2, r0, r1
  407078:	bf08      	it	eq
  40707a:	4770      	bxeq	lr
  40707c:	b530      	push	{r4, r5, lr}
  40707e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407082:	d502      	bpl.n	40708a <__aeabi_l2d+0x16>
  407084:	4240      	negs	r0, r0
  407086:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40708a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40708e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407092:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407096:	f43f aedc 	beq.w	406e52 <__adddf3+0xe6>
  40709a:	f04f 0203 	mov.w	r2, #3
  40709e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4070a2:	bf18      	it	ne
  4070a4:	3203      	addne	r2, #3
  4070a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4070aa:	bf18      	it	ne
  4070ac:	3203      	addne	r2, #3
  4070ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4070b2:	f1c2 0320 	rsb	r3, r2, #32
  4070b6:	fa00 fc03 	lsl.w	ip, r0, r3
  4070ba:	fa20 f002 	lsr.w	r0, r0, r2
  4070be:	fa01 fe03 	lsl.w	lr, r1, r3
  4070c2:	ea40 000e 	orr.w	r0, r0, lr
  4070c6:	fa21 f102 	lsr.w	r1, r1, r2
  4070ca:	4414      	add	r4, r2
  4070cc:	e6c1      	b.n	406e52 <__adddf3+0xe6>
  4070ce:	bf00      	nop

004070d0 <__aeabi_dmul>:
  4070d0:	b570      	push	{r4, r5, r6, lr}
  4070d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4070d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4070da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4070de:	bf1d      	ittte	ne
  4070e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4070e4:	ea94 0f0c 	teqne	r4, ip
  4070e8:	ea95 0f0c 	teqne	r5, ip
  4070ec:	f000 f8de 	bleq	4072ac <__aeabi_dmul+0x1dc>
  4070f0:	442c      	add	r4, r5
  4070f2:	ea81 0603 	eor.w	r6, r1, r3
  4070f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4070fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4070fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407102:	bf18      	it	ne
  407104:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407108:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40710c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407110:	d038      	beq.n	407184 <__aeabi_dmul+0xb4>
  407112:	fba0 ce02 	umull	ip, lr, r0, r2
  407116:	f04f 0500 	mov.w	r5, #0
  40711a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40711e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407122:	fbe0 e503 	umlal	lr, r5, r0, r3
  407126:	f04f 0600 	mov.w	r6, #0
  40712a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40712e:	f09c 0f00 	teq	ip, #0
  407132:	bf18      	it	ne
  407134:	f04e 0e01 	orrne.w	lr, lr, #1
  407138:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40713c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407140:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407144:	d204      	bcs.n	407150 <__aeabi_dmul+0x80>
  407146:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40714a:	416d      	adcs	r5, r5
  40714c:	eb46 0606 	adc.w	r6, r6, r6
  407150:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407154:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407158:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40715c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407160:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407164:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407168:	bf88      	it	hi
  40716a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40716e:	d81e      	bhi.n	4071ae <__aeabi_dmul+0xde>
  407170:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407174:	bf08      	it	eq
  407176:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40717a:	f150 0000 	adcs.w	r0, r0, #0
  40717e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407182:	bd70      	pop	{r4, r5, r6, pc}
  407184:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407188:	ea46 0101 	orr.w	r1, r6, r1
  40718c:	ea40 0002 	orr.w	r0, r0, r2
  407190:	ea81 0103 	eor.w	r1, r1, r3
  407194:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407198:	bfc2      	ittt	gt
  40719a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40719e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4071a2:	bd70      	popgt	{r4, r5, r6, pc}
  4071a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4071a8:	f04f 0e00 	mov.w	lr, #0
  4071ac:	3c01      	subs	r4, #1
  4071ae:	f300 80ab 	bgt.w	407308 <__aeabi_dmul+0x238>
  4071b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4071b6:	bfde      	ittt	le
  4071b8:	2000      	movle	r0, #0
  4071ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4071be:	bd70      	pople	{r4, r5, r6, pc}
  4071c0:	f1c4 0400 	rsb	r4, r4, #0
  4071c4:	3c20      	subs	r4, #32
  4071c6:	da35      	bge.n	407234 <__aeabi_dmul+0x164>
  4071c8:	340c      	adds	r4, #12
  4071ca:	dc1b      	bgt.n	407204 <__aeabi_dmul+0x134>
  4071cc:	f104 0414 	add.w	r4, r4, #20
  4071d0:	f1c4 0520 	rsb	r5, r4, #32
  4071d4:	fa00 f305 	lsl.w	r3, r0, r5
  4071d8:	fa20 f004 	lsr.w	r0, r0, r4
  4071dc:	fa01 f205 	lsl.w	r2, r1, r5
  4071e0:	ea40 0002 	orr.w	r0, r0, r2
  4071e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4071e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4071ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4071f0:	fa21 f604 	lsr.w	r6, r1, r4
  4071f4:	eb42 0106 	adc.w	r1, r2, r6
  4071f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4071fc:	bf08      	it	eq
  4071fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407202:	bd70      	pop	{r4, r5, r6, pc}
  407204:	f1c4 040c 	rsb	r4, r4, #12
  407208:	f1c4 0520 	rsb	r5, r4, #32
  40720c:	fa00 f304 	lsl.w	r3, r0, r4
  407210:	fa20 f005 	lsr.w	r0, r0, r5
  407214:	fa01 f204 	lsl.w	r2, r1, r4
  407218:	ea40 0002 	orr.w	r0, r0, r2
  40721c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407220:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407224:	f141 0100 	adc.w	r1, r1, #0
  407228:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40722c:	bf08      	it	eq
  40722e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407232:	bd70      	pop	{r4, r5, r6, pc}
  407234:	f1c4 0520 	rsb	r5, r4, #32
  407238:	fa00 f205 	lsl.w	r2, r0, r5
  40723c:	ea4e 0e02 	orr.w	lr, lr, r2
  407240:	fa20 f304 	lsr.w	r3, r0, r4
  407244:	fa01 f205 	lsl.w	r2, r1, r5
  407248:	ea43 0302 	orr.w	r3, r3, r2
  40724c:	fa21 f004 	lsr.w	r0, r1, r4
  407250:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407254:	fa21 f204 	lsr.w	r2, r1, r4
  407258:	ea20 0002 	bic.w	r0, r0, r2
  40725c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407260:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407264:	bf08      	it	eq
  407266:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40726a:	bd70      	pop	{r4, r5, r6, pc}
  40726c:	f094 0f00 	teq	r4, #0
  407270:	d10f      	bne.n	407292 <__aeabi_dmul+0x1c2>
  407272:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407276:	0040      	lsls	r0, r0, #1
  407278:	eb41 0101 	adc.w	r1, r1, r1
  40727c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407280:	bf08      	it	eq
  407282:	3c01      	subeq	r4, #1
  407284:	d0f7      	beq.n	407276 <__aeabi_dmul+0x1a6>
  407286:	ea41 0106 	orr.w	r1, r1, r6
  40728a:	f095 0f00 	teq	r5, #0
  40728e:	bf18      	it	ne
  407290:	4770      	bxne	lr
  407292:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407296:	0052      	lsls	r2, r2, #1
  407298:	eb43 0303 	adc.w	r3, r3, r3
  40729c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4072a0:	bf08      	it	eq
  4072a2:	3d01      	subeq	r5, #1
  4072a4:	d0f7      	beq.n	407296 <__aeabi_dmul+0x1c6>
  4072a6:	ea43 0306 	orr.w	r3, r3, r6
  4072aa:	4770      	bx	lr
  4072ac:	ea94 0f0c 	teq	r4, ip
  4072b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4072b4:	bf18      	it	ne
  4072b6:	ea95 0f0c 	teqne	r5, ip
  4072ba:	d00c      	beq.n	4072d6 <__aeabi_dmul+0x206>
  4072bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4072c0:	bf18      	it	ne
  4072c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4072c6:	d1d1      	bne.n	40726c <__aeabi_dmul+0x19c>
  4072c8:	ea81 0103 	eor.w	r1, r1, r3
  4072cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4072d0:	f04f 0000 	mov.w	r0, #0
  4072d4:	bd70      	pop	{r4, r5, r6, pc}
  4072d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4072da:	bf06      	itte	eq
  4072dc:	4610      	moveq	r0, r2
  4072de:	4619      	moveq	r1, r3
  4072e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4072e4:	d019      	beq.n	40731a <__aeabi_dmul+0x24a>
  4072e6:	ea94 0f0c 	teq	r4, ip
  4072ea:	d102      	bne.n	4072f2 <__aeabi_dmul+0x222>
  4072ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4072f0:	d113      	bne.n	40731a <__aeabi_dmul+0x24a>
  4072f2:	ea95 0f0c 	teq	r5, ip
  4072f6:	d105      	bne.n	407304 <__aeabi_dmul+0x234>
  4072f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4072fc:	bf1c      	itt	ne
  4072fe:	4610      	movne	r0, r2
  407300:	4619      	movne	r1, r3
  407302:	d10a      	bne.n	40731a <__aeabi_dmul+0x24a>
  407304:	ea81 0103 	eor.w	r1, r1, r3
  407308:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40730c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407310:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407314:	f04f 0000 	mov.w	r0, #0
  407318:	bd70      	pop	{r4, r5, r6, pc}
  40731a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40731e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407322:	bd70      	pop	{r4, r5, r6, pc}

00407324 <__aeabi_ddiv>:
  407324:	b570      	push	{r4, r5, r6, lr}
  407326:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40732a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40732e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407332:	bf1d      	ittte	ne
  407334:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407338:	ea94 0f0c 	teqne	r4, ip
  40733c:	ea95 0f0c 	teqne	r5, ip
  407340:	f000 f8a7 	bleq	407492 <__aeabi_ddiv+0x16e>
  407344:	eba4 0405 	sub.w	r4, r4, r5
  407348:	ea81 0e03 	eor.w	lr, r1, r3
  40734c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407350:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407354:	f000 8088 	beq.w	407468 <__aeabi_ddiv+0x144>
  407358:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40735c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407360:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407364:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407368:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40736c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407370:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407374:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407378:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40737c:	429d      	cmp	r5, r3
  40737e:	bf08      	it	eq
  407380:	4296      	cmpeq	r6, r2
  407382:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407386:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40738a:	d202      	bcs.n	407392 <__aeabi_ddiv+0x6e>
  40738c:	085b      	lsrs	r3, r3, #1
  40738e:	ea4f 0232 	mov.w	r2, r2, rrx
  407392:	1ab6      	subs	r6, r6, r2
  407394:	eb65 0503 	sbc.w	r5, r5, r3
  407398:	085b      	lsrs	r3, r3, #1
  40739a:	ea4f 0232 	mov.w	r2, r2, rrx
  40739e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4073a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4073a6:	ebb6 0e02 	subs.w	lr, r6, r2
  4073aa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4073ae:	bf22      	ittt	cs
  4073b0:	1ab6      	subcs	r6, r6, r2
  4073b2:	4675      	movcs	r5, lr
  4073b4:	ea40 000c 	orrcs.w	r0, r0, ip
  4073b8:	085b      	lsrs	r3, r3, #1
  4073ba:	ea4f 0232 	mov.w	r2, r2, rrx
  4073be:	ebb6 0e02 	subs.w	lr, r6, r2
  4073c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4073c6:	bf22      	ittt	cs
  4073c8:	1ab6      	subcs	r6, r6, r2
  4073ca:	4675      	movcs	r5, lr
  4073cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4073d0:	085b      	lsrs	r3, r3, #1
  4073d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4073d6:	ebb6 0e02 	subs.w	lr, r6, r2
  4073da:	eb75 0e03 	sbcs.w	lr, r5, r3
  4073de:	bf22      	ittt	cs
  4073e0:	1ab6      	subcs	r6, r6, r2
  4073e2:	4675      	movcs	r5, lr
  4073e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4073e8:	085b      	lsrs	r3, r3, #1
  4073ea:	ea4f 0232 	mov.w	r2, r2, rrx
  4073ee:	ebb6 0e02 	subs.w	lr, r6, r2
  4073f2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4073f6:	bf22      	ittt	cs
  4073f8:	1ab6      	subcs	r6, r6, r2
  4073fa:	4675      	movcs	r5, lr
  4073fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407400:	ea55 0e06 	orrs.w	lr, r5, r6
  407404:	d018      	beq.n	407438 <__aeabi_ddiv+0x114>
  407406:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40740a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40740e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407412:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407416:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40741a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40741e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407422:	d1c0      	bne.n	4073a6 <__aeabi_ddiv+0x82>
  407424:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407428:	d10b      	bne.n	407442 <__aeabi_ddiv+0x11e>
  40742a:	ea41 0100 	orr.w	r1, r1, r0
  40742e:	f04f 0000 	mov.w	r0, #0
  407432:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407436:	e7b6      	b.n	4073a6 <__aeabi_ddiv+0x82>
  407438:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40743c:	bf04      	itt	eq
  40743e:	4301      	orreq	r1, r0
  407440:	2000      	moveq	r0, #0
  407442:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407446:	bf88      	it	hi
  407448:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40744c:	f63f aeaf 	bhi.w	4071ae <__aeabi_dmul+0xde>
  407450:	ebb5 0c03 	subs.w	ip, r5, r3
  407454:	bf04      	itt	eq
  407456:	ebb6 0c02 	subseq.w	ip, r6, r2
  40745a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40745e:	f150 0000 	adcs.w	r0, r0, #0
  407462:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407466:	bd70      	pop	{r4, r5, r6, pc}
  407468:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40746c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407470:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407474:	bfc2      	ittt	gt
  407476:	ebd4 050c 	rsbsgt	r5, r4, ip
  40747a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40747e:	bd70      	popgt	{r4, r5, r6, pc}
  407480:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407484:	f04f 0e00 	mov.w	lr, #0
  407488:	3c01      	subs	r4, #1
  40748a:	e690      	b.n	4071ae <__aeabi_dmul+0xde>
  40748c:	ea45 0e06 	orr.w	lr, r5, r6
  407490:	e68d      	b.n	4071ae <__aeabi_dmul+0xde>
  407492:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407496:	ea94 0f0c 	teq	r4, ip
  40749a:	bf08      	it	eq
  40749c:	ea95 0f0c 	teqeq	r5, ip
  4074a0:	f43f af3b 	beq.w	40731a <__aeabi_dmul+0x24a>
  4074a4:	ea94 0f0c 	teq	r4, ip
  4074a8:	d10a      	bne.n	4074c0 <__aeabi_ddiv+0x19c>
  4074aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4074ae:	f47f af34 	bne.w	40731a <__aeabi_dmul+0x24a>
  4074b2:	ea95 0f0c 	teq	r5, ip
  4074b6:	f47f af25 	bne.w	407304 <__aeabi_dmul+0x234>
  4074ba:	4610      	mov	r0, r2
  4074bc:	4619      	mov	r1, r3
  4074be:	e72c      	b.n	40731a <__aeabi_dmul+0x24a>
  4074c0:	ea95 0f0c 	teq	r5, ip
  4074c4:	d106      	bne.n	4074d4 <__aeabi_ddiv+0x1b0>
  4074c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4074ca:	f43f aefd 	beq.w	4072c8 <__aeabi_dmul+0x1f8>
  4074ce:	4610      	mov	r0, r2
  4074d0:	4619      	mov	r1, r3
  4074d2:	e722      	b.n	40731a <__aeabi_dmul+0x24a>
  4074d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4074d8:	bf18      	it	ne
  4074da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4074de:	f47f aec5 	bne.w	40726c <__aeabi_dmul+0x19c>
  4074e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4074e6:	f47f af0d 	bne.w	407304 <__aeabi_dmul+0x234>
  4074ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4074ee:	f47f aeeb 	bne.w	4072c8 <__aeabi_dmul+0x1f8>
  4074f2:	e712      	b.n	40731a <__aeabi_dmul+0x24a>

004074f4 <__gedf2>:
  4074f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  4074f8:	e006      	b.n	407508 <__cmpdf2+0x4>
  4074fa:	bf00      	nop

004074fc <__ledf2>:
  4074fc:	f04f 0c01 	mov.w	ip, #1
  407500:	e002      	b.n	407508 <__cmpdf2+0x4>
  407502:	bf00      	nop

00407504 <__cmpdf2>:
  407504:	f04f 0c01 	mov.w	ip, #1
  407508:	f84d cd04 	str.w	ip, [sp, #-4]!
  40750c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407510:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407514:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407518:	bf18      	it	ne
  40751a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40751e:	d01b      	beq.n	407558 <__cmpdf2+0x54>
  407520:	b001      	add	sp, #4
  407522:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407526:	bf0c      	ite	eq
  407528:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40752c:	ea91 0f03 	teqne	r1, r3
  407530:	bf02      	ittt	eq
  407532:	ea90 0f02 	teqeq	r0, r2
  407536:	2000      	moveq	r0, #0
  407538:	4770      	bxeq	lr
  40753a:	f110 0f00 	cmn.w	r0, #0
  40753e:	ea91 0f03 	teq	r1, r3
  407542:	bf58      	it	pl
  407544:	4299      	cmppl	r1, r3
  407546:	bf08      	it	eq
  407548:	4290      	cmpeq	r0, r2
  40754a:	bf2c      	ite	cs
  40754c:	17d8      	asrcs	r0, r3, #31
  40754e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407552:	f040 0001 	orr.w	r0, r0, #1
  407556:	4770      	bx	lr
  407558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40755c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407560:	d102      	bne.n	407568 <__cmpdf2+0x64>
  407562:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407566:	d107      	bne.n	407578 <__cmpdf2+0x74>
  407568:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40756c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407570:	d1d6      	bne.n	407520 <__cmpdf2+0x1c>
  407572:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407576:	d0d3      	beq.n	407520 <__cmpdf2+0x1c>
  407578:	f85d 0b04 	ldr.w	r0, [sp], #4
  40757c:	4770      	bx	lr
  40757e:	bf00      	nop

00407580 <__aeabi_cdrcmple>:
  407580:	4684      	mov	ip, r0
  407582:	4610      	mov	r0, r2
  407584:	4662      	mov	r2, ip
  407586:	468c      	mov	ip, r1
  407588:	4619      	mov	r1, r3
  40758a:	4663      	mov	r3, ip
  40758c:	e000      	b.n	407590 <__aeabi_cdcmpeq>
  40758e:	bf00      	nop

00407590 <__aeabi_cdcmpeq>:
  407590:	b501      	push	{r0, lr}
  407592:	f7ff ffb7 	bl	407504 <__cmpdf2>
  407596:	2800      	cmp	r0, #0
  407598:	bf48      	it	mi
  40759a:	f110 0f00 	cmnmi.w	r0, #0
  40759e:	bd01      	pop	{r0, pc}

004075a0 <__aeabi_dcmpeq>:
  4075a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075a4:	f7ff fff4 	bl	407590 <__aeabi_cdcmpeq>
  4075a8:	bf0c      	ite	eq
  4075aa:	2001      	moveq	r0, #1
  4075ac:	2000      	movne	r0, #0
  4075ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4075b2:	bf00      	nop

004075b4 <__aeabi_dcmplt>:
  4075b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075b8:	f7ff ffea 	bl	407590 <__aeabi_cdcmpeq>
  4075bc:	bf34      	ite	cc
  4075be:	2001      	movcc	r0, #1
  4075c0:	2000      	movcs	r0, #0
  4075c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4075c6:	bf00      	nop

004075c8 <__aeabi_dcmple>:
  4075c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075cc:	f7ff ffe0 	bl	407590 <__aeabi_cdcmpeq>
  4075d0:	bf94      	ite	ls
  4075d2:	2001      	movls	r0, #1
  4075d4:	2000      	movhi	r0, #0
  4075d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4075da:	bf00      	nop

004075dc <__aeabi_dcmpge>:
  4075dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075e0:	f7ff ffce 	bl	407580 <__aeabi_cdrcmple>
  4075e4:	bf94      	ite	ls
  4075e6:	2001      	movls	r0, #1
  4075e8:	2000      	movhi	r0, #0
  4075ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4075ee:	bf00      	nop

004075f0 <__aeabi_dcmpgt>:
  4075f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075f4:	f7ff ffc4 	bl	407580 <__aeabi_cdrcmple>
  4075f8:	bf34      	ite	cc
  4075fa:	2001      	movcc	r0, #1
  4075fc:	2000      	movcs	r0, #0
  4075fe:	f85d fb08 	ldr.w	pc, [sp], #8
  407602:	bf00      	nop

00407604 <__aeabi_dcmpun>:
  407604:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40760c:	d102      	bne.n	407614 <__aeabi_dcmpun+0x10>
  40760e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407612:	d10a      	bne.n	40762a <__aeabi_dcmpun+0x26>
  407614:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407618:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40761c:	d102      	bne.n	407624 <__aeabi_dcmpun+0x20>
  40761e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407622:	d102      	bne.n	40762a <__aeabi_dcmpun+0x26>
  407624:	f04f 0000 	mov.w	r0, #0
  407628:	4770      	bx	lr
  40762a:	f04f 0001 	mov.w	r0, #1
  40762e:	4770      	bx	lr

00407630 <__aeabi_d2iz>:
  407630:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407634:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407638:	d215      	bcs.n	407666 <__aeabi_d2iz+0x36>
  40763a:	d511      	bpl.n	407660 <__aeabi_d2iz+0x30>
  40763c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407640:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407644:	d912      	bls.n	40766c <__aeabi_d2iz+0x3c>
  407646:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40764a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40764e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407652:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407656:	fa23 f002 	lsr.w	r0, r3, r2
  40765a:	bf18      	it	ne
  40765c:	4240      	negne	r0, r0
  40765e:	4770      	bx	lr
  407660:	f04f 0000 	mov.w	r0, #0
  407664:	4770      	bx	lr
  407666:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40766a:	d105      	bne.n	407678 <__aeabi_d2iz+0x48>
  40766c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407670:	bf08      	it	eq
  407672:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407676:	4770      	bx	lr
  407678:	f04f 0000 	mov.w	r0, #0
  40767c:	4770      	bx	lr
  40767e:	bf00      	nop

00407680 <__aeabi_d2uiz>:
  407680:	004a      	lsls	r2, r1, #1
  407682:	d211      	bcs.n	4076a8 <__aeabi_d2uiz+0x28>
  407684:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407688:	d211      	bcs.n	4076ae <__aeabi_d2uiz+0x2e>
  40768a:	d50d      	bpl.n	4076a8 <__aeabi_d2uiz+0x28>
  40768c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407690:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407694:	d40e      	bmi.n	4076b4 <__aeabi_d2uiz+0x34>
  407696:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40769a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40769e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4076a2:	fa23 f002 	lsr.w	r0, r3, r2
  4076a6:	4770      	bx	lr
  4076a8:	f04f 0000 	mov.w	r0, #0
  4076ac:	4770      	bx	lr
  4076ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4076b2:	d102      	bne.n	4076ba <__aeabi_d2uiz+0x3a>
  4076b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4076b8:	4770      	bx	lr
  4076ba:	f04f 0000 	mov.w	r0, #0
  4076be:	4770      	bx	lr

004076c0 <__aeabi_d2f>:
  4076c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4076c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4076c8:	bf24      	itt	cs
  4076ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4076ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4076d2:	d90d      	bls.n	4076f0 <__aeabi_d2f+0x30>
  4076d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4076d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4076dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4076e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4076e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4076e8:	bf08      	it	eq
  4076ea:	f020 0001 	biceq.w	r0, r0, #1
  4076ee:	4770      	bx	lr
  4076f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4076f4:	d121      	bne.n	40773a <__aeabi_d2f+0x7a>
  4076f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4076fa:	bfbc      	itt	lt
  4076fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  407700:	4770      	bxlt	lr
  407702:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407706:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40770a:	f1c2 0218 	rsb	r2, r2, #24
  40770e:	f1c2 0c20 	rsb	ip, r2, #32
  407712:	fa10 f30c 	lsls.w	r3, r0, ip
  407716:	fa20 f002 	lsr.w	r0, r0, r2
  40771a:	bf18      	it	ne
  40771c:	f040 0001 	orrne.w	r0, r0, #1
  407720:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407724:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  407728:	fa03 fc0c 	lsl.w	ip, r3, ip
  40772c:	ea40 000c 	orr.w	r0, r0, ip
  407730:	fa23 f302 	lsr.w	r3, r3, r2
  407734:	ea4f 0343 	mov.w	r3, r3, lsl #1
  407738:	e7cc      	b.n	4076d4 <__aeabi_d2f+0x14>
  40773a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40773e:	d107      	bne.n	407750 <__aeabi_d2f+0x90>
  407740:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  407744:	bf1e      	ittt	ne
  407746:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40774a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40774e:	4770      	bxne	lr
  407750:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  407754:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407758:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40775c:	4770      	bx	lr
  40775e:	bf00      	nop

00407760 <__aeabi_frsub>:
  407760:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  407764:	e002      	b.n	40776c <__addsf3>
  407766:	bf00      	nop

00407768 <__aeabi_fsub>:
  407768:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040776c <__addsf3>:
  40776c:	0042      	lsls	r2, r0, #1
  40776e:	bf1f      	itttt	ne
  407770:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  407774:	ea92 0f03 	teqne	r2, r3
  407778:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40777c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407780:	d06a      	beq.n	407858 <__addsf3+0xec>
  407782:	ea4f 6212 	mov.w	r2, r2, lsr #24
  407786:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40778a:	bfc1      	itttt	gt
  40778c:	18d2      	addgt	r2, r2, r3
  40778e:	4041      	eorgt	r1, r0
  407790:	4048      	eorgt	r0, r1
  407792:	4041      	eorgt	r1, r0
  407794:	bfb8      	it	lt
  407796:	425b      	neglt	r3, r3
  407798:	2b19      	cmp	r3, #25
  40779a:	bf88      	it	hi
  40779c:	4770      	bxhi	lr
  40779e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4077a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4077a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  4077aa:	bf18      	it	ne
  4077ac:	4240      	negne	r0, r0
  4077ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4077b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4077b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  4077ba:	bf18      	it	ne
  4077bc:	4249      	negne	r1, r1
  4077be:	ea92 0f03 	teq	r2, r3
  4077c2:	d03f      	beq.n	407844 <__addsf3+0xd8>
  4077c4:	f1a2 0201 	sub.w	r2, r2, #1
  4077c8:	fa41 fc03 	asr.w	ip, r1, r3
  4077cc:	eb10 000c 	adds.w	r0, r0, ip
  4077d0:	f1c3 0320 	rsb	r3, r3, #32
  4077d4:	fa01 f103 	lsl.w	r1, r1, r3
  4077d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4077dc:	d502      	bpl.n	4077e4 <__addsf3+0x78>
  4077de:	4249      	negs	r1, r1
  4077e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  4077e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  4077e8:	d313      	bcc.n	407812 <__addsf3+0xa6>
  4077ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  4077ee:	d306      	bcc.n	4077fe <__addsf3+0x92>
  4077f0:	0840      	lsrs	r0, r0, #1
  4077f2:	ea4f 0131 	mov.w	r1, r1, rrx
  4077f6:	f102 0201 	add.w	r2, r2, #1
  4077fa:	2afe      	cmp	r2, #254	; 0xfe
  4077fc:	d251      	bcs.n	4078a2 <__addsf3+0x136>
  4077fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  407802:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  407806:	bf08      	it	eq
  407808:	f020 0001 	biceq.w	r0, r0, #1
  40780c:	ea40 0003 	orr.w	r0, r0, r3
  407810:	4770      	bx	lr
  407812:	0049      	lsls	r1, r1, #1
  407814:	eb40 0000 	adc.w	r0, r0, r0
  407818:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40781c:	f1a2 0201 	sub.w	r2, r2, #1
  407820:	d1ed      	bne.n	4077fe <__addsf3+0x92>
  407822:	fab0 fc80 	clz	ip, r0
  407826:	f1ac 0c08 	sub.w	ip, ip, #8
  40782a:	ebb2 020c 	subs.w	r2, r2, ip
  40782e:	fa00 f00c 	lsl.w	r0, r0, ip
  407832:	bfaa      	itet	ge
  407834:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  407838:	4252      	neglt	r2, r2
  40783a:	4318      	orrge	r0, r3
  40783c:	bfbc      	itt	lt
  40783e:	40d0      	lsrlt	r0, r2
  407840:	4318      	orrlt	r0, r3
  407842:	4770      	bx	lr
  407844:	f092 0f00 	teq	r2, #0
  407848:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40784c:	bf06      	itte	eq
  40784e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  407852:	3201      	addeq	r2, #1
  407854:	3b01      	subne	r3, #1
  407856:	e7b5      	b.n	4077c4 <__addsf3+0x58>
  407858:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40785c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407860:	bf18      	it	ne
  407862:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407866:	d021      	beq.n	4078ac <__addsf3+0x140>
  407868:	ea92 0f03 	teq	r2, r3
  40786c:	d004      	beq.n	407878 <__addsf3+0x10c>
  40786e:	f092 0f00 	teq	r2, #0
  407872:	bf08      	it	eq
  407874:	4608      	moveq	r0, r1
  407876:	4770      	bx	lr
  407878:	ea90 0f01 	teq	r0, r1
  40787c:	bf1c      	itt	ne
  40787e:	2000      	movne	r0, #0
  407880:	4770      	bxne	lr
  407882:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  407886:	d104      	bne.n	407892 <__addsf3+0x126>
  407888:	0040      	lsls	r0, r0, #1
  40788a:	bf28      	it	cs
  40788c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  407890:	4770      	bx	lr
  407892:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  407896:	bf3c      	itt	cc
  407898:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40789c:	4770      	bxcc	lr
  40789e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4078a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  4078a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4078aa:	4770      	bx	lr
  4078ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
  4078b0:	bf16      	itet	ne
  4078b2:	4608      	movne	r0, r1
  4078b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  4078b8:	4601      	movne	r1, r0
  4078ba:	0242      	lsls	r2, r0, #9
  4078bc:	bf06      	itte	eq
  4078be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  4078c2:	ea90 0f01 	teqeq	r0, r1
  4078c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  4078ca:	4770      	bx	lr

004078cc <__aeabi_ui2f>:
  4078cc:	f04f 0300 	mov.w	r3, #0
  4078d0:	e004      	b.n	4078dc <__aeabi_i2f+0x8>
  4078d2:	bf00      	nop

004078d4 <__aeabi_i2f>:
  4078d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4078d8:	bf48      	it	mi
  4078da:	4240      	negmi	r0, r0
  4078dc:	ea5f 0c00 	movs.w	ip, r0
  4078e0:	bf08      	it	eq
  4078e2:	4770      	bxeq	lr
  4078e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  4078e8:	4601      	mov	r1, r0
  4078ea:	f04f 0000 	mov.w	r0, #0
  4078ee:	e01c      	b.n	40792a <__aeabi_l2f+0x2a>

004078f0 <__aeabi_ul2f>:
  4078f0:	ea50 0201 	orrs.w	r2, r0, r1
  4078f4:	bf08      	it	eq
  4078f6:	4770      	bxeq	lr
  4078f8:	f04f 0300 	mov.w	r3, #0
  4078fc:	e00a      	b.n	407914 <__aeabi_l2f+0x14>
  4078fe:	bf00      	nop

00407900 <__aeabi_l2f>:
  407900:	ea50 0201 	orrs.w	r2, r0, r1
  407904:	bf08      	it	eq
  407906:	4770      	bxeq	lr
  407908:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40790c:	d502      	bpl.n	407914 <__aeabi_l2f+0x14>
  40790e:	4240      	negs	r0, r0
  407910:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407914:	ea5f 0c01 	movs.w	ip, r1
  407918:	bf02      	ittt	eq
  40791a:	4684      	moveq	ip, r0
  40791c:	4601      	moveq	r1, r0
  40791e:	2000      	moveq	r0, #0
  407920:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  407924:	bf08      	it	eq
  407926:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40792a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40792e:	fabc f28c 	clz	r2, ip
  407932:	3a08      	subs	r2, #8
  407934:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  407938:	db10      	blt.n	40795c <__aeabi_l2f+0x5c>
  40793a:	fa01 fc02 	lsl.w	ip, r1, r2
  40793e:	4463      	add	r3, ip
  407940:	fa00 fc02 	lsl.w	ip, r0, r2
  407944:	f1c2 0220 	rsb	r2, r2, #32
  407948:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40794c:	fa20 f202 	lsr.w	r2, r0, r2
  407950:	eb43 0002 	adc.w	r0, r3, r2
  407954:	bf08      	it	eq
  407956:	f020 0001 	biceq.w	r0, r0, #1
  40795a:	4770      	bx	lr
  40795c:	f102 0220 	add.w	r2, r2, #32
  407960:	fa01 fc02 	lsl.w	ip, r1, r2
  407964:	f1c2 0220 	rsb	r2, r2, #32
  407968:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40796c:	fa21 f202 	lsr.w	r2, r1, r2
  407970:	eb43 0002 	adc.w	r0, r3, r2
  407974:	bf08      	it	eq
  407976:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40797a:	4770      	bx	lr

0040797c <__aeabi_fmul>:
  40797c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407980:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407984:	bf1e      	ittt	ne
  407986:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40798a:	ea92 0f0c 	teqne	r2, ip
  40798e:	ea93 0f0c 	teqne	r3, ip
  407992:	d06f      	beq.n	407a74 <__aeabi_fmul+0xf8>
  407994:	441a      	add	r2, r3
  407996:	ea80 0c01 	eor.w	ip, r0, r1
  40799a:	0240      	lsls	r0, r0, #9
  40799c:	bf18      	it	ne
  40799e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  4079a2:	d01e      	beq.n	4079e2 <__aeabi_fmul+0x66>
  4079a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  4079a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  4079ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  4079b0:	fba0 3101 	umull	r3, r1, r0, r1
  4079b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4079b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  4079bc:	bf3e      	ittt	cc
  4079be:	0049      	lslcc	r1, r1, #1
  4079c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  4079c4:	005b      	lslcc	r3, r3, #1
  4079c6:	ea40 0001 	orr.w	r0, r0, r1
  4079ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  4079ce:	2afd      	cmp	r2, #253	; 0xfd
  4079d0:	d81d      	bhi.n	407a0e <__aeabi_fmul+0x92>
  4079d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  4079d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4079da:	bf08      	it	eq
  4079dc:	f020 0001 	biceq.w	r0, r0, #1
  4079e0:	4770      	bx	lr
  4079e2:	f090 0f00 	teq	r0, #0
  4079e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4079ea:	bf08      	it	eq
  4079ec:	0249      	lsleq	r1, r1, #9
  4079ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4079f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4079f6:	3a7f      	subs	r2, #127	; 0x7f
  4079f8:	bfc2      	ittt	gt
  4079fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4079fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  407a02:	4770      	bxgt	lr
  407a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407a08:	f04f 0300 	mov.w	r3, #0
  407a0c:	3a01      	subs	r2, #1
  407a0e:	dc5d      	bgt.n	407acc <__aeabi_fmul+0x150>
  407a10:	f112 0f19 	cmn.w	r2, #25
  407a14:	bfdc      	itt	le
  407a16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  407a1a:	4770      	bxle	lr
  407a1c:	f1c2 0200 	rsb	r2, r2, #0
  407a20:	0041      	lsls	r1, r0, #1
  407a22:	fa21 f102 	lsr.w	r1, r1, r2
  407a26:	f1c2 0220 	rsb	r2, r2, #32
  407a2a:	fa00 fc02 	lsl.w	ip, r0, r2
  407a2e:	ea5f 0031 	movs.w	r0, r1, rrx
  407a32:	f140 0000 	adc.w	r0, r0, #0
  407a36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  407a3a:	bf08      	it	eq
  407a3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  407a40:	4770      	bx	lr
  407a42:	f092 0f00 	teq	r2, #0
  407a46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  407a4a:	bf02      	ittt	eq
  407a4c:	0040      	lsleq	r0, r0, #1
  407a4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  407a52:	3a01      	subeq	r2, #1
  407a54:	d0f9      	beq.n	407a4a <__aeabi_fmul+0xce>
  407a56:	ea40 000c 	orr.w	r0, r0, ip
  407a5a:	f093 0f00 	teq	r3, #0
  407a5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407a62:	bf02      	ittt	eq
  407a64:	0049      	lsleq	r1, r1, #1
  407a66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407a6a:	3b01      	subeq	r3, #1
  407a6c:	d0f9      	beq.n	407a62 <__aeabi_fmul+0xe6>
  407a6e:	ea41 010c 	orr.w	r1, r1, ip
  407a72:	e78f      	b.n	407994 <__aeabi_fmul+0x18>
  407a74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407a78:	ea92 0f0c 	teq	r2, ip
  407a7c:	bf18      	it	ne
  407a7e:	ea93 0f0c 	teqne	r3, ip
  407a82:	d00a      	beq.n	407a9a <__aeabi_fmul+0x11e>
  407a84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  407a88:	bf18      	it	ne
  407a8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  407a8e:	d1d8      	bne.n	407a42 <__aeabi_fmul+0xc6>
  407a90:	ea80 0001 	eor.w	r0, r0, r1
  407a94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  407a98:	4770      	bx	lr
  407a9a:	f090 0f00 	teq	r0, #0
  407a9e:	bf17      	itett	ne
  407aa0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  407aa4:	4608      	moveq	r0, r1
  407aa6:	f091 0f00 	teqne	r1, #0
  407aaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  407aae:	d014      	beq.n	407ada <__aeabi_fmul+0x15e>
  407ab0:	ea92 0f0c 	teq	r2, ip
  407ab4:	d101      	bne.n	407aba <__aeabi_fmul+0x13e>
  407ab6:	0242      	lsls	r2, r0, #9
  407ab8:	d10f      	bne.n	407ada <__aeabi_fmul+0x15e>
  407aba:	ea93 0f0c 	teq	r3, ip
  407abe:	d103      	bne.n	407ac8 <__aeabi_fmul+0x14c>
  407ac0:	024b      	lsls	r3, r1, #9
  407ac2:	bf18      	it	ne
  407ac4:	4608      	movne	r0, r1
  407ac6:	d108      	bne.n	407ada <__aeabi_fmul+0x15e>
  407ac8:	ea80 0001 	eor.w	r0, r0, r1
  407acc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  407ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407ad8:	4770      	bx	lr
  407ada:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407ade:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  407ae2:	4770      	bx	lr

00407ae4 <__aeabi_fdiv>:
  407ae4:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407ae8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407aec:	bf1e      	ittt	ne
  407aee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  407af2:	ea92 0f0c 	teqne	r2, ip
  407af6:	ea93 0f0c 	teqne	r3, ip
  407afa:	d069      	beq.n	407bd0 <__aeabi_fdiv+0xec>
  407afc:	eba2 0203 	sub.w	r2, r2, r3
  407b00:	ea80 0c01 	eor.w	ip, r0, r1
  407b04:	0249      	lsls	r1, r1, #9
  407b06:	ea4f 2040 	mov.w	r0, r0, lsl #9
  407b0a:	d037      	beq.n	407b7c <__aeabi_fdiv+0x98>
  407b0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  407b10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  407b14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  407b18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  407b1c:	428b      	cmp	r3, r1
  407b1e:	bf38      	it	cc
  407b20:	005b      	lslcc	r3, r3, #1
  407b22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  407b26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  407b2a:	428b      	cmp	r3, r1
  407b2c:	bf24      	itt	cs
  407b2e:	1a5b      	subcs	r3, r3, r1
  407b30:	ea40 000c 	orrcs.w	r0, r0, ip
  407b34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  407b38:	bf24      	itt	cs
  407b3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  407b3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407b42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  407b46:	bf24      	itt	cs
  407b48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  407b4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407b50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  407b54:	bf24      	itt	cs
  407b56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  407b5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407b5e:	011b      	lsls	r3, r3, #4
  407b60:	bf18      	it	ne
  407b62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  407b66:	d1e0      	bne.n	407b2a <__aeabi_fdiv+0x46>
  407b68:	2afd      	cmp	r2, #253	; 0xfd
  407b6a:	f63f af50 	bhi.w	407a0e <__aeabi_fmul+0x92>
  407b6e:	428b      	cmp	r3, r1
  407b70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  407b74:	bf08      	it	eq
  407b76:	f020 0001 	biceq.w	r0, r0, #1
  407b7a:	4770      	bx	lr
  407b7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  407b80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  407b84:	327f      	adds	r2, #127	; 0x7f
  407b86:	bfc2      	ittt	gt
  407b88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  407b8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  407b90:	4770      	bxgt	lr
  407b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407b96:	f04f 0300 	mov.w	r3, #0
  407b9a:	3a01      	subs	r2, #1
  407b9c:	e737      	b.n	407a0e <__aeabi_fmul+0x92>
  407b9e:	f092 0f00 	teq	r2, #0
  407ba2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  407ba6:	bf02      	ittt	eq
  407ba8:	0040      	lsleq	r0, r0, #1
  407baa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  407bae:	3a01      	subeq	r2, #1
  407bb0:	d0f9      	beq.n	407ba6 <__aeabi_fdiv+0xc2>
  407bb2:	ea40 000c 	orr.w	r0, r0, ip
  407bb6:	f093 0f00 	teq	r3, #0
  407bba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407bbe:	bf02      	ittt	eq
  407bc0:	0049      	lsleq	r1, r1, #1
  407bc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407bc6:	3b01      	subeq	r3, #1
  407bc8:	d0f9      	beq.n	407bbe <__aeabi_fdiv+0xda>
  407bca:	ea41 010c 	orr.w	r1, r1, ip
  407bce:	e795      	b.n	407afc <__aeabi_fdiv+0x18>
  407bd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407bd4:	ea92 0f0c 	teq	r2, ip
  407bd8:	d108      	bne.n	407bec <__aeabi_fdiv+0x108>
  407bda:	0242      	lsls	r2, r0, #9
  407bdc:	f47f af7d 	bne.w	407ada <__aeabi_fmul+0x15e>
  407be0:	ea93 0f0c 	teq	r3, ip
  407be4:	f47f af70 	bne.w	407ac8 <__aeabi_fmul+0x14c>
  407be8:	4608      	mov	r0, r1
  407bea:	e776      	b.n	407ada <__aeabi_fmul+0x15e>
  407bec:	ea93 0f0c 	teq	r3, ip
  407bf0:	d104      	bne.n	407bfc <__aeabi_fdiv+0x118>
  407bf2:	024b      	lsls	r3, r1, #9
  407bf4:	f43f af4c 	beq.w	407a90 <__aeabi_fmul+0x114>
  407bf8:	4608      	mov	r0, r1
  407bfa:	e76e      	b.n	407ada <__aeabi_fmul+0x15e>
  407bfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  407c00:	bf18      	it	ne
  407c02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  407c06:	d1ca      	bne.n	407b9e <__aeabi_fdiv+0xba>
  407c08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  407c0c:	f47f af5c 	bne.w	407ac8 <__aeabi_fmul+0x14c>
  407c10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  407c14:	f47f af3c 	bne.w	407a90 <__aeabi_fmul+0x114>
  407c18:	e75f      	b.n	407ada <__aeabi_fmul+0x15e>
  407c1a:	bf00      	nop

00407c1c <__gesf2>:
  407c1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  407c20:	e006      	b.n	407c30 <__cmpsf2+0x4>
  407c22:	bf00      	nop

00407c24 <__lesf2>:
  407c24:	f04f 0c01 	mov.w	ip, #1
  407c28:	e002      	b.n	407c30 <__cmpsf2+0x4>
  407c2a:	bf00      	nop

00407c2c <__cmpsf2>:
  407c2c:	f04f 0c01 	mov.w	ip, #1
  407c30:	f84d cd04 	str.w	ip, [sp, #-4]!
  407c34:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407c38:	ea4f 0341 	mov.w	r3, r1, lsl #1
  407c3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407c40:	bf18      	it	ne
  407c42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407c46:	d011      	beq.n	407c6c <__cmpsf2+0x40>
  407c48:	b001      	add	sp, #4
  407c4a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  407c4e:	bf18      	it	ne
  407c50:	ea90 0f01 	teqne	r0, r1
  407c54:	bf58      	it	pl
  407c56:	ebb2 0003 	subspl.w	r0, r2, r3
  407c5a:	bf88      	it	hi
  407c5c:	17c8      	asrhi	r0, r1, #31
  407c5e:	bf38      	it	cc
  407c60:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  407c64:	bf18      	it	ne
  407c66:	f040 0001 	orrne.w	r0, r0, #1
  407c6a:	4770      	bx	lr
  407c6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407c70:	d102      	bne.n	407c78 <__cmpsf2+0x4c>
  407c72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  407c76:	d105      	bne.n	407c84 <__cmpsf2+0x58>
  407c78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  407c7c:	d1e4      	bne.n	407c48 <__cmpsf2+0x1c>
  407c7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  407c82:	d0e1      	beq.n	407c48 <__cmpsf2+0x1c>
  407c84:	f85d 0b04 	ldr.w	r0, [sp], #4
  407c88:	4770      	bx	lr
  407c8a:	bf00      	nop

00407c8c <__aeabi_cfrcmple>:
  407c8c:	4684      	mov	ip, r0
  407c8e:	4608      	mov	r0, r1
  407c90:	4661      	mov	r1, ip
  407c92:	e7ff      	b.n	407c94 <__aeabi_cfcmpeq>

00407c94 <__aeabi_cfcmpeq>:
  407c94:	b50f      	push	{r0, r1, r2, r3, lr}
  407c96:	f7ff ffc9 	bl	407c2c <__cmpsf2>
  407c9a:	2800      	cmp	r0, #0
  407c9c:	bf48      	it	mi
  407c9e:	f110 0f00 	cmnmi.w	r0, #0
  407ca2:	bd0f      	pop	{r0, r1, r2, r3, pc}

00407ca4 <__aeabi_fcmpeq>:
  407ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
  407ca8:	f7ff fff4 	bl	407c94 <__aeabi_cfcmpeq>
  407cac:	bf0c      	ite	eq
  407cae:	2001      	moveq	r0, #1
  407cb0:	2000      	movne	r0, #0
  407cb2:	f85d fb08 	ldr.w	pc, [sp], #8
  407cb6:	bf00      	nop

00407cb8 <__aeabi_fcmplt>:
  407cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cbc:	f7ff ffea 	bl	407c94 <__aeabi_cfcmpeq>
  407cc0:	bf34      	ite	cc
  407cc2:	2001      	movcc	r0, #1
  407cc4:	2000      	movcs	r0, #0
  407cc6:	f85d fb08 	ldr.w	pc, [sp], #8
  407cca:	bf00      	nop

00407ccc <__aeabi_fcmple>:
  407ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cd0:	f7ff ffe0 	bl	407c94 <__aeabi_cfcmpeq>
  407cd4:	bf94      	ite	ls
  407cd6:	2001      	movls	r0, #1
  407cd8:	2000      	movhi	r0, #0
  407cda:	f85d fb08 	ldr.w	pc, [sp], #8
  407cde:	bf00      	nop

00407ce0 <__aeabi_fcmpge>:
  407ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
  407ce4:	f7ff ffd2 	bl	407c8c <__aeabi_cfrcmple>
  407ce8:	bf94      	ite	ls
  407cea:	2001      	movls	r0, #1
  407cec:	2000      	movhi	r0, #0
  407cee:	f85d fb08 	ldr.w	pc, [sp], #8
  407cf2:	bf00      	nop

00407cf4 <__aeabi_fcmpgt>:
  407cf4:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cf8:	f7ff ffc8 	bl	407c8c <__aeabi_cfrcmple>
  407cfc:	bf34      	ite	cc
  407cfe:	2001      	movcc	r0, #1
  407d00:	2000      	movcs	r0, #0
  407d02:	f85d fb08 	ldr.w	pc, [sp], #8
  407d06:	bf00      	nop

00407d08 <__aeabi_f2iz>:
  407d08:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407d0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  407d10:	d30f      	bcc.n	407d32 <__aeabi_f2iz+0x2a>
  407d12:	f04f 039e 	mov.w	r3, #158	; 0x9e
  407d16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  407d1a:	d90d      	bls.n	407d38 <__aeabi_f2iz+0x30>
  407d1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
  407d20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407d24:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  407d28:	fa23 f002 	lsr.w	r0, r3, r2
  407d2c:	bf18      	it	ne
  407d2e:	4240      	negne	r0, r0
  407d30:	4770      	bx	lr
  407d32:	f04f 0000 	mov.w	r0, #0
  407d36:	4770      	bx	lr
  407d38:	f112 0f61 	cmn.w	r2, #97	; 0x61
  407d3c:	d101      	bne.n	407d42 <__aeabi_f2iz+0x3a>
  407d3e:	0242      	lsls	r2, r0, #9
  407d40:	d105      	bne.n	407d4e <__aeabi_f2iz+0x46>
  407d42:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  407d46:	bf08      	it	eq
  407d48:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407d4c:	4770      	bx	lr
  407d4e:	f04f 0000 	mov.w	r0, #0
  407d52:	4770      	bx	lr

00407d54 <__aeabi_f2uiz>:
  407d54:	0042      	lsls	r2, r0, #1
  407d56:	d20e      	bcs.n	407d76 <__aeabi_f2uiz+0x22>
  407d58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  407d5c:	d30b      	bcc.n	407d76 <__aeabi_f2uiz+0x22>
  407d5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  407d62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  407d66:	d409      	bmi.n	407d7c <__aeabi_f2uiz+0x28>
  407d68:	ea4f 2300 	mov.w	r3, r0, lsl #8
  407d6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407d70:	fa23 f002 	lsr.w	r0, r3, r2
  407d74:	4770      	bx	lr
  407d76:	f04f 0000 	mov.w	r0, #0
  407d7a:	4770      	bx	lr
  407d7c:	f112 0f61 	cmn.w	r2, #97	; 0x61
  407d80:	d101      	bne.n	407d86 <__aeabi_f2uiz+0x32>
  407d82:	0242      	lsls	r2, r0, #9
  407d84:	d102      	bne.n	407d8c <__aeabi_f2uiz+0x38>
  407d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  407d8a:	4770      	bx	lr
  407d8c:	f04f 0000 	mov.w	r0, #0
  407d90:	4770      	bx	lr
  407d92:	bf00      	nop
  407d94:	0a0d0a0d 	.word	0x0a0d0a0d
  407d98:	346d6173 	.word	0x346d6173
  407d9c:	63323364 	.word	0x63323364
  407da0:	756d6920 	.word	0x756d6920
  407da4:	6d656420 	.word	0x6d656420
  407da8:	2e2e2e6f 	.word	0x2e2e2e6f
  407dac:	00000a0d 	.word	0x00000a0d
  407db0:	0000002e 	.word	0x0000002e
  407db4:	61656c70 	.word	0x61656c70
  407db8:	70206573 	.word	0x70206573
  407dbc:	73736572 	.word	0x73736572
  407dc0:	74756220 	.word	0x74756220
  407dc4:	206e6f74 	.word	0x206e6f74
  407dc8:	61206f74 	.word	0x61206f74
  407dcc:	6d206d72 	.word	0x6d206d72
  407dd0:	726f746f 	.word	0x726f746f
  407dd4:	000a0d73 	.word	0x000a0d73
  407dd8:	6f746f6d 	.word	0x6f746f6d
  407ddc:	72615f72 	.word	0x72615f72
  407de0:	3a64656d 	.word	0x3a64656d
  407de4:	0d642520 	.word	0x0d642520
  407de8:	0000000a 	.word	0x0000000a
  407dec:	6c6c6f72 	.word	0x6c6c6f72
  407df0:	7469702f 	.word	0x7469702f
  407df4:	792f6863 	.word	0x792f6863
  407df8:	6d2f7761 	.word	0x6d2f7761
  407dfc:	65206761 	.word	0x65206761
  407e00:	726f7272 	.word	0x726f7272
  407e04:	6469702f 	.word	0x6469702f
  407e08:	6625203a 	.word	0x6625203a
  407e0c:	20662520 	.word	0x20662520
  407e10:	25206625 	.word	0x25206625
  407e14:	66252066 	.word	0x66252066
  407e18:	0d662520 	.word	0x0d662520
  407e1c:	0000000a 	.word	0x0000000a
  407e20:	00787061 	.word	0x00787061
  407e24:	642e5041 	.word	0x642e5041
  407e28:	72697365 	.word	0x72697365
  407e2c:	615f6465 	.word	0x615f6465
  407e30:	656c676e 	.word	0x656c676e
  407e34:	203a785f 	.word	0x203a785f
  407e38:	0a0d6625 	.word	0x0a0d6625
  407e3c:	00000000 	.word	0x00000000
  407e40:	00797061 	.word	0x00797061
  407e44:	642e5041 	.word	0x642e5041
  407e48:	72697365 	.word	0x72697365
  407e4c:	615f6465 	.word	0x615f6465
  407e50:	656c676e 	.word	0x656c676e
  407e54:	203a795f 	.word	0x203a795f
  407e58:	0a0d6625 	.word	0x0a0d6625
  407e5c:	00000000 	.word	0x00000000
  407e60:	0000706b 	.word	0x0000706b
  407e64:	666e6f63 	.word	0x666e6f63
  407e68:	702e6769 	.word	0x702e6769
  407e6c:	6b5f6469 	.word	0x6b5f6469
  407e70:	25203a70 	.word	0x25203a70
  407e74:	000a0d66 	.word	0x000a0d66
  407e78:	0000696b 	.word	0x0000696b
  407e7c:	666e6f63 	.word	0x666e6f63
  407e80:	702e6769 	.word	0x702e6769
  407e84:	6b5f6469 	.word	0x6b5f6469
  407e88:	25203a69 	.word	0x25203a69
  407e8c:	000a0d66 	.word	0x000a0d66
  407e90:	0000646b 	.word	0x0000646b
  407e94:	666e6f63 	.word	0x666e6f63
  407e98:	702e6769 	.word	0x702e6769
  407e9c:	6b5f6469 	.word	0x6b5f6469
  407ea0:	25203a64 	.word	0x25203a64
  407ea4:	000a0d66 	.word	0x000a0d66
  407ea8:	5f756d69 	.word	0x5f756d69
  407eac:	696c6163 	.word	0x696c6163
  407eb0:	74617262 	.word	0x74617262
  407eb4:	00000065 	.word	0x00000065
  407eb8:	5f756d69 	.word	0x5f756d69
  407ebc:	696c6163 	.word	0x696c6163
  407ec0:	74617262 	.word	0x74617262
  407ec4:	25203a65 	.word	0x25203a65
  407ec8:	000a0d64 	.word	0x000a0d64
  407ecc:	6f746f6d 	.word	0x6f746f6d
  407ed0:	72615f72 	.word	0x72615f72
  407ed4:	0064656d 	.word	0x0064656d
  407ed8:	6f746f6d 	.word	0x6f746f6d
  407edc:	666f5f72 	.word	0x666f5f72
  407ee0:	74657366 	.word	0x74657366
  407ee4:	00000000 	.word	0x00000000
  407ee8:	6f746f6d 	.word	0x6f746f6d
  407eec:	666f5f72 	.word	0x666f5f72
  407ef0:	74657366 	.word	0x74657366
  407ef4:	6425203a 	.word	0x6425203a
  407ef8:	00000a0d 	.word	0x00000a0d
  407efc:	6f746f6d 	.word	0x6f746f6d
  407f00:	696d5f72 	.word	0x696d5f72
  407f04:	0000006e 	.word	0x0000006e
  407f08:	6f746f6d 	.word	0x6f746f6d
  407f0c:	696d2072 	.word	0x696d2072
  407f10:	6f63206e 	.word	0x6f63206e
  407f14:	6e616d6d 	.word	0x6e616d6d
  407f18:	73692064 	.word	0x73692064
  407f1c:	64657573 	.word	0x64657573
  407f20:	00000a0d 	.word	0x00000a0d
  407f24:	6f746f6d 	.word	0x6f746f6d
  407f28:	696d5f72 	.word	0x696d5f72
  407f2c:	00000064 	.word	0x00000064
  407f30:	6f746f6d 	.word	0x6f746f6d
  407f34:	696d2072 	.word	0x696d2072
  407f38:	6f632064 	.word	0x6f632064
  407f3c:	6e616d6d 	.word	0x6e616d6d
  407f40:	73692064 	.word	0x73692064
  407f44:	64657573 	.word	0x64657573
  407f48:	00000a0d 	.word	0x00000a0d
  407f4c:	6f746f6d 	.word	0x6f746f6d
  407f50:	616d5f72 	.word	0x616d5f72
  407f54:	00000078 	.word	0x00000078
  407f58:	6f746f6d 	.word	0x6f746f6d
  407f5c:	616d2072 	.word	0x616d2072
  407f60:	6f632078 	.word	0x6f632078
  407f64:	6e616d6d 	.word	0x6e616d6d
  407f68:	73692064 	.word	0x73692064
  407f6c:	64657573 	.word	0x64657573
  407f70:	00000a0d 	.word	0x00000a0d
  407f74:	5f676f6c 	.word	0x5f676f6c
  407f78:	00756d69 	.word	0x00756d69
  407f7c:	5f676f6c 	.word	0x5f676f6c
  407f80:	3a756d69 	.word	0x3a756d69
  407f84:	0d642520 	.word	0x0d642520
  407f88:	0000000a 	.word	0x0000000a
  407f8c:	5f676f6c 	.word	0x5f676f6c
  407f90:	6f746f6d 	.word	0x6f746f6d
  407f94:	00000072 	.word	0x00000072
  407f98:	5f676f6c 	.word	0x5f676f6c
  407f9c:	6f746f6d 	.word	0x6f746f6d
  407fa0:	25203a72 	.word	0x25203a72
  407fa4:	000a0d64 	.word	0x000a0d64
  407fa8:	00000020 	.word	0x00000020
  407fac:	5f697774 	.word	0x5f697774
  407fb0:	7473616d 	.word	0x7473616d
  407fb4:	695f7265 	.word	0x695f7265
  407fb8:	3a74696e 	.word	0x3a74696e
  407fbc:	69616620 	.word	0x69616620
  407fc0:	0d64656c 	.word	0x0d64656c
  407fc4:	0000000a 	.word	0x0000000a
  407fc8:	5f697774 	.word	0x5f697774
  407fcc:	7473616d 	.word	0x7473616d
  407fd0:	695f7265 	.word	0x695f7265
  407fd4:	3a74696e 	.word	0x3a74696e
  407fd8:	63757320 	.word	0x63757320
  407fdc:	73736563 	.word	0x73736563
  407fe0:	00000a0d 	.word	0x00000a0d
  407fe4:	5f697774 	.word	0x5f697774
  407fe8:	626f7270 	.word	0x626f7270
  407fec:	66203a65 	.word	0x66203a65
  407ff0:	656c6961 	.word	0x656c6961
  407ff4:	000a0d64 	.word	0x000a0d64
  407ff8:	5f697774 	.word	0x5f697774
  407ffc:	626f7270 	.word	0x626f7270
  408000:	73203a65 	.word	0x73203a65
  408004:	65636375 	.word	0x65636375
  408008:	0a0d7373 	.word	0x0a0d7373
  40800c:	00000000 	.word	0x00000000
  408010:	62616e45 	.word	0x62616e45
  408014:	0064656c 	.word	0x0064656c
  408018:	61736944 	.word	0x61736944
  40801c:	64656c62 	.word	0x64656c62
  408020:	00000000 	.word	0x00000000
  408024:	69766544 	.word	0x69766544
  408028:	203a6563 	.word	0x203a6563
  40802c:	31257830 	.word	0x31257830
  408030:	000a0d78 	.word	0x000a0d78
  408034:	65656c53 	.word	0x65656c53
  408038:	6f4d2070 	.word	0x6f4d2070
  40803c:	203a6564 	.word	0x203a6564
  408040:	0a0d7325 	.word	0x0a0d7325
  408044:	00000000 	.word	0x00000000
  408048:	636f6c43 	.word	0x636f6c43
  40804c:	6f53206b 	.word	0x6f53206b
  408050:	65637275 	.word	0x65637275
  408054:	0000203a 	.word	0x0000203a
  408058:	65746e49 	.word	0x65746e49
  40805c:	6c616e72 	.word	0x6c616e72
  408060:	484d3820 	.word	0x484d3820
  408064:	736f207a 	.word	0x736f207a
  408068:	6c6c6963 	.word	0x6c6c6963
  40806c:	726f7461 	.word	0x726f7461
  408070:	00000a0d 	.word	0x00000a0d
  408074:	204c4c50 	.word	0x204c4c50
  408078:	68746977 	.word	0x68746977
  40807c:	61205820 	.word	0x61205820
  408080:	20736978 	.word	0x20736978
  408084:	6f727967 	.word	0x6f727967
  408088:	706f6373 	.word	0x706f6373
  40808c:	65722065 	.word	0x65722065
  408090:	65726566 	.word	0x65726566
  408094:	0d65636e 	.word	0x0d65636e
  408098:	0000000a 	.word	0x0000000a
  40809c:	6f727947 	.word	0x6f727947
  4080a0:	706f6373 	.word	0x706f6373
  4080a4:	00203a65 	.word	0x00203a65
  4080a8:	20303532 	.word	0x20303532
  4080ac:	0d737064 	.word	0x0d737064
  4080b0:	0000000a 	.word	0x0000000a
  4080b4:	20303035 	.word	0x20303035
  4080b8:	0d737064 	.word	0x0d737064
  4080bc:	0000000a 	.word	0x0000000a
  4080c0:	30303031 	.word	0x30303031
  4080c4:	73706420 	.word	0x73706420
  4080c8:	00000a0d 	.word	0x00000a0d
  4080cc:	30303032 	.word	0x30303032
  4080d0:	73706420 	.word	0x73706420
  4080d4:	00000a0d 	.word	0x00000a0d
  4080d8:	5f657375 	.word	0x5f657375
  4080dc:	696c6163 	.word	0x696c6163
  4080e0:	74617262 	.word	0x74617262
  4080e4:	25203a65 	.word	0x25203a65
  4080e8:	000a0d64 	.word	0x000a0d64
  4080ec:	75746361 	.word	0x75746361
  4080f0:	745f6c61 	.word	0x745f6c61
  4080f4:	73657268 	.word	0x73657268
  4080f8:	646c6f68 	.word	0x646c6f68
  4080fc:	6625203a 	.word	0x6625203a
  408100:	00000a0d 	.word	0x00000a0d
  408104:	5f737064 	.word	0x5f737064
  408108:	5f726570 	.word	0x5f726570
  40810c:	69676964 	.word	0x69676964
  408110:	25203a74 	.word	0x25203a74
  408114:	000a0d66 	.word	0x000a0d66
  408118:	676e6172 	.word	0x676e6172
  40811c:	65705f65 	.word	0x65705f65
  408120:	69645f72 	.word	0x69645f72
  408124:	3a746967 	.word	0x3a746967
  408128:	0d662520 	.word	0x0d662520
  40812c:	0000000a 	.word	0x0000000a
  408130:	696c6163 	.word	0x696c6163
  408134:	74617262 	.word	0x74617262
  408138:	20676e69 	.word	0x20676e69
  40813c:	2e756d69 	.word	0x2e756d69
  408140:	0a0d2e2e 	.word	0x0a0d2e2e
  408144:	00000000 	.word	0x00000000
  408148:	696c6163 	.word	0x696c6163
  40814c:	74617262 	.word	0x74617262
  408150:	206e6f69 	.word	0x206e6f69
  408154:	706d6f63 	.word	0x706d6f63
  408158:	6574656c 	.word	0x6574656c
  40815c:	000a0d2e 	.word	0x000a0d2e
  408160:	6f746f6d 	.word	0x6f746f6d
  408164:	6e695f72 	.word	0x6e695f72
  408168:	0a0d7469 	.word	0x0a0d7469
  40816c:	00000000 	.word	0x00000000
  408170:	6f746f6d 	.word	0x6f746f6d
  408174:	756f5f72 	.word	0x756f5f72
  408178:	74757074 	.word	0x74757074
  40817c:	6425203a 	.word	0x6425203a
  408180:	00000a0d 	.word	0x00000a0d
  408184:	00000001 	.word	0x00000001
  408188:	00000002 	.word	0x00000002
  40818c:	00000004 	.word	0x00000004
  408190:	00000008 	.word	0x00000008
  408194:	00000010 	.word	0x00000010
  408198:	00000020 	.word	0x00000020
  40819c:	00000040 	.word	0x00000040
  4081a0:	00000080 	.word	0x00000080
  4081a4:	00000100 	.word	0x00000100
  4081a8:	00000200 	.word	0x00000200
  4081ac:	00000400 	.word	0x00000400
  4081b0:	74727173 	.word	0x74727173
  4081b4:	00000000 	.word	0x00000000

004081b8 <atanlo>:
  4081b8:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  4081c8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

004081d8 <atanhi>:
  4081d8:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  4081e8:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

004081f8 <_global_impure_ptr>:
  4081f8:	20000014 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  408208:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  408218:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  408228:	63626139 00666564                       9abcdef.

00408230 <tinytens>:
  408230:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  408240:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  408250:	64ac6f43 11680628                       Co.d(.h.

00408258 <fpi.6179>:
  408258:	00000035 fffffbce 000003cb 00000001     5...............
  408268:	00000000                                ....

0040826c <fpinan.6215>:
  40826c:	00000034 fffffbce 000003cb 00000001     4...............
  40827c:	00000000 69666e49 7974696e 4e614e00     ....Infinity.NaN
  40828c:	00000000                                ....

00408290 <__sf_fake_stdin>:
	...

004082b0 <__sf_fake_stdout>:
	...

004082d0 <__sf_fake_stderr>:
	...
  4082f0:	4f500043 00584953 0000002e 00000000     C.POSIX.........

00408300 <__mprec_tens>:
  408300:	00000000 3ff00000 00000000 40240000     .......?......$@
  408310:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408320:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408330:	00000000 412e8480 00000000 416312d0     .......A......cA
  408340:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408350:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408360:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408370:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408380:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408390:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4083a0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4083b0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4083c0:	79d99db4 44ea7843                       ...yCx.D

004083c8 <__mprec_bigtens>:
  4083c8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4083d8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4083e8:	7f73bf3c 75154fdd                       <.s..O.u

004083f0 <p05.6097>:
  4083f0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  408400:	6c680020 6665004c 47464567 20200000               .hlL.efgEFG.

0040840d <_ctype_>:
  40840d:	20202000 20202020 28282020 20282828     .         ((((( 
  40841d:	20202020 20202020 20202020 20202020                     
  40842d:	10108820 10101010 10101010 10101010      ...............
  40843d:	04040410 04040404 10040404 10101010     ................
  40844d:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40845d:	01010101 01010101 01010101 10101010     ................
  40846d:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40847d:	02020202 02020202 02020202 10101010     ................
  40848d:	00000020 00000000 00000000 00000000      ...............
	...

00408510 <_init>:
  408510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408512:	bf00      	nop
  408514:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408516:	bc08      	pop	{r3}
  408518:	469e      	mov	lr, r3
  40851a:	4770      	bx	lr

0040851c <__init_array_start>:
  40851c:	004000f1 	.word	0x004000f1

00408520 <_fini>:
  408520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408522:	bf00      	nop
  408524:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408526:	bc08      	pop	{r3}
  408528:	469e      	mov	lr, r3
  40852a:	4770      	bx	lr
  40852c:	0000      	movs	r0, r0
	...

00408530 <__portable_delay_cycles_veneer>:
  408530:	f85f f000 	ldr.w	pc, [pc]	; 408534 <__portable_delay_cycles_veneer+0x4>
  408534:	20000001 	.word	0x20000001

00408538 <__fini_array_start>:
  408538:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <__fdlib_version>:
20000010:	0001 0000                                   ....

20000014 <impure_data>:
20000014:	0000 0000 8290 0040 82b0 0040 82d0 0040     ......@...@...@.
	...

20000074 <_impure_ptr>:
20000074:	0014 2000                                   ... 

20000078 <__global_locale>:
20000078:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000098:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000118:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000138:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000158:	6c71 0040 5f0d 0040 0000 0000 840d 0040     ql@.._@.......@.
20000168:	82f8 0040 8401 0040 8401 0040 8401 0040     ..@...@...@...@.
20000178:	8401 0040 8401 0040 8401 0040 8401 0040     ..@...@...@...@.
20000188:	8401 0040 8401 0040 ffff ffff ffff ffff     ..@...@.........
20000198:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001c0:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
